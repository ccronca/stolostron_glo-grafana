{"version":3,"file":"AlertingAdmin.e8f0decb07159225cba2.js","mappings":"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","sources":["webpack://grafana/./public/app/features/alerting/unified/components/admin/ConfigEditor.tsx","webpack://grafana/./public/app/features/alerting/unified/components/admin/AlertmanagerConfigSelector.tsx","webpack://grafana/./public/app/features/alerting/unified/components/admin/AlertmanagerConfig.tsx","webpack://grafana/./public/app/features/alerting/unified/hooks/useExternalAmSelector.ts","webpack://grafana/./public/app/features/alerting/unified/components/admin/ExternalAlertmanagerDataSources.tsx","webpack://grafana/./public/app/features/alerting/unified/components/admin/ExternalAlertmanagers.tsx","webpack://grafana/./public/app/features/alerting/unified/Admin.tsx","webpack://grafana/./public/app/features/alerting/components/CollapsibleAlert.tsx","webpack://grafana/./public/app/features/alerting/components/UAPreviewNotice.tsx","webpack://grafana/./public/app/features/alerting/unified/components/AlertManagerPicker.tsx","webpack://grafana/./public/app/features/alerting/unified/components/NoAlertManagerWarning.tsx","webpack://grafana/./public/app/features/alerting/unified/components/AlertingPageWrapper.tsx","webpack://grafana/./public/app/features/alerting/unified/hooks/useAlertmanagerConfig.ts"],"sourcesContent":["import React from 'react';\n\nimport { Button, CodeEditor, ConfirmModal, Field, Form, HorizontalGroup } from '@grafana/ui';\n\nimport { GRAFANA_RULES_SOURCE_NAME } from '../../utils/datasource';\n\nimport { FormValues } from './AlertmanagerConfig';\n\ninterface ConfigEditorProps {\n  defaultValues: { configJSON: string };\n  readOnly: boolean;\n  loading: boolean;\n  alertManagerSourceName?: string;\n  onSubmit: (values: FormValues) => void;\n  showConfirmDeleteAMConfig?: boolean;\n  onReset?: () => void;\n  onConfirmReset?: () => void;\n  onDismiss?: () => void;\n}\n\nexport const ConfigEditor = ({\n  defaultValues,\n  readOnly,\n  loading,\n  alertManagerSourceName,\n  showConfirmDeleteAMConfig,\n  onSubmit,\n  onReset,\n  onConfirmReset,\n  onDismiss,\n}: ConfigEditorProps) => {\n  return (\n    <Form defaultValues={defaultValues} onSubmit={onSubmit} key={defaultValues.configJSON}>\n      {({ errors, setValue, register }) => {\n        register('configJSON', {\n          required: { value: true, message: 'Required' },\n          validate: (value: string) => {\n            try {\n              JSON.parse(value);\n              return true;\n            } catch (e) {\n              return e instanceof Error ? e.message : 'JSON is invalid';\n            }\n          },\n        });\n\n        return (\n          <>\n            <Field\n              disabled={loading}\n              label=\"Configuration\"\n              invalid={!!errors.configJSON}\n              error={errors.configJSON?.message}\n              data-testid={readOnly ? 'readonly-config' : 'config'}\n            >\n              <CodeEditor\n                language=\"json\"\n                width=\"100%\"\n                height={500}\n                showLineNumbers={true}\n                value={defaultValues.configJSON}\n                showMiniMap={false}\n                onSave={(value) => {\n                  setValue('configJSON', value);\n                }}\n                onBlur={(value) => {\n                  setValue('configJSON', value);\n                }}\n                readOnly={readOnly}\n              />\n            </Field>\n\n            {!readOnly && (\n              <HorizontalGroup>\n                <Button type=\"submit\" variant=\"primary\" disabled={loading}>\n                  Save configuration\n                </Button>\n                {onReset && (\n                  <Button type=\"button\" disabled={loading} variant=\"destructive\" onClick={onReset}>\n                    Reset configuration\n                  </Button>\n                )}\n              </HorizontalGroup>\n            )}\n\n            {Boolean(showConfirmDeleteAMConfig) && onConfirmReset && onDismiss && (\n              <ConfirmModal\n                isOpen={true}\n                title=\"Reset Alertmanager configuration\"\n                body={`Are you sure you want to reset configuration ${\n                  alertManagerSourceName === GRAFANA_RULES_SOURCE_NAME\n                    ? 'for the Grafana Alertmanager'\n                    : `for \"${alertManagerSourceName}\"`\n                }? Contact points and notification policies will be reset to their defaults.`}\n                confirmText=\"Yes, reset configuration\"\n                onConfirm={onConfirmReset}\n                onDismiss={onDismiss}\n              />\n            )}\n          </>\n        );\n      }}\n    </Form>\n  );\n};\n","import { css } from '@emotion/css';\nimport React, { useMemo } from 'react';\n\nimport { dateTime, GrafanaTheme2, SelectableValue } from '@grafana/data';\nimport { Button, HorizontalGroup, Select, useStyles2 } from '@grafana/ui';\nimport { AlertManagerCortexConfig } from 'app/plugins/datasource/alertmanager/types';\n\nimport { alertmanagerApi } from '../../api/alertmanagerApi';\nimport { GRAFANA_RULES_SOURCE_NAME } from '../../utils/datasource';\n\nimport { FormValues } from './AlertmanagerConfig';\nimport { ConfigEditor } from './ConfigEditor';\n\nexport interface ValidAmConfigOption {\n  label?: string;\n  value?: AlertManagerCortexConfig;\n}\n\ninterface AlertmanagerConfigSelectorProps {\n  onChange: (selectedOption: ValidAmConfigOption) => void;\n  selectedAmConfig?: ValidAmConfigOption;\n  defaultValues: FormValues;\n  onSubmit: (values: FormValues, oldConfig?: AlertManagerCortexConfig) => void;\n  readOnly: boolean;\n  loading: boolean;\n}\n\nexport default function AlertmanagerConfigSelector({\n  onChange,\n  selectedAmConfig,\n  defaultValues,\n  onSubmit,\n  readOnly,\n  loading,\n}: AlertmanagerConfigSelectorProps): JSX.Element {\n  const { useGetValidAlertManagersConfigQuery, useResetAlertManagerConfigToOldVersionMutation } = alertmanagerApi;\n\n  const styles = useStyles2(getStyles);\n\n  const { currentData: validAmConfigs, isLoading: isFetchingValidAmConfigs } = useGetValidAlertManagersConfigQuery();\n\n  const [resetAlertManagerConfigToOldVersion] = useResetAlertManagerConfigToOldVersionMutation();\n\n  const validAmConfigsOptions = useMemo(() => {\n    if (!validAmConfigs?.length) {\n      return [];\n    }\n\n    const configs: ValidAmConfigOption[] = validAmConfigs.map((config) => {\n      const date = new Date(config.last_applied!);\n      return {\n        label: config.last_applied\n          ? `Config from ${date.toLocaleString()} (${dateTime(date).locale('en').fromNow(true)} ago)`\n          : 'Previous config',\n        value: config,\n      };\n    });\n    onChange(configs[0]);\n    return configs;\n  }, [validAmConfigs, onChange]);\n\n  const onResetClick = async () => {\n    const id = selectedAmConfig?.value?.id;\n    if (id === undefined) {\n      return;\n    }\n\n    resetAlertManagerConfigToOldVersion({ id });\n  };\n\n  return (\n    <>\n      {!isFetchingValidAmConfigs && validAmConfigs && validAmConfigs.length > 0 ? (\n        <>\n          <div>Select a previous working configuration until you fix this error:</div>\n\n          <div className={styles.container}>\n            <HorizontalGroup align=\"flex-start\" spacing=\"md\">\n              <Select\n                options={validAmConfigsOptions}\n                value={selectedAmConfig}\n                onChange={(value: SelectableValue) => {\n                  onChange(value);\n                }}\n              />\n\n              <Button variant=\"primary\" disabled={loading} onClick={onResetClick}>\n                Reset to selected configuration\n              </Button>\n            </HorizontalGroup>\n          </div>\n\n          <ConfigEditor\n            defaultValues={defaultValues}\n            onSubmit={(values) => onSubmit(values)}\n            readOnly={readOnly}\n            loading={loading}\n            alertManagerSourceName={GRAFANA_RULES_SOURCE_NAME}\n          />\n        </>\n      ) : null}\n    </>\n  );\n}\nconst getStyles = (theme: GrafanaTheme2) => ({\n  container: css`\n    margin-top: ${theme.spacing(2)};\n    margin-bottom: ${theme.spacing(2)};\n  `,\n});\n","import { css } from '@emotion/css';\nimport React, { useState, useMemo } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Alert, useStyles2 } from '@grafana/ui';\nimport { useDispatch } from 'app/types';\n\nimport { useAlertmanagerConfig } from '../../hooks/useAlertmanagerConfig';\nimport { useUnifiedAlertingSelector } from '../../hooks/useUnifiedAlertingSelector';\nimport { useAlertmanager } from '../../state/AlertmanagerContext';\nimport { deleteAlertManagerConfigAction, updateAlertManagerConfigAction } from '../../state/actions';\nimport { GRAFANA_RULES_SOURCE_NAME, isVanillaPrometheusAlertManagerDataSource } from '../../utils/datasource';\n\nimport AlertmanagerConfigSelector, { ValidAmConfigOption } from './AlertmanagerConfigSelector';\nimport { ConfigEditor } from './ConfigEditor';\n\nexport interface FormValues {\n  configJSON: string;\n}\n\nexport default function AlertmanagerConfig(): JSX.Element {\n  const dispatch = useDispatch();\n\n  const [showConfirmDeleteAMConfig, setShowConfirmDeleteAMConfig] = useState(false);\n  const { loading: isDeleting } = useUnifiedAlertingSelector((state) => state.deleteAMConfig);\n  const { loading: isSaving } = useUnifiedAlertingSelector((state) => state.saveAMConfig);\n  const { selectedAlertmanager } = useAlertmanager();\n\n  const readOnly = selectedAlertmanager ? isVanillaPrometheusAlertManagerDataSource(selectedAlertmanager) : false;\n  const styles = useStyles2(getStyles);\n\n  const [selectedAmConfig, setSelectedAmConfig] = useState<ValidAmConfigOption | undefined>();\n\n  const {\n    currentData: config,\n    error: loadingError,\n    isLoading: isLoadingConfig,\n  } = useAlertmanagerConfig(selectedAlertmanager);\n\n  const resetConfig = () => {\n    if (selectedAlertmanager) {\n      dispatch(deleteAlertManagerConfigAction(selectedAlertmanager));\n    }\n    setShowConfirmDeleteAMConfig(false);\n  };\n\n  const defaultValues = useMemo(\n    (): FormValues => ({\n      configJSON: config ? JSON.stringify(config, null, 2) : '',\n    }),\n    [config]\n  );\n\n  const defaultValidValues = useMemo(\n    (): FormValues => ({\n      configJSON: selectedAmConfig ? JSON.stringify(selectedAmConfig.value, null, 2) : '',\n    }),\n    [selectedAmConfig]\n  );\n\n  const loading = isDeleting || isLoadingConfig || isSaving;\n\n  const onSubmit = (values: FormValues) => {\n    if (selectedAlertmanager && config) {\n      dispatch(\n        updateAlertManagerConfigAction({\n          newConfig: JSON.parse(values.configJSON),\n          oldConfig: config,\n          alertManagerSourceName: selectedAlertmanager,\n          successMessage: 'Alertmanager configuration updated.',\n        })\n      );\n    }\n  };\n\n  return (\n    <div className={styles.container}>\n      {loadingError && !loading && (\n        <>\n          <Alert\n            severity=\"error\"\n            title=\"Your Alertmanager configuration is incorrect. These are the details of the error:\"\n          >\n            {loadingError.message || 'Unknown error.'}\n          </Alert>\n\n          {selectedAlertmanager === GRAFANA_RULES_SOURCE_NAME && (\n            <AlertmanagerConfigSelector\n              onChange={setSelectedAmConfig}\n              selectedAmConfig={selectedAmConfig}\n              defaultValues={defaultValidValues}\n              readOnly={true}\n              loading={loading}\n              onSubmit={onSubmit}\n            />\n          )}\n        </>\n      )}\n      {isDeleting && selectedAlertmanager !== GRAFANA_RULES_SOURCE_NAME && (\n        <Alert severity=\"info\" title=\"Resetting Alertmanager configuration\">\n          It might take a while...\n        </Alert>\n      )}\n      {selectedAlertmanager && config && (\n        <ConfigEditor\n          defaultValues={defaultValues}\n          onSubmit={(values) => onSubmit(values)}\n          readOnly={readOnly}\n          loading={loading}\n          alertManagerSourceName={selectedAlertmanager}\n          showConfirmDeleteAMConfig={showConfirmDeleteAMConfig}\n          onReset={() => setShowConfirmDeleteAMConfig(true)}\n          onConfirmReset={resetConfig}\n          onDismiss={() => setShowConfirmDeleteAMConfig(false)}\n        />\n      )}\n    </div>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  container: css`\n    margin-bottom: ${theme.spacing(4)};\n  `,\n});\n","import { countBy, keyBy } from 'lodash';\nimport { createSelector } from 'reselect';\n\nimport { DataSourceInstanceSettings, DataSourceJsonData, DataSourceSettings } from '@grafana/data';\nimport { AlertManagerDataSourceJsonData } from 'app/plugins/datasource/alertmanager/types';\nimport { StoreState, useSelector } from 'app/types';\n\nimport { alertmanagerApi } from '../api/alertmanagerApi';\nimport { getAlertManagerDataSources } from '../utils/datasource';\n\nexport interface ExternalDataSourceAM {\n  dataSource: DataSourceInstanceSettings<AlertManagerDataSourceJsonData>;\n  url?: string;\n  status: 'active' | 'pending' | 'dropped';\n  statusInconclusive?: boolean;\n}\n\nexport function useExternalDataSourceAlertmanagers(): ExternalDataSourceAM[] {\n  const { useGetExternalAlertmanagersQuery } = alertmanagerApi;\n  const { currentData: discoveredAlertmanagers } = useGetExternalAlertmanagersQuery();\n\n  const externalDsAlertManagers = getAlertManagerDataSources().filter((ds) => ds.jsonData.handleGrafanaManagedAlerts);\n\n  const alertmanagerDatasources = useSelector(\n    createSelector(\n      (state: StoreState) => state.dataSources.dataSources.filter((ds) => ds.type === 'alertmanager'),\n      (datasources) => keyBy(datasources, (ds) => ds.uid)\n    )\n  );\n\n  const droppedAMUrls = countBy(discoveredAlertmanagers?.droppedAlertManagers, (x) => x.url);\n  const activeAMUrls = countBy(discoveredAlertmanagers?.activeAlertManagers, (x) => x.url);\n\n  return externalDsAlertManagers.map<ExternalDataSourceAM>((dsAm) => {\n    const dsSettings = alertmanagerDatasources[dsAm.uid];\n\n    if (!dsSettings) {\n      return {\n        dataSource: dsAm,\n        status: 'pending',\n      };\n    }\n\n    const amUrl = getDataSourceUrlWithProtocol(dsSettings);\n    const amStatusUrl = `${amUrl}/api/v2/alerts`;\n\n    const matchingDroppedUrls = droppedAMUrls[amStatusUrl] ?? 0;\n    const matchingActiveUrls = activeAMUrls[amStatusUrl] ?? 0;\n\n    const isDropped = matchingDroppedUrls > 0;\n    const isActive = matchingActiveUrls > 0;\n\n    // Multiple Alertmanagers of the same URL may exist (e.g. with different credentials)\n    // Alertmanager response only contains URLs, so in case of duplication, we are not able\n    // to distinguish which is which, resulting in an inconclusive status.\n    const isStatusInconclusive = matchingDroppedUrls + matchingActiveUrls > 1;\n\n    const status = isDropped ? 'dropped' : isActive ? 'active' : 'pending';\n\n    return {\n      dataSource: dsAm,\n      url: dsSettings.url,\n      status,\n      statusInconclusive: isStatusInconclusive,\n    };\n  });\n}\n\nfunction getDataSourceUrlWithProtocol<T extends DataSourceJsonData>(dsSettings: DataSourceSettings<T>) {\n  const hasProtocol = new RegExp('^[^:]*://').test(dsSettings.url);\n  if (!hasProtocol) {\n    return `http://${dsSettings.url}`; // Grafana append http protocol if there is no any\n  }\n\n  return dsSettings.url;\n}\n","import { css } from '@emotion/css';\nimport { capitalize } from 'lodash';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Badge, CallToActionCard, Card, Icon, LinkButton, Tooltip, useStyles2 } from '@grafana/ui';\n\nimport { ExternalDataSourceAM } from '../../hooks/useExternalAmSelector';\nimport { makeDataSourceLink } from '../../utils/misc';\n\nexport interface ExternalAlertManagerDataSourcesProps {\n  alertmanagers: ExternalDataSourceAM[];\n  inactive: boolean;\n}\n\nexport function ExternalAlertmanagerDataSources({ alertmanagers, inactive }: ExternalAlertManagerDataSourcesProps) {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <>\n      <h5>Alertmanagers Receiving Grafana-managed alerts</h5>\n      <div className={styles.muted}>\n        Alertmanager data sources support a configuration setting that allows you to choose to send Grafana-managed\n        alerts to that Alertmanager. <br />\n        Below, you can see the list of all Alertmanager data sources that have this setting enabled.\n      </div>\n      {alertmanagers.length === 0 && (\n        <CallToActionCard\n          message={\n            <div>\n              There are no Alertmanager data sources configured to receive Grafana-managed alerts. <br />\n              You can change this by selecting Receive Grafana Alerts in a data source configuration.\n            </div>\n          }\n          callToActionElement={<LinkButton href=\"/datasources\">Go to data sources</LinkButton>}\n          className={styles.externalDsCTA}\n        />\n      )}\n      {alertmanagers.length > 0 && (\n        <div className={styles.externalDs}>\n          {alertmanagers.map((am) => (\n            <ExternalAMdataSourceCard key={am.dataSource.uid} alertmanager={am} inactive={inactive} />\n          ))}\n        </div>\n      )}\n    </>\n  );\n}\n\ninterface ExternalAMdataSourceCardProps {\n  alertmanager: ExternalDataSourceAM;\n  inactive: boolean;\n}\n\nexport function ExternalAMdataSourceCard({ alertmanager, inactive }: ExternalAMdataSourceCardProps) {\n  const styles = useStyles2(getStyles);\n\n  const { dataSource, status, statusInconclusive, url } = alertmanager;\n\n  return (\n    <Card>\n      <Card.Heading className={styles.externalHeading}>\n        {dataSource.name}{' '}\n        {statusInconclusive && (\n          <Tooltip content=\"Multiple Alertmanagers have the same URL configured. The state might be inconclusive.\">\n            <Icon name=\"exclamation-triangle\" size=\"md\" className={styles.externalWarningIcon} />\n          </Tooltip>\n        )}\n      </Card.Heading>\n      <Card.Figure>\n        <img\n          src=\"public/app/plugins/datasource/alertmanager/img/logo.svg\"\n          alt=\"\"\n          height=\"40px\"\n          width=\"40px\"\n          style={{ objectFit: 'contain' }}\n        />\n      </Card.Figure>\n      <Card.Tags>\n        {inactive ? (\n          <Badge\n            text=\"Inactive\"\n            color=\"red\"\n            tooltip=\"Grafana is configured to send alerts to the built-in internal Alertmanager only. External Alertmanagers do not receive any alerts.\"\n          />\n        ) : (\n          <Badge\n            text={capitalize(status)}\n            color={status === 'dropped' ? 'red' : status === 'active' ? 'green' : 'orange'}\n          />\n        )}\n      </Card.Tags>\n      <Card.Meta>{url}</Card.Meta>\n      <Card.Actions>\n        <LinkButton href={makeDataSourceLink(dataSource)} size=\"sm\" variant=\"secondary\">\n          Go to datasource\n        </LinkButton>\n      </Card.Actions>\n    </Card>\n  );\n}\n\nexport const getStyles = (theme: GrafanaTheme2) => ({\n  muted: css`\n    font-size: ${theme.typography.bodySmall.fontSize};\n    line-height: ${theme.typography.bodySmall.lineHeight};\n    color: ${theme.colors.text.secondary};\n  `,\n  externalHeading: css`\n    justify-content: flex-start;\n  `,\n  externalWarningIcon: css`\n    margin: ${theme.spacing(0, 1)};\n    fill: ${theme.colors.warning.main};\n  `,\n  externalDs: css`\n    display: grid;\n    gap: ${theme.spacing(1)};\n    padding: ${theme.spacing(2, 0)};\n  `,\n  externalDsCTA: css`\n    margin: ${theme.spacing(2, 0)};\n  `,\n});\n","import { css } from '@emotion/css';\nimport React, { useEffect } from 'react';\n\nimport { GrafanaTheme2, SelectableValue } from '@grafana/data';\nimport { Alert, Field, RadioButtonGroup, useStyles2 } from '@grafana/ui';\nimport { loadDataSources } from 'app/features/datasources/state/actions';\nimport { AlertmanagerChoice } from 'app/plugins/datasource/alertmanager/types';\nimport { useDispatch } from 'app/types';\n\nimport { alertmanagerApi } from '../../api/alertmanagerApi';\nimport { useExternalDataSourceAlertmanagers } from '../../hooks/useExternalAmSelector';\n\nimport { ExternalAlertmanagerDataSources } from './ExternalAlertmanagerDataSources';\n\nconst alertmanagerChoices: Array<SelectableValue<AlertmanagerChoice>> = [\n  { value: AlertmanagerChoice.Internal, label: 'Only Internal' },\n  { value: AlertmanagerChoice.External, label: 'Only External' },\n  { value: AlertmanagerChoice.All, label: 'Both internal and external' },\n];\n\nexport const ExternalAlertmanagers = () => {\n  const styles = useStyles2(getStyles);\n  const dispatch = useDispatch();\n\n  const externalDsAlertManagers = useExternalDataSourceAlertmanagers();\n\n  const {\n    useSaveExternalAlertmanagersConfigMutation,\n    useGetExternalAlertmanagerConfigQuery,\n    useGetExternalAlertmanagersQuery,\n  } = alertmanagerApi;\n\n  const [saveExternalAlertManagers] = useSaveExternalAlertmanagersConfigMutation();\n  const { currentData: externalAlertmanagerConfig } = useGetExternalAlertmanagerConfigQuery();\n\n  // Just to refresh the status periodically\n  useGetExternalAlertmanagersQuery(undefined, { pollingInterval: 5000 });\n\n  const alertmanagersChoice = externalAlertmanagerConfig?.alertmanagersChoice;\n\n  useEffect(() => {\n    dispatch(loadDataSources());\n  }, [dispatch]);\n\n  const onChangeAlertmanagerChoice = (alertmanagersChoice: AlertmanagerChoice) => {\n    saveExternalAlertManagers({ alertmanagersChoice });\n  };\n\n  return (\n    <div>\n      <h4>External Alertmanagers</h4>\n      <Alert title=\"External Alertmanager changes\" severity=\"info\">\n        The way you configure external Alertmanagers has changed.\n        <br />\n        You can now use configured Alertmanager data sources as receivers of your Grafana-managed alerts.\n        <br />\n        For more information, refer to our documentation.\n      </Alert>\n\n      <div className={styles.amChoice}>\n        <Field\n          label=\"Send alerts to\"\n          description=\"Configures how the Grafana alert rule evaluation engine Alertmanager handles your alerts. Internal (Grafana built-in Alertmanager), External (All Alertmanagers configured below), or both.\"\n        >\n          <RadioButtonGroup\n            options={alertmanagerChoices}\n            value={alertmanagersChoice}\n            onChange={(value) => onChangeAlertmanagerChoice(value!)}\n          />\n        </Field>\n      </div>\n\n      <ExternalAlertmanagerDataSources\n        alertmanagers={externalDsAlertManagers}\n        inactive={alertmanagersChoice === AlertmanagerChoice.Internal}\n      />\n    </div>\n  );\n};\n\nexport const getStyles = (theme: GrafanaTheme2) => ({\n  url: css`\n    margin-right: ${theme.spacing(1)};\n  `,\n  actions: css`\n    margin-top: ${theme.spacing(2)};\n    display: flex;\n    justify-content: flex-end;\n  `,\n  table: css`\n    margin-bottom: ${theme.spacing(2)};\n  `,\n  amChoice: css`\n    margin-bottom: ${theme.spacing(4)};\n  `,\n});\n","import React from 'react';\n\nimport { AlertmanagerPageWrapper } from './components/AlertingPageWrapper';\nimport AlertmanagerConfig from './components/admin/AlertmanagerConfig';\nimport { ExternalAlertmanagers } from './components/admin/ExternalAlertmanagers';\nimport { useAlertmanager } from './state/AlertmanagerContext';\nimport { GRAFANA_RULES_SOURCE_NAME } from './utils/datasource';\n\nexport default function Admin(): JSX.Element {\n  return (\n    <AlertmanagerPageWrapper navId=\"alerting-admin\" accessType=\"notification\">\n      <AdminPageContents />\n    </AlertmanagerPageWrapper>\n  );\n}\n\nfunction AdminPageContents() {\n  const { selectedAlertmanager } = useAlertmanager();\n  const isGrafanaAmSelected = selectedAlertmanager === GRAFANA_RULES_SOURCE_NAME;\n\n  return (\n    <>\n      <AlertmanagerConfig test-id=\"admin-alertmanagerconfig\" />\n      {isGrafanaAmSelected && <ExternalAlertmanagers test-id=\"admin-externalalertmanagers\" />}\n    </>\n  );\n}\n","import { css } from '@emotion/css';\nimport React, { HTMLAttributes } from 'react';\nimport { useLocalStorage } from 'react-use';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Alert, AlertVariant, Button, HorizontalGroup, Tooltip, useTheme2 } from '@grafana/ui';\nimport { getIconFromSeverity } from '@grafana/ui/src/components/Alert/Alert';\n\ntype Justify = 'flex-start' | 'flex-end' | 'space-between' | 'center';\n\ninterface CollapsibleAlertProps extends HTMLAttributes<HTMLDivElement> {\n  localStoreKey: string;\n  startClosed?: boolean;\n  severity?: AlertVariant;\n  collapseText?: string;\n  collapseTooltip: string;\n  collapseJustify?: Justify;\n  alertTitle: string;\n  children?: React.ReactNode;\n}\n\nexport const CollapsibleAlert = ({\n  localStoreKey,\n  startClosed = false,\n  severity = 'error',\n  collapseText,\n  collapseTooltip,\n  collapseJustify = 'flex-end',\n  alertTitle,\n  children,\n}: CollapsibleAlertProps) => {\n  const theme = useTheme2();\n  const styles = getStyles(theme, severity);\n  const [closed, setClosed] = useLocalStorage(localStoreKey, startClosed);\n\n  return (\n    <>\n      {closed && (\n        <HorizontalGroup justify={collapseJustify}>\n          <Tooltip content={collapseTooltip} placement=\"bottom\">\n            <Button\n              fill=\"text\"\n              variant=\"secondary\"\n              icon={getIconFromSeverity(severity)}\n              className={styles.warningButton}\n              onClick={() => setClosed(false)}\n            >\n              {collapseText}\n            </Button>\n          </Tooltip>\n        </HorizontalGroup>\n      )}\n      {!closed && (\n        <Alert severity={severity} title={alertTitle} onRemove={() => setClosed(true)}>\n          {children}\n        </Alert>\n      )}\n    </>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2, severity: AlertVariant) => {\n  const color = theme.colors[severity];\n  return {\n    warningButton: css({\n      color: color.text,\n\n      '&:hover': {\n        background: color.transparent,\n      },\n    }),\n  };\n};\n","import React from 'react';\n\nimport { config } from '@grafana/runtime';\nimport { TextLink } from '@grafana/ui';\n\nimport { CollapsibleAlert } from './CollapsibleAlert';\n\nconst LOCAL_STORAGE_KEY = 'grafana.unifiedalerting.upgrade.previewNotice';\n\nexport const UAPreviewNotice = () => {\n  if (config.unifiedAlertingEnabled || !config.featureToggles.alertingPreviewUpgrade) {\n    return null;\n  }\n\n  return (\n    <CollapsibleAlert\n      localStoreKey={LOCAL_STORAGE_KEY}\n      alertTitle={'This is a preview of the upgraded Grafana Alerting'}\n      collapseText={'Grafana Alerting Preview'}\n      collapseTooltip={'Show preview warning'}\n      severity={'warning'}\n    >\n      <p>\n        No rules are being evaluated and legacy alerting is still running.\n        <br />\n        Please contact your administrator to upgrade permanently.\n      </p>\n      <TextLink external href={'https://grafana.com/docs/grafana/latest/alerting/set-up/migrating-alerts/'}>\n        Read about upgrading\n      </TextLink>\n    </CollapsibleAlert>\n  );\n};\n","import { css } from '@emotion/css';\nimport React, { useMemo } from 'react';\n\nimport { GrafanaTheme2, SelectableValue } from '@grafana/data';\nimport { InlineField, Select, useStyles2 } from '@grafana/ui';\n\nimport { useAlertmanager } from '../state/AlertmanagerContext';\nimport { AlertManagerDataSource, GRAFANA_RULES_SOURCE_NAME } from '../utils/datasource';\n\ninterface Props {\n  disabled?: boolean;\n}\n\nfunction getAlertManagerLabel(alertManager: AlertManagerDataSource) {\n  return alertManager.name === GRAFANA_RULES_SOURCE_NAME ? 'Grafana' : alertManager.name.slice(0, 37);\n}\n\nexport const AlertManagerPicker = ({ disabled = false }: Props) => {\n  const styles = useStyles2(getStyles);\n\n  const { selectedAlertmanager, availableAlertManagers, setSelectedAlertmanager } = useAlertmanager();\n\n  const options: Array<SelectableValue<string>> = useMemo(() => {\n    return availableAlertManagers.map((ds) => ({\n      label: getAlertManagerLabel(ds),\n      value: ds.name,\n      imgUrl: ds.imgUrl,\n      meta: ds.meta,\n    }));\n  }, [availableAlertManagers]);\n\n  return (\n    <InlineField\n      className={styles.field}\n      label={disabled ? 'Alertmanager' : 'Choose Alertmanager'}\n      disabled={disabled || options.length === 1}\n      data-testid=\"alertmanager-picker\"\n    >\n      <Select\n        aria-label={disabled ? 'Alertmanager' : 'Choose Alertmanager'}\n        width={29}\n        className=\"ds-picker select-container\"\n        backspaceRemovesValue={false}\n        onChange={(value) => {\n          if (value?.value) {\n            setSelectedAlertmanager(value.value);\n          }\n        }}\n        options={options}\n        maxMenuHeight={500}\n        noOptionsMessage=\"No datasources found\"\n        value={selectedAlertmanager}\n        getOptionLabel={(o) => o.label}\n      />\n    </InlineField>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  field: css`\n    margin: 0;\n  `,\n});\n","import React from 'react';\n\nimport { Alert } from '@grafana/ui';\n\nimport { AlertManagerDataSource } from '../utils/datasource';\n\ninterface Props {\n  availableAlertManagers: AlertManagerDataSource[];\n}\n\nconst NoAlertManagersAvailable = () => (\n  <Alert title=\"No Alertmanager found\" severity=\"warning\">\n    We could not find any external Alertmanagers and you may not have access to the built-in Grafana Alertmanager.\n  </Alert>\n);\n\nconst OtherAlertManagersAvailable = () => (\n  <Alert title=\"Selected Alertmanager not found.\" severity=\"warning\">\n    The selected Alertmanager no longer exists or you may not have permission to access it. You can select a different\n    Alertmanager from the dropdown.\n  </Alert>\n);\n\nexport const NoAlertManagerWarning = ({ availableAlertManagers }: Props) => {\n  const hasOtherAMs = availableAlertManagers.length > 0;\n\n  return <div>{hasOtherAMs ? <OtherAlertManagersAvailable /> : <NoAlertManagersAvailable />}</div>;\n};\n","import React, { PropsWithChildren } from 'react';\nimport { useLocation } from 'react-use';\n\nimport { Page } from 'app/core/components/Page/Page';\nimport { PageProps } from 'app/core/components/Page/types';\n\nimport { UAPreviewNotice } from '../../components/UAPreviewNotice';\nimport { AlertmanagerProvider, useAlertmanager } from '../state/AlertmanagerContext';\n\nimport { AlertManagerPicker } from './AlertManagerPicker';\nimport { NoAlertManagerWarning } from './NoAlertManagerWarning';\n\n/**\n * This is the main alerting page wrapper, used by the alertmanager page wrapper and the alert rules list view\n */\ninterface AlertingPageWrapperProps extends PageProps {\n  isLoading?: boolean;\n}\n\nexport const AlertingPageWrapper = ({ children, isLoading, ...rest }: AlertingPageWrapperProps) => (\n  <Page {...rest}>\n    <Page.Contents isLoading={isLoading}>\n      <div>\n        <UAPreviewNotice />\n        {children}\n      </div>\n    </Page.Contents>\n  </Page>\n);\n\n/**\n * This wrapper is for pages that use the Alertmanager API\n */\ninterface AlertmanagerPageWrapperProps extends AlertingPageWrapperProps {\n  accessType: 'instance' | 'notification';\n}\nexport const AlertmanagerPageWrapper = ({ children, accessType, ...props }: AlertmanagerPageWrapperProps) => {\n  const disableAlertmanager = useIsDisabledAlertmanagerSelection();\n\n  return (\n    <AlertmanagerProvider accessType={accessType}>\n      <AlertingPageWrapper {...props} actions={<AlertManagerPicker disabled={disableAlertmanager} />}>\n        <AlertManagerPagePermissionsCheck>{children}</AlertManagerPagePermissionsCheck>\n      </AlertingPageWrapper>\n    </AlertmanagerProvider>\n  );\n};\n\n/**\n * This function tells us when we want to disable the alertmanager picker\n * It's not great...\n */\nfunction useIsDisabledAlertmanagerSelection() {\n  const location = useLocation();\n  const disabledPathSegment = ['/edit', '/new'];\n\n  return disabledPathSegment.some((match) => location?.pathname?.includes(match));\n}\n\n/**\n * This component will render an error message if the user doesn't have sufficient permissions or if the requested\n * alertmanager doesn't exist\n */\nconst AlertManagerPagePermissionsCheck = ({ children }: PropsWithChildren) => {\n  const { availableAlertManagers, selectedAlertmanager } = useAlertmanager();\n\n  if (!selectedAlertmanager) {\n    return <NoAlertManagerWarning availableAlertManagers={availableAlertManagers} />;\n  }\n\n  return <>{children}</>;\n};\n","import { SerializedError } from '@reduxjs/toolkit';\n\nimport { alertmanagerApi } from '../api/alertmanagerApi';\n\ntype Options = {\n  refetchOnFocus: boolean;\n  refetchOnReconnect: boolean;\n};\n\n// TODO refactor this so we can just call \"alertmanagerApi.endpoints.getAlertmanagerConfiguration\" everywhere\n// and remove this hook since it adds little value\nexport function useAlertmanagerConfig(amSourceName?: string, options?: Options) {\n  const fetchConfig = alertmanagerApi.endpoints.getAlertmanagerConfiguration.useQuery(amSourceName ?? '', {\n    ...options,\n    skip: !amSourceName,\n  });\n\n  return {\n    ...fetchConfig,\n    // TODO refactor to get rid of this type assertion\n    error: fetchConfig.error as SerializedError,\n  };\n}\n"],"names":["ConfigEditor","defaultValues","readOnly","loading","alertManagerSourceName","showConfirmDeleteAMConfig","onSubmit","onReset","onConfirmReset","onDismiss","Form","errors","setValue","register","value","e","Field","CodeEditor","Button","ConfirmModal","AlertmanagerConfigSelector","onChange","selectedAmConfig","useGetValidAlertManagersConfigQuery","useResetAlertManagerConfigToOldVersionMutation","alertmanagerApi","styles","getStyles","validAmConfigs","isFetchingValidAmConfigs","resetAlertManagerConfigToOldVersion","validAmConfigsOptions","configs","config","date","onResetClick","id","Select","values","theme","AlertmanagerConfig","dispatch","setShowConfirmDeleteAMConfig","isDeleting","useUnifiedAlertingSelector","state","isSaving","selectedAlertmanager","setSelectedAmConfig","loadingError","isLoadingConfig","useAlertmanagerConfig","resetConfig","defaultValidValues","Alert","useExternalDataSourceAlertmanagers","useGetExternalAlertmanagersQuery","discoveredAlertmanagers","externalDsAlertManagers","ds","alertmanagerDatasources","datasources","droppedAMUrls","x","activeAMUrls","dsAm","dsSettings","amStatusUrl","getDataSourceUrlWithProtocol","matchingDroppedUrls","matchingActiveUrls","isDropped","isActive","isStatusInconclusive","status","ExternalAlertmanagerDataSources","alertmanagers","inactive","CallToActionCard","am","ExternalAMdataSourceCard","alertmanager","dataSource","statusInconclusive","url","Card","Tooltip","Icon","Badge","alertmanagerChoices","ExternalAlertmanagers","useSaveExternalAlertmanagersConfigMutation","useGetExternalAlertmanagerConfigQuery","saveExternalAlertManagers","externalAlertmanagerConfig","alertmanagersChoice","onChangeAlertmanagerChoice","RadioButtonGroup","Admin","AdminPageContents","isGrafanaAmSelected","CollapsibleAlert","localStoreKey","startClosed","severity","collapseText","collapseTooltip","collapseJustify","alertTitle","children","closed","setClosed","useLocalStorage","color","LOCAL_STORAGE_KEY","UAPreviewNotice","TextLink","getAlertManagerLabel","alertManager","AlertManagerPicker","disabled","availableAlertManagers","setSelectedAlertmanager","options","InlineField","o","NoAlertManagersAvailable","OtherAlertManagersAvailable","NoAlertManagerWarning","hasOtherAMs","AlertingPageWrapper","isLoading","rest","Page","AlertmanagerPageWrapper","accessType","props","disableAlertmanager","useIsDisabledAlertmanagerSelection","AlertManagerPagePermissionsCheck","location","useLocation","match","amSourceName","fetchConfig"],"sourceRoot":""}