{"version":3,"file":"518.3dc45836b738c6cdb456.js","mappings":"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","sources":["webpack://grafana/./public/app/features/alerting/components/ConditionalWrap.tsx","webpack://grafana/./public/app/features/alerting/unified/api/onCallApi.ts","webpack://grafana/./public/app/features/alerting/unified/components/Authorize.tsx","webpack://grafana/./public/app/features/alerting/unified/components/GrafanaAlertmanagerDeliveryWarning.tsx","webpack://grafana/./public/app/features/alerting/unified/components/MetaText.tsx","webpack://grafana/./public/app/features/alerting/unified/components/Strong.tsx","webpack://grafana/./public/app/features/alerting/unified/components/export/FileExportPreview.tsx","webpack://grafana/./public/app/features/alerting/unified/components/export/GrafanaExportDrawer.tsx","webpack://grafana/./public/app/features/alerting/unified/components/export/providers.ts","webpack://grafana/./public/app/features/alerting/unified/components/receivers/grafanaAppReceivers/onCall/onCall.ts","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/RuleInspector.tsx","webpack://grafana/./public/app/features/alerting/unified/hooks/useURLSearchParams.ts","webpack://grafana/./public/app/features/alerting/unified/types/contact-points.ts","webpack://grafana/./public/app/features/alerting/unified/utils/notification-policies.ts"],"sourcesContent":["import React, { forwardRef, Ref } from 'react';\n\ninterface ConditionalWrapProps {\n  shouldWrap: boolean;\n  children: JSX.Element;\n  wrap: (children: JSX.Element) => JSX.Element;\n}\n\nfunction ConditionalWrap({ children, shouldWrap, wrap }: ConditionalWrapProps, _ref: Ref<HTMLElement>) {\n  return shouldWrap ? React.cloneElement(wrap(children)) : children;\n}\n\nexport default forwardRef(ConditionalWrap);\n","import { FetchError, isFetchError } from '@grafana/runtime';\n\nimport { GRAFANA_ONCALL_INTEGRATION_TYPE } from '../components/receivers/grafanaAppReceivers/onCall/onCall';\nimport { SupportedPlugin } from '../types/pluginBridges';\n\nimport { alertingApi } from './alertingApi';\n\nexport interface NewOnCallIntegrationDTO {\n  id: string;\n  connected_escalations_chains_count: number;\n  integration: string;\n  integration_url: string;\n  verbal_name: string;\n}\n\nexport interface OnCallPaginatedResult<T> {\n  results: T[];\n}\n\nexport const ONCALL_INTEGRATION_V2_FEATURE = 'grafana_alerting_v2';\ntype OnCallFeature = typeof ONCALL_INTEGRATION_V2_FEATURE | string;\n\ntype AlertReceiveChannelsResult = OnCallPaginatedResult<OnCallIntegrationDTO> | OnCallIntegrationDTO[];\n\nexport interface OnCallIntegrationDTO {\n  value: string;\n  display_name: string;\n  integration_url: string;\n}\n\nexport interface CreateIntegrationDTO {\n  integration: typeof GRAFANA_ONCALL_INTEGRATION_TYPE; // The only one supported right now\n  verbal_name: string;\n}\n\nconst getProxyApiUrl = (path: string) => `/api/plugin-proxy/${SupportedPlugin.OnCall}${path}`;\n\nexport const onCallApi = alertingApi.injectEndpoints({\n  endpoints: (build) => ({\n    grafanaOnCallIntegrations: build.query<OnCallIntegrationDTO[], void>({\n      query: () => ({\n        url: getProxyApiUrl('/api/internal/v1/alert_receive_channels/'),\n        // legacy_grafana_alerting is necessary for OnCall.\n        // We do NOT need to differentiate between these two on our side\n        params: { filters: true, integration: [GRAFANA_ONCALL_INTEGRATION_TYPE, 'legacy_grafana_alerting'] },\n        showErrorAlert: false,\n      }),\n      transformResponse: (response: AlertReceiveChannelsResult) => {\n        if (isPaginatedResponse(response)) {\n          return response.results;\n        }\n        return response;\n      },\n      providesTags: ['OnCallIntegrations'],\n    }),\n    validateIntegrationName: build.query<boolean, string>({\n      query: (name) => ({\n        url: getProxyApiUrl('/api/internal/v1/alert_receive_channels/validate_name/'),\n        params: { verbal_name: name },\n        showErrorAlert: false,\n      }),\n    }),\n    createIntegration: build.mutation<NewOnCallIntegrationDTO, CreateIntegrationDTO>({\n      query: (integration) => ({\n        url: getProxyApiUrl('/api/internal/v1/alert_receive_channels/'),\n        data: integration,\n        method: 'POST',\n        showErrorAlert: true,\n      }),\n      invalidatesTags: ['OnCallIntegrations'],\n    }),\n    features: build.query<OnCallFeature[], void>({\n      query: () => ({\n        url: getProxyApiUrl('/api/internal/v1/features/'),\n        showErrorAlert: false,\n      }),\n    }),\n  }),\n});\n\nfunction isPaginatedResponse(\n  response: AlertReceiveChannelsResult\n): response is OnCallPaginatedResult<OnCallIntegrationDTO> {\n  return 'results' in response && Array.isArray(response.results);\n}\n\nexport const { useGrafanaOnCallIntegrationsQuery } = onCallApi;\n\nexport function isOnCallFetchError(error: unknown): error is FetchError<{ detail: string }> {\n  return isFetchError(error) && 'detail' in error.data;\n}\n","import { chain, filter } from 'lodash';\nimport React, { PropsWithChildren } from 'react';\n\nimport {\n  Abilities,\n  Action,\n  AlertingAction,\n  AlertmanagerAction,\n  useAlertingAbilities,\n  useAllAlertmanagerAbilities,\n} from '../hooks/useAbilities';\n\ninterface AuthorizeProps extends PropsWithChildren {\n  actions: AlertmanagerAction[] | AlertingAction[];\n}\n\nexport const Authorize = ({ actions, children }: AuthorizeProps) => {\n  const alertmanagerActions = filter(actions, isAlertmanagerAction) as AlertmanagerAction[];\n  const alertSourceActions = filter(actions, isAlertingAction) as AlertingAction[];\n\n  if (alertmanagerActions.length) {\n    return <AuthorizeAlertmanager actions={alertmanagerActions}>{children}</AuthorizeAlertmanager>;\n  }\n\n  if (alertSourceActions.length) {\n    return <AuthorizeAlertsource actions={alertSourceActions}>{children}</AuthorizeAlertsource>;\n  }\n\n  return null;\n};\n\ninterface ActionsProps<T extends Action> extends PropsWithChildren {\n  actions: T[];\n}\n\nconst AuthorizeAlertmanager = ({ actions, children }: ActionsProps<AlertmanagerAction>) => {\n  const alertmanagerAbilties = useAllAlertmanagerAbilities();\n  const allowed = actionsAllowed(alertmanagerAbilties, actions);\n\n  if (allowed) {\n    return <>{children}</>;\n  } else {\n    return null;\n  }\n};\n\nconst AuthorizeAlertsource = ({ actions, children }: ActionsProps<AlertingAction>) => {\n  const alertSourceAbilities = useAlertingAbilities();\n  const allowed = actionsAllowed(alertSourceAbilities, actions);\n\n  if (allowed) {\n    return <>{children}</>;\n  } else {\n    return null;\n  }\n};\n\n// TODO add some authorize helper components for alert source and individual alert rules\n\n// check if some action is allowed from the abilities\nfunction actionsAllowed<T extends Action>(abilities: Abilities<T>, actions: T[]) {\n  return chain(abilities)\n    .pick(actions)\n    .values()\n    .value()\n    .some(([_supported, allowed]) => allowed === true);\n}\n\nfunction isAlertmanagerAction(action: AlertmanagerAction) {\n  return Object.values(AlertmanagerAction).includes(action);\n}\n\nfunction isAlertingAction(action: AlertingAction) {\n  return Object.values(AlertingAction).includes(action);\n}\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data/src';\nimport { Alert, useStyles2 } from '@grafana/ui/src';\n\nimport { AlertmanagerChoice } from '../../../../plugins/datasource/alertmanager/types';\nimport { alertmanagerApi } from '../api/alertmanagerApi';\nimport { GRAFANA_RULES_SOURCE_NAME } from '../utils/datasource';\n\ninterface GrafanaAlertmanagerDeliveryWarningProps {\n  currentAlertmanager: string;\n}\n\nexport function GrafanaAlertmanagerDeliveryWarning({ currentAlertmanager }: GrafanaAlertmanagerDeliveryWarningProps) {\n  const styles = useStyles2(getStyles);\n  const viewingInternalAM = currentAlertmanager === GRAFANA_RULES_SOURCE_NAME;\n\n  const { currentData: amChoiceStatus } = alertmanagerApi.endpoints.getAlertmanagerChoiceStatus.useQuery(undefined, {\n    skip: !viewingInternalAM,\n  });\n\n  const interactsWithExternalAMs =\n    amChoiceStatus?.alertmanagersChoice &&\n    [AlertmanagerChoice.External, AlertmanagerChoice.All].includes(amChoiceStatus?.alertmanagersChoice);\n\n  if (!interactsWithExternalAMs || !viewingInternalAM) {\n    return null;\n  }\n\n  const hasActiveExternalAMs = amChoiceStatus.numExternalAlertmanagers > 0;\n\n  if (amChoiceStatus.alertmanagersChoice === AlertmanagerChoice.External) {\n    return (\n      <Alert title=\"Grafana alerts are not delivered to Grafana Alertmanager\">\n        Grafana is configured to send alerts to external Alertmanagers only. Changing Grafana Alertmanager configuration\n        will not affect delivery of your alerts.\n        <div className={styles.adminHint}>\n          To change your Alertmanager setup, go to the Alerting Admin page. If you do not have access, contact your\n          Administrator.\n        </div>\n      </Alert>\n    );\n  }\n\n  if (amChoiceStatus.alertmanagersChoice === AlertmanagerChoice.All && hasActiveExternalAMs) {\n    return (\n      <Alert title=\"You have additional Alertmanagers to configure\" severity=\"warning\">\n        Ensure you make configuration changes in the correct Alertmanagers; both internal and external. Changing one\n        will not affect the others.\n        <div className={styles.adminHint}>\n          To change your Alertmanager setup, go to the Alerting Admin page. If you do not have access, contact your\n          Administrator.\n        </div>\n      </Alert>\n    );\n  }\n\n  return null;\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  adminHint: css`\n    font-size: ${theme.typography.bodySmall.fontSize};\n    font-weight: ${theme.typography.bodySmall.fontWeight};\n  `,\n});\n","import { css, cx } from '@emotion/css';\nimport React, { ComponentProps, HTMLAttributes } from 'react';\n\nimport { Icon, IconName, useStyles2, Text, Stack } from '@grafana/ui';\n\ninterface Props extends HTMLAttributes<HTMLDivElement> {\n  icon?: IconName;\n  direction?: 'row' | 'column';\n  color?: ComponentProps<typeof Text>['color'];\n}\n\nconst MetaText = ({ children, icon, color = 'secondary', direction = 'row', ...rest }: Props) => {\n  const styles = useStyles2(getStyles);\n  const interactive = typeof rest.onClick === 'function';\n\n  const rowDirection = direction === 'row';\n  const alignItems = rowDirection ? 'center' : 'flex-start';\n  const gap = rowDirection ? 0.5 : 0;\n\n  return (\n    <div\n      className={cx({\n        [styles.interactive]: interactive,\n      })}\n      // allow passing ARIA and data- attributes\n      {...rest}\n    >\n      <Text variant=\"bodySmall\" color={color}>\n        <Stack direction={direction} alignItems={alignItems} gap={gap} wrap={'wrap'}>\n          {icon && <Icon size=\"sm\" name={icon} />}\n          {children}\n        </Stack>\n      </Text>\n    </div>\n  );\n};\n\nconst getStyles = () => ({\n  interactive: css`\n    cursor: pointer;\n  `,\n});\n\nexport { MetaText };\n","import React from 'react';\n\nimport { useTheme2 } from '@grafana/ui';\n\ninterface Props {}\n\nconst Strong = ({ children }: React.PropsWithChildren<Props>) => {\n  const theme = useTheme2();\n  return <strong style={{ color: theme.colors.text.primary }}>{children}</strong>;\n};\n\nexport { Strong };\n","import { css } from '@emotion/css';\nimport saveAs from 'file-saver';\nimport React, { useCallback, useMemo } from 'react';\nimport AutoSizer from 'react-virtualized-auto-sizer';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Button, ClipboardButton, CodeEditor, useStyles2 } from '@grafana/ui';\n\nimport { allGrafanaExportProviders, ExportFormats } from './providers';\n\ninterface FileExportPreviewProps {\n  format: ExportFormats;\n  textDefinition: string;\n\n  /*** Filename without extension ***/\n  downloadFileName: string;\n  onClose: () => void;\n}\n\nexport function FileExportPreview({ format, textDefinition, downloadFileName, onClose }: FileExportPreviewProps) {\n  const styles = useStyles2(fileExportPreviewStyles);\n\n  const onDownload = useCallback(() => {\n    const blob = new Blob([textDefinition], {\n      type: `application/${format};charset=utf-8`,\n    });\n    saveAs(blob, `${downloadFileName}.${format}`);\n  }, [textDefinition, downloadFileName, format]);\n\n  const formattedTextDefinition = useMemo(() => {\n    const provider = allGrafanaExportProviders[format];\n    return provider.formatter ? provider.formatter(textDefinition) : textDefinition;\n  }, [format, textDefinition]);\n\n  return (\n    // TODO Handle empty content\n    <div className={styles.container}>\n      <div className={styles.content}>\n        <AutoSizer disableWidth>\n          {({ height }) => (\n            <CodeEditor\n              width=\"100%\"\n              height={height}\n              language={format}\n              value={formattedTextDefinition}\n              monacoOptions={{\n                minimap: {\n                  enabled: false,\n                },\n                scrollBeyondLastLine: false,\n                lineNumbers: 'on',\n                readOnly: true,\n              }}\n            />\n          )}\n        </AutoSizer>\n      </div>\n      <div className={styles.actions}>\n        <Button variant=\"secondary\" onClick={onClose}>\n          Cancel\n        </Button>\n        <ClipboardButton icon=\"copy\" getText={() => textDefinition}>\n          Copy code\n        </ClipboardButton>\n        <Button icon=\"download-alt\" onClick={onDownload}>\n          Download\n        </Button>\n      </div>\n    </div>\n  );\n}\n\nconst fileExportPreviewStyles = (theme: GrafanaTheme2) => ({\n  container: css`\n    display: flex;\n    flex-direction: column;\n    height: 100%;\n    gap: ${theme.spacing(2)};\n  `,\n  content: css`\n    flex: 1 1 100%;\n  `,\n  actions: css`\n    flex: 0;\n    justify-content: flex-end;\n    display: flex;\n    gap: ${theme.spacing(1)};\n  `,\n});\n","import React from 'react';\n\nimport { Drawer } from '@grafana/ui';\n\nimport { RuleInspectorTabs } from '../rule-editor/RuleInspector';\n\nimport { ExportFormats, ExportProvider } from './providers';\n\ninterface GrafanaExportDrawerProps {\n  activeTab: ExportFormats;\n  onTabChange: (tab: ExportFormats) => void;\n  children: React.ReactNode;\n  onClose: () => void;\n  formatProviders: Array<ExportProvider<ExportFormats>>;\n  title?: string;\n}\n\nexport function GrafanaExportDrawer({\n  activeTab,\n  onTabChange,\n  children,\n  onClose,\n  formatProviders,\n  title = 'Export',\n}: GrafanaExportDrawerProps) {\n  const grafanaRulesTabs = Object.values(formatProviders).map((provider) => ({\n    label: provider.name,\n    value: provider.exportFormat,\n  }));\n  return (\n    <Drawer\n      title={title}\n      subtitle=\"Select the format and download the file or copy the contents to clipboard\"\n      tabs={\n        <RuleInspectorTabs<ExportFormats> tabs={grafanaRulesTabs} setActiveTab={onTabChange} activeTab={activeTab} />\n      }\n      onClose={onClose}\n      size=\"md\"\n    >\n      {children}\n    </Drawer>\n  );\n}\n","export interface ExportProvider<TFormat> {\n  name: string;\n  exportFormat: TFormat;\n  formatter?: (raw: string) => string;\n}\n\nexport const JsonExportProvider: ExportProvider<'json'> = {\n  name: 'JSON',\n  exportFormat: 'json',\n  formatter: (raw: string) => {\n    try {\n      return JSON.stringify(JSON.parse(raw), null, 4);\n    } catch (e) {\n      return raw;\n    }\n  },\n};\n\nexport const YamlExportProvider: ExportProvider<'yaml'> = {\n  name: 'YAML',\n  exportFormat: 'yaml',\n};\n\nexport const HclExportProvider: ExportProvider<'hcl'> = {\n  name: 'Terraform (HCL)',\n  exportFormat: 'hcl',\n};\n\nexport const allGrafanaExportProviders = {\n  [JsonExportProvider.exportFormat]: JsonExportProvider,\n  [YamlExportProvider.exportFormat]: YamlExportProvider,\n  [HclExportProvider.exportFormat]: HclExportProvider,\n} as const;\n\nexport const jsonAndYamlGrafanaExportProviders = [JsonExportProvider, YamlExportProvider];\n\nexport type ExportFormats = keyof typeof allGrafanaExportProviders;\n","import { Receiver } from 'app/plugins/datasource/alertmanager/types';\n\nimport { OnCallIntegrationDTO } from '../../../../api/onCallApi';\n\n// TODO This value needs to be changed to grafana_alerting when the OnCall team introduces the necessary changes\nexport const GRAFANA_ONCALL_INTEGRATION_TYPE = 'grafana_alerting';\n\nexport enum ReceiverTypes {\n  OnCall = 'oncall',\n}\n\nexport const isInOnCallIntegrations = (url: string, integrationsUrls: string[]) => {\n  return integrationsUrls.includes(url);\n};\n\nexport const isOnCallReceiver = (receiver: Receiver, integrations: OnCallIntegrationDTO[]) => {\n  if (!receiver.grafana_managed_receiver_configs) {\n    return false;\n  }\n  // A receiver it's an onCall contact point if it includes only one integration, and this integration it's an onCall\n  // An integration it's an onCall type if it's included in the list of integrations returned by the onCall api endpoint\n  const onlyOneIntegration = receiver.grafana_managed_receiver_configs.length === 1;\n  const isOnCall = isInOnCallIntegrations(\n    receiver.grafana_managed_receiver_configs[0]?.settings?.url ?? '',\n    integrations.map((i) => i.integration_url)\n  );\n  return onlyOneIntegration && isOnCall;\n};\n","import { css } from '@emotion/css';\nimport { dump, load } from 'js-yaml';\nimport React, { useState } from 'react';\nimport { useFormContext } from 'react-hook-form';\nimport AutoSizer from 'react-virtualized-auto-sizer';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Button, CodeEditor, Drawer, Icon, Tab, TabsBar, useStyles2, Tooltip } from '@grafana/ui';\n\nimport { RulerRuleDTO } from '../../../../../types/unified-alerting-dto';\nimport { RuleFormValues } from '../../types/rule-form';\nimport {\n  alertingRulerRuleToRuleForm,\n  formValuesToRulerRuleDTO,\n  recordingRulerRuleToRuleForm,\n} from '../../utils/rule-form';\nimport { isAlertingRulerRule, isRecordingRulerRule } from '../../utils/rules';\n\ninterface Props {\n  onClose: () => void;\n}\n\nconst cloudRulesTabs = [{ label: 'Yaml', value: 'yaml' }];\n\nexport const RuleInspector = ({ onClose }: Props) => {\n  const [activeTab, setActiveTab] = useState('yaml');\n  const { setValue } = useFormContext<RuleFormValues>();\n  const styles = useStyles2(drawerStyles);\n\n  const onApply = (formValues: RuleFormValues) => {\n    // Need to loop through all values and set them individually\n    // TODO this is not type-safe :(\n    for (const key in formValues) {\n      // @ts-ignore\n      setValue(key, formValues[key]);\n    }\n    onClose();\n  };\n\n  return (\n    <Drawer\n      title=\"Inspect Alert rule\"\n      subtitle={\n        <div className={styles.subtitle}>\n          <RuleInspectorTabs tabs={cloudRulesTabs} setActiveTab={setActiveTab} activeTab={activeTab} />\n        </div>\n      }\n      onClose={onClose}\n    >\n      {activeTab === 'yaml' && <InspectorYamlTab onSubmit={onApply} />}\n    </Drawer>\n  );\n};\n\ninterface RuleInspectorTabsProps<T = string> {\n  tabs: Array<{ label: string; value: T }>;\n  activeTab: T;\n  setActiveTab: (tab: T) => void;\n}\n\nexport function RuleInspectorTabs<T extends string>({ tabs, activeTab, setActiveTab }: RuleInspectorTabsProps<T>) {\n  return (\n    <TabsBar>\n      {tabs.map((tab, index) => {\n        return (\n          <Tab\n            key={`${tab.value}-${index}`}\n            label={tab.label}\n            value={tab.value}\n            onChangeTab={() => setActiveTab(tab.value)}\n            active={activeTab === tab.value}\n          />\n        );\n      })}\n    </TabsBar>\n  );\n}\n\ninterface YamlTabProps {\n  onSubmit: (newModel: RuleFormValues) => void;\n}\n\nconst InspectorYamlTab = ({ onSubmit }: YamlTabProps) => {\n  const styles = useStyles2(yamlTabStyle);\n  const { getValues } = useFormContext<RuleFormValues>();\n\n  const yamlValues = formValuesToRulerRuleDTO(getValues());\n  const [alertRuleAsYaml, setAlertRuleAsYaml] = useState(dump(yamlValues));\n\n  const onApply = () => {\n    const rulerRule = load(alertRuleAsYaml) as RulerRuleDTO;\n    const currentFormValues = getValues();\n\n    const yamlFormValues = rulerRuleToRuleFormValues(rulerRule);\n    onSubmit({ ...currentFormValues, ...yamlFormValues });\n  };\n\n  return (\n    <>\n      <div className={styles.applyButton}>\n        <Button type=\"button\" onClick={onApply}>\n          Apply\n        </Button>\n        <Tooltip content={<YamlContentInfo />} theme=\"info\" placement=\"left-start\" interactive={true}>\n          <Icon name=\"exclamation-triangle\" size=\"xl\" />\n        </Tooltip>\n      </div>\n\n      <div className={styles.content}>\n        <AutoSizer disableWidth>\n          {({ height }) => (\n            <CodeEditor\n              width=\"100%\"\n              height={height}\n              language=\"yaml\"\n              value={alertRuleAsYaml}\n              onBlur={setAlertRuleAsYaml}\n              monacoOptions={{\n                minimap: {\n                  enabled: false,\n                },\n              }}\n            />\n          )}\n        </AutoSizer>\n      </div>\n    </>\n  );\n};\n\nfunction YamlContentInfo() {\n  return (\n    <div>\n      The YAML content in the editor only contains alert rule configuration <br />\n      To configure Prometheus, you need to provide the rest of the{' '}\n      <a\n        href=\"https://prometheus.io/docs/prometheus/latest/configuration/alerting_rules/\"\n        target=\"_blank\"\n        rel=\"noreferrer\"\n      >\n        configuration file content.\n      </a>\n    </div>\n  );\n}\n\nfunction rulerRuleToRuleFormValues(rulerRule: RulerRuleDTO): Partial<RuleFormValues> {\n  if (isAlertingRulerRule(rulerRule)) {\n    return alertingRulerRuleToRuleForm(rulerRule);\n  } else if (isRecordingRulerRule(rulerRule)) {\n    return recordingRulerRuleToRuleForm(rulerRule);\n  }\n\n  return {};\n}\n\nexport const yamlTabStyle = (theme: GrafanaTheme2) => ({\n  content: css`\n    flex-grow: 1;\n    height: 100%;\n    padding-bottom: 16px;\n    margin-bottom: ${theme.spacing(2)};\n  `,\n  applyButton: css`\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n    align-items: center;\n    flex-grow: 0;\n    margin-bottom: ${theme.spacing(2)};\n  `,\n});\n\nexport const drawerStyles = () => ({\n  subtitle: css`\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n  `,\n});\n","import { useCallback, useMemo } from 'react';\nimport { useLocation } from 'react-router-dom';\n\nimport { locationService } from '@grafana/runtime';\n\nexport function useURLSearchParams(): [\n  URLSearchParams,\n  (searchValues: Record<string, string | string[] | undefined>, replace?: boolean) => void,\n] {\n  const { search } = useLocation();\n  const queryParams = useMemo(() => new URLSearchParams(search), [search]);\n\n  const update = useCallback((searchValues: Record<string, string | string[] | undefined>, replace?: boolean) => {\n    locationService.partial(searchValues, replace);\n  }, []);\n\n  return [queryParams, update];\n}\n","import { IconName } from '@grafana/ui';\n\nexport const INTEGRATION_ICONS: Record<string, IconName> = {\n  discord: 'discord',\n  email: 'envelope',\n  googlechat: 'google-hangouts-alt',\n  hipchat: 'hipchat',\n  line: 'line',\n  pagerduty: 'pagerduty',\n  slack: 'slack',\n  teams: 'microsoft',\n  telegram: 'telegram-alt',\n  webhook: 'link',\n  sns: 'amazon',\n};\n","import { isArray, merge, pick, reduce } from 'lodash';\n\nimport {\n  AlertmanagerGroup,\n  MatcherOperator,\n  ObjectMatcher,\n  Route,\n  RouteWithID,\n} from 'app/plugins/datasource/alertmanager/types';\nimport { Labels } from 'app/types/unified-alerting-dto';\n\nimport { Label, normalizeMatchers } from './matchers';\n\n// If a policy has no matchers it still can be a match, hence matchers can be empty and match can be true\n// So we cannot use null as an indicator of no match\ninterface LabelMatchResult {\n  match: boolean;\n  matcher: ObjectMatcher | null;\n}\n\nexport const INHERITABLE_KEYS = ['receiver', 'group_by', 'group_wait', 'group_interval', 'repeat_interval'] as const;\nexport type InheritableKeys = typeof INHERITABLE_KEYS;\nexport type InhertitableProperties = Pick<Route, InheritableKeys[number]>;\n\ntype LabelsMatch = Map<Label, LabelMatchResult>;\n\ninterface MatchingResult {\n  matches: boolean;\n  labelsMatch: LabelsMatch;\n}\n\n// returns a match results for given set of matchers (from a policy for instance) and a set of labels\nexport function matchLabels(matchers: ObjectMatcher[], labels: Label[]): MatchingResult {\n  const matches = matchLabelsSet(matchers, labels);\n\n  // create initial map of label => match result\n  const labelsMatch: LabelsMatch = new Map(labels.map((label) => [label, { match: false, matcher: null }]));\n\n  // for each matcher, check which label it matched for\n  matchers.forEach((matcher) => {\n    const matchingLabel = labels.find((label) => isLabelMatch(matcher, label));\n\n    // record that matcher for the label\n    if (matchingLabel) {\n      labelsMatch.set(matchingLabel, {\n        match: true,\n        matcher,\n      });\n    }\n  });\n\n  return { matches, labelsMatch };\n}\n\n// Compare set of matchers to set of label\nexport function matchLabelsSet(matchers: ObjectMatcher[], labels: Label[]): boolean {\n  for (const matcher of matchers) {\n    if (!isLabelMatchInSet(matcher, labels)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport interface AlertInstanceMatch {\n  instance: Labels;\n  labelsMatch: LabelsMatch;\n}\n\nexport interface RouteMatchResult<T extends Route> {\n  route: T;\n  labelsMatch: LabelsMatch;\n}\n\n// Match does a depth-first left-to-right search through the route tree\n// and returns the matching routing nodes.\n\n// If the current node is not a match, return nothing\n// Normalization should have happened earlier in the code\nfunction findMatchingRoutes<T extends Route>(route: T, labels: Label[]): Array<RouteMatchResult<T>> {\n  let childMatches: Array<RouteMatchResult<T>> = [];\n\n  // If the current node is not a match, return nothing\n  const matchResult = matchLabels(route.object_matchers ?? [], labels);\n  if (!matchResult.matches) {\n    return [];\n  }\n\n  // If the current node matches, recurse through child nodes\n  if (route.routes) {\n    for (const child of route.routes) {\n      let matchingChildren = findMatchingRoutes(child, labels);\n      // TODO how do I solve this typescript thingy? It looks correct to me /shrug\n      // @ts-ignore\n      childMatches = childMatches.concat(matchingChildren);\n      // we have matching children and we don't want to continue, so break here\n      if (matchingChildren.length && !child.continue) {\n        break;\n      }\n    }\n  }\n\n  // If no child nodes were matches, the current node itself is a match.\n  if (childMatches.length === 0) {\n    childMatches.push({ route, labelsMatch: matchResult.labelsMatch });\n  }\n\n  return childMatches;\n}\n\n// This is a performance improvement to normalize matchers only once and use the normalized version later on\nexport function normalizeRoute(rootRoute: RouteWithID): RouteWithID {\n  function normalizeRoute(route: RouteWithID) {\n    route.object_matchers = normalizeMatchers(route);\n    delete route.matchers;\n    delete route.match;\n    delete route.match_re;\n    route.routes?.forEach(normalizeRoute);\n  }\n\n  const normalizedRootRoute = structuredClone(rootRoute);\n  normalizeRoute(normalizedRootRoute);\n\n  return normalizedRootRoute;\n}\n\n/**\n * find all of the groups that have instances that match the route, thay way we can find all instances\n * (and their grouping) for the given route\n */\nfunction findMatchingAlertGroups(\n  routeTree: Route,\n  route: Route,\n  alertGroups: AlertmanagerGroup[]\n): AlertmanagerGroup[] {\n  const matchingGroups: AlertmanagerGroup[] = [];\n\n  return alertGroups.reduce((acc, group) => {\n    // find matching alerts in the current group\n    const matchingAlerts = group.alerts.filter((alert) => {\n      const labels = Object.entries(alert.labels);\n      return findMatchingRoutes(routeTree, labels).some((matchingRoute) => matchingRoute.route === route);\n    });\n\n    // if the groups has any alerts left after matching, add it to the results\n    if (matchingAlerts.length) {\n      acc.push({\n        ...group,\n        alerts: matchingAlerts,\n      });\n    }\n\n    return acc;\n  }, matchingGroups);\n}\n\n// inherited properties are config properties that exist on the parent route (or its inherited properties) but not on the child route\nfunction getInheritedProperties(\n  parentRoute: Route,\n  childRoute: Route,\n  propertiesParentInherited?: Partial<InhertitableProperties>\n) {\n  const fullParentProperties = merge({}, parentRoute, propertiesParentInherited);\n\n  const inheritableProperties: InhertitableProperties = pick(fullParentProperties, INHERITABLE_KEYS);\n\n  // TODO how to solve this TypeScript mystery?\n  const inherited = reduce(\n    inheritableProperties,\n    (inheritedProperties: Partial<Route> = {}, parentValue, property) => {\n      const parentHasValue = parentValue !== undefined;\n\n      // @ts-ignore\n      const inheritFromParentUndefined = parentHasValue && childRoute[property] === undefined;\n      // @ts-ignore\n      const inheritFromParentEmptyString = parentHasValue && childRoute[property] === '';\n\n      const inheritEmptyGroupByFromParent =\n        property === 'group_by' &&\n        parentHasValue &&\n        isArray(childRoute[property]) &&\n        childRoute[property]?.length === 0;\n\n      const inheritFromParent =\n        inheritFromParentUndefined || inheritFromParentEmptyString || inheritEmptyGroupByFromParent;\n\n      if (inheritFromParent) {\n        // @ts-ignore\n        inheritedProperties[property] = parentValue;\n      }\n\n      return inheritedProperties;\n    },\n    {}\n  );\n\n  return inherited;\n}\n\n/**\n * This function will compute the full tree with inherited properties – this is mostly used for search and filtering\n */\nexport function computeInheritedTree<T extends Route>(parent: T): T {\n  return {\n    ...parent,\n    routes: parent.routes?.map((child) => {\n      const inheritedProperties = getInheritedProperties(parent, child);\n\n      return computeInheritedTree({\n        ...child,\n        ...inheritedProperties,\n      });\n    }),\n  };\n}\n\ntype OperatorPredicate = (labelValue: string, matcherValue: string) => boolean;\nconst OperatorFunctions: Record<MatcherOperator, OperatorPredicate> = {\n  [MatcherOperator.equal]: (lv, mv) => lv === mv,\n  [MatcherOperator.notEqual]: (lv, mv) => lv !== mv,\n  [MatcherOperator.regex]: (lv, mv) => new RegExp(mv).test(lv),\n  [MatcherOperator.notRegex]: (lv, mv) => !new RegExp(mv).test(lv),\n};\n\nfunction isLabelMatchInSet(matcher: ObjectMatcher, labels: Label[]): boolean {\n  const [matcherKey, operator, matcherValue] = matcher;\n\n  let labelValue = ''; // matchers that have no labels are treated as empty string label values\n  const labelForMatcher = Object.fromEntries(labels)[matcherKey];\n  if (labelForMatcher) {\n    labelValue = labelForMatcher;\n  }\n\n  const matchFunction = OperatorFunctions[operator];\n  if (!matchFunction) {\n    throw new Error(`no such operator: ${operator}`);\n  }\n\n  return matchFunction(labelValue, matcherValue);\n}\n\n// ⚠️ DO NOT USE THIS FUNCTION FOR ROUTE SELECTION ALGORITHM\n// for route selection algorithm, always compare a single matcher to the entire label set\n// see \"matchLabelsSet\"\nfunction isLabelMatch(matcher: ObjectMatcher, label: Label): boolean {\n  let [labelKey, labelValue] = label;\n  const [matcherKey, operator, matcherValue] = matcher;\n\n  if (labelKey !== matcherKey) {\n    return false;\n  }\n\n  const matchFunction = OperatorFunctions[operator];\n  if (!matchFunction) {\n    throw new Error(`no such operator: ${operator}`);\n  }\n\n  return matchFunction(labelValue, matcherValue);\n}\n\nexport { findMatchingAlertGroups, findMatchingRoutes, getInheritedProperties, isLabelMatchInSet };\n"],"names":["ConditionalWrap","children","shouldWrap","wrap","_ref","ONCALL_INTEGRATION_V2_FEATURE","getProxyApiUrl","path","onCallApi","build","response","isPaginatedResponse","name","integration","useGrafanaOnCallIntegrationsQuery","isOnCallFetchError","error","Authorize","actions","alertmanagerActions","isAlertmanagerAction","alertSourceActions","isAlertingAction","AuthorizeAlertmanager","AuthorizeAlertsource","alertmanagerAbilties","actionsAllowed","alertSourceAbilities","abilities","_supported","allowed","action","GrafanaAlertmanagerDeliveryWarning","currentAlertmanager","styles","getStyles","viewingInternalAM","amChoiceStatus","hasActiveExternalAMs","theme","MetaText","icon","color","direction","rest","interactive","rowDirection","alignItems","gap","Strong","FileExportPreview","format","textDefinition","downloadFileName","onClose","fileExportPreviewStyles","onDownload","blob","formattedTextDefinition","provider","height","GrafanaExportDrawer","activeTab","onTabChange","formatProviders","title","grafanaRulesTabs","JsonExportProvider","raw","YamlExportProvider","HclExportProvider","allGrafanaExportProviders","jsonAndYamlGrafanaExportProviders","GRAFANA_ONCALL_INTEGRATION_TYPE","ReceiverTypes","isInOnCallIntegrations","url","integrationsUrls","isOnCallReceiver","receiver","integrations","onlyOneIntegration","isOnCall","i","cloudRulesTabs","RuleInspector","setActiveTab","setValue","drawerStyles","onApply","formValues","key","RuleInspectorTabs","InspectorYamlTab","tabs","tab","index","onSubmit","yamlTabStyle","getValues","yamlValues","alertRuleAsYaml","setAlertRuleAsYaml","rulerRule","currentFormValues","yamlFormValues","rulerRuleToRuleFormValues","YamlContentInfo","useURLSearchParams","search","queryParams","update","searchValues","replace","INTEGRATION_ICONS","INHERITABLE_KEYS","matchLabels","matchers","labels","matches","matchLabelsSet","labelsMatch","label","matcher","matchingLabel","isLabelMatch","isLabelMatchInSet","findMatchingRoutes","route","childMatches","matchResult","child","matchingChildren","normalizeRoute","rootRoute","normalizedRootRoute","findMatchingAlertGroups","routeTree","alertGroups","matchingGroups","acc","group","matchingAlerts","alert","matchingRoute","getInheritedProperties","parentRoute","childRoute","propertiesParentInherited","fullParentProperties","inheritableProperties","inheritedProperties","parentValue","property","parentHasValue","inheritFromParentUndefined","inheritFromParentEmptyString","inheritEmptyGroupByFromParent","computeInheritedTree","parent","OperatorFunctions","lv","mv","matcherKey","operator","matcherValue","labelValue","labelForMatcher","matchFunction","labelKey"],"sourceRoot":""}