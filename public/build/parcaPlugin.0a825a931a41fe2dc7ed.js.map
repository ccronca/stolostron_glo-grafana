{"version":3,"file":"parcaPlugin.0a825a931a41fe2dc7ed.js","mappings":"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","sources":["webpack://grafana/./.yarn/__virtual__/@grafana-data-virtual-5bf5e61bca/1/packages/grafana-data/src/types/app.ts","webpack://grafana/./.yarn/__virtual__/@grafana-ui-virtual-2a6ff86fdd/1/packages/grafana-ui/src/components/FormLabel/FormLabel.tsx","webpack://grafana/./.yarn/__virtual__/@grafana-ui-virtual-2a6ff86fdd/1/packages/grafana-ui/src/components/FormField/FormField.tsx","webpack://grafana/./.yarn/__virtual__/@grafana-ui-virtual-2a6ff86fdd/1/packages/grafana-ui/src/utils/validate.ts","webpack://grafana/./.yarn/__virtual__/@grafana-ui-virtual-2a6ff86fdd/1/packages/grafana-ui/src/components/Forms/Legacy/Input/Input.tsx","webpack://grafana/./.yarn/__virtual__/@grafana-ui-virtual-2a6ff86fdd/1/packages/grafana-ui/src/utils/tags.ts","webpack://grafana/./.yarn/__virtual__/@grafana-ui-virtual-2a6ff86fdd/1/packages/grafana-ui/src/components/TagsInput/TagItem.tsx","webpack://grafana/./.yarn/__virtual__/@grafana-ui-virtual-2a6ff86fdd/1/packages/grafana-ui/src/components/TagsInput/TagsInput.tsx","webpack://grafana/./.yarn/__virtual__/@grafana-ui-virtual-2a6ff86fdd/1/packages/grafana-ui/src/components/SecretFormField/SecretFormField.tsx","webpack://grafana/./.yarn/__virtual__/@grafana-ui-virtual-2a6ff86fdd/1/packages/grafana-ui/src/components/DataSourceSettings/BasicAuthSettings.tsx","webpack://grafana/./.yarn/__virtual__/@grafana-ui-virtual-2a6ff86fdd/1/packages/grafana-ui/src/components/DataSourceSettings/CustomHeadersSettings.tsx","webpack://grafana/./.yarn/__virtual__/@grafana-ui-virtual-2a6ff86fdd/1/packages/grafana-ui/src/components/DataSourceSettings/HttpProxySettings.tsx","webpack://grafana/./.yarn/__virtual__/@grafana-ui-virtual-2a6ff86fdd/1/packages/grafana-ui/src/components/DataSourceSettings/CertificationKey.tsx","webpack://grafana/./.yarn/__virtual__/@grafana-ui-virtual-2a6ff86fdd/1/packages/grafana-ui/src/components/DataSourceSettings/TLSAuthSettings.tsx","webpack://grafana/./.yarn/__virtual__/@grafana-ui-virtual-2a6ff86fdd/1/packages/grafana-ui/src/components/DataSourceSettings/DataSourceHttpSettings.tsx","webpack://grafana/./.yarn/__virtual__/@grafana-plugins-parca-virtual-3919eaefd0/1/public/app/plugins/datasource/parca/ConfigEditor.tsx","webpack://grafana/./.yarn/__virtual__/react-use-virtual-311c97a32e/0/cache/react-use-npm-17.4.0-0ef4521544-98566c4817.zip/node_modules/react-use/esm/useMount.js","webpack://grafana/./.yarn/__virtual__/@grafana-ui-virtual-2a6ff86fdd/1/packages/grafana-ui/src/components/Cascader/optionMappings.ts","webpack://grafana/./.yarn/__virtual__/@grafana-ui-virtual-2a6ff86fdd/1/packages/grafana-ui/src/components/ButtonCascader/ButtonCascader.tsx","webpack://grafana/./.yarn/__virtual__/@grafana-plugins-parca-virtual-3919eaefd0/1/public/app/plugins/datasource/parca/dataquery.gen.ts","webpack://grafana/./.yarn/__virtual__/@grafana-plugins-parca-virtual-3919eaefd0/1/public/app/plugins/datasource/parca/QueryEditor/Stack.tsx","webpack://grafana/./.yarn/__virtual__/@grafana-plugins-parca-virtual-3919eaefd0/1/public/app/plugins/datasource/parca/QueryEditor/EditorRow.tsx","webpack://grafana/./.yarn/__virtual__/@grafana-plugins-parca-virtual-3919eaefd0/1/public/app/plugins/datasource/parca/QueryEditor/EditorRows.tsx","webpack://grafana/./.yarn/__virtual__/react-use-virtual-311c97a32e/0/cache/react-use-npm-17.4.0-0ef4521544-98566c4817.zip/node_modules/react-use/esm/useLatest.js","webpack://grafana/./.yarn/__virtual__/@grafana-plugins-parca-virtual-3919eaefd0/1/public/app/plugins/datasource/parca/lang/index.ts","webpack://grafana/./.yarn/__virtual__/@grafana-plugins-parca-virtual-3919eaefd0/1/public/app/plugins/datasource/parca/lang/lang.ts","webpack://grafana/./.yarn/__virtual__/@grafana-plugins-parca-virtual-3919eaefd0/1/public/app/plugins/datasource/parca/QueryEditor/autocomplete.ts","webpack://grafana/./.yarn/__virtual__/@grafana-plugins-parca-virtual-3919eaefd0/1/public/app/plugins/datasource/parca/QueryEditor/LabelsEditor.tsx","webpack://grafana/./.yarn/__virtual__/react-use-virtual-311c97a32e/0/cache/react-use-npm-17.4.0-0ef4521544-98566c4817.zip/node_modules/react-use/esm/useToggle.js","webpack://grafana/./.yarn/__virtual__/@grafana-plugins-parca-virtual-3919eaefd0/1/public/app/plugins/datasource/parca/QueryEditor/QueryOptions.tsx","webpack://grafana/./.yarn/__virtual__/@grafana-plugins-parca-virtual-3919eaefd0/1/public/app/plugins/datasource/parca/QueryEditor/QueryEditor.tsx","webpack://grafana/./.yarn/__virtual__/@grafana-plugins-parca-virtual-3919eaefd0/1/public/app/plugins/datasource/parca/datasource.ts","webpack://grafana/./.yarn/__virtual__/@grafana-plugins-parca-virtual-3919eaefd0/1/public/app/plugins/datasource/parca/module.ts","webpack://grafana/./.yarn/__virtual__/@grafana-ui-virtual-2a6ff86fdd/1/packages/grafana-ui/src/components/DataSourceSettings/SecureSocksProxySettings.tsx","webpack://grafana/./.yarn/__virtual__/@grafana-ui-virtual-2a6ff86fdd/1/packages/grafana-ui/src/components/Forms/Field.tsx","webpack://grafana/./.yarn/__virtual__/@grafana-ui-virtual-2a6ff86fdd/1/packages/grafana-ui/src/components/Forms/InlineFieldRow.tsx","webpack://grafana/./.yarn/__virtual__/@grafana-ui-virtual-2a6ff86fdd/1/packages/grafana-ui/src/components/Forms/RadioButtonGroup/RadioButton.tsx","webpack://grafana/./.yarn/__virtual__/@grafana-ui-virtual-2a6ff86fdd/1/packages/grafana-ui/src/components/Forms/RadioButtonGroup/RadioButtonGroup.tsx","webpack://grafana/./.yarn/__virtual__/@grafana-ui-virtual-2a6ff86fdd/1/packages/grafana-ui/src/components/TextArea/TextArea.tsx","webpack://grafana/./.yarn/__virtual__/react-use-virtual-311c97a32e/0/cache/react-use-npm-17.4.0-0ef4521544-98566c4817.zip/node_modules/react-use/esm/useEffectOnce.js"],"sourcesContent":["import { ComponentType } from 'react';\n\nimport { KeyValue } from './data';\nimport { NavModel } from './navModel';\nimport { PluginMeta, GrafanaPlugin, PluginIncludeType } from './plugin';\nimport {\n  type PluginExtensionLinkConfig,\n  PluginExtensionTypes,\n  PluginExtensionComponentConfig,\n  PluginExtensionConfig,\n} from './pluginExtensions';\n\n/**\n * @public\n * The app container that is loading another plugin (panel or query editor)\n * */\nexport enum CoreApp {\n  CloudAlerting = 'cloud-alerting',\n  UnifiedAlerting = 'unified-alerting',\n  Dashboard = 'dashboard',\n  Explore = 'explore',\n  Correlations = 'correlations',\n  Unknown = 'unknown',\n  PanelEditor = 'panel-editor',\n  PanelViewer = 'panel-viewer',\n}\n\nexport interface AppRootProps<T extends KeyValue = KeyValue> {\n  meta: AppPluginMeta<T>;\n  /**\n   * base URL segment for an app, /app/pluginId\n   */\n  basename: string; // The URL path to this page\n\n  /**\n   * Pass the nav model to the container... is there a better way?\n   * @deprecated Use PluginPage component exported from @grafana/runtime instead\n   */\n  onNavChanged: (nav: NavModel) => void;\n\n  /**\n   * The URL query parameters\n   * @deprecated Use react-router instead\n   */\n  query: KeyValue;\n\n  /**\n   * The URL path to this page\n   * @deprecated Use react-router instead\n   */\n  path: string;\n}\n\nexport interface AppPluginMeta<T extends KeyValue = KeyValue> extends PluginMeta<T> {\n  // TODO anything specific to apps?\n}\n\nexport class AppPlugin<T extends KeyValue = KeyValue> extends GrafanaPlugin<AppPluginMeta<T>> {\n  private _extensionConfigs: PluginExtensionConfig[] = [];\n\n  // Content under: /a/${plugin-id}/*\n  root?: ComponentType<AppRootProps<T>>;\n\n  /**\n   * Called after the module has loaded, and before the app is used.\n   * This function may be called multiple times on the same instance.\n   * The first time, `this.meta` will be undefined\n   */\n  init(meta: AppPluginMeta<T>) {}\n\n  /**\n   * Set the component displayed under:\n   *   /a/${plugin-id}/*\n   *\n   * If the NavModel is configured, the page will have a managed frame, otheriwse it has full control.\n   */\n  setRootPage(root: ComponentType<AppRootProps<T>>) {\n    this.root = root;\n    return this;\n  }\n\n  setComponentsFromLegacyExports(pluginExports: any) {\n    if (pluginExports.ConfigCtrl) {\n      this.angularConfigCtrl = pluginExports.ConfigCtrl;\n    }\n\n    if (this.meta && this.meta.includes) {\n      for (const include of this.meta.includes) {\n        if (include.type === PluginIncludeType.page && include.component) {\n          const exp = pluginExports[include.component];\n\n          if (!exp) {\n            console.warn('App Page uses unknown component: ', include.component, this.meta);\n            continue;\n          }\n        }\n      }\n    }\n  }\n\n  get extensionConfigs() {\n    return this._extensionConfigs;\n  }\n\n  configureExtensionLink<Context extends object>(extension: Omit<PluginExtensionLinkConfig<Context>, 'type'>) {\n    this._extensionConfigs.push({\n      ...extension,\n      type: PluginExtensionTypes.link,\n    } as PluginExtensionLinkConfig);\n\n    return this;\n  }\n\n  configureExtensionComponent<Context extends object>(\n    extension: Omit<PluginExtensionComponentConfig<Context>, 'type'>\n  ) {\n    this._extensionConfigs.push({\n      ...extension,\n      type: PluginExtensionTypes.component,\n    } as PluginExtensionComponentConfig);\n\n    return this;\n  }\n}\n\n/**\n * Defines life cycle of a feature\n * @internal\n */\nexport enum FeatureState {\n  alpha = 'alpha',\n  beta = 'beta',\n}\n","import classNames from 'classnames';\nimport React, { ReactNode } from 'react';\n\nimport { Icon } from '../Icon/Icon';\nimport { Tooltip, PopoverContent } from '../Tooltip';\n\ninterface Props {\n  children: ReactNode;\n  className?: string;\n  htmlFor?: string;\n  isFocused?: boolean;\n  isInvalid?: boolean;\n  tooltip?: PopoverContent;\n  width?: number | 'auto';\n  /** Make tooltip interactive */\n  interactive?: boolean;\n}\n\nexport const FormLabel = ({\n  children,\n  isFocused,\n  isInvalid,\n  className,\n  htmlFor,\n  tooltip,\n  width,\n  interactive,\n  ...rest\n}: Props) => {\n  const classes = classNames(className, `gf-form-label width-${width ? width : '10'}`, {\n    'gf-form-label--is-focused': isFocused,\n    'gf-form-label--is-invalid': isInvalid,\n  });\n\n  return (\n    <label className={classes} {...rest} htmlFor={htmlFor}>\n      {children}\n      {tooltip && (\n        <Tooltip placement=\"top\" content={tooltip} theme={'info'} interactive={interactive}>\n          <Icon name=\"info-circle\" size=\"sm\" style={{ marginLeft: '10px' }} />\n        </Tooltip>\n      )}\n    </label>\n  );\n};\n\nexport const InlineFormLabel = FormLabel;\n","import { css, cx } from '@emotion/css';\nimport React, { InputHTMLAttributes } from 'react';\n\nimport { InlineFormLabel } from '../FormLabel/FormLabel';\nimport { Field } from '../Forms/Field';\nimport { InlineField } from '../Forms/InlineField';\nimport { PopoverContent } from '../Tooltip';\n\nexport interface Props extends InputHTMLAttributes<HTMLInputElement> {\n  label: string;\n  tooltip?: PopoverContent;\n  labelWidth?: number;\n  // If null no width will be specified not even default one\n  inputWidth?: number | null;\n  inputEl?: React.ReactNode;\n  /** Make tooltip interactive */\n  interactive?: boolean;\n}\n\nconst defaultProps = {\n  labelWidth: 6,\n  inputWidth: 12,\n};\n\n/**\n * Default form field including label used in Grafana UI. Default input element is simple <input />. You can also pass\n * custom inputEl if required in which case inputWidth and inputProps are ignored.\n * @deprecated Please use the {@link Field} component, {@link https://developers.grafana.com/ui/latest/index.html?path=/story/forms-field--simple See Storybook}.\n * For inline fields, use {@link InlineField}, {@link https://developers.grafana.com/ui/latest/index.html?path=/story/forms-inlinefield--basic See Storybook}.\n */\nexport const FormField = ({\n  label,\n  tooltip,\n  labelWidth,\n  inputWidth,\n  inputEl,\n  className,\n  interactive,\n  ...inputProps\n}: Props) => {\n  const styles = getStyles();\n  return (\n    <div className={cx(styles.formField, className)}>\n      <InlineFormLabel width={labelWidth} tooltip={tooltip} interactive={interactive}>\n        {label}\n      </InlineFormLabel>\n      {inputEl || (\n        <input\n          type=\"text\"\n          className={`gf-form-input ${inputWidth ? `width-${inputWidth}` : ''}`}\n          {...inputProps}\n          disabled={inputProps.disabled}\n        />\n      )}\n    </div>\n  );\n};\n\nFormField.displayName = 'FormField';\nFormField.defaultProps = defaultProps;\n\nconst getStyles = () => {\n  return {\n    formField: css({\n      display: 'flex',\n      flexDirection: 'row',\n      alignItems: 'flex-start',\n      textAlign: 'left',\n      position: 'relative',\n    }),\n  };\n};\n","import { ValidationRule, ValidationEvents } from '../types/input';\n\nexport enum EventsWithValidation {\n  onBlur = 'onBlur',\n  onFocus = 'onFocus',\n  onChange = 'onChange',\n}\n\nexport const validate = (value: string, validationRules: ValidationRule[]) => {\n  const errors = validationRules.reduce<string[]>((acc, currRule) => {\n    if (!currRule.rule(value)) {\n      return acc.concat(currRule.errorMessage);\n    }\n    return acc;\n  }, []);\n  return errors.length > 0 ? errors : null;\n};\n\nexport const hasValidationEvent = (event: EventsWithValidation, validationEvents: ValidationEvents | undefined) => {\n  return validationEvents && validationEvents[event];\n};\n\nexport const regexValidation = (pattern: string | RegExp, errorMessage?: string): ValidationRule => {\n  return {\n    rule: (valueToValidate: string) => {\n      return !!valueToValidate.match(pattern);\n    },\n    errorMessage: errorMessage || 'Value is not valid',\n  };\n};\n","import classNames from 'classnames';\nimport React, { PureComponent, ChangeEvent } from 'react';\n\nimport { ValidationEvents, ValidationRule } from '../../../../types';\nimport { validate, EventsWithValidation, hasValidationEvent } from '../../../../utils';\n\n/** @deprecated Please use the `Input` component, which does not require this enum. */\nexport enum LegacyInputStatus {\n  Invalid = 'invalid',\n  Valid = 'valid',\n}\n\nexport interface Props extends React.HTMLProps<HTMLInputElement> {\n  validationEvents?: ValidationEvents;\n  hideErrorMessage?: boolean;\n  inputRef?: React.LegacyRef<HTMLInputElement>;\n\n  // Override event props and append status as argument\n  onBlur?: (event: React.FocusEvent<HTMLInputElement>, status?: LegacyInputStatus) => void;\n  onFocus?: (event: React.FocusEvent<HTMLInputElement>, status?: LegacyInputStatus) => void;\n  onChange?: (event: React.ChangeEvent<HTMLInputElement>, status?: LegacyInputStatus) => void;\n}\n\ninterface State {\n  error: string | null;\n}\n\n/** @deprecated Please use the `Input` component. {@link https://developers.grafana.com/ui/latest/index.html?path=/story/forms-input--simple See Storybook for example.} */\nexport class Input extends PureComponent<Props, State> {\n  static defaultProps = {\n    className: '',\n  };\n\n  state: State = {\n    error: null,\n  };\n\n  get status() {\n    return this.state.error ? LegacyInputStatus.Invalid : LegacyInputStatus.Valid;\n  }\n\n  get isInvalid() {\n    return this.status === LegacyInputStatus.Invalid;\n  }\n\n  validatorAsync = (validationRules: ValidationRule[]) => {\n    return (evt: ChangeEvent<HTMLInputElement>) => {\n      const errors = validate(evt.target.value, validationRules);\n      this.setState((prevState) => {\n        return { ...prevState, error: errors ? errors[0] : null };\n      });\n    };\n  };\n\n  populateEventPropsWithStatus = (restProps: any, validationEvents: ValidationEvents | undefined) => {\n    const inputElementProps = { ...restProps };\n    if (!validationEvents) {\n      return inputElementProps;\n    }\n    Object.keys(EventsWithValidation).forEach((eventName) => {\n      if (hasValidationEvent(eventName as EventsWithValidation, validationEvents) || restProps[eventName]) {\n        inputElementProps[eventName] = async (evt: ChangeEvent<HTMLInputElement>) => {\n          evt.persist(); // Needed for async. https://reactjs.org/docs/events.html#event-pooling\n          if (hasValidationEvent(eventName as EventsWithValidation, validationEvents)) {\n            await this.validatorAsync(validationEvents[eventName]).apply(this, [evt]);\n          }\n          if (restProps[eventName]) {\n            restProps[eventName].apply(null, [evt, this.status]);\n          }\n        };\n      }\n    });\n    return inputElementProps;\n  };\n\n  render() {\n    const { validationEvents, className, hideErrorMessage, inputRef, ...restProps } = this.props;\n    const { error } = this.state;\n    const inputClassName = classNames('gf-form-input', { invalid: this.isInvalid }, className);\n    const inputElementProps = this.populateEventPropsWithStatus(restProps, validationEvents);\n\n    return (\n      <div style={{ flexGrow: 1 }}>\n        <input {...inputElementProps} ref={inputRef} className={inputClassName} />\n        {error && !hideErrorMessage && <span>{error}</span>}\n      </div>\n    );\n  }\n}\n","const TAG_COLORS = [\n  '#D32D20',\n  '#1E72B8',\n  '#B240A2',\n  '#705DA0',\n  '#466803',\n  '#497A3C',\n  '#3D71AA',\n  '#B15415',\n  '#890F02',\n  '#6E6E6E',\n  '#0A437C',\n  '#6D1F62',\n  '#584477',\n  '#4C7A3F',\n  '#2F4F4F',\n  '#BF1B00',\n  '#7662B1',\n  '#8A2EB8',\n  '#517A00',\n  '#000000',\n  '#3F6833',\n  '#2F575E',\n  '#99440A',\n  '#AE561A',\n  '#0E4AB4',\n  '#58140C',\n  '#052B51',\n  '#511749',\n  '#3F2B5B',\n];\n\nconst TAG_BORDER_COLORS = [\n  '#FF7368',\n  '#459EE7',\n  '#E069CF',\n  '#9683C6',\n  '#6C8E29',\n  '#76AC68',\n  '#6AA4E2',\n  '#E7823D',\n  '#AF3528',\n  '#9B9B9B',\n  '#3069A2',\n  '#934588',\n  '#7E6A9D',\n  '#88C477',\n  '#557575',\n  '#E54126',\n  '#A694DD',\n  '#B054DE',\n  '#8FC426',\n  '#262626',\n  '#658E59',\n  '#557D84',\n  '#BF6A30',\n  '#FF9B53',\n  '#3470DA',\n  '#7E3A32',\n  '#2B5177',\n  '#773D6F',\n  '#655181',\n];\n\nexport function getTagColorIndexFromName(name = ''): number {\n  const hash = djb2(name.toLowerCase());\n  return Math.abs(hash % TAG_COLORS.length);\n}\n\n/**\n * Returns tag badge background and border colors based on hashed tag name.\n * @param name tag name\n */\nexport function getTagColorsFromName(name = ''): { color: string; borderColor: string } {\n  const index = getTagColorIndexFromName(name);\n  return getTagColor(index);\n}\n\nexport function getTagColor(index: number): { color: string; borderColor: string } {\n  return { color: TAG_COLORS[index], borderColor: TAG_BORDER_COLORS[index] };\n}\n\nfunction djb2(str: string) {\n  let hash = 5381;\n  for (let i = 0; i < str.length; i++) {\n    hash = (hash << 5) + hash + str.charCodeAt(i); /* hash * 33 + c */\n  }\n  return hash;\n}\n\nexport default {\n  getTagColorsFromName,\n};\n","import { css } from '@emotion/css';\nimport React, { useMemo } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\n\nimport { useStyles2 } from '../../themes';\nimport { getTagColorsFromName } from '../../utils';\nimport { IconButton } from '../IconButton/IconButton';\n\ninterface Props {\n  name: string;\n  disabled?: boolean;\n  onRemove: (tag: string) => void;\n}\n\n/**\n * @internal\n * Only used internally by TagsInput\n * */\nexport const TagItem = ({ name, disabled, onRemove }: Props) => {\n  const { color, borderColor } = useMemo(() => getTagColorsFromName(name), [name]);\n  const styles = useStyles2(getStyles);\n\n  return (\n    <li className={styles.itemStyle} style={{ backgroundColor: color, borderColor }}>\n      <span className={styles.nameStyle}>{name}</span>\n      <IconButton\n        name=\"times\"\n        size=\"lg\"\n        disabled={disabled}\n        tooltip={`Remove \"${name}\" tag`}\n        onClick={() => onRemove(name)}\n        className={styles.buttonStyles}\n      />\n    </li>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  const height = theme.spacing.gridSize * 3;\n\n  return {\n    itemStyle: css({\n      display: 'flex',\n      gap: '3px',\n      alignItems: 'center',\n      height: `${height}px`,\n      lineHeight: `${height - 2}px`,\n      color: '#fff',\n      borderWidth: '1px',\n      borderStyle: 'solid',\n      borderRadius: theme.shape.radius.default,\n      padding: `0 ${theme.spacing(0.5)}`,\n      whiteSpace: 'nowrap',\n      textShadow: 'none',\n      fontWeight: 500,\n      fontSize: theme.typography.size.sm,\n    }),\n    nameStyle: css({\n      maxWidth: '25ch',\n      textOverflow: 'ellipsis',\n      overflow: 'hidden',\n    }),\n    buttonStyles: css({\n      margin: 0,\n      '&:hover::before': {\n        display: 'none',\n      },\n    }),\n  };\n};\n","import { css, cx } from '@emotion/css';\nimport React, { useCallback, useState } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\n\nimport { useStyles2, useTheme2 } from '../../themes/ThemeContext';\nimport { Button } from '../Button';\nimport { Input } from '../Input/Input';\n\nimport { TagItem } from './TagItem';\n\nexport interface Props {\n  placeholder?: string;\n  /** Array of selected tags */\n  tags?: string[];\n  onChange: (tags: string[]) => void;\n  width?: number;\n  id?: string;\n  className?: string;\n  /** Toggle disabled state */\n  disabled?: boolean;\n  /** Enable adding new tags when input loses focus */\n  addOnBlur?: boolean;\n  /** Toggle invalid state */\n  invalid?: boolean;\n}\n\nexport const TagsInput = ({\n  placeholder = 'New tag (enter key to add)',\n  tags = [],\n  onChange,\n  width,\n  className,\n  disabled,\n  addOnBlur,\n  invalid,\n  id,\n}: Props) => {\n  const [newTagName, setNewTagName] = useState('');\n  const styles = useStyles2(getStyles);\n  const theme = useTheme2();\n\n  const onNameChange = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n    setNewTagName(event.target.value);\n  }, []);\n\n  const onRemove = (tagToRemove: string) => {\n    onChange(tags.filter((x) => x !== tagToRemove));\n  };\n\n  const onAdd = (event?: React.MouseEvent | React.KeyboardEvent) => {\n    event?.preventDefault();\n    if (!tags.includes(newTagName)) {\n      onChange(tags.concat(newTagName));\n    }\n    setNewTagName('');\n  };\n\n  const onBlur = () => {\n    if (addOnBlur && newTagName) {\n      onAdd();\n    }\n  };\n\n  const onKeyboardAdd = (event: React.KeyboardEvent) => {\n    if (event.key === 'Enter' && newTagName !== '') {\n      onAdd(event);\n    }\n  };\n\n  return (\n    <div className={cx(styles.wrapper, className, width ? css({ width: theme.spacing(width) }) : '')}>\n      <Input\n        id={id}\n        disabled={disabled}\n        placeholder={placeholder}\n        onChange={onNameChange}\n        value={newTagName}\n        onKeyDown={onKeyboardAdd}\n        onBlur={onBlur}\n        invalid={invalid}\n        suffix={\n          <Button\n            fill=\"text\"\n            className={styles.addButtonStyle}\n            onClick={onAdd}\n            size=\"md\"\n            disabled={newTagName.length <= 0}\n          >\n            Add\n          </Button>\n        }\n      />\n      {tags?.length > 0 && (\n        <ul className={styles.tags}>\n          {tags.map((tag) => (\n            <TagItem key={tag} name={tag} onRemove={onRemove} disabled={disabled} />\n          ))}\n        </ul>\n      )}\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  wrapper: css({\n    minHeight: theme.spacing(4),\n    display: 'flex',\n    flexDirection: 'column',\n    gap: theme.spacing(1),\n    flexWrap: 'wrap',\n  }),\n  tags: css({\n    display: 'flex',\n    justifyContent: 'flex-start',\n    flexWrap: 'wrap',\n    gap: theme.spacing(0.5),\n  }),\n  addButtonStyle: css({\n    margin: `0 -${theme.spacing(1)}`,\n  }),\n});\n","import { css, cx } from '@emotion/css';\nimport { omit } from 'lodash';\nimport React, { InputHTMLAttributes } from 'react';\n\nimport { Button } from '../Button/Button';\nimport { FormField } from '../FormField/FormField';\nimport { Field } from '../Forms/Field';\nimport { SecretInput } from '../SecretInput';\nimport { PopoverContent } from '../Tooltip';\n\nexport interface Props extends Omit<InputHTMLAttributes<HTMLInputElement>, 'onReset'> {\n  // Function to use when reset is clicked. Means you have to reset the input value yourself as this is  uncontrolled\n  // component (or do something else if required).\n  onReset: (event: React.SyntheticEvent<HTMLButtonElement>) => void;\n  isConfigured: boolean;\n\n  label?: string;\n  tooltip?: PopoverContent;\n  labelWidth?: number;\n  inputWidth?: number;\n  // Placeholder of the input field when in non configured state.\n  placeholder?: string;\n  interactive?: boolean;\n}\n\nconst getSecretFormFieldStyles = () => {\n  return {\n    noRadiusInput: css({\n      borderBottomRightRadius: '0 !important',\n      borderTopRightRadius: '0 !important',\n    }),\n    noRadiusButton: css({\n      borderBottomLeftRadius: '0 !important',\n      borderTopLeftRadius: '0 !important',\n    }),\n  };\n};\n\n/**\n * Form field that has 2 states configured and not configured. If configured it will not show its contents and adds\n * a reset button that will clear the input and makes it accessible. In non configured state it behaves like normal\n * form field. This is used for passwords or anything that is encrypted on the server and is later returned encrypted\n * to the user (like datasource passwords).\n *\n * @deprecated Please use the {@link SecretInput} component with a {@link Field} instead, {@link https://developers.grafana.com/ui/latest/index.html?path=/story/forms-secretinput--basic as seen in Storybook}\n */\nexport const SecretFormField = ({\n  label = 'Password',\n  labelWidth,\n  inputWidth = 12,\n  onReset,\n  isConfigured,\n  tooltip,\n  placeholder = 'Password',\n  interactive,\n  ...inputProps\n}: Props) => {\n  const styles = getSecretFormFieldStyles();\n  return (\n    <FormField\n      label={label!}\n      tooltip={tooltip}\n      interactive={interactive}\n      labelWidth={labelWidth}\n      inputEl={\n        isConfigured ? (\n          <>\n            <input\n              type=\"text\"\n              className={cx(`gf-form-input width-${inputWidth}`, styles.noRadiusInput)}\n              disabled={true}\n              value=\"configured\"\n              {...omit(inputProps, 'value')}\n            />\n            <Button onClick={onReset} variant=\"secondary\" type=\"button\">\n              Reset\n            </Button>\n          </>\n        ) : (\n          <input\n            type=\"password\"\n            className={`gf-form-input width-${inputWidth}`}\n            placeholder={placeholder}\n            {...inputProps}\n          />\n        )\n      }\n    />\n  );\n};\n\nSecretFormField.displayName = 'SecretFormField';\n","import React from 'react';\n\nimport { InlineField } from '../../components/Forms/InlineField';\nimport { FormField } from '../FormField/FormField';\nimport { SecretFormField } from '../SecretFormField/SecretFormField';\n\nimport { HttpSettingsProps } from './types';\n\nexport const BasicAuthSettings = ({ dataSourceConfig, onChange }: HttpSettingsProps) => {\n  const password = dataSourceConfig.secureJsonData ? dataSourceConfig.secureJsonData.basicAuthPassword : '';\n\n  const onPasswordReset = () => {\n    onChange({\n      ...dataSourceConfig,\n      secureJsonData: {\n        ...dataSourceConfig.secureJsonData,\n        basicAuthPassword: '',\n      },\n      secureJsonFields: {\n        ...dataSourceConfig.secureJsonFields,\n        basicAuthPassword: false,\n      },\n    });\n  };\n\n  const onPasswordChange = (event: React.SyntheticEvent<HTMLInputElement>) => {\n    onChange({\n      ...dataSourceConfig,\n      secureJsonData: {\n        ...dataSourceConfig.secureJsonData,\n        basicAuthPassword: event.currentTarget.value,\n      },\n    });\n  };\n\n  return (\n    <>\n      <InlineField disabled={dataSourceConfig.readOnly}>\n        <FormField\n          label=\"User\"\n          labelWidth={10}\n          inputWidth={18}\n          placeholder=\"user\"\n          value={dataSourceConfig.basicAuthUser}\n          onChange={(event) => onChange({ ...dataSourceConfig, basicAuthUser: event.currentTarget.value })}\n        />\n      </InlineField>\n      <InlineField disabled={dataSourceConfig.readOnly}>\n        <SecretFormField\n          isConfigured={!!(dataSourceConfig.secureJsonFields && dataSourceConfig.secureJsonFields.basicAuthPassword)}\n          value={password || ''}\n          inputWidth={18}\n          labelWidth={10}\n          onReset={onPasswordReset}\n          onChange={onPasswordChange}\n        />\n      </InlineField>\n    </>\n  );\n};\n","import { css } from '@emotion/css';\nimport { uniqueId } from 'lodash';\nimport React, { PureComponent } from 'react';\n\nimport { DataSourceSettings } from '@grafana/data';\n\nimport { useStyles2 } from '../../themes';\nimport { Button } from '../Button';\nimport { FormField } from '../FormField/FormField';\nimport { Icon } from '../Icon/Icon';\nimport { SecretFormField } from '../SecretFormField/SecretFormField';\n\nexport interface CustomHeader {\n  id: string;\n  name: string;\n  value: string;\n  configured: boolean;\n}\n\nexport type CustomHeaders = CustomHeader[];\n\nexport interface Props {\n  dataSourceConfig: DataSourceSettings<any, any>;\n  onChange: (config: DataSourceSettings) => void;\n}\n\nexport interface State {\n  headers: CustomHeaders;\n}\n\ninterface CustomHeaderRowProps {\n  header: CustomHeader;\n  onReset: (id: string) => void;\n  onRemove: (id: string) => void;\n  onChange: (value: CustomHeader) => void;\n  onBlur: () => void;\n}\n\nconst getCustomHeaderRowStyles = () => ({\n  layout: css({\n    display: 'flex',\n    alignItems: 'center',\n    marginBottom: '4px',\n    '> *': {\n      marginLeft: '4px',\n      marginBottom: 0,\n      height: '100%',\n      '&:first-child, &:last-child': {\n        marginLeft: 0,\n      },\n    },\n  }),\n});\n\nconst CustomHeaderRow = ({ header, onBlur, onChange, onRemove, onReset }: CustomHeaderRowProps) => {\n  const styles = useStyles2(getCustomHeaderRowStyles);\n\n  return (\n    <div className={styles.layout}>\n      <FormField\n        label=\"Header\"\n        name=\"name\"\n        placeholder=\"X-Custom-Header\"\n        labelWidth={5}\n        value={header.name || ''}\n        onChange={(e) => onChange({ ...header, name: e.target.value })}\n        onBlur={onBlur}\n      />\n      <SecretFormField\n        label=\"Value\"\n        aria-label=\"Value\"\n        name=\"value\"\n        isConfigured={header.configured}\n        value={header.value}\n        labelWidth={5}\n        inputWidth={header.configured ? 11 : 12}\n        placeholder=\"Header Value\"\n        onReset={() => onReset(header.id)}\n        onChange={(e) => onChange({ ...header, value: e.target.value })}\n        onBlur={onBlur}\n      />\n      <Button\n        type=\"button\"\n        aria-label=\"Remove header\"\n        variant=\"secondary\"\n        size=\"xs\"\n        onClick={(_e) => onRemove(header.id)}\n      >\n        <Icon name=\"trash-alt\" />\n      </Button>\n    </div>\n  );\n};\n\nCustomHeaderRow.displayName = 'CustomHeaderRow';\n\nexport class CustomHeadersSettings extends PureComponent<Props, State> {\n  state: State = {\n    headers: [],\n  };\n\n  constructor(props: Props) {\n    super(props);\n    const { jsonData, secureJsonData, secureJsonFields } = this.props.dataSourceConfig;\n    this.state = {\n      headers: Object.keys(jsonData)\n        .sort()\n        .filter((key) => key.startsWith('httpHeaderName'))\n        .map((key, index) => {\n          return {\n            id: uniqueId(),\n            name: jsonData[key],\n            value: secureJsonData !== undefined ? secureJsonData[key] : '',\n            configured: (secureJsonFields && secureJsonFields[`httpHeaderValue${index + 1}`]) || false,\n          };\n        }),\n    };\n  }\n\n  updateSettings = () => {\n    const { headers } = this.state;\n\n    // we remove every httpHeaderName* field\n    const newJsonData = Object.fromEntries(\n      Object.entries(this.props.dataSourceConfig.jsonData).filter(([key, val]) => !key.startsWith('httpHeaderName'))\n    );\n\n    // we remove every httpHeaderValue* field\n    const newSecureJsonData = Object.fromEntries(\n      Object.entries(this.props.dataSourceConfig.secureJsonData || {}).filter(\n        ([key, val]) => !key.startsWith('httpHeaderValue')\n      )\n    );\n\n    // then we add the current httpHeader-fields\n    for (const [index, header] of headers.entries()) {\n      newJsonData[`httpHeaderName${index + 1}`] = header.name;\n      if (!header.configured) {\n        newSecureJsonData[`httpHeaderValue${index + 1}`] = header.value;\n      }\n    }\n\n    this.props.onChange({\n      ...this.props.dataSourceConfig,\n      jsonData: newJsonData,\n      secureJsonData: newSecureJsonData,\n    });\n  };\n\n  onHeaderAdd = () => {\n    this.setState((prevState) => {\n      return { headers: [...prevState.headers, { id: uniqueId(), name: '', value: '', configured: false }] };\n    });\n  };\n\n  onHeaderChange = (headerIndex: number, value: CustomHeader) => {\n    this.setState(({ headers }) => {\n      return {\n        headers: headers.map((item, index) => {\n          if (headerIndex !== index) {\n            return item;\n          }\n          return { ...value };\n        }),\n      };\n    });\n  };\n\n  onHeaderReset = (headerId: string) => {\n    this.setState(({ headers }) => {\n      return {\n        headers: headers.map((h, i) => {\n          if (h.id !== headerId) {\n            return h;\n          }\n          return {\n            ...h,\n            value: '',\n            configured: false,\n          };\n        }),\n      };\n    });\n  };\n\n  onHeaderRemove = (headerId: string) => {\n    this.setState(\n      ({ headers }) => ({\n        headers: headers.filter((h) => h.id !== headerId),\n      }),\n      this.updateSettings\n    );\n  };\n\n  render() {\n    const { headers } = this.state;\n    const { dataSourceConfig } = this.props;\n\n    return (\n      <div className={'gf-form-group'}>\n        <div className=\"gf-form\">\n          <h6>Custom HTTP Headers</h6>\n        </div>\n        <div>\n          {headers.map((header, i) => (\n            <CustomHeaderRow\n              key={header.id}\n              header={header}\n              onChange={(h) => {\n                this.onHeaderChange(i, h);\n              }}\n              onBlur={this.updateSettings}\n              onRemove={this.onHeaderRemove}\n              onReset={this.onHeaderReset}\n            />\n          ))}\n        </div>\n        {!dataSourceConfig.readOnly && (\n          <div className=\"gf-form\">\n            <Button\n              variant=\"secondary\"\n              icon=\"plus\"\n              type=\"button\"\n              onClick={(e) => {\n                this.onHeaderAdd();\n              }}\n            >\n              Add header\n            </Button>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default CustomHeadersSettings;\n","import React from 'react';\n\nimport { InlineField } from '../Forms/InlineField';\nimport { InlineSwitch } from '../Switch/Switch';\n\nimport { HttpSettingsBaseProps } from './types';\n\nconst LABEL_WIDTH = 26;\n\nexport const HttpProxySettings = ({\n  dataSourceConfig,\n  onChange,\n  showForwardOAuthIdentityOption = true,\n}: HttpSettingsBaseProps) => {\n  return (\n    <>\n      <div className=\"gf-form-inline\">\n        <InlineField label=\"TLS Client Auth\" labelWidth={LABEL_WIDTH} disabled={dataSourceConfig.readOnly}>\n          <InlineSwitch\n            id=\"http-settings-tls-client-auth\"\n            value={dataSourceConfig.jsonData.tlsAuth || false}\n            onChange={(event) => onChange({ ...dataSourceConfig.jsonData, tlsAuth: event!.currentTarget.checked })}\n          />\n        </InlineField>\n        <InlineField\n          label=\"With CA Cert\"\n          tooltip=\"Needed for verifying self-signed TLS Certs\"\n          labelWidth={LABEL_WIDTH}\n          disabled={dataSourceConfig.readOnly}\n        >\n          <InlineSwitch\n            id=\"http-settings-ca-cert\"\n            value={dataSourceConfig.jsonData.tlsAuthWithCACert || false}\n            onChange={(event) =>\n              onChange({ ...dataSourceConfig.jsonData, tlsAuthWithCACert: event!.currentTarget.checked })\n            }\n          />\n        </InlineField>\n      </div>\n      <div className=\"gf-form-inline\">\n        <InlineField label=\"Skip TLS Verify\" labelWidth={LABEL_WIDTH} disabled={dataSourceConfig.readOnly}>\n          <InlineSwitch\n            id=\"http-settings-skip-tls-verify\"\n            value={dataSourceConfig.jsonData.tlsSkipVerify || false}\n            onChange={(event) =>\n              onChange({ ...dataSourceConfig.jsonData, tlsSkipVerify: event!.currentTarget.checked })\n            }\n          />\n        </InlineField>\n      </div>\n      {showForwardOAuthIdentityOption && (\n        <div className=\"gf-form-inline\">\n          <InlineField\n            label=\"Forward OAuth Identity\"\n            tooltip=\"Forward the user's upstream OAuth identity to the data source (Their access token gets passed along).\"\n            labelWidth={LABEL_WIDTH}\n            disabled={dataSourceConfig.readOnly}\n          >\n            <InlineSwitch\n              id=\"http-settings-forward-oauth\"\n              value={dataSourceConfig.jsonData.oauthPassThru || false}\n              onChange={(event) =>\n                onChange({ ...dataSourceConfig.jsonData, oauthPassThru: event!.currentTarget.checked })\n              }\n            />\n          </InlineField>\n        </div>\n      )}\n    </>\n  );\n};\n","import React, { ChangeEvent, MouseEvent } from 'react';\n\nimport { Button } from '../Button';\nimport { InlineField } from '../Forms/InlineField';\nimport { InlineFieldRow } from '../Forms/InlineFieldRow';\nimport { Input } from '../Input/Input';\nimport { TextArea } from '../TextArea/TextArea';\n\ninterface Props {\n  label: string;\n  hasCert: boolean;\n  placeholder: string;\n\n  onChange: (event: ChangeEvent<HTMLTextAreaElement>) => void;\n  onClick: (event: MouseEvent<HTMLButtonElement>) => void;\n}\n\nexport const CertificationKey = ({ hasCert, label, onChange, onClick, placeholder }: Props) => {\n  return (\n    <InlineFieldRow>\n      <InlineField label={label} labelWidth={14} disabled={hasCert}>\n        {hasCert ? (\n          <Input type=\"text\" value=\"configured\" width={24} />\n        ) : (\n          <TextArea rows={7} onChange={onChange} placeholder={placeholder} required />\n        )}\n      </InlineField>\n      {hasCert && (\n        <Button variant=\"secondary\" onClick={onClick} style={{ marginLeft: 4 }}>\n          Reset\n        </Button>\n      )}\n    </InlineFieldRow>\n  );\n};\n","import { css, cx } from '@emotion/css';\nimport React from 'react';\n\nimport { KeyValue } from '@grafana/data';\n\nimport { FormField } from '../FormField/FormField';\nimport { Icon } from '../Icon/Icon';\nimport { Tooltip } from '../Tooltip/Tooltip';\n\nimport { CertificationKey } from './CertificationKey';\nimport { HttpSettingsBaseProps } from './types';\n\nexport const TLSAuthSettings = ({ dataSourceConfig, onChange }: HttpSettingsBaseProps) => {\n  const hasTLSCACert = dataSourceConfig.secureJsonFields && dataSourceConfig.secureJsonFields.tlsCACert;\n  const hasTLSClientCert = dataSourceConfig.secureJsonFields && dataSourceConfig.secureJsonFields.tlsClientCert;\n  const hasTLSClientKey = dataSourceConfig.secureJsonFields && dataSourceConfig.secureJsonFields.tlsClientKey;\n  const hasServerName = dataSourceConfig.jsonData && dataSourceConfig.jsonData.serverName;\n\n  const onResetClickFactory = (field: string) => (event: React.MouseEvent<HTMLButtonElement>) => {\n    event.preventDefault();\n    const newSecureJsonFields: KeyValue<boolean> = { ...dataSourceConfig.secureJsonFields };\n    newSecureJsonFields[field] = false;\n    onChange({\n      ...dataSourceConfig,\n      secureJsonFields: newSecureJsonFields,\n    });\n  };\n\n  const onCertificateChangeFactory = (field: string) => (event: React.SyntheticEvent<HTMLTextAreaElement>) => {\n    const newSecureJsonData = { ...dataSourceConfig.secureJsonData };\n    newSecureJsonData[field] = event.currentTarget.value;\n\n    onChange({\n      ...dataSourceConfig,\n      secureJsonData: newSecureJsonData,\n    });\n  };\n\n  const onServerNameLabelChange = (event: React.SyntheticEvent<HTMLInputElement>) => {\n    const newJsonData = {\n      ...dataSourceConfig.jsonData,\n      serverName: event.currentTarget.value,\n    };\n\n    onChange({\n      ...dataSourceConfig,\n      jsonData: newJsonData,\n    });\n  };\n\n  return (\n    <div className=\"gf-form-group\">\n      <div\n        className={cx(\n          'gf-form',\n          css({\n            alignItems: 'baseline',\n          })\n        )}\n      >\n        <h6>TLS/SSL Auth Details</h6>\n        <Tooltip\n          placement=\"right-end\"\n          content=\"TLS/SSL Certs are encrypted and stored in the Grafana database.\"\n          theme=\"info\"\n        >\n          <Icon name=\"info-circle\" size=\"xs\" style={{ marginLeft: '10px' }} />\n        </Tooltip>\n      </div>\n      <div>\n        {dataSourceConfig.jsonData.tlsAuthWithCACert && (\n          <CertificationKey\n            hasCert={!!hasTLSCACert}\n            onChange={onCertificateChangeFactory('tlsCACert')}\n            placeholder=\"Begins with -----BEGIN CERTIFICATE-----\"\n            label=\"CA Cert\"\n            onClick={onResetClickFactory('tlsCACert')}\n          />\n        )}\n\n        {dataSourceConfig.jsonData.tlsAuth && (\n          <>\n            <div className=\"gf-form\">\n              <FormField\n                label=\"ServerName\"\n                labelWidth={7}\n                inputWidth={30}\n                placeholder=\"domain.example.com\"\n                value={hasServerName && dataSourceConfig.jsonData.serverName}\n                onChange={onServerNameLabelChange}\n              />\n            </div>\n            <CertificationKey\n              hasCert={!!hasTLSClientCert}\n              label=\"Client Cert\"\n              onChange={onCertificateChangeFactory('tlsClientCert')}\n              placeholder=\"Begins with -----BEGIN CERTIFICATE-----\"\n              onClick={onResetClickFactory('tlsClientCert')}\n            />\n\n            <CertificationKey\n              hasCert={!!hasTLSClientKey}\n              label=\"Client Key\"\n              placeholder=\"Begins with -----BEGIN RSA PRIVATE KEY-----\"\n              onChange={onCertificateChangeFactory('tlsClientKey')}\n              onClick={onResetClickFactory('tlsClientKey')}\n            />\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n","import { css, cx } from '@emotion/css';\nimport React, { useState, useCallback } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\n\nimport { useTheme2 } from '../../themes';\nimport { FormField } from '../FormField/FormField';\nimport { InlineFormLabel } from '../FormLabel/FormLabel';\nimport { InlineField } from '../Forms/InlineField';\nimport { Input } from '../Forms/Legacy/Input/Input';\nimport { Icon } from '../Icon/Icon';\nimport { Select } from '../Select/Select';\nimport { InlineSwitch } from '../Switch/Switch';\nimport { TagsInput } from '../TagsInput/TagsInput';\n\nimport { BasicAuthSettings } from './BasicAuthSettings';\nimport { CustomHeadersSettings } from './CustomHeadersSettings';\nimport { HttpProxySettings } from './HttpProxySettings';\nimport { SecureSocksProxySettings } from './SecureSocksProxySettings';\nimport { TLSAuthSettings } from './TLSAuthSettings';\nimport { HttpSettingsProps } from './types';\n\nconst ACCESS_OPTIONS: Array<SelectableValue<string>> = [\n  {\n    label: 'Server (default)',\n    value: 'proxy',\n  },\n  {\n    label: 'Browser',\n    value: 'direct',\n  },\n];\n\nconst DEFAULT_ACCESS_OPTION = {\n  label: 'Server (default)',\n  value: 'proxy',\n};\n\nconst HttpAccessHelp = () => (\n  <div className=\"grafana-info-box m-t-2\">\n    <p>\n      Access mode controls how requests to the data source will be handled.\n      <strong>\n        &nbsp;<i>Server</i>\n      </strong>{' '}\n      should be the preferred way if nothing else is stated.\n    </p>\n    <div className=\"alert-title\">Server access mode (Default):</div>\n    <p>\n      All requests will be made from the browser to Grafana backend/server which in turn will forward the requests to\n      the data source and by that circumvent possible Cross-Origin Resource Sharing (CORS) requirements. The URL needs\n      to be accessible from the grafana backend/server if you select this access mode.\n    </p>\n    <div className=\"alert-title\">Browser access mode:</div>\n    <p>\n      All requests will be made from the browser directly to the data source and may be subject to Cross-Origin Resource\n      Sharing (CORS) requirements. The URL needs to be accessible from the browser if you select this access mode.\n    </p>\n  </div>\n);\n\nconst LABEL_WIDTH = 26;\n\nexport const DataSourceHttpSettings = (props: HttpSettingsProps) => {\n  const {\n    defaultUrl,\n    dataSourceConfig,\n    onChange,\n    showAccessOptions,\n    sigV4AuthToggleEnabled,\n    showForwardOAuthIdentityOption,\n    azureAuthSettings,\n    renderSigV4Editor,\n    secureSocksDSProxyEnabled,\n    urlLabel,\n    urlDocs,\n  } = props;\n\n  const [isAccessHelpVisible, setIsAccessHelpVisible] = useState(false);\n  const [azureAuthEnabled, setAzureAuthEnabled] = useState(false);\n  const theme = useTheme2();\n  let urlTooltip;\n\n  const onSettingsChange = useCallback(\n    (change: Partial<typeof dataSourceConfig>) => {\n      // Azure Authentication doesn't work correctly when Forward OAuth Identity is enabled.\n      // The Authorization header that has been set by the ApplyAzureAuth middleware gets overwritten\n      // with the Authorization header set by the OAuthTokenMiddleware.\n      const isAzureAuthEnabled =\n        (azureAuthSettings?.azureAuthSupported && azureAuthSettings.getAzureAuthEnabled(dataSourceConfig)) || false;\n      setAzureAuthEnabled(isAzureAuthEnabled);\n      if (isAzureAuthEnabled) {\n        const tmpOauthPassThru =\n          dataSourceConfig.jsonData.oauthPassThru !== undefined ? dataSourceConfig.jsonData.oauthPassThru : false;\n        change = {\n          ...change,\n          jsonData: {\n            ...dataSourceConfig.jsonData,\n            oauthPassThru: isAzureAuthEnabled ? false : tmpOauthPassThru,\n          },\n        };\n      }\n\n      onChange({\n        ...dataSourceConfig,\n        ...change,\n      });\n    },\n    [azureAuthSettings, dataSourceConfig, onChange]\n  );\n\n  switch (dataSourceConfig.access) {\n    case 'direct':\n      urlTooltip = (\n        <>\n          Your access method is <em>Browser</em>, this means the URL needs to be accessible from the browser.\n          {urlDocs}\n        </>\n      );\n      break;\n    case 'proxy':\n      urlTooltip = (\n        <>\n          Your access method is <em>Server</em>, this means the URL needs to be accessible from the grafana\n          backend/server.\n          {urlDocs}\n        </>\n      );\n      break;\n    default:\n      urlTooltip = <>Specify a complete HTTP URL (for example http://your_server:8080) {urlDocs}</>;\n  }\n\n  const accessSelect = (\n    <Select\n      aria-label=\"Access\"\n      className=\"width-20 gf-form-input\"\n      options={ACCESS_OPTIONS}\n      value={ACCESS_OPTIONS.filter((o) => o.value === dataSourceConfig.access)[0] || DEFAULT_ACCESS_OPTION}\n      onChange={(selectedValue) => onSettingsChange({ access: selectedValue.value })}\n      disabled={dataSourceConfig.readOnly}\n    />\n  );\n\n  const isValidUrl = /^(ftp|http|https):\\/\\/(\\w+:{0,1}\\w*@)?(\\S+)(:[0-9]+)?(\\/|\\/([\\w#!:.?+=&%@!\\-\\/]))?$/.test(\n    dataSourceConfig.url\n  );\n\n  const notValidStyle = css({\n    boxShadow: `inset 0 0px 5px ${theme.v1.palette.red}`,\n  });\n\n  const inputStyle = cx({ [`width-20`]: true, [notValidStyle]: !isValidUrl });\n\n  const urlInput = (\n    <Input\n      className={inputStyle}\n      placeholder={defaultUrl}\n      value={dataSourceConfig.url}\n      aria-label={selectors.components.DataSource.DataSourceHttpSettings.urlInput}\n      onChange={(event) => onSettingsChange({ url: event.currentTarget.value })}\n      disabled={dataSourceConfig.readOnly}\n    />\n  );\n\n  return (\n    <div className=\"gf-form-group\">\n      <>\n        <h3 className=\"page-heading\">HTTP</h3>\n        <div className=\"gf-form-group\">\n          <div className=\"gf-form\">\n            <FormField\n              interactive={urlDocs ? true : false}\n              label={urlLabel ?? 'URL'}\n              labelWidth={13}\n              tooltip={urlTooltip}\n              inputEl={urlInput}\n            />\n          </div>\n\n          {showAccessOptions && (\n            <>\n              <div className=\"gf-form-inline\">\n                <div className=\"gf-form\">\n                  <FormField label=\"Access\" labelWidth={13} inputWidth={20} inputEl={accessSelect} />\n                </div>\n                <div className=\"gf-form\">\n                  <button\n                    type=\"button\"\n                    className=\"gf-form-label query-keyword pointer\"\n                    onClick={() => setIsAccessHelpVisible((isVisible) => !isVisible)}\n                  >\n                    Help&nbsp;\n                    <Icon name={isAccessHelpVisible ? 'angle-down' : 'angle-right'} style={{ marginBottom: 0 }} />\n                  </button>\n                </div>\n              </div>\n              {isAccessHelpVisible && <HttpAccessHelp />}\n            </>\n          )}\n          {dataSourceConfig.access === 'proxy' && (\n            <div className=\"gf-form-group\">\n              <div className=\"gf-form\">\n                <InlineFormLabel\n                  width={13}\n                  tooltip=\"Grafana proxy deletes forwarded cookies by default. Specify cookies by name that should be forwarded to the data source.\"\n                >\n                  Allowed cookies\n                </InlineFormLabel>\n                <TagsInput\n                  tags={dataSourceConfig.jsonData.keepCookies}\n                  width={40}\n                  onChange={(cookies) =>\n                    onSettingsChange({ jsonData: { ...dataSourceConfig.jsonData, keepCookies: cookies } })\n                  }\n                  disabled={dataSourceConfig.readOnly}\n                />\n              </div>\n              <div className=\"gf-form\">\n                <FormField\n                  label=\"Timeout\"\n                  type=\"number\"\n                  labelWidth={13}\n                  inputWidth={20}\n                  tooltip=\"HTTP request timeout in seconds\"\n                  placeholder=\"Timeout in seconds\"\n                  aria-label=\"Timeout in seconds\"\n                  value={dataSourceConfig.jsonData.timeout}\n                  onChange={(event) => {\n                    onSettingsChange({\n                      jsonData: { ...dataSourceConfig.jsonData, timeout: parseInt(event.currentTarget.value, 10) },\n                    });\n                  }}\n                  disabled={dataSourceConfig.readOnly}\n                />\n              </div>\n            </div>\n          )}\n        </div>\n      </>\n\n      <>\n        <h3 className=\"page-heading\">Auth</h3>\n        <div className=\"gf-form-group\">\n          <div className=\"gf-form-inline\">\n            <InlineField label=\"Basic auth\" labelWidth={LABEL_WIDTH} disabled={dataSourceConfig.readOnly}>\n              <InlineSwitch\n                id=\"http-settings-basic-auth\"\n                value={dataSourceConfig.basicAuth}\n                onChange={(event) => {\n                  onSettingsChange({ basicAuth: event!.currentTarget.checked });\n                }}\n              />\n            </InlineField>\n\n            <InlineField\n              label=\"With Credentials\"\n              tooltip=\"Whether credentials such as cookies or auth headers should be sent with cross-site requests.\"\n              labelWidth={LABEL_WIDTH}\n              disabled={dataSourceConfig.readOnly}\n            >\n              <InlineSwitch\n                id=\"http-settings-with-credentials\"\n                value={dataSourceConfig.withCredentials}\n                onChange={(event) => {\n                  onSettingsChange({ withCredentials: event!.currentTarget.checked });\n                }}\n              />\n            </InlineField>\n          </div>\n\n          {azureAuthSettings?.azureAuthSupported && (\n            <div className=\"gf-form-inline\">\n              <InlineField\n                label=\"Azure Authentication\"\n                tooltip=\"Use Azure authentication for Azure endpoint.\"\n                labelWidth={LABEL_WIDTH}\n                disabled={dataSourceConfig.readOnly}\n              >\n                <InlineSwitch\n                  id=\"http-settings-azure-auth\"\n                  value={azureAuthEnabled}\n                  onChange={(event) => {\n                    onSettingsChange(\n                      azureAuthSettings.setAzureAuthEnabled(dataSourceConfig, event!.currentTarget.checked)\n                    );\n                  }}\n                />\n              </InlineField>\n            </div>\n          )}\n\n          {sigV4AuthToggleEnabled && (\n            <div className=\"gf-form-inline\">\n              <InlineField label=\"SigV4 auth\" labelWidth={LABEL_WIDTH} disabled={dataSourceConfig.readOnly}>\n                <InlineSwitch\n                  id=\"http-settings-sigv4-auth\"\n                  value={dataSourceConfig.jsonData.sigV4Auth || false}\n                  onChange={(event) => {\n                    onSettingsChange({\n                      jsonData: { ...dataSourceConfig.jsonData, sigV4Auth: event!.currentTarget.checked },\n                    });\n                  }}\n                />\n              </InlineField>\n            </div>\n          )}\n\n          {dataSourceConfig.access === 'proxy' && (\n            <HttpProxySettings\n              dataSourceConfig={dataSourceConfig}\n              onChange={(jsonData) => onSettingsChange({ jsonData })}\n              showForwardOAuthIdentityOption={azureAuthEnabled ? false : showForwardOAuthIdentityOption}\n            />\n          )}\n        </div>\n        {dataSourceConfig.basicAuth && (\n          <>\n            <h6>Basic Auth Details</h6>\n            <div className=\"gf-form-group\">\n              <BasicAuthSettings {...props} />\n            </div>\n          </>\n        )}\n\n        {azureAuthSettings?.azureAuthSupported && azureAuthEnabled && azureAuthSettings.azureSettingsUI && (\n          <azureAuthSettings.azureSettingsUI dataSourceConfig={dataSourceConfig} onChange={onChange} />\n        )}\n\n        {dataSourceConfig.jsonData.sigV4Auth && sigV4AuthToggleEnabled && renderSigV4Editor}\n        {(dataSourceConfig.jsonData.tlsAuth || dataSourceConfig.jsonData.tlsAuthWithCACert) && (\n          <TLSAuthSettings dataSourceConfig={dataSourceConfig} onChange={onChange} />\n        )}\n\n        {dataSourceConfig.access === 'proxy' && (\n          <CustomHeadersSettings dataSourceConfig={dataSourceConfig} onChange={onChange} />\n        )}\n      </>\n      {secureSocksDSProxyEnabled && <SecureSocksProxySettings options={dataSourceConfig} onOptionsChange={onChange} />}\n    </div>\n  );\n};\n","import React from 'react';\n\nimport { DataSourcePluginOptionsEditorProps } from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport { DataSourceHttpSettings } from '@grafana/ui';\n\nimport { ParcaDataSourceOptions } from './types';\n\ninterface Props extends DataSourcePluginOptionsEditorProps<ParcaDataSourceOptions> {}\n\nexport const ConfigEditor = (props: Props) => {\n  const { options, onOptionsChange } = props;\n\n  return (\n    <>\n      <DataSourceHttpSettings\n        defaultUrl={'http://localhost:7070'}\n        dataSourceConfig={options}\n        showAccessOptions={false}\n        onChange={onOptionsChange}\n        secureSocksDSProxyEnabled={config.secureSocksDSProxyEnabled}\n      />\n    </>\n  );\n};\n","import useEffectOnce from './useEffectOnce';\nvar useMount = function (fn) {\n    useEffectOnce(function () {\n        fn();\n    });\n};\nexport default useMount;\n","import { SingleValueType, BaseOptionType as RCCascaderOption } from 'rc-cascader/lib/Cascader';\n\nimport { CascaderOption } from './Cascader';\n\ntype onChangeType = ((values: string[], options: CascaderOption[]) => void) | undefined;\n\nexport const onChangeCascader = (onChanged: onChangeType) => (values: SingleValueType, options: RCCascaderOption[]) => {\n  if (onChanged) {\n    // map values to strings for backwards compatibility with Cascader components\n    onChanged(\n      values.map((value) => String(value)),\n      fromRCOptions(options)\n    );\n  }\n};\n\ntype onLoadDataType = ((options: CascaderOption[]) => void) | undefined;\n\nexport const onLoadDataCascader = (onLoadData: onLoadDataType) => (options: RCCascaderOption[]) => {\n  if (onLoadData) {\n    onLoadData(fromRCOptions(options));\n  }\n};\n\nconst fromRCOptions = (options: RCCascaderOption[]): CascaderOption[] => {\n  return options.map(fromRCOption);\n};\n\nconst fromRCOption = (option: RCCascaderOption): CascaderOption => {\n  return {\n    value: option.value ?? '',\n    label: option.label,\n  };\n};\n","import { css } from '@emotion/css';\nimport RCCascader from 'rc-cascader';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\n\nimport { useStyles2 } from '../../themes';\nimport { IconName } from '../../types/icon';\nimport { Button, ButtonProps } from '../Button';\nimport { CascaderOption } from '../Cascader/Cascader';\nimport { onChangeCascader, onLoadDataCascader } from '../Cascader/optionMappings';\nimport { Icon } from '../Icon/Icon';\n\nexport interface ButtonCascaderProps {\n  options: CascaderOption[];\n  children?: string;\n  icon?: IconName;\n  disabled?: boolean;\n  value?: string[];\n  fieldNames?: { label: string; value: string; children: string };\n  loadData?: (selectedOptions: CascaderOption[]) => void;\n  onChange?: (value: string[], selectedOptions: CascaderOption[]) => void;\n  onPopupVisibleChange?: (visible: boolean) => void;\n  className?: string;\n  variant?: ButtonProps['variant'];\n  buttonProps?: ButtonProps;\n  hideDownIcon?: boolean;\n}\n\nexport const ButtonCascader = (props: ButtonCascaderProps) => {\n  const { onChange, className, loadData, icon, buttonProps, hideDownIcon, variant, disabled, ...rest } = props;\n  const styles = useStyles2(getStyles);\n\n  // Weird way to do this bit it goes around a styling issue in Button where even null/undefined child triggers\n  // styling change which messes up the look if there is only single icon content.\n  let content: React.ReactNode = props.children;\n  if (!hideDownIcon) {\n    content = [props.children, <Icon key={'down-icon'} name=\"angle-down\" className={styles.icons.right} />];\n  }\n\n  return (\n    <RCCascader\n      onChange={onChangeCascader(onChange)}\n      loadData={onLoadDataCascader(loadData)}\n      dropdownClassName={styles.popup}\n      {...rest}\n      expandIcon={null}\n    >\n      <Button icon={icon} disabled={disabled} variant={variant} {...(buttonProps ?? {})}>\n        {content}\n      </Button>\n    </RCCascader>\n  );\n};\n\nButtonCascader.displayName = 'ButtonCascader';\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    popup: css({\n      label: 'popup',\n      zIndex: theme.zIndex.dropdown,\n    }),\n    icons: {\n      right: css({\n        margin: '1px 0 0 4px',\n      }),\n      left: css({\n        margin: '-1px 4px 0 0',\n      }),\n    },\n  };\n};\n","// Code generated - EDITING IS FUTILE. DO NOT EDIT.\n//\n// Generated by:\n//     public/app/plugins/gen.go\n// Using jennies:\n//     TSTypesJenny\n//     PluginTSTypesJenny\n//\n// Run 'make gen-cue' from repository root to regenerate.\n\nimport * as common from '@grafana/schema';\n\nexport type ParcaQueryType = ('metrics' | 'profile' | 'both');\n\nexport const defaultParcaQueryType: ParcaQueryType = 'both';\n\nexport interface Parca extends common.DataQuery {\n  /**\n   * Specifies the query label selectors.\n   */\n  labelSelector: string;\n  /**\n   * Specifies the type of profile to query.\n   */\n  profileTypeId: string;\n}\n\nexport const defaultParca: Partial<Parca> = {\n  labelSelector: '{}',\n};\n","import { css } from '@emotion/css';\nimport React, { CSSProperties } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\n\ninterface StackProps {\n  direction?: CSSProperties['flexDirection'];\n  alignItems?: CSSProperties['alignItems'];\n  wrap?: boolean;\n  gap?: number;\n  flexGrow?: CSSProperties['flexGrow'];\n  children: React.ReactNode;\n}\n\nexport function Stack(props: StackProps) {\n  const styles = useStyles2(getStyles, props);\n  return <div className={styles.root}>{props.children}</div>;\n}\n\nconst getStyles = (theme: GrafanaTheme2, props: StackProps) => ({\n  root: css({\n    display: 'flex',\n    flexDirection: props.direction ?? 'row',\n    flexWrap: props.wrap ?? true ? 'wrap' : undefined,\n    alignItems: props.alignItems,\n    gap: theme.spacing(props.gap ?? 2),\n    flexGrow: props.flexGrow,\n  }),\n});\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\n\nimport { Stack } from './Stack';\n\ninterface EditorRowProps {\n  children: React.ReactNode;\n  stackProps?: Partial<React.ComponentProps<typeof Stack>>;\n}\n\nexport const EditorRow = ({ children, stackProps }: EditorRowProps) => {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={styles.root}>\n      <Stack gap={2} {...stackProps}>\n        {children}\n      </Stack>\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    root: css({\n      padding: theme.spacing(1),\n      backgroundColor: theme.colors.background.secondary,\n      borderRadius: theme.shape.radius.default,\n    }),\n  };\n};\n","import React from 'react';\n\nimport { Stack } from './Stack';\n\ninterface EditorRowsProps {\n  children: React.ReactNode;\n}\n\nexport const EditorRows = ({ children }: EditorRowsProps) => {\n  return (\n    <Stack gap={0.5} direction=\"column\">\n      {children}\n    </Stack>\n  );\n};\n","import { useRef } from 'react';\nvar useLatest = function (value) {\n    var ref = useRef(value);\n    ref.current = value;\n    return ref;\n};\nexport default useLatest;\n","import { language, languageConfiguration } from './lang';\n\nexport const languageDefinition = {\n  id: 'parca',\n  extensions: ['.parca'],\n  aliases: ['parca'],\n  mimetypes: [],\n  def: {\n    language,\n    languageConfiguration,\n  },\n};\n","import type { languages } from 'monaco-editor';\n\nexport const languageConfiguration: languages.LanguageConfiguration = {\n  // the default separators except `@$`\n  wordPattern: /(-?\\d*\\.\\d\\w*)|([^`~!#%^&*()\\-=+\\[{\\]}\\\\|;:'\",.<>\\/?\\s]+)/g,\n  brackets: [['{', '}']],\n  autoClosingPairs: [\n    { open: '{', close: '}' },\n    { open: '\"', close: '\"' },\n    { open: \"'\", close: \"'\" },\n  ],\n  surroundingPairs: [\n    { open: '{', close: '}' },\n    { open: '\"', close: '\"' },\n    { open: \"'\", close: \"'\" },\n  ],\n  folding: {},\n};\n\nexport const language: languages.IMonarchLanguage = {\n  ignoreCase: false,\n  defaultToken: '',\n  tokenPostfix: '.fireql',\n\n  keywords: [],\n  operators: [],\n\n  // we include these common regular expressions\n  symbols: /[=><!~?:&|+\\-*\\/^%]+/,\n  escapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n  digits: /\\d+(_+\\d+)*/,\n  octaldigits: /[0-7]+(_+[0-7]+)*/,\n  binarydigits: /[0-1]+(_+[0-1]+)*/,\n  hexdigits: /[[0-9a-fA-F]+(_+[0-9a-fA-F]+)*/,\n  integersuffix: /(ll|LL|u|U|l|L)?(ll|LL|u|U|l|L)?/,\n  floatsuffix: /[fFlL]?/,\n\n  tokenizer: {\n    root: [\n      // labels\n      [/[a-z_]\\w*(?=\\s*(=|!=|=~|!~))/, 'tag'],\n\n      // strings\n      [/\"([^\"\\\\]|\\\\.)*$/, 'string.invalid'], // non-teminated string\n      [/'([^'\\\\]|\\\\.)*$/, 'string.invalid'], // non-teminated string\n      [/\"/, 'string', '@string_double'],\n      [/'/, 'string', '@string_single'],\n\n      // whitespace\n      { include: '@whitespace' },\n\n      // delimiters and operators\n      [/[{}()\\[\\]]/, '@brackets'],\n      [/[<>](?!@symbols)/, '@brackets'],\n      [\n        /@symbols/,\n        {\n          cases: {\n            '@operators': 'delimiter',\n            '@default': '',\n          },\n        },\n      ],\n\n      // numbers\n      [/\\d+/, 'number'],\n      [/\\d*\\d+[eE]([\\-+]?\\d+)?(@floatsuffix)/, 'number.float'],\n      [/\\d*\\.\\d+([eE][\\-+]?\\d+)?(@floatsuffix)/, 'number.float'],\n      [/0[xX][0-9a-fA-F']*[0-9a-fA-F](@integersuffix)/, 'number.hex'],\n      [/0[0-7']*[0-7](@integersuffix)/, 'number.octal'],\n      [/0[bB][0-1']*[0-1](@integersuffix)/, 'number.binary'],\n      [/\\d[\\d']*\\d(@integersuffix)/, 'number'],\n      [/\\d(@integersuffix)/, 'number'],\n    ],\n\n    string_double: [\n      [/[^\\\\\"]+/, 'string'],\n      [/@escapes/, 'string.escape'],\n      [/\\\\./, 'string.escape.invalid'],\n      [/\"/, 'string', '@pop'],\n    ],\n\n    string_single: [\n      [/[^\\\\']+/, 'string'],\n      [/@escapes/, 'string.escape'],\n      [/\\\\./, 'string.escape.invalid'],\n      [/'/, 'string', '@pop'],\n    ],\n\n    clauses: [\n      [/[^(,)]/, 'tag'],\n      [/\\)/, 'identifier', '@pop'],\n    ],\n\n    whitespace: [[/[ \\t\\r\\n]+/, 'white']],\n  },\n};\n","import { monacoTypes, Monaco } from '@grafana/ui';\n\n/**\n * Class that implements CompletionItemProvider interface and allows us to provide suggestion for the Monaco\n * autocomplete system.\n *\n * At this moment we just pass it all the labels/values we get from Fire backend later on we may do something a bit\n * smarter if there will be lots of labels.\n */\nexport class CompletionProvider implements monacoTypes.languages.CompletionItemProvider {\n  triggerCharacters = ['{', ',', '[', '(', '=', '~', ' ', '\"'];\n\n  private labels: { [label: string]: string[] } = {};\n\n  constructor(\n    private datasource: {\n      getLabelNames: () => Promise<string[]>;\n      getLabelValues: (label: string) => Promise<string[]>;\n    },\n    private monaco: Monaco,\n    private editor: monacoTypes.editor.IStandaloneCodeEditor\n  ) {}\n\n  async init() {\n    const names = await this.datasource.getLabelNames();\n    this.labels = names.reduce<{ [label: string]: string[] }>((acc, name) => {\n      acc[name] = [];\n      return acc;\n    }, {});\n  }\n\n  provideCompletionItems(\n    model: monacoTypes.editor.ITextModel,\n    position: monacoTypes.Position\n  ): monacoTypes.languages.ProviderResult<monacoTypes.languages.CompletionList> {\n    // if the model-id does not match, then this call is from a different editor-instance,\n    // not \"our instance\", so return nothing\n    if (this.editor.getModel()?.id !== model.id) {\n      return { suggestions: [] };\n    }\n\n    const { range, offset } = getRangeAndOffset(this.monaco, model, position);\n    const situation = getSituation(model.getValue(), offset);\n    // Cannot be async/await cause of the ProviderResult return type\n    return this.getCompletions(situation).then((completionItems) => {\n      // monaco by-default alphabetically orders the items.\n      // to stop it, we use a number-as-string sortkey,\n      // so that monaco keeps the order we use\n      const maxIndexDigits = completionItems.length.toString().length;\n      const suggestions: monacoTypes.languages.CompletionItem[] = completionItems.map((item, index) => ({\n        kind: getMonacoCompletionItemKind(item.type, this.monaco!),\n        label: item.label,\n        insertText: item.insertText,\n        sortText: index.toString().padStart(maxIndexDigits, '0'), // to force the order we have\n        range,\n      }));\n      return { suggestions };\n    });\n  }\n\n  /**\n   * Get suggestion based on the situation we are in like whether we should suggest label names or values.\n   * @param situation\n   * @private\n   */\n  private async getCompletions(situation: Situation): Promise<Completion[]> {\n    if (!Object.keys(this.labels).length) {\n      return [];\n    }\n    switch (situation.type) {\n      // Not really sure what would make sense to suggest in this case so just leave it\n      case 'UNKNOWN': {\n        return [];\n      }\n      case 'EMPTY': {\n        return Object.keys(this.labels).map((key) => {\n          return {\n            label: key,\n            insertText: `{${key}=\"`,\n            type: 'LABEL_NAME',\n          };\n        });\n      }\n      case 'IN_LABEL_NAME':\n        return Object.keys(this.labels).map((key) => {\n          return {\n            label: key,\n            insertText: key,\n            type: 'LABEL_NAME',\n          };\n        });\n      case 'IN_LABEL_VALUE':\n        let values = [];\n        if (this.labels[situation.labelName].length) {\n          values = this.labels[situation.labelName];\n        } else {\n          values = await this.datasource.getLabelValues(situation.labelName);\n          this.labels[situation.labelName] = values;\n        }\n\n        return values.map((val) => {\n          return {\n            label: val,\n            insertText: situation.betweenQuotes ? val : `\"${val}\"`,\n            type: 'LABEL_VALUE',\n          };\n        });\n      default:\n        throw new Error(`Unexpected situation ${situation}`);\n    }\n  }\n}\n\n/**\n * Get item kind which is used for icon next to the suggestion.\n * @param type\n * @param monaco\n */\nfunction getMonacoCompletionItemKind(type: CompletionType, monaco: Monaco): monacoTypes.languages.CompletionItemKind {\n  switch (type) {\n    case 'LABEL_NAME':\n      return monaco.languages.CompletionItemKind.Enum;\n    case 'LABEL_VALUE':\n      return monaco.languages.CompletionItemKind.EnumMember;\n    default:\n      throw new Error(`Unexpected CompletionType: ${type}`);\n  }\n}\n\nexport type CompletionType = 'LABEL_NAME' | 'LABEL_VALUE';\ntype Completion = {\n  type: CompletionType;\n  label: string;\n  insertText: string;\n};\n\nexport type Label = {\n  name: string;\n  value: string;\n};\n\nexport type Situation =\n  | {\n      type: 'UNKNOWN';\n    }\n  | {\n      type: 'EMPTY';\n    }\n  | {\n      type: 'IN_LABEL_NAME';\n      otherLabels: Label[];\n    }\n  | {\n      type: 'IN_LABEL_VALUE';\n      labelName: string;\n      betweenQuotes: boolean;\n      otherLabels: Label[];\n    };\n\nconst labelNameRegex = /[a-zA-Z_][a-zA-Z0-9_]*/;\nconst labelValueRegex = /[^\"]*/; // anything except a double quote\nconst labelPairsRegex = new RegExp(`(${labelNameRegex.source})=\"(${labelValueRegex.source})\"`, 'g');\nconst inLabelValueRegex = new RegExp(`(${labelNameRegex.source})=(\"?)${labelValueRegex.source}$`);\nconst inLabelNameRegex = new RegExp(/[{,]\\s*[a-zA-Z0-9_]*$/);\n\n/**\n * Figure out where is the cursor and what kind of suggestions are appropriate.\n * As currently Fire handles just a simple {foo=\"bar\", baz=\"zyx\"} kind of values we can do with simple regex to figure\n * out where we are with the cursor.\n * @param text\n * @param offset\n */\nfunction getSituation(text: string, offset: number): Situation {\n  if (text === '') {\n    return {\n      type: 'EMPTY',\n    };\n  }\n\n  // Get all the labels so far in the query, so we can do some more filtering.\n  const matches = text.matchAll(labelPairsRegex);\n  const existingLabels = Array.from(matches).reduce<Label[]>((acc, match) => {\n    const [_, name, value] = match[1];\n    acc.push({ name, value });\n    return acc;\n  }, []);\n\n  // Check if we are editing a label value right now. If so also get name of the label\n  const matchLabelValue = text.substring(0, offset).match(inLabelValueRegex);\n  if (matchLabelValue) {\n    return {\n      type: 'IN_LABEL_VALUE',\n      labelName: matchLabelValue[1],\n      betweenQuotes: !!matchLabelValue[2],\n      otherLabels: existingLabels,\n    };\n  }\n\n  // Check if we are editing a label name\n  const matchLabelName = text.substring(0, offset).match(inLabelNameRegex);\n  if (matchLabelName) {\n    return {\n      type: 'IN_LABEL_NAME',\n      otherLabels: existingLabels,\n    };\n  }\n\n  // Will happen only if user writes something that isn't really a label selector\n  return {\n    type: 'UNKNOWN',\n  };\n}\n\nfunction getRangeAndOffset(monaco: Monaco, model: monacoTypes.editor.ITextModel, position: monacoTypes.Position) {\n  const word = model.getWordAtPosition(position);\n  const range =\n    word != null\n      ? monaco.Range.lift({\n          startLineNumber: position.lineNumber,\n          endLineNumber: position.lineNumber,\n          startColumn: word.startColumn,\n          endColumn: word.endColumn,\n        })\n      : monaco.Range.fromPositions(position);\n\n  // documentation says `position` will be \"adjusted\" in `getOffsetAt` so we clone it here just for sure.\n  const positionClone = {\n    column: position.column,\n    lineNumber: position.lineNumber,\n  };\n\n  const offset = model.getOffsetAt(positionClone);\n  return { offset, range };\n}\n","import { css } from '@emotion/css';\nimport React, { useEffect, useRef } from 'react';\nimport { useLatest } from 'react-use';\n\nimport { CodeEditor, Monaco, useStyles2, monacoTypes } from '@grafana/ui';\n\nimport { ParcaDataSource } from '../datasource';\nimport { languageDefinition } from '../lang';\n\nimport { CompletionProvider } from './autocomplete';\n\ninterface Props {\n  value: string;\n  datasource: ParcaDataSource;\n  onChange: (val: string) => void;\n  onRunQuery: (value: string) => void;\n}\n\nexport function LabelsEditor(props: Props) {\n  const setupAutocompleteFn = useAutocomplete(props.datasource);\n  const styles = useStyles2(getStyles);\n\n  const onRunQueryRef = useLatest(props.onRunQuery);\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  return (\n    <div\n      className={styles.wrapper}\n      // NOTE: we will be setting inline-style-width/height on this element\n      ref={containerRef}\n    >\n      <CodeEditor\n        value={props.value}\n        language={langId}\n        onBlur={props.onChange}\n        containerStyles={styles.queryField}\n        monacoOptions={{\n          folding: false,\n          fontSize: 14,\n          lineNumbers: 'off',\n          overviewRulerLanes: 0,\n          renderLineHighlight: 'none',\n          scrollbar: {\n            vertical: 'hidden',\n            verticalScrollbarSize: 8, // used as \"padding-right\"\n            horizontal: 'hidden',\n            horizontalScrollbarSize: 0,\n          },\n          scrollBeyondLastLine: false,\n          wordWrap: 'on',\n          padding: {\n            top: 5,\n            bottom: 6,\n          },\n        }}\n        onBeforeEditorMount={ensureParcaQL}\n        onEditorDidMount={(editor, monaco) => {\n          setupAutocompleteFn(editor, monaco);\n\n          const updateElementHeight = () => {\n            const containerDiv = containerRef.current;\n            if (containerDiv !== null) {\n              const pixelHeight = editor.getContentHeight();\n              containerDiv.style.height = `${pixelHeight + EDITOR_HEIGHT_OFFSET}px`;\n              containerDiv.style.width = '100%';\n              const pixelWidth = containerDiv.clientWidth;\n              editor.layout({ width: pixelWidth, height: pixelHeight });\n            }\n          };\n\n          editor.onDidContentSizeChange(updateElementHeight);\n          updateElementHeight();\n\n          editor.addCommand(monaco.KeyMod.Shift | monaco.KeyCode.Enter, () => {\n            onRunQueryRef.current(editor.getValue());\n          });\n        }}\n      />\n    </div>\n  );\n}\n\n// this number was chosen by testing various values. it might be necessary\n// because of the width of the border, not sure.\n//it needs to do 2 things:\n// 1. when the editor is single-line, it should make the editor height be visually correct\n// 2. when the editor is multi-line, the editor should not be \"scrollable\" (meaning,\n//    you do a scroll-movement in the editor, and it will scroll the content by a couple pixels\n//    up & down. this we want to avoid)\nconst EDITOR_HEIGHT_OFFSET = 2;\n\n/**\n * Hook that returns function that will set up monaco autocomplete for the label selector\n * @param datasource\n */\nfunction useAutocomplete(datasource: ParcaDataSource) {\n  const autocompleteDisposeFun = useRef<(() => void) | null>(null);\n  useEffect(() => {\n    // when we unmount, we unregister the autocomplete-function, if it was registered\n    return () => {\n      autocompleteDisposeFun.current?.();\n    };\n  }, []);\n\n  // This should be run in monaco onEditorDidMount\n  return async (editor: monacoTypes.editor.IStandaloneCodeEditor, monaco: Monaco) => {\n    const provider = new CompletionProvider(datasource, monaco, editor);\n    await provider.init();\n    const { dispose } = monaco.languages.registerCompletionItemProvider(langId, provider);\n    autocompleteDisposeFun.current = dispose;\n  };\n}\n\n// we must only run the setup code once\nlet parcaqlSetupDone = false;\nconst langId = 'parca';\n\nfunction ensureParcaQL(monaco: Monaco) {\n  if (parcaqlSetupDone === false) {\n    parcaqlSetupDone = true;\n    const { aliases, extensions, mimetypes, def } = languageDefinition;\n    monaco.languages.register({ id: langId, aliases, extensions, mimetypes });\n    monaco.languages.setMonarchTokensProvider(langId, def.language);\n    monaco.languages.setLanguageConfiguration(langId, def.languageConfiguration);\n  }\n}\n\nconst getStyles = () => {\n  return {\n    queryField: css`\n      flex: 1;\n      // Not exactly sure but without this the editor doe not shrink after resizing (so you can make it bigger but not\n      // smaller). At the same time this does not actually make the editor 100px because it has flex 1 so I assume\n      // this should sort of act as a flex-basis (but flex-basis does not work for this). So yeah CSS magic.\n      width: 100px;\n    `,\n    wrapper: css`\n      display: flex;\n      flex: 1;\n      border: 1px solid rgba(36, 41, 46, 0.3);\n      border-radius: 2px;\n    `,\n  };\n};\n","import { useReducer } from 'react';\nvar toggleReducer = function (state, nextValue) {\n    return typeof nextValue === 'boolean' ? nextValue : !state;\n};\nvar useToggle = function (initialValue) {\n    return useReducer(toggleReducer, initialValue);\n};\nexport default useToggle;\n","import { css, cx } from '@emotion/css';\nimport React from 'react';\nimport { useToggle } from 'react-use';\n\nimport { CoreApp, GrafanaTheme2 } from '@grafana/data';\nimport { Icon, useStyles2, RadioButtonGroup, Field, clearButtonStyles, Button } from '@grafana/ui';\n\nimport { Query } from '../types';\n\nimport { Stack } from './Stack';\n\nexport interface Props {\n  query: Query;\n  onQueryTypeChange: (val: Query['queryType']) => void;\n  app?: CoreApp;\n}\n\nconst rangeOptions: Array<{ value: Query['queryType']; label: string; description: string }> = [\n  { value: 'metrics', label: 'Metric', description: 'Return aggregated metrics' },\n  { value: 'profile', label: 'Profile', description: 'Return profile' },\n  { value: 'both', label: 'Both', description: 'Return both metric and profile data' },\n];\n\nfunction getOptions(app?: CoreApp) {\n  if (app === CoreApp.Explore) {\n    return rangeOptions;\n  }\n  return rangeOptions.filter((option) => option.value !== 'both');\n}\n\n/**\n * Base on QueryOptionGroup component from grafana/ui but that is not available yet.\n */\nexport function QueryOptions({ query, onQueryTypeChange, app }: Props) {\n  const [isOpen, toggleOpen] = useToggle(false);\n  const styles = useStyles2(getStyles);\n  const options = getOptions(app);\n  const buttonStyles = useStyles2(clearButtonStyles);\n\n  return (\n    <Stack gap={0} direction=\"column\">\n      <Button className={cx(styles.header, buttonStyles)} onClick={toggleOpen} title=\"Click to edit options\">\n        <div className={styles.toggle}>\n          <Icon name={isOpen ? 'angle-down' : 'angle-right'} />\n        </div>\n        <h6 className={styles.title}>Options</h6>\n        {!isOpen && (\n          <div className={styles.description}>\n            <span>Type: {query.queryType}</span>\n          </div>\n        )}\n      </Button>\n      {isOpen && (\n        <div className={styles.body}>\n          <Field label={'Query Type'}>\n            <RadioButtonGroup options={options} value={query.queryType} onChange={onQueryTypeChange} />\n          </Field>\n        </div>\n      )}\n    </Stack>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    switchLabel: css({\n      color: theme.colors.text.secondary,\n      cursor: 'pointer',\n      fontSize: theme.typography.bodySmall.fontSize,\n      '&:hover': {\n        color: theme.colors.text.primary,\n      },\n    }),\n    header: css({\n      display: 'flex',\n      cursor: 'pointer',\n      alignItems: 'baseline',\n      color: theme.colors.text.primary,\n      '&:hover': {\n        background: theme.colors.emphasize(theme.colors.background.primary, 0.03),\n      },\n    }),\n    title: css({\n      flexGrow: 1,\n      overflow: 'hidden',\n      fontSize: theme.typography.bodySmall.fontSize,\n      fontWeight: theme.typography.fontWeightMedium,\n      margin: 0,\n    }),\n    description: css({\n      color: theme.colors.text.secondary,\n      fontSize: theme.typography.bodySmall.fontSize,\n      paddingLeft: theme.spacing(2),\n      gap: theme.spacing(2),\n      display: 'flex',\n    }),\n    body: css({\n      display: 'flex',\n      paddingTop: theme.spacing(2),\n      gap: theme.spacing(2),\n      flexWrap: 'wrap',\n    }),\n    toggle: css({\n      color: theme.colors.text.secondary,\n      marginRight: `${theme.spacing(1)}`,\n    }),\n  };\n};\n","import { defaults } from 'lodash';\nimport React, { useMemo, useState } from 'react';\nimport { useMount } from 'react-use';\n\nimport { CoreApp, QueryEditorProps } from '@grafana/data';\nimport { ButtonCascader, CascaderOption } from '@grafana/ui';\n\nimport { defaultParca, defaultParcaQueryType, Parca } from '../dataquery.gen';\nimport { ParcaDataSource } from '../datasource';\nimport { ParcaDataSourceOptions, ProfileTypeMessage, Query } from '../types';\n\nimport { EditorRow } from './EditorRow';\nimport { EditorRows } from './EditorRows';\nimport { LabelsEditor } from './LabelsEditor';\nimport { QueryOptions } from './QueryOptions';\n\nexport type Props = QueryEditorProps<ParcaDataSource, Query, ParcaDataSourceOptions>;\n\nexport const defaultQuery: Partial<Parca> = {\n  ...defaultParca,\n  queryType: defaultParcaQueryType,\n};\n\nexport function QueryEditor(props: Props) {\n  const [profileTypes, setProfileTypes] = useState<ProfileTypeMessage[]>([]);\n\n  function onProfileTypeChange(value: string[], selectedOptions: CascaderOption[]) {\n    if (selectedOptions.length === 0) {\n      return;\n    }\n    const id = selectedOptions[selectedOptions.length - 1].value;\n    if (typeof id !== 'string') {\n      throw new Error('id is not string');\n    }\n    props.onChange({ ...props.query, profileTypeId: id });\n  }\n\n  function onLabelSelectorChange(value: string) {\n    props.onChange({ ...props.query, labelSelector: value });\n  }\n\n  function handleRunQuery(value: string) {\n    props.onChange({ ...props.query, labelSelector: value });\n    props.onRunQuery();\n  }\n\n  useMount(async () => {\n    const profileTypes = await props.datasource.getProfileTypes();\n    setProfileTypes(profileTypes);\n  });\n\n  // Turn profileTypes into cascader options\n  const cascaderOptions = useMemo(() => {\n    let mainTypes = new Map<string, CascaderOption>();\n    // Classify profile types by name then sample type.\n    for (let profileType of profileTypes) {\n      if (!mainTypes.has(profileType.name)) {\n        mainTypes.set(profileType.name, {\n          label: profileType.name,\n          value: profileType.ID,\n          children: [],\n        });\n      }\n      mainTypes.get(profileType.name)?.children?.push({\n        label: profileType.sample_type,\n        value: profileType.ID,\n      });\n    }\n    return Array.from(mainTypes.values());\n  }, [profileTypes]);\n\n  const selectedProfileName = useMemo(() => {\n    if (!profileTypes) {\n      return 'Loading';\n    }\n    const profile = profileTypes.find((type) => type.ID === props.query.profileTypeId);\n    if (!profile) {\n      return 'Select a profile type';\n    }\n\n    return profile.name + ' - ' + profile.sample_type;\n  }, [props.query.profileTypeId, profileTypes]);\n\n  let query = normalizeQuery(props.query, props.app);\n\n  return (\n    <EditorRows>\n      <EditorRow stackProps={{ wrap: false, gap: 1 }}>\n        <ButtonCascader onChange={onProfileTypeChange} options={cascaderOptions} buttonProps={{ variant: 'secondary' }}>\n          {selectedProfileName}\n        </ButtonCascader>\n        <LabelsEditor\n          value={query.labelSelector}\n          onChange={onLabelSelectorChange}\n          datasource={props.datasource}\n          onRunQuery={handleRunQuery}\n        />\n      </EditorRow>\n      <EditorRow>\n        <QueryOptions\n          query={query}\n          onQueryTypeChange={(val) => {\n            props.onChange({ ...query, queryType: val });\n          }}\n          app={props.app}\n        />\n      </EditorRow>\n    </EditorRows>\n  );\n}\n\nfunction normalizeQuery(query: Query, app?: CoreApp) {\n  let normalized = defaults(query, defaultQuery);\n  if (app !== CoreApp.Explore && normalized.queryType === 'both') {\n    // In dashboards and other places, we can't show both types of graphs at the same time.\n    // This will also be a default when having 'both' query and adding it from explore to dashboard\n    normalized.queryType = 'profile';\n  }\n  return normalized;\n}\n","import { Observable, of } from 'rxjs';\n\nimport { DataQueryRequest, DataQueryResponse, DataSourceInstanceSettings } from '@grafana/data';\nimport { DataSourceWithBackend } from '@grafana/runtime';\n\nimport { ParcaDataSourceOptions, Query, ProfileTypeMessage } from './types';\n\nexport class ParcaDataSource extends DataSourceWithBackend<Query, ParcaDataSourceOptions> {\n  constructor(instanceSettings: DataSourceInstanceSettings<ParcaDataSourceOptions>) {\n    super(instanceSettings);\n  }\n\n  query(request: DataQueryRequest<Query>): Observable<DataQueryResponse> {\n    if (!request.targets.every((q) => q.profileTypeId)) {\n      // When changing data source in explore, firs query can be sent without filled in profileTypeId\n      return of({ data: [] });\n    }\n\n    return super.query(request);\n  }\n\n  async getProfileTypes(): Promise<ProfileTypeMessage[]> {\n    return await super.getResource('profileTypes');\n  }\n\n  async getLabelNames(): Promise<string[]> {\n    return await super.getResource('labelNames');\n  }\n\n  async getLabelValues(labelName: string): Promise<string[]> {\n    return await super.getResource('labelValues', { label: labelName });\n  }\n}\n","import { DataSourcePlugin } from '@grafana/data';\n\nimport { ConfigEditor } from './ConfigEditor';\nimport { QueryEditor } from './QueryEditor/QueryEditor';\nimport { ParcaDataSource } from './datasource';\nimport { Query, ParcaDataSourceOptions } from './types';\n\nexport const plugin = new DataSourcePlugin<ParcaDataSource, Query, ParcaDataSourceOptions>(ParcaDataSource)\n  .setConfigEditor(ConfigEditor)\n  .setQueryEditor(QueryEditor);\n","import React from 'react';\n\nimport { DataSourceJsonData, DataSourcePluginOptionsEditorProps } from '@grafana/data';\n\nimport { InlineSwitch } from '../../components/Switch/Switch';\nimport { InlineField } from '../Forms/InlineField';\n\nexport interface Props<T extends DataSourceJsonData>\n  extends Pick<DataSourcePluginOptionsEditorProps<T>, 'options' | 'onOptionsChange'> {}\n\nexport interface SecureSocksProxyConfig extends DataSourceJsonData {\n  enableSecureSocksProxy?: boolean;\n}\n\nexport function SecureSocksProxySettings<T extends SecureSocksProxyConfig>({\n  options,\n  onOptionsChange,\n}: Props<T>): JSX.Element {\n  return (\n    <>\n      <h3 className=\"page-heading\">Secure Socks Proxy</h3>\n      <div className=\"gf-form-group\">\n        <div className=\"gf-form-inline\">\n          <div className=\"gf-form\">\n            <InlineField\n              labelWidth={26}\n              label=\"Enabled\"\n              tooltip=\"Connect to this datasource via the secure socks proxy.\"\n            >\n              <InlineSwitch\n                value={options.jsonData.enableSecureSocksProxy ?? false}\n                onChange={(event) =>\n                  onOptionsChange({\n                    ...options,\n                    jsonData: { ...options.jsonData, enableSecureSocksProxy: event!.currentTarget.checked },\n                  })\n                }\n              />\n            </InlineField>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n","import { css, cx } from '@emotion/css';\nimport React, { HTMLAttributes } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\n\nimport { useStyles2 } from '../../themes';\nimport { getChildId } from '../../utils/reactUtils';\n\nimport { FieldValidationMessage } from './FieldValidationMessage';\nimport { Label } from './Label';\n\nexport interface FieldProps extends HTMLAttributes<HTMLDivElement> {\n  /** Form input element, i.e Input or Switch */\n  children: React.ReactElement;\n  /** Label for the field */\n  label?: React.ReactNode;\n  /** Description of the field */\n  description?: React.ReactNode;\n  /** Indicates if field is in invalid state */\n  invalid?: boolean;\n  /** Indicates if field is in loading state */\n  loading?: boolean;\n  /** Indicates if field is disabled */\n  disabled?: boolean;\n  /** Indicates if field is required */\n  required?: boolean;\n  /** Error message to display */\n  error?: React.ReactNode;\n  /** Indicates horizontal layout of the field */\n  horizontal?: boolean;\n  /** make validation message overflow horizontally. Prevents pushing out adjacent inline components */\n  validationMessageHorizontalOverflow?: boolean;\n\n  className?: string;\n  /**\n   *  A unique id that associates the label of the Field component with the control with the unique id.\n   *  If the `htmlFor` property is missing the `htmlFor` will be inferred from the `id` or `inputId` property of the first child.\n   *  https://developer.mozilla.org/en-US/docs/Web/HTML/Element/label#attr-for\n   */\n  htmlFor?: string;\n}\n\nexport const Field = React.forwardRef<HTMLDivElement, FieldProps>(\n  (\n    {\n      label,\n      description,\n      horizontal,\n      invalid,\n      loading,\n      disabled,\n      required,\n      error,\n      children,\n      className,\n      validationMessageHorizontalOverflow,\n      htmlFor,\n      ...otherProps\n    }: FieldProps,\n    ref\n  ) => {\n    const styles = useStyles2(getFieldStyles);\n    const inputId = htmlFor ?? getChildId(children);\n\n    const labelElement =\n      typeof label === 'string' ? (\n        <Label htmlFor={inputId} description={description}>\n          {`${label}${required ? ' *' : ''}`}\n        </Label>\n      ) : (\n        label\n      );\n\n    const childProps = deleteUndefinedProps({ invalid, disabled, loading });\n    return (\n      <div className={cx(styles.field, horizontal && styles.fieldHorizontal, className)} {...otherProps}>\n        {labelElement}\n        <div>\n          <div ref={ref}>{React.cloneElement(children, childProps)}</div>\n          {invalid && error && !horizontal && (\n            <div\n              className={cx(styles.fieldValidationWrapper, {\n                [styles.validationMessageHorizontalOverflow]: !!validationMessageHorizontalOverflow,\n              })}\n            >\n              <FieldValidationMessage>{error}</FieldValidationMessage>\n            </div>\n          )}\n        </div>\n\n        {invalid && error && horizontal && (\n          <div\n            className={cx(styles.fieldValidationWrapper, styles.fieldValidationWrapperHorizontal, {\n              [styles.validationMessageHorizontalOverflow]: !!validationMessageHorizontalOverflow,\n            })}\n          >\n            <FieldValidationMessage>{error}</FieldValidationMessage>\n          </div>\n        )}\n      </div>\n    );\n  }\n);\n\nField.displayName = 'Field';\n\nfunction deleteUndefinedProps<T extends Object>(obj: T): Partial<T> {\n  for (const key in obj) {\n    if (obj[key] === undefined) {\n      delete obj[key];\n    }\n  }\n\n  return obj;\n}\n\nexport const getFieldStyles = (theme: GrafanaTheme2) => ({\n  field: css({\n    display: 'flex',\n    flexDirection: 'column',\n    marginBottom: theme.spacing(2),\n  }),\n  fieldHorizontal: css({\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    flexWrap: 'wrap',\n  }),\n  fieldValidationWrapper: css({\n    marginTop: theme.spacing(0.5),\n  }),\n  fieldValidationWrapperHorizontal: css({\n    flex: '1 1 100%',\n  }),\n  validationMessageHorizontalOverflow: css({\n    width: 0,\n    overflowX: 'visible',\n\n    '& > *': {\n      whiteSpace: 'nowrap',\n    },\n  }),\n});\n","import { css, cx } from '@emotion/css';\nimport React, { HTMLProps, ReactNode } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\n\nimport { useStyles2 } from '../../themes';\n\nexport interface Props extends Omit<HTMLProps<HTMLDivElement>, 'css'> {\n  children: ReactNode | ReactNode[];\n}\n\nexport const InlineFieldRow = ({ children, className, ...htmlProps }: Props) => {\n  const styles = useStyles2(getStyles);\n  return (\n    <div className={cx(styles.container, className)} {...htmlProps}>\n      {children}\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    container: css({\n      label: 'InlineFieldRow',\n      display: 'flex',\n      flexDirection: 'row',\n      flexWrap: 'wrap',\n      alignContent: 'flex-start',\n      rowGap: theme.spacing(0.5),\n    }),\n  };\n};\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { StringSelector, selectors } from '@grafana/e2e-selectors';\n\nimport { useStyles2 } from '../../../themes';\nimport { getFocusStyles, getMouseFocusStyles } from '../../../themes/mixins';\nimport { Tooltip } from '../../Tooltip/Tooltip';\nimport { getPropertiesForButtonSize } from '../commonStyles';\n\nexport type RadioButtonSize = 'sm' | 'md';\n\nexport interface RadioButtonProps {\n  size?: RadioButtonSize;\n  disabled?: boolean;\n  name?: string;\n  description?: string;\n  active: boolean;\n  id: string;\n  onChange: () => void;\n  onClick: () => void;\n  fullWidth?: boolean;\n  'aria-label'?: StringSelector;\n  children?: React.ReactNode;\n}\n\nexport const RadioButton = React.forwardRef<HTMLInputElement, RadioButtonProps>(\n  (\n    {\n      children,\n      active = false,\n      disabled = false,\n      size = 'md',\n      onChange,\n      onClick,\n      id,\n      name = undefined,\n      description,\n      fullWidth,\n      'aria-label': ariaLabel,\n    },\n    ref\n  ) => {\n    const styles = useStyles2(getRadioButtonStyles, size, fullWidth);\n\n    const inputRadioButton = (\n      <input\n        type=\"radio\"\n        className={styles.radio}\n        onChange={onChange}\n        onClick={onClick}\n        disabled={disabled}\n        id={id}\n        checked={active}\n        name={name}\n        aria-label={ariaLabel}\n        ref={ref}\n      />\n    );\n    return description ? (\n      <div className={styles.radioOption} data-testid={selectors.components.RadioButton.container}>\n        <Tooltip content={description} placement=\"bottom\">\n          {inputRadioButton}\n        </Tooltip>\n        <label className={styles.radioLabel} htmlFor={id} title={description || ariaLabel}>\n          {children}\n        </label>\n      </div>\n    ) : (\n      <div className={styles.radioOption} data-testid={selectors.components.RadioButton.container}>\n        {inputRadioButton}\n        <label className={styles.radioLabel} htmlFor={id} title={description || ariaLabel}>\n          {children}\n        </label>\n      </div>\n    );\n  }\n);\n\nRadioButton.displayName = 'RadioButton';\n\nconst getRadioButtonStyles = (theme: GrafanaTheme2, size: RadioButtonSize, fullWidth?: boolean) => {\n  const { fontSize, height, padding } = getPropertiesForButtonSize(size, theme);\n\n  const textColor = theme.colors.text.secondary;\n  const textColorHover = theme.colors.text.primary;\n  // remove the group inner padding (set on RadioButtonGroup)\n  const labelHeight = height * theme.spacing.gridSize - 4 - 2;\n\n  return {\n    radioOption: css({\n      display: 'flex',\n      justifyContent: 'space-between',\n      position: 'relative',\n      flex: fullWidth ? `1 0 0` : 'none',\n      textAlign: 'center',\n    }),\n    radio: css({\n      position: 'absolute',\n      opacity: 0,\n      zIndex: 2,\n      width: '100% !important',\n      height: '100%',\n      cursor: 'pointer',\n\n      '&:checked + label': {\n        color: theme.colors.text.primary,\n        fontWeight: theme.typography.fontWeightMedium,\n        background: theme.colors.action.selected,\n        zIndex: 1,\n      },\n\n      '&:focus + label, &:focus-visible + label': getFocusStyles(theme),\n\n      '&:focus:not(:focus-visible) + label': getMouseFocusStyles(theme),\n\n      '&:disabled + label': {\n        color: theme.colors.text.disabled,\n        cursor: 'not-allowed',\n      },\n    }),\n    radioLabel: css({\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      fontSize,\n      height: `${labelHeight}px`,\n      // Deduct border from line-height for perfect vertical centering on windows and linux\n      lineHeight: `${labelHeight}px`,\n      color: textColor,\n      padding: theme.spacing(0, padding),\n      borderRadius: theme.shape.radius.default,\n      background: theme.colors.background.primary,\n      cursor: 'pointer',\n      userSelect: 'none',\n      whiteSpace: 'nowrap',\n      flexGrow: 1,\n\n      '&:hover': {\n        color: textColorHover,\n      },\n    }),\n  };\n};\n","import { css, cx } from '@emotion/css';\nimport { uniqueId } from 'lodash';\nimport React, { useCallback, useEffect, useRef } from 'react';\n\nimport { GrafanaTheme2, SelectableValue, toIconName } from '@grafana/data';\n\nimport { useStyles2 } from '../../../themes';\nimport { Icon } from '../../Icon/Icon';\n\nimport { RadioButtonSize, RadioButton } from './RadioButton';\n\nexport interface RadioButtonGroupProps<T> {\n  value?: T;\n  id?: string;\n  disabled?: boolean;\n  disabledOptions?: T[];\n  options: Array<SelectableValue<T>>;\n  onChange?: (value: T) => void;\n  onClick?: (value: T) => void;\n  size?: RadioButtonSize;\n  fullWidth?: boolean;\n  className?: string;\n  autoFocus?: boolean;\n  ['aria-label']?: string;\n  invalid?: boolean;\n}\n\nexport function RadioButtonGroup<T>({\n  options,\n  value,\n  onChange,\n  onClick,\n  disabled,\n  disabledOptions,\n  size = 'md',\n  id,\n  className,\n  fullWidth = false,\n  autoFocus = false,\n  'aria-label': ariaLabel,\n  invalid = false,\n}: RadioButtonGroupProps<T>) {\n  const handleOnChange = useCallback(\n    (option: SelectableValue) => {\n      return () => {\n        if (onChange) {\n          onChange(option.value);\n        }\n      };\n    },\n    [onChange]\n  );\n  const handleOnClick = useCallback(\n    (option: SelectableValue) => {\n      return () => {\n        if (onClick) {\n          onClick(option.value);\n        }\n      };\n    },\n    [onClick]\n  );\n\n  const internalId = id ?? uniqueId('radiogroup-');\n  const groupName = useRef(internalId);\n  const styles = useStyles2(getStyles);\n\n  const activeButtonRef = useRef<HTMLInputElement | null>(null);\n  useEffect(() => {\n    if (autoFocus && activeButtonRef.current) {\n      activeButtonRef.current.focus();\n    }\n  }, [autoFocus]);\n\n  return (\n    <div\n      role=\"radiogroup\"\n      aria-label={ariaLabel}\n      className={cx(styles.radioGroup, fullWidth && styles.fullWidth, invalid && styles.invalid, className)}\n    >\n      {options.map((opt, i) => {\n        const isItemDisabled = disabledOptions && opt.value && disabledOptions.includes(opt.value);\n        const icon = opt.icon ? toIconName(opt.icon) : undefined;\n        const hasNonIconPart = Boolean(opt.imgUrl || opt.label || opt.component);\n\n        return (\n          <RadioButton\n            size={size}\n            disabled={isItemDisabled || disabled}\n            active={value === opt.value}\n            key={`o.label-${i}`}\n            aria-label={opt.ariaLabel}\n            onChange={handleOnChange(opt)}\n            onClick={handleOnClick(opt)}\n            id={`option-${opt.value}-${internalId}`}\n            name={groupName.current}\n            description={opt.description}\n            fullWidth={fullWidth}\n            ref={value === opt.value ? activeButtonRef : undefined}\n          >\n            {icon && <Icon name={icon} className={cx(hasNonIconPart && styles.icon)} />}\n            {opt.imgUrl && <img src={opt.imgUrl} alt={opt.label} className={styles.img} />}\n            {opt.label} {opt.component ? <opt.component /> : null}\n          </RadioButton>\n        );\n      })}\n    </div>\n  );\n}\n\nRadioButtonGroup.displayName = 'RadioButtonGroup';\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    radioGroup: css({\n      display: 'inline-flex',\n      flexDirection: 'row',\n      flexWrap: 'nowrap',\n      border: `1px solid ${theme.components.input.borderColor}`,\n      borderRadius: theme.shape.radius.default,\n      padding: '2px',\n    }),\n    fullWidth: css({\n      display: 'flex',\n    }),\n    icon: css({\n      marginRight: '6px',\n    }),\n    img: css({\n      width: theme.spacing(2),\n      height: theme.spacing(2),\n      marginRight: theme.spacing(1),\n    }),\n    invalid: css({\n      border: `1px solid ${theme.colors.error.border}`,\n    }),\n  };\n};\n","import { css, cx } from '@emotion/css';\nimport React, { HTMLProps } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\n\nimport { useStyles2 } from '../../themes';\nimport { getFocusStyle, sharedInputStyle } from '../Forms/commonStyles';\n\nexport interface Props extends Omit<HTMLProps<HTMLTextAreaElement>, 'size'> {\n  /** Show an invalid state around the input */\n  invalid?: boolean;\n}\n\nexport const TextArea = React.forwardRef<HTMLTextAreaElement, Props>(({ invalid, className, ...props }, ref) => {\n  const styles = useStyles2(getTextAreaStyle, invalid);\n\n  return <textarea {...props} className={cx(styles.textarea, className)} ref={ref} />;\n});\n\nconst getTextAreaStyle = (theme: GrafanaTheme2, invalid = false) => ({\n  textarea: cx(\n    sharedInputStyle(theme),\n    getFocusStyle(theme),\n    css({\n      display: 'block',\n      borderRadius: theme.shape.radius.default,\n      padding: `${theme.spacing.gridSize / 4}px ${theme.spacing.gridSize}px`,\n      width: '100%',\n      borderColor: invalid ? theme.colors.error.border : theme.components.input.borderColor,\n    })\n  ),\n});\n\nTextArea.displayName = 'TextArea';\n","import { useEffect } from 'react';\nvar useEffectOnce = function (effect) {\n    useEffect(effect, []);\n};\nexport default useEffectOnce;\n"],"names":["CoreApp","AppPlugin","meta","root","pluginExports","include","extension","FeatureState","InlineFormLabel","children","isFocused","isInvalid","className","htmlFor","tooltip","width","interactive","rest","classes","Tooltip","Icon","defaultProps","FormField","label","labelWidth","inputWidth","inputEl","inputProps","styles","getStyles","EventsWithValidation","validate","value","validationRules","errors","acc","currRule","hasValidationEvent","event","validationEvents","regexValidation","pattern","errorMessage","valueToValidate","LegacyInputStatus","Input","evt","prevState","restProps","inputElementProps","eventName","hideErrorMessage","inputRef","error","inputClassName","TAG_COLORS","TAG_BORDER_COLORS","getTagColorIndexFromName","name","hash","djb2","getTagColorsFromName","index","getTagColor","str","i","TagItem","disabled","onRemove","color","borderColor","IconButton","theme","height","TagsInput","placeholder","tags","onChange","addOnBlur","invalid","id","newTagName","setNewTagName","onNameChange","tagToRemove","x","onAdd","onBlur","onKeyboardAdd","Button","tag","getSecretFormFieldStyles","SecretFormField","onReset","isConfigured","BasicAuthSettings","dataSourceConfig","password","onPasswordReset","onPasswordChange","InlineField","getCustomHeaderRowStyles","CustomHeaderRow","header","e","_e","CustomHeadersSettings","props","headers","newJsonData","key","val","newSecureJsonData","headerIndex","item","headerId","h","jsonData","secureJsonData","secureJsonFields","LABEL_WIDTH","HttpProxySettings","showForwardOAuthIdentityOption","CertificationKey","hasCert","onClick","InlineFieldRow","TextArea","TLSAuthSettings","hasTLSCACert","hasTLSClientCert","hasTLSClientKey","hasServerName","onResetClickFactory","field","newSecureJsonFields","onCertificateChangeFactory","onServerNameLabelChange","ACCESS_OPTIONS","DEFAULT_ACCESS_OPTION","HttpAccessHelp","DataSourceHttpSettings","defaultUrl","showAccessOptions","sigV4AuthToggleEnabled","azureAuthSettings","renderSigV4Editor","secureSocksDSProxyEnabled","urlLabel","urlDocs","isAccessHelpVisible","setIsAccessHelpVisible","azureAuthEnabled","setAzureAuthEnabled","urlTooltip","onSettingsChange","change","isAzureAuthEnabled","tmpOauthPassThru","accessSelect","Select","o","selectedValue","isValidUrl","notValidStyle","inputStyle","urlInput","selectors","isVisible","cookies","SecureSocksProxySettings","ConfigEditor","options","onOptionsChange","config","useMount","fn","useEffectOnce","onChangeCascader","onChanged","values","fromRCOptions","onLoadDataCascader","onLoadData","fromRCOption","option","ButtonCascader","loadData","icon","buttonProps","hideDownIcon","variant","content","defaultParcaQueryType","defaultParca","Stack","EditorRow","stackProps","EditorRows","useLatest","ref","languageDefinition","CompletionProvider","datasource","monaco","editor","names","model","position","range","offset","getRangeAndOffset","situation","getSituation","completionItems","maxIndexDigits","getMonacoCompletionItemKind","type","labelNameRegex","labelValueRegex","labelPairsRegex","inLabelValueRegex","inLabelNameRegex","text","matches","existingLabels","match","_","matchLabelValue","word","positionClone","LabelsEditor","setupAutocompleteFn","useAutocomplete","onRunQueryRef","containerRef","CodeEditor","langId","ensureParcaQL","updateElementHeight","containerDiv","pixelHeight","EDITOR_HEIGHT_OFFSET","pixelWidth","autocompleteDisposeFun","provider","dispose","parcaqlSetupDone","aliases","extensions","mimetypes","def","toggleReducer","state","nextValue","useToggle","initialValue","rangeOptions","getOptions","app","QueryOptions","query","onQueryTypeChange","isOpen","toggleOpen","buttonStyles","Field","RadioButtonGroup","defaultQuery","QueryEditor","profileTypes","setProfileTypes","onProfileTypeChange","selectedOptions","onLabelSelectorChange","handleRunQuery","cascaderOptions","mainTypes","profileType","selectedProfileName","profile","normalizeQuery","normalized","ParcaDataSource","DataSourceWithBackend","instanceSettings","request","q","of","labelName","description","horizontal","loading","required","validationMessageHorizontalOverflow","otherProps","getFieldStyles","inputId","labelElement","childProps","deleteUndefinedProps","obj","htmlProps","RadioButton","active","size","fullWidth","ariaLabel","getRadioButtonStyles","inputRadioButton","fontSize","padding","textColor","textColorHover","labelHeight","disabledOptions","autoFocus","handleOnChange","handleOnClick","internalId","groupName","activeButtonRef","opt","isItemDisabled","hasNonIconPart","getTextAreaStyle","effect"],"sourceRoot":""}