{"version":3,"file":"postgresPlugin.3b3a9e65948c459db45f.js","mappings":"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","sources":["webpack://grafana/./public/app/features/plugins/sql/components/configuration/ConnectionLimits.tsx","webpack://grafana/./public/app/features/plugins/sql/components/configuration/Divider.tsx","webpack://grafana/./public/app/features/plugins/sql/components/configuration/TLSSecretsConfig.tsx","webpack://grafana/./public/app/features/plugins/sql/components/configuration/useMigrateDatabaseFields.ts","webpack://grafana/./public/app/plugins/datasource/grafana-postgresql-datasource/CheatSheet.tsx","webpack://grafana/./public/app/plugins/datasource/grafana-postgresql-datasource/PostgresQueryEditor.tsx","webpack://grafana/./public/app/plugins/datasource/grafana-postgresql-datasource/types.ts","webpack://grafana/./public/app/plugins/datasource/grafana-postgresql-datasource/PostgresQueryModel.ts","webpack://grafana/./public/app/plugins/datasource/grafana-postgresql-datasource/postgresMetaQuery.ts","webpack://grafana/./public/app/plugins/datasource/grafana-postgresql-datasource/sqlCompletionProvider.ts","webpack://grafana/./public/app/plugins/datasource/grafana-postgresql-datasource/sqlUtil.ts","webpack://grafana/./public/app/plugins/datasource/grafana-postgresql-datasource/datasource.ts","webpack://grafana/./public/app/plugins/datasource/grafana-postgresql-datasource/configuration/useAutoDetectFeatures.ts","webpack://grafana/./public/app/plugins/datasource/grafana-postgresql-datasource/configuration/ConfigurationEditor.tsx","webpack://grafana/./public/app/plugins/datasource/grafana-postgresql-datasource/module.ts","webpack://grafana/./.yarn/__virtual__/react-use-virtual-dd7926f458/0/cache/react-use-npm-17.4.0-0ef4521544-98566c4817.zip/node_modules/react-use/esm/useCustomCompareEffect.js","webpack://grafana/./.yarn/__virtual__/react-use-virtual-dd7926f458/0/cache/react-use-npm-17.4.0-0ef4521544-98566c4817.zip/node_modules/react-use/esm/misc/isDeepEqual.js","webpack://grafana/./.yarn/__virtual__/react-use-virtual-dd7926f458/0/cache/react-use-npm-17.4.0-0ef4521544-98566c4817.zip/node_modules/react-use/esm/useDeepCompareEffect.js","webpack://grafana/./.yarn/cache/fast-deep-equal-npm-3.1.3-790edcfcf5-e21a9d8d84.zip/node_modules/fast-deep-equal/react.js"],"sourcesContent":["import React from 'react';\n\nimport { DataSourceSettings } from '@grafana/data';\nimport { ConfigSubSection, Stack } from '@grafana/experimental';\nimport { config } from '@grafana/runtime';\nimport { Field, Icon, InlineLabel, Input, Label, Switch, Tooltip } from '@grafana/ui';\n\nimport { SQLConnectionLimits, SQLOptions } from '../../types';\n\ninterface Props<T> {\n  onOptionsChange: Function;\n  options: DataSourceSettings<SQLOptions>;\n}\n\nfunction toNumber(text: string): number {\n  if (text.trim() === '') {\n    // calling `Number('')` returns zero,\n    // so we have to handle this case\n    return NaN;\n  }\n\n  return Number(text);\n}\n\nexport const ConnectionLimits = <T extends SQLConnectionLimits>(props: Props<T>) => {\n  const { onOptionsChange, options } = props;\n  const jsonData = options.jsonData;\n  const autoIdle = jsonData.maxIdleConnsAuto !== undefined ? jsonData.maxIdleConnsAuto : false;\n\n  // Update JSON data with new values\n  const updateJsonData = (values: {}) => {\n    const newOpts = {\n      ...options,\n      jsonData: {\n        ...jsonData,\n        ...values,\n      },\n    };\n\n    return onOptionsChange(newOpts);\n  };\n\n  // For the case of idle connections and connection lifetime\n  // use a shared function to update respective properties\n  const onJSONDataNumberChanged = (property: keyof SQLConnectionLimits) => {\n    return (number?: number) => {\n      updateJsonData({ [property]: number });\n    };\n  };\n\n  // When the maximum number of connections is changed\n  // see if we have the automatic idle option enabled\n  const onMaxConnectionsChanged = (number?: number) => {\n    if (autoIdle && number) {\n      updateJsonData({\n        maxOpenConns: number,\n        maxIdleConns: number,\n      });\n    } else {\n      updateJsonData({\n        maxOpenConns: number,\n      });\n    }\n  };\n\n  // Update auto idle setting when control is toggled\n  // and set minimum idle connections if automatic\n  // is selected\n  const onConnectionIdleAutoChanged = () => {\n    let idleConns = undefined;\n    let maxConns = undefined;\n\n    // If the maximum number of open connections is undefined\n    // and we're setting auto idle then set the default amount\n    // otherwise take the numeric amount and get the value from that\n    if (!autoIdle) {\n      if (jsonData.maxOpenConns !== undefined) {\n        maxConns = jsonData.maxOpenConns;\n        idleConns = jsonData.maxOpenConns;\n      }\n    } else {\n      maxConns = jsonData.maxOpenConns;\n      idleConns = jsonData.maxIdleConns;\n    }\n\n    updateJsonData({\n      maxIdleConnsAuto: !autoIdle,\n      maxIdleConns: idleConns,\n      maxOpenConns: maxConns,\n    });\n  };\n\n  const labelWidth = 40;\n\n  return (\n    <ConfigSubSection title=\"Connection limits\">\n      <Field\n        label={\n          <Label>\n            <Stack gap={0.5}>\n              <span>Max open</span>\n              <Tooltip\n                content={\n                  <span>\n                    The maximum number of open connections to the database. If <i>Max idle connections</i> is greater\n                    than 0 and the <i>Max open connections</i> is less than <i>Max idle connections</i>, then\n                    <i>Max idle connections</i> will be reduced to match the <i>Max open connections</i> limit. If set\n                    to 0, there is no limit on the number of open connections.\n                  </span>\n                }\n              >\n                <Icon name=\"info-circle\" size=\"sm\" />\n              </Tooltip>\n            </Stack>\n          </Label>\n        }\n      >\n        <Input\n          type=\"number\"\n          placeholder=\"unlimited\"\n          defaultValue={jsonData.maxOpenConns}\n          onChange={(e) => {\n            const newVal = toNumber(e.currentTarget.value);\n            if (!Number.isNaN(newVal)) {\n              onMaxConnectionsChanged(newVal);\n            }\n          }}\n          width={labelWidth}\n        />\n      </Field>\n\n      <Field\n        label={\n          <Label>\n            <Stack gap={0.5}>\n              <span>Auto Max Idle</span>\n              <Tooltip\n                content={\n                  <span>\n                    If enabled, automatically set the number of <i>Maximum idle connections</i> to the same value as\n                    <i> Max open connections</i>. If the number of maximum open connections is not set it will be set to\n                    the default ({config.sqlConnectionLimits.maxIdleConns}).\n                  </span>\n                }\n              >\n                <Icon name=\"info-circle\" size=\"sm\" />\n              </Tooltip>\n            </Stack>\n          </Label>\n        }\n      >\n        <Switch value={autoIdle} onChange={onConnectionIdleAutoChanged} />\n      </Field>\n\n      <Field\n        label={\n          <Label>\n            <Stack gap={0.5}>\n              <span>Max idle</span>\n              <Tooltip\n                content={\n                  <span>\n                    The maximum number of connections in the idle connection pool.If <i>Max open connections</i> is\n                    greater than 0 but less than the <i>Max idle connections</i>, then the <i>Max idle connections</i>{' '}\n                    will be reduced to match the <i>Max open connections</i> limit. If set to 0, no idle connections are\n                    retained.\n                  </span>\n                }\n              >\n                <Icon name=\"info-circle\" size=\"sm\" />\n              </Tooltip>\n            </Stack>\n          </Label>\n        }\n      >\n        {autoIdle ? (\n          <InlineLabel width={labelWidth}>{options.jsonData.maxIdleConns}</InlineLabel>\n        ) : (\n          <Input\n            type=\"number\"\n            placeholder=\"2\"\n            defaultValue={jsonData.maxIdleConns}\n            onChange={(e) => {\n              const newVal = toNumber(e.currentTarget.value);\n              if (!Number.isNaN(newVal)) {\n                onJSONDataNumberChanged('maxIdleConns')(newVal);\n              }\n            }}\n            width={labelWidth}\n            disabled={autoIdle}\n          />\n        )}\n      </Field>\n\n      <Field\n        label={\n          <Label>\n            <Stack gap={0.5}>\n              <span>Max lifetime</span>\n              <Tooltip\n                content={\n                  <span>\n                    The maximum amount of time in seconds a connection may be reused. If set to 0, connections are\n                    reused forever.\n                  </span>\n                }\n              >\n                <Icon name=\"info-circle\" size=\"sm\" />\n              </Tooltip>\n            </Stack>\n          </Label>\n        }\n      >\n        <Input\n          type=\"number\"\n          placeholder=\"14400\"\n          defaultValue={jsonData.connMaxLifetime}\n          onChange={(e) => {\n            const newVal = toNumber(e.currentTarget.value);\n            if (!Number.isNaN(newVal)) {\n              onJSONDataNumberChanged('connMaxLifetime')(newVal);\n            }\n          }}\n          width={labelWidth}\n        />\n      </Field>\n    </ConfigSubSection>\n  );\n};\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\n\n// this custom component is necessary because the Grafana UI <Divider /> component is not backwards compatible with Grafana < 10.1.0\nexport const Divider = () => {\n  const styles = useStyles2(getStyles);\n  return <hr className={styles.horizontalDivider} />;\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    horizontalDivider: css({\n      borderTop: `1px solid ${theme.colors.border.weak}`,\n      margin: theme.spacing(2, 0),\n      width: '100%',\n    }),\n  };\n};\n","import React from 'react';\n\nimport {\n  DataSourceJsonData,\n  DataSourcePluginOptionsEditorProps,\n  KeyValue,\n  onUpdateDatasourceSecureJsonDataOption,\n  updateDatasourcePluginResetOption,\n} from '@grafana/data';\nimport { Field, Icon, Label, SecretTextArea, Tooltip, Stack } from '@grafana/ui';\n\nexport interface Props<T extends DataSourceJsonData, S> {\n  editorProps: DataSourcePluginOptionsEditorProps<T, S>;\n  showCACert?: boolean;\n  showKeyPair?: boolean;\n  secureJsonFields?: KeyValue<Boolean>;\n  labelWidth?: number;\n}\n\nexport const TLSSecretsConfig = <T extends DataSourceJsonData, S extends {} = {}>(props: Props<T, S>) => {\n  const { editorProps, showCACert, showKeyPair = true } = props;\n  const { secureJsonFields } = editorProps.options;\n  return (\n    <>\n      {showKeyPair ? (\n        <Field\n          label={\n            <Label>\n              <Stack gap={0.5}>\n                <span>TLS/SSL Client Certificate</span>\n                <Tooltip\n                  content={\n                    <span>\n                      To authenticate with an TLS/SSL client certificate, provide the client certificate here.\n                    </span>\n                  }\n                >\n                  <Icon name=\"info-circle\" size=\"sm\" />\n                </Tooltip>\n              </Stack>\n            </Label>\n          }\n        >\n          <SecretTextArea\n            placeholder=\"-----BEGIN CERTIFICATE-----\"\n            cols={45}\n            rows={7}\n            isConfigured={secureJsonFields && secureJsonFields.tlsClientCert}\n            onChange={onUpdateDatasourceSecureJsonDataOption(editorProps, 'tlsClientCert')}\n            onReset={() => {\n              updateDatasourcePluginResetOption(editorProps, 'tlsClientCert');\n            }}\n          />\n        </Field>\n      ) : null}\n      {showCACert ? (\n        <Field\n          label={\n            <Label>\n              <Stack gap={0.5}>\n                <span>TLS/SSL Root Certificate</span>\n                <Tooltip\n                  content={\n                    <span>If the selected TLS/SSL mode requires a server root certificate, provide it here.</span>\n                  }\n                >\n                  <Icon name=\"info-circle\" size=\"sm\" />\n                </Tooltip>\n              </Stack>\n            </Label>\n          }\n        >\n          <SecretTextArea\n            placeholder=\"-----BEGIN CERTIFICATE-----\"\n            cols={45}\n            rows={7}\n            isConfigured={secureJsonFields && secureJsonFields.tlsCACert}\n            onChange={onUpdateDatasourceSecureJsonDataOption(editorProps, 'tlsCACert')}\n            onReset={() => {\n              updateDatasourcePluginResetOption(editorProps, 'tlsCACert');\n            }}\n          />\n        </Field>\n      ) : null}\n      {showKeyPair ? (\n        <Field\n          label={\n            <Label>\n              <Stack gap={0.5}>\n                <span>TLS/SSL Client Key</span>\n                <Tooltip\n                  content={<span>To authenticate with a client TLS/SSL certificate, provide the key here.</span>}\n                >\n                  <Icon name=\"info-circle\" size=\"sm\" />\n                </Tooltip>\n              </Stack>\n            </Label>\n          }\n        >\n          <SecretTextArea\n            placeholder=\"-----BEGIN RSA PRIVATE KEY-----\"\n            cols={45}\n            rows={7}\n            isConfigured={secureJsonFields && secureJsonFields.tlsClientKey}\n            onChange={onUpdateDatasourceSecureJsonDataOption(editorProps, 'tlsClientKey')}\n            onReset={() => {\n              updateDatasourcePluginResetOption(editorProps, 'tlsClientKey');\n            }}\n          />\n        </Field>\n      ) : null}\n    </>\n  );\n};\n","import { useEffect } from 'react';\n\nimport { DataSourcePluginOptionsEditorProps } from '@grafana/data';\nimport { logDebug, config } from '@grafana/runtime';\n\nimport { SQLOptions } from '../../types';\n\n/**\n * 1. Moves the database field from the options object to jsonData.database and empties the database field.\n * 2. If max open connections, max idle connections, and auto idle are all undefined set these to default values.\n */\nexport function useMigrateDatabaseFields<T extends SQLOptions, S = {}>({\n  onOptionsChange,\n  options,\n}: DataSourcePluginOptionsEditorProps<T, S>) {\n  useEffect(() => {\n    const jsonData = options.jsonData;\n    let newOptions = { ...options };\n    let optionsUpdated = false;\n\n    // Migrate the database field from the column into the jsonData object\n    if (options.database) {\n      logDebug(`Migrating from options.database with value ${options.database} for ${options.name}`);\n      newOptions.database = '';\n      newOptions.jsonData = { ...jsonData, database: options.database };\n      optionsUpdated = true;\n    }\n\n    // Set default values for max open connections, max idle connection,\n    // and auto idle if they're all undefined\n    if (\n      jsonData.maxOpenConns === undefined &&\n      jsonData.maxIdleConns === undefined &&\n      jsonData.maxIdleConnsAuto === undefined\n    ) {\n      const { maxOpenConns, maxIdleConns } = config.sqlConnectionLimits;\n\n      logDebug(\n        `Setting default max open connections to ${maxOpenConns} and setting max idle connection to ${maxIdleConns}`\n      );\n\n      // Spread from the jsonData in new options in case\n      // the database field was migrated as well\n      newOptions.jsonData = {\n        ...newOptions.jsonData,\n        maxOpenConns: maxOpenConns,\n        maxIdleConns: maxIdleConns,\n        maxIdleConnsAuto: true,\n      };\n\n      // Make sure we issue an update if options changed\n      optionsUpdated = true;\n    }\n\n    // If the maximum connection lifetime hasn't been\n    // otherwise set fill in with the default from configuration\n    if (jsonData.connMaxLifetime === undefined) {\n      const { connMaxLifetime } = config.sqlConnectionLimits;\n\n      // Spread new options and add our value\n      newOptions.jsonData = {\n        ...newOptions.jsonData,\n        connMaxLifetime: connMaxLifetime,\n      };\n\n      // Note that we've updated the options\n      optionsUpdated = true;\n    }\n\n    // Only issue an update if we changed options\n    if (optionsUpdated) {\n      onOptionsChange(newOptions);\n    }\n  }, [onOptionsChange, options]);\n}\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\n\nexport function CheatSheet() {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div>\n      <h2>PostgreSQL cheat sheet</h2>\n      Time series:\n      <ul className={styles.ulPadding}>\n        <li>\n          return column named <i>time</i> (UTC in seconds or timestamp)\n        </li>\n        <li>return column(s) with numeric datatype as values</li>\n      </ul>\n      Optional:\n      <ul className={styles.ulPadding}>\n        <li>\n          return column named <i>metric</i> to represent the series name.\n        </li>\n        <li>If multiple value columns are returned the metric column is used as prefix.</li>\n        <li>If no column named metric is found the column name of the value column is used as series name</li>\n      </ul>\n      <p>Resultsets of time series queries need to be sorted by time.</p>\n      Table:\n      <ul className={styles.ulPadding}>\n        <li>return any set of columns</li>\n      </ul>\n      Macros:\n      <ul className={styles.ulPadding}>\n        <li>$__time(column) -&gt; column as &quot;time&quot;</li>\n        <li>$__timeEpoch -&gt; extract(epoch from column) as &quot;time&quot;</li>\n        <li>\n          $__timeFilter(column) -&gt; column BETWEEN &apos;2017-04-21T05:01:17Z&apos; AND\n          &apos;2017-04-21T05:01:17Z&apos;\n        </li>\n        <li>$__unixEpochFilter(column) -&gt; column &gt;= 1492750877 AND column &lt;= 1492750877</li>\n        <li>\n          $__unixEpochNanoFilter(column) -&gt; column &gt;= 1494410783152415214 AND column &lt;= 1494497183142514872\n        </li>\n        <li>\n          $__timeGroup(column,&apos;5m&apos;[, fillvalue]) -&gt; (extract(epoch from column)/300)::bigint*300 by setting\n          fillvalue grafana will fill in missing values according to the interval fillvalue can be either a literal\n          value, NULL or previous; previous will fill in the previous seen value or NULL if none has been seen yet\n        </li>\n        <li>\n          $__timeGroupAlias(column,&apos;5m&apos;) -&gt; (extract(epoch from column)/300)::bigint*300 AS\n          &quot;time&quot;\n        </li>\n        <li>$__unixEpochGroup(column,&apos;5m&apos;) -&gt; floor(column/300)*300</li>\n        <li>$__unixEpochGroupAlias(column,&apos;5m&apos;) -&gt; floor(column/300)*300 AS &quot;time&quot;</li>\n      </ul>\n      <p>Example of group by and order by with $__timeGroup:</p>\n      <pre>\n        <code>\n          SELECT $__timeGroup(date_time_col, &apos;1h&apos;), sum(value) as value <br />\n          FROM yourtable\n          <br />\n          GROUP BY time\n          <br />\n          ORDER BY time\n          <br />\n        </code>\n      </pre>\n      Or build your own conditionals using these macros which just return the values:\n      <ul className={styles.ulPadding}>\n        <li>$__timeFrom() -&gt; &apos;2017-04-21T05:01:17Z&apos;</li>\n        <li>$__timeTo() -&gt; &apos;2017-04-21T05:01:17Z&apos;</li>\n        <li>$__unixEpochFrom() -&gt; 1492750877</li>\n        <li>$__unixEpochTo() -&gt; 1492750877</li>\n        <li>$__unixEpochNanoFrom() -&gt; 1494410783152415214</li>\n        <li>$__unixEpochNanoTo() -&gt; 1494497183142514872</li>\n      </ul>\n    </div>\n  );\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    ulPadding: css({\n      margin: theme.spacing(1, 0),\n      paddingLeft: theme.spacing(5),\n    }),\n  };\n}\n","import React from 'react';\n\nimport { QueryEditorProps } from '@grafana/data';\nimport { SqlQueryEditor } from 'app/features/plugins/sql/components/QueryEditor';\nimport { SQLOptions, SQLQuery } from 'app/features/plugins/sql/types';\n\nimport { QueryHeaderProps } from '../../../features/plugins/sql/components/QueryHeader';\n\nimport { PostgresDatasource } from './datasource';\n\nconst queryHeaderProps: Pick<QueryHeaderProps, 'dialect'> = { dialect: 'postgres' };\n\nexport function PostgresQueryEditor(props: QueryEditorProps<PostgresDatasource, SQLQuery, SQLOptions>) {\n  return <SqlQueryEditor {...props} queryHeaderProps={queryHeaderProps} />;\n}\n","import { SQLOptions } from 'app/features/plugins/sql/types';\n\nexport enum PostgresTLSModes {\n  disable = 'disable',\n  require = 'require',\n  verifyCA = 'verify-ca',\n  verifyFull = 'verify-full',\n}\n\nexport enum PostgresTLSMethods {\n  filePath = 'file-path',\n  fileContent = 'file-content',\n}\nexport interface PostgresOptions extends SQLOptions {\n  tlsConfigurationMethod?: PostgresTLSMethods;\n  sslmode?: PostgresTLSModes;\n  sslRootCertFile?: string;\n  sslCertFile?: string;\n  sslKeyFile?: string;\n  postgresVersion?: number;\n  timescaledb?: boolean;\n  enableSecureSocksProxy?: boolean;\n}\n\nexport interface SecureJsonData {\n  password?: string;\n}\n","import { ScopedVars } from '@grafana/data';\nimport { TemplateSrv } from '@grafana/runtime';\nimport { VariableFormatID } from '@grafana/schema';\nimport { applyQueryDefaults } from 'app/features/plugins/sql/defaults';\nimport { SQLQuery, SqlQueryModel } from 'app/features/plugins/sql/types';\n\nexport class PostgresQueryModel implements SqlQueryModel {\n  target: SQLQuery;\n  templateSrv?: TemplateSrv;\n  scopedVars?: ScopedVars;\n\n  constructor(target?: SQLQuery, templateSrv?: TemplateSrv, scopedVars?: ScopedVars) {\n    this.target = applyQueryDefaults(target || { refId: 'A' });\n    this.templateSrv = templateSrv;\n    this.scopedVars = scopedVars;\n  }\n\n  interpolate() {\n    return this.templateSrv?.replace(this.target.rawSql, this.scopedVars, VariableFormatID.SQLString) || '';\n  }\n\n  quoteLiteral(value: string) {\n    return \"'\" + value.replace(/'/g, \"''\") + \"'\";\n  }\n}\n","export function getVersion() {\n  return \"SELECT current_setting('server_version_num')::int/100 as version\";\n}\n\nexport function getTimescaleDBVersion() {\n  return \"SELECT extversion FROM pg_extension WHERE extname = 'timescaledb'\";\n}\n\nexport function showTables() {\n  return `select quote_ident(table_name) as \"table\" from information_schema.tables\n    where quote_ident(table_schema) not in ('information_schema',\n                             'pg_catalog',\n                             '_timescaledb_cache',\n                             '_timescaledb_catalog',\n                             '_timescaledb_internal',\n                             '_timescaledb_config',\n                             'timescaledb_information',\n                             'timescaledb_experimental')\n      and ${buildSchemaConstraint()}`;\n}\n\nexport function getSchema(table?: string) {\n  return `select quote_ident(column_name) as \"column\", data_type as \"type\"\n    from information_schema.columns\n    where quote_ident(table_name) = '${table}'`;\n}\n\nfunction buildSchemaConstraint() {\n  // quote_ident protects hyphenated schemes\n  return `\n          quote_ident(table_schema) IN (\n          SELECT\n            CASE WHEN trim(s[i]) = '\"$user\"' THEN user ELSE trim(s[i]) END\n          FROM\n            generate_series(\n              array_lower(string_to_array(current_setting('search_path'),','),1),\n              array_upper(string_to_array(current_setting('search_path'),','),1)\n            ) as i,\n            string_to_array(current_setting('search_path'),',') s\n          )`;\n}\n","import {\n  ColumnDefinition,\n  getStandardSQLCompletionProvider,\n  LanguageCompletionProvider,\n  TableDefinition,\n  TableIdentifier,\n} from '@grafana/experimental';\nimport { DB, SQLQuery } from 'app/features/plugins/sql/types';\n\ninterface CompletionProviderGetterArgs {\n  getColumns: React.MutableRefObject<(t: SQLQuery) => Promise<ColumnDefinition[]>>;\n  getTables: React.MutableRefObject<(d?: string) => Promise<TableDefinition[]>>;\n}\n\nexport const getSqlCompletionProvider: (args: CompletionProviderGetterArgs) => LanguageCompletionProvider =\n  ({ getColumns, getTables }) =>\n  (monaco, language) => ({\n    ...(language && getStandardSQLCompletionProvider(monaco, language)),\n    tables: {\n      resolve: async () => {\n        return await getTables.current();\n      },\n    },\n    columns: {\n      resolve: async (t?: TableIdentifier) => {\n        return await getColumns.current({ table: t?.table, refId: 'A' });\n      },\n    },\n  });\n\nexport async function fetchColumns(db: DB, q: SQLQuery) {\n  const cols = await db.fields(q);\n  if (cols.length > 0) {\n    return cols.map((c) => {\n      return { name: c.value, type: c.value, description: c.value };\n    });\n  } else {\n    return [];\n  }\n}\n\nexport async function fetchTables(db: DB) {\n  const tables = await db.lookup?.();\n  return tables || [];\n}\n","import { isEmpty } from 'lodash';\n\nimport { RAQBFieldTypes, SQLQuery } from 'app/features/plugins/sql/types';\nimport { createSelectClause, haveColumns } from 'app/features/plugins/sql/utils/sql.utils';\n\nexport function getFieldConfig(type: string): { raqbFieldType: RAQBFieldTypes; icon: string } {\n  switch (type) {\n    case 'boolean': {\n      return { raqbFieldType: 'boolean', icon: 'toggle-off' };\n    }\n    case 'bit':\n    case 'bit varying':\n    case 'character':\n    case 'character varying':\n    case 'text': {\n      return { raqbFieldType: 'text', icon: 'text' };\n    }\n    case 'smallint':\n    case 'integer':\n    case 'bigint':\n    case 'decimal':\n    case 'numeric':\n    case 'real':\n    case 'double precision':\n    case 'serial':\n    case 'bigserial':\n    case 'smallserial': {\n      return { raqbFieldType: 'number', icon: 'calculator-alt' };\n    }\n    case 'date': {\n      return { raqbFieldType: 'date', icon: 'clock-nine' };\n    }\n    case 'time':\n    case 'time with time zone':\n    case 'time without time zone':\n    case 'interval': {\n      return { raqbFieldType: 'time', icon: 'clock-nine' };\n    }\n    case 'timestamp':\n    case 'timestamp with time zone':\n    case 'timestamp without time zone': {\n      return { raqbFieldType: 'datetime', icon: 'clock-nine' };\n    }\n    default:\n      return { raqbFieldType: 'text', icon: 'text' };\n  }\n}\n\nexport function toRawSql({ sql, table }: SQLQuery): string {\n  let rawQuery = '';\n\n  // Return early with empty string if there is no sql column\n  if (!sql || !haveColumns(sql.columns)) {\n    return rawQuery;\n  }\n\n  rawQuery += createSelectClause(sql.columns);\n\n  if (table) {\n    rawQuery += `FROM ${table} `;\n  }\n\n  if (sql.whereString) {\n    rawQuery += `WHERE ${sql.whereString} `;\n  }\n\n  if (sql.groupBy?.[0]?.property.name) {\n    const groupBy = sql.groupBy.map((g) => g.property.name).filter((g) => !isEmpty(g));\n    rawQuery += `GROUP BY ${groupBy.join(', ')} `;\n  }\n\n  if (sql.orderBy?.property.name) {\n    rawQuery += `ORDER BY ${sql.orderBy.property.name} `;\n  }\n\n  if (sql.orderBy?.property.name && sql.orderByDirection) {\n    rawQuery += `${sql.orderByDirection} `;\n  }\n\n  // Altough LIMIT 0 doesn't make sense, it is still possible to have LIMIT 0\n  if (sql.limit !== undefined && sql.limit >= 0) {\n    rawQuery += `LIMIT ${sql.limit} `;\n  }\n  return rawQuery;\n}\n","import { DataSourceInstanceSettings, ScopedVars } from '@grafana/data';\nimport { LanguageDefinition } from '@grafana/experimental';\nimport { TemplateSrv } from '@grafana/runtime';\nimport { SqlDatasource } from 'app/features/plugins/sql/datasource/SqlDatasource';\nimport { DB, SQLQuery, SQLSelectableValue } from 'app/features/plugins/sql/types';\nimport { formatSQL } from 'app/features/plugins/sql/utils/formatSQL';\n\nimport { PostgresQueryModel } from './PostgresQueryModel';\nimport { getSchema, getTimescaleDBVersion, getVersion, showTables } from './postgresMetaQuery';\nimport { fetchColumns, fetchTables, getSqlCompletionProvider } from './sqlCompletionProvider';\nimport { getFieldConfig, toRawSql } from './sqlUtil';\nimport { PostgresOptions } from './types';\n\nexport class PostgresDatasource extends SqlDatasource {\n  sqlLanguageDefinition: LanguageDefinition | undefined = undefined;\n\n  constructor(instanceSettings: DataSourceInstanceSettings<PostgresOptions>) {\n    super(instanceSettings);\n  }\n\n  getQueryModel(target?: SQLQuery, templateSrv?: TemplateSrv, scopedVars?: ScopedVars): PostgresQueryModel {\n    return new PostgresQueryModel(target, templateSrv, scopedVars);\n  }\n\n  async getVersion(): Promise<string> {\n    const value = await this.runSql<{ version: number }>(getVersion());\n    const results = value.fields.version?.values;\n\n    if (!results) {\n      return '';\n    }\n\n    return results[0].toString();\n  }\n\n  async getTimescaleDBVersion(): Promise<string | undefined> {\n    const value = await this.runSql<{ extversion: string }>(getTimescaleDBVersion());\n    const results = value.fields.extversion?.values;\n\n    if (!results) {\n      return undefined;\n    }\n\n    return results[0];\n  }\n\n  async fetchTables(): Promise<string[]> {\n    const tables = await this.runSql<{ table: string[] }>(showTables(), { refId: 'tables' });\n    return tables.fields.table?.values.flat() ?? [];\n  }\n\n  getSqlLanguageDefinition(db: DB): LanguageDefinition {\n    if (this.sqlLanguageDefinition !== undefined) {\n      return this.sqlLanguageDefinition;\n    }\n\n    const args = {\n      getColumns: { current: (query: SQLQuery) => fetchColumns(db, query) },\n      getTables: { current: () => fetchTables(db) },\n    };\n    this.sqlLanguageDefinition = {\n      id: 'pgsql',\n      completionProvider: getSqlCompletionProvider(args),\n      formatter: formatSQL,\n    };\n    return this.sqlLanguageDefinition;\n  }\n\n  async fetchFields(query: SQLQuery): Promise<SQLSelectableValue[]> {\n    const schema = await this.runSql<{ column: string; type: string }>(getSchema(query.table), { refId: 'columns' });\n    const result: SQLSelectableValue[] = [];\n    for (let i = 0; i < schema.length; i++) {\n      const column = schema.fields.column.values[i];\n      const type = schema.fields.type.values[i];\n      result.push({ label: column, value: column, type, ...getFieldConfig(type) });\n    }\n    return result;\n  }\n\n  getDB(): DB {\n    if (this.db !== undefined) {\n      return this.db;\n    }\n\n    return {\n      init: () => Promise.resolve(true),\n      datasets: () => Promise.resolve([]),\n      tables: () => this.fetchTables(),\n      getEditorLanguageDefinition: () => this.getSqlLanguageDefinition(this.db),\n      fields: async (query: SQLQuery) => {\n        if (!query?.table) {\n          return [];\n        }\n        return this.fetchFields(query);\n      },\n      validateQuery: (query) =>\n        Promise.resolve({ isError: false, isValid: true, query, error: '', rawSql: query.rawSql }),\n      dsID: () => this.id,\n      toRawSql,\n      lookup: async () => {\n        const tables = await this.fetchTables();\n        return tables.map((t) => ({ name: t, completion: t }));\n      },\n    };\n  }\n}\n","import { Dispatch, SetStateAction, useState } from 'react';\nimport { useDeepCompareEffect } from 'react-use';\n\nimport {\n  DataSourcePluginOptionsEditorProps,\n  DataSourceSettings,\n  SelectableValue,\n  updateDatasourcePluginJsonDataOption,\n  updateDatasourcePluginOption,\n} from '@grafana/data';\nimport { getBackendSrv, getDataSourceSrv } from '@grafana/runtime';\n\nimport { PostgresDatasource } from '../datasource';\nimport { PostgresOptions, PostgresTLSModes, SecureJsonData } from '../types';\n\nimport { postgresVersions } from './ConfigurationEditor';\n\ntype Options = {\n  props: DataSourcePluginOptionsEditorProps<PostgresOptions, SecureJsonData>;\n  setVersionOptions: Dispatch<SetStateAction<Array<SelectableValue<number>>>>;\n};\n\nexport function useAutoDetectFeatures({ props, setVersionOptions }: Options) {\n  const [saved, setSaved] = useState(false);\n  const { options, onOptionsChange } = props;\n\n  useDeepCompareEffect(() => {\n    const getVersion = async () => {\n      if (!saved) {\n        // We need to save the datasource before we can get the version so we can query the database with the options we have.\n        const result = await getBackendSrv().put<{ datasource: DataSourceSettings }>(\n          `/api/datasources/${options.id}`,\n          options\n        );\n\n        setSaved(true);\n        // This is needed or else we get an error when we try to save the datasource.\n        updateDatasourcePluginOption({ options, onOptionsChange }, 'version', result.datasource.version);\n      } else {\n        const datasource = await getDataSourceSrv().get(options.name);\n\n        if (datasource instanceof PostgresDatasource) {\n          const version = await datasource.getVersion();\n          const versionNumber = parseInt(version, 10);\n\n          // timescaledb is only available for 9.6+\n          if (versionNumber >= 906 && !options.jsonData.timescaledb) {\n            const timescaledbVersion = await datasource.getTimescaleDBVersion();\n            if (timescaledbVersion) {\n              updateDatasourcePluginJsonDataOption({ options, onOptionsChange }, 'timescaledb', true);\n            }\n          }\n          const major = Math.trunc(versionNumber / 100);\n          const minor = versionNumber % 100;\n          let name = String(major);\n          if (versionNumber < 1000) {\n            name = String(major) + '.' + String(minor);\n          }\n          if (!postgresVersions.find((p) => p.value === versionNumber)) {\n            setVersionOptions((prev) => [...prev, { label: name, value: versionNumber }]);\n          }\n          if (options.jsonData.postgresVersion === undefined || options.jsonData.postgresVersion !== versionNumber) {\n            updateDatasourcePluginJsonDataOption({ options, onOptionsChange }, 'postgresVersion', versionNumber);\n          }\n        }\n      }\n    };\n    // This logic is only going to run when we create a new datasource\n    if (isValidConfig(options)) {\n      getVersion();\n    }\n  }, [options, saved, setVersionOptions]);\n}\n\nfunction isValidConfig(options: DataSourceSettings<PostgresOptions, SecureJsonData>) {\n  return (\n    options.url &&\n    options.jsonData.database &&\n    options.user &&\n    (options.secureJsonData?.password || options.secureJsonFields?.password) &&\n    (options.jsonData.sslmode === PostgresTLSModes.disable ||\n      (options.jsonData.sslCertFile && options.jsonData.sslKeyFile && options.jsonData.sslRootCertFile)) &&\n    !options.jsonData.postgresVersion &&\n    !options.readOnly\n  );\n}\n","import React, { SyntheticEvent, useState } from 'react';\n\nimport {\n  DataSourcePluginOptionsEditorProps,\n  onUpdateDatasourceJsonDataOption,\n  onUpdateDatasourceSecureJsonDataOption,\n  SelectableValue,\n  updateDatasourcePluginJsonDataOption,\n  updateDatasourcePluginResetOption,\n} from '@grafana/data';\nimport { ConfigSection, ConfigSubSection, DataSourceDescription, Stack } from '@grafana/experimental';\nimport { config } from '@grafana/runtime';\nimport {\n  Input,\n  Select,\n  SecretInput,\n  Field,\n  Tooltip,\n  Label,\n  Icon,\n  Switch,\n  SecureSocksProxySettings,\n  Collapse,\n} from '@grafana/ui';\nimport { ConnectionLimits } from 'app/features/plugins/sql/components/configuration/ConnectionLimits';\nimport { Divider } from 'app/features/plugins/sql/components/configuration/Divider';\nimport { TLSSecretsConfig } from 'app/features/plugins/sql/components/configuration/TLSSecretsConfig';\nimport { useMigrateDatabaseFields } from 'app/features/plugins/sql/components/configuration/useMigrateDatabaseFields';\n\nimport { PostgresOptions, PostgresTLSMethods, PostgresTLSModes, SecureJsonData } from '../types';\n\nimport { useAutoDetectFeatures } from './useAutoDetectFeatures';\n\nexport const postgresVersions: Array<SelectableValue<number>> = [\n  { label: '9.0', value: 900 },\n  { label: '9.1', value: 901 },\n  { label: '9.2', value: 902 },\n  { label: '9.3', value: 903 },\n  { label: '9.4', value: 904 },\n  { label: '9.5', value: 905 },\n  { label: '9.6', value: 906 },\n  { label: '10', value: 1000 },\n  { label: '11', value: 1100 },\n  { label: '12', value: 1200 },\n  { label: '13', value: 1300 },\n  { label: '14', value: 1400 },\n  { label: '15', value: 1500 },\n];\n\nexport const PostgresConfigEditor = (props: DataSourcePluginOptionsEditorProps<PostgresOptions, SecureJsonData>) => {\n  const [versionOptions, setVersionOptions] = useState(postgresVersions);\n  const [isOpen, setIsOpen] = useState(true);\n\n  useAutoDetectFeatures({ props, setVersionOptions });\n  useMigrateDatabaseFields(props);\n\n  const { options, onOptionsChange } = props;\n  const jsonData = options.jsonData;\n\n  const onResetPassword = () => {\n    updateDatasourcePluginResetOption(props, 'password');\n  };\n\n  const tlsModes: Array<SelectableValue<PostgresTLSModes>> = [\n    { value: PostgresTLSModes.disable, label: 'disable' },\n    { value: PostgresTLSModes.require, label: 'require' },\n    { value: PostgresTLSModes.verifyCA, label: 'verify-ca' },\n    { value: PostgresTLSModes.verifyFull, label: 'verify-full' },\n  ];\n\n  const tlsMethods: Array<SelectableValue<PostgresTLSMethods>> = [\n    { value: PostgresTLSMethods.filePath, label: 'File system path' },\n    { value: PostgresTLSMethods.fileContent, label: 'Certificate content' },\n  ];\n\n  const onJSONDataOptionSelected = (property: keyof PostgresOptions) => {\n    return (value: SelectableValue) => {\n      updateDatasourcePluginJsonDataOption(props, property, value.value);\n    };\n  };\n\n  const onTimeScaleDBChanged = (event: SyntheticEvent<HTMLInputElement>) => {\n    updateDatasourcePluginJsonDataOption(props, 'timescaledb', event.currentTarget.checked);\n  };\n\n  const onDSOptionChanged = (property: keyof PostgresOptions) => {\n    return (event: SyntheticEvent<HTMLInputElement>) => {\n      onOptionsChange({ ...options, ...{ [property]: event.currentTarget.value } });\n    };\n  };\n\n  const WIDTH_LONG = 40;\n\n  return (\n    <>\n      <DataSourceDescription\n        dataSourceName=\"Postgres\"\n        docsLink=\"https://grafana.com/docs/grafana/latest/datasources/postgres/\"\n        hasRequiredFields={true}\n      />\n\n      <Divider />\n\n      <Collapse collapsible label=\"User Permissions\" isOpen={isOpen} onToggle={() => setIsOpen((x) => !x)}>\n        The database user should only be granted SELECT permissions on the specified database &amp; tables you want to\n        query. <br />\n        Grafana does not validate that queries are safe so queries can contain any SQL statement. For example,\n        statements like <code>DELETE FROM user;</code> and <code>DROP TABLE user;</code> would be executed. <br />\n        To protect against this we <strong>Highly</strong> recommend you create a specific PostgreSQL user with\n        restricted permissions. Check out the docs for more information.\n      </Collapse>\n\n      <Divider />\n\n      <ConfigSection title=\"Connection\">\n        <Field label=\"Host URL\" required>\n          <Input\n            width={WIDTH_LONG}\n            name=\"host\"\n            type=\"text\"\n            value={options.url || ''}\n            placeholder=\"localhost:5432\"\n            onChange={onDSOptionChanged('url')}\n          />\n        </Field>\n\n        <Field label=\"Database name\" required>\n          <Input\n            width={WIDTH_LONG}\n            name=\"database\"\n            value={jsonData.database || ''}\n            placeholder=\"Database\"\n            onChange={onUpdateDatasourceJsonDataOption(props, 'database')}\n          />\n        </Field>\n      </ConfigSection>\n\n      <Divider />\n\n      <ConfigSection title=\"Authentication\">\n        <Field label=\"Username\" required>\n          <Input\n            width={WIDTH_LONG}\n            value={options.user || ''}\n            placeholder=\"Username\"\n            onChange={onDSOptionChanged('user')}\n          />\n        </Field>\n\n        <Field label=\"Password\" required>\n          <SecretInput\n            width={WIDTH_LONG}\n            placeholder=\"Password\"\n            isConfigured={options.secureJsonFields && options.secureJsonFields.password}\n            onReset={onResetPassword}\n            onBlur={onUpdateDatasourceSecureJsonDataOption(props, 'password')}\n          />\n        </Field>\n\n        <Field\n          label={\n            <Label>\n              <Stack gap={0.5}>\n                <span>TLS/SSL Mode</span>\n                <Tooltip\n                  content={\n                    <span>\n                      This option determines whether or with what priority a secure TLS/SSL TCP/IP connection will be\n                      negotiated with the server\n                    </span>\n                  }\n                >\n                  <Icon name=\"info-circle\" size=\"sm\" />\n                </Tooltip>\n              </Stack>\n            </Label>\n          }\n        >\n          <Select\n            options={tlsModes}\n            value={jsonData.sslmode || PostgresTLSModes.verifyFull}\n            onChange={onJSONDataOptionSelected('sslmode')}\n            width={WIDTH_LONG}\n          />\n        </Field>\n\n        {options.jsonData.sslmode !== PostgresTLSModes.disable ? (\n          <Field\n            label={\n              <Label>\n                <Stack gap={0.5}>\n                  <span>TLS/SSL Method</span>\n                  <Tooltip\n                    content={\n                      <span>\n                        This option determines how TLS/SSL certifications are configured. Selecting{' '}\n                        <i>File system path</i> will allow you to configure certificates by specifying paths to existing\n                        certificates on the local file system where Grafana is running. Be sure that the file is\n                        readable by the user executing the Grafana process.\n                        <br />\n                        <br />\n                        Selecting <i>Certificate content</i> will allow you to configure certificates by specifying its\n                        content. The content will be stored encrypted in Grafana&apos;s database. When connecting to the\n                        database the certificates will be written as files to Grafana&apos;s configured data path on the\n                        local file system.\n                      </span>\n                    }\n                  >\n                    <Icon name=\"info-circle\" size=\"sm\" />\n                  </Tooltip>\n                </Stack>\n              </Label>\n            }\n          >\n            <Select\n              options={tlsMethods}\n              value={jsonData.tlsConfigurationMethod || PostgresTLSMethods.filePath}\n              onChange={onJSONDataOptionSelected('tlsConfigurationMethod')}\n              width={WIDTH_LONG}\n            />\n          </Field>\n        ) : null}\n      </ConfigSection>\n\n      {jsonData.sslmode !== PostgresTLSModes.disable ? (\n        <>\n          <Divider />\n          <ConfigSection title=\"TLS/SSL Auth Details\">\n            {jsonData.tlsConfigurationMethod === PostgresTLSMethods.fileContent ? (\n              <TLSSecretsConfig\n                showCACert={\n                  jsonData.sslmode === PostgresTLSModes.verifyCA || jsonData.sslmode === PostgresTLSModes.verifyFull\n                }\n                editorProps={props}\n                labelWidth={WIDTH_LONG}\n              />\n            ) : (\n              <>\n                <Field\n                  label={\n                    <Label>\n                      <Stack gap={0.5}>\n                        <span>TLS/SSL Root Certificate</span>\n                        <Tooltip\n                          content={\n                            <span>\n                              If the selected TLS/SSL mode requires a server root certificate, provide the path to the\n                              file here.\n                            </span>\n                          }\n                        >\n                          <Icon name=\"info-circle\" size=\"sm\" />\n                        </Tooltip>\n                      </Stack>\n                    </Label>\n                  }\n                >\n                  <Input\n                    value={jsonData.sslRootCertFile || ''}\n                    onChange={onUpdateDatasourceJsonDataOption(props, 'sslRootCertFile')}\n                    placeholder=\"TLS/SSL root cert file\"\n                    width={WIDTH_LONG}\n                  />\n                </Field>\n                <Field\n                  label={\n                    <Label>\n                      <Stack gap={0.5}>\n                        <span>TLS/SSL Client Certificate</span>\n                        <Tooltip\n                          content={\n                            <span>\n                              To authenticate with an TLS/SSL client certificate, provide the path to the file here. Be\n                              sure that the file is readable by the user executing the grafana process.\n                            </span>\n                          }\n                        >\n                          <Icon name=\"info-circle\" size=\"sm\" />\n                        </Tooltip>\n                      </Stack>\n                    </Label>\n                  }\n                >\n                  <Input\n                    value={jsonData.sslCertFile || ''}\n                    onChange={onUpdateDatasourceJsonDataOption(props, 'sslCertFile')}\n                    placeholder=\"TLS/SSL client cert file\"\n                    width={WIDTH_LONG}\n                  />\n                </Field>\n                <Field\n                  label={\n                    <Label>\n                      <Stack gap={0.5}>\n                        <span>TLS/SSL Client Key</span>\n                        <Tooltip\n                          content={\n                            <span>\n                              To authenticate with a client TLS/SSL certificate, provide the path to the corresponding\n                              key file here. Be sure that the file is <i>only</i> readable by the user executing the\n                              grafana process.\n                            </span>\n                          }\n                        >\n                          <Icon name=\"info-circle\" size=\"sm\" />\n                        </Tooltip>\n                      </Stack>\n                    </Label>\n                  }\n                >\n                  <Input\n                    value={jsonData.sslKeyFile || ''}\n                    onChange={onUpdateDatasourceJsonDataOption(props, 'sslKeyFile')}\n                    placeholder=\"TLS/SSL client key file\"\n                    width={WIDTH_LONG}\n                  />\n                </Field>\n              </>\n            )}\n          </ConfigSection>\n        </>\n      ) : null}\n\n      <Divider />\n\n      <ConfigSection title=\"Additional settings\" isCollapsible>\n        <ConfigSubSection title=\"PostgreSQL Options\">\n          <Field\n            label={\n              <Label>\n                <Stack gap={0.5}>\n                  <span>Version</span>\n                  <Tooltip\n                    content={\n                      <span>This option controls what functions are available in the PostgreSQL query builder</span>\n                    }\n                  >\n                    <Icon name=\"info-circle\" size=\"sm\" />\n                  </Tooltip>\n                </Stack>\n              </Label>\n            }\n          >\n            <Select\n              value={jsonData.postgresVersion || 903}\n              onChange={onJSONDataOptionSelected('postgresVersion')}\n              options={versionOptions}\n              width={WIDTH_LONG}\n            />\n          </Field>\n          <Field\n            label={\n              <Label>\n                <Stack gap={0.5}>\n                  <span>Min time interval</span>\n                  <Tooltip\n                    content={\n                      <span>\n                        A lower limit for the auto group by time interval. Recommended to be set to write frequency, for\n                        example\n                        <code>1m</code> if your data is written every minute.\n                      </span>\n                    }\n                  >\n                    <Icon name=\"info-circle\" size=\"sm\" />\n                  </Tooltip>\n                </Stack>\n              </Label>\n            }\n          >\n            <Input\n              placeholder=\"1m\"\n              value={jsonData.timeInterval || ''}\n              onChange={onUpdateDatasourceJsonDataOption(props, 'timeInterval')}\n              width={WIDTH_LONG}\n            />\n          </Field>\n          <Field\n            label={\n              <Label>\n                <Stack gap={0.5}>\n                  <span>TimescaleDB</span>\n                  <Tooltip\n                    content={\n                      <span>\n                        TimescaleDB is a time-series database built as a PostgreSQL extension. If enabled, Grafana will\n                        use\n                        <code>time_bucket</code> in the <code>$__timeGroup</code> macro and display TimescaleDB specific\n                        aggregate functions in the query builder.\n                      </span>\n                    }\n                  >\n                    <Icon name=\"info-circle\" size=\"sm\" />\n                  </Tooltip>\n                </Stack>\n              </Label>\n            }\n          >\n            <Switch value={jsonData.timescaledb || false} onChange={onTimeScaleDBChanged} width={WIDTH_LONG} />\n          </Field>\n        </ConfigSubSection>\n\n        <ConnectionLimits options={options} onOptionsChange={onOptionsChange} />\n\n        {config.secureSocksDSProxyEnabled && (\n          <SecureSocksProxySettings options={options} onOptionsChange={() => onOptionsChange(options)} />\n        )}\n      </ConfigSection>\n    </>\n  );\n};\n","import { DataSourcePlugin } from '@grafana/data';\nimport { SQLQuery } from 'app/features/plugins/sql/types';\n\nimport { CheatSheet } from './CheatSheet';\nimport { PostgresQueryEditor } from './PostgresQueryEditor';\nimport { PostgresConfigEditor } from './configuration/ConfigurationEditor';\nimport { PostgresDatasource } from './datasource';\nimport { PostgresOptions, SecureJsonData } from './types';\n\nexport const plugin = new DataSourcePlugin<PostgresDatasource, SQLQuery, PostgresOptions, SecureJsonData>(\n  PostgresDatasource\n)\n  .setQueryEditor(PostgresQueryEditor)\n  .setQueryEditorHelp(CheatSheet)\n  .setConfigEditor(PostgresConfigEditor);\n","import { useEffect, useRef } from 'react';\nvar isPrimitive = function (val) { return val !== Object(val); };\nvar useCustomCompareEffect = function (effect, deps, depsEqual) {\n    if (process.env.NODE_ENV !== 'production') {\n        if (!(deps instanceof Array) || !deps.length) {\n            console.warn('`useCustomCompareEffect` should not be used with no dependencies. Use React.useEffect instead.');\n        }\n        if (deps.every(isPrimitive)) {\n            console.warn('`useCustomCompareEffect` should not be used with dependencies that are all primitive values. Use React.useEffect instead.');\n        }\n        if (typeof depsEqual !== 'function') {\n            console.warn('`useCustomCompareEffect` should be used with depsEqual callback for comparing deps list');\n        }\n    }\n    var ref = useRef(undefined);\n    if (!ref.current || !depsEqual(deps, ref.current)) {\n        ref.current = deps;\n    }\n    useEffect(effect, ref.current);\n};\nexport default useCustomCompareEffect;\n","import isDeepEqualReact from 'fast-deep-equal/react';\nexport default isDeepEqualReact;\n","import useCustomCompareEffect from './useCustomCompareEffect';\nimport isDeepEqual from './misc/isDeepEqual';\nvar isPrimitive = function (val) { return val !== Object(val); };\nvar useDeepCompareEffect = function (effect, deps) {\n    if (process.env.NODE_ENV !== 'production') {\n        if (!(deps instanceof Array) || !deps.length) {\n            console.warn('`useDeepCompareEffect` should not be used with no dependencies. Use React.useEffect instead.');\n        }\n        if (deps.every(isPrimitive)) {\n            console.warn('`useDeepCompareEffect` should not be used with dependencies that are all primitive values. Use React.useEffect instead.');\n        }\n    }\n    useCustomCompareEffect(effect, deps, isDeepEqual);\n};\nexport default useDeepCompareEffect;\n","'use strict';\n\n// do not edit .js files directly - edit src/index.jst\n\n\n\nmodule.exports = function equal(a, b) {\n  if (a === b) return true;\n\n  if (a && b && typeof a == 'object' && typeof b == 'object') {\n    if (a.constructor !== b.constructor) return false;\n\n    var length, i, keys;\n    if (Array.isArray(a)) {\n      length = a.length;\n      if (length != b.length) return false;\n      for (i = length; i-- !== 0;)\n        if (!equal(a[i], b[i])) return false;\n      return true;\n    }\n\n\n\n    if (a.constructor === RegExp) return a.source === b.source && a.flags === b.flags;\n    if (a.valueOf !== Object.prototype.valueOf) return a.valueOf() === b.valueOf();\n    if (a.toString !== Object.prototype.toString) return a.toString() === b.toString();\n\n    keys = Object.keys(a);\n    length = keys.length;\n    if (length !== Object.keys(b).length) return false;\n\n    for (i = length; i-- !== 0;)\n      if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;\n\n    for (i = length; i-- !== 0;) {\n      var key = keys[i];\n\n      if (key === '_owner' && a.$$typeof) {\n        // React-specific: avoid traversing React elements' _owner.\n        //  _owner contains circular references\n        // and is not needed when comparing the actual elements (and not their owners)\n        continue;\n      }\n\n      if (!equal(a[key], b[key])) return false;\n    }\n\n    return true;\n  }\n\n  // true if both NaN, false otherwise\n  return a!==a && b!==b;\n};\n"],"names":["toNumber","text","ConnectionLimits","props","onOptionsChange","options","jsonData","autoIdle","updateJsonData","values","newOpts","onJSONDataNumberChanged","property","number","onMaxConnectionsChanged","onConnectionIdleAutoChanged","idleConns","maxConns","labelWidth","e","newVal","Divider","styles","getStyles","theme","TLSSecretsConfig","editorProps","showCACert","showKeyPair","secureJsonFields","useMigrateDatabaseFields","newOptions","optionsUpdated","maxOpenConns","maxIdleConns","connMaxLifetime","CheatSheet","queryHeaderProps","PostgresQueryEditor","PostgresTLSModes","PostgresTLSMethods","PostgresQueryModel","target","templateSrv","scopedVars","value","getVersion","getTimescaleDBVersion","showTables","buildSchemaConstraint","getSchema","table","getSqlCompletionProvider","getColumns","getTables","monaco","language","t","fetchColumns","db","q","cols","c","fetchTables","getFieldConfig","type","toRawSql","sql","rawQuery","groupBy","g","PostgresDatasource","SqlDatasource","instanceSettings","results","args","query","formatSQL","schema","result","i","column","useAutoDetectFeatures","setVersionOptions","saved","setSaved","useDeepCompareEffect","datasource","version","versionNumber","major","minor","name","postgresVersions","p","prev","isValidConfig","PostgresConfigEditor","versionOptions","isOpen","setIsOpen","onResetPassword","tlsModes","tlsMethods","onJSONDataOptionSelected","onTimeScaleDBChanged","event","onDSOptionChanged","WIDTH_LONG","DataSourceDescription","Collapse","x","ConfigSection","Field","Input","SecretInput","Label","Stack","Tooltip","Icon","Select","ConfigSubSection","Switch","config","SecureSocksProxySettings","isPrimitive","val","useCustomCompareEffect","effect","deps","depsEqual","ref","isDeepEqual","module","equal","a","b","length","keys","key"],"sourceRoot":""}