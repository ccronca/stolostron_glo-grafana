{"version":3,"file":"AlertRuleListIndex.7a0a9dc57757541d072a.js","mappings":"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","sources":["webpack://grafana/./public/app/core/hooks/useCleanup.ts","webpack://grafana/./public/app/features/alerting/unified/components/export/GrafanaRulesExporter.tsx","webpack://grafana/./public/app/features/alerting/unified/MoreActionsRuleButtons.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/NoRulesCTA.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/RuleListErrors.tsx","webpack://grafana/./public/app/features/alerting/unified/components/export/GrafanaRuleFolderExporter.tsx","webpack://grafana/./public/app/features/alerting/unified/components/export/GrafanaRuleGroupExporter.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/ReorderRuleGroupModal.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/RulesGroup.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/useCombinedGroupNamespace.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/CloudRules.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/GrafanaRules.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/RuleListGroupView.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/RuleListStateSection.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/RuleListStateView.tsx","webpack://grafana/./public/app/features/alerting/unified/hooks/useFilteredRules.ts","webpack://grafana/./public/app/features/alerting/unified/components/rules/MultipleDataSourcePicker.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/RulesFilter.tsx","webpack://grafana/./public/app/features/alerting/unified/RuleList.tsx","webpack://grafana/./public/app/features/alerting/unified/components/Authorize.tsx","webpack://grafana/./public/app/features/alerting/unified/components/export/FileExportPreview.tsx","webpack://grafana/./public/app/features/alerting/unified/components/export/GrafanaExportDrawer.tsx","webpack://grafana/./public/app/features/alerting/unified/components/export/providers.ts","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/NeedHelpInfo.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/RuleEditorSection.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/RuleInspector.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/dag.ts","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/util.ts","webpack://grafana/./public/app/features/alerting/unified/components/rules/ActionIcon.tsx","webpack://grafana/./public/app/features/alerting/unified/hooks/useURLSearchParams.ts","webpack://grafana/./public/app/features/expressions/guards.ts","webpack://grafana/./.yarn/__virtual__/react-use-virtual-dd7926f458/0/cache/react-use-npm-17.4.0-0ef4521544-98566c4817.zip/node_modules/react-use/esm/useInterval.js"],"sourcesContent":["import { useEffect, useRef } from 'react';\n\nimport { useDispatch } from 'app/types';\n\nimport { cleanUpAction, CleanUpAction } from '../actions/cleanUp';\n\nexport function useCleanup(cleanupAction: CleanUpAction) {\n  const dispatch = useDispatch();\n  //bit of a hack to unburden user from having to wrap stateSelcetor in a useCallback. Otherwise cleanup would happen on every render\n  const selectorRef = useRef(cleanupAction);\n  selectorRef.current = cleanupAction;\n  useEffect(() => {\n    return () => {\n      dispatch(cleanUpAction({ cleanupAction: selectorRef.current }));\n    };\n  }, [dispatch]);\n}\n","import React, { useState } from 'react';\n\nimport { LoadingPlaceholder } from '@grafana/ui';\n\nimport { alertRuleApi } from '../../api/alertRuleApi';\n\nimport { FileExportPreview } from './FileExportPreview';\nimport { GrafanaExportDrawer } from './GrafanaExportDrawer';\nimport { allGrafanaExportProviders, ExportFormats } from './providers';\n\ninterface GrafanaRulesExporterProps {\n  onClose: () => void;\n}\n\nexport function GrafanaRulesExporter({ onClose }: GrafanaRulesExporterProps) {\n  const [activeTab, setActiveTab] = useState<ExportFormats>('yaml');\n\n  return (\n    <GrafanaExportDrawer\n      activeTab={activeTab}\n      onTabChange={setActiveTab}\n      onClose={onClose}\n      formatProviders={Object.values(allGrafanaExportProviders)}\n    >\n      <GrafanaRulesExportPreview exportFormat={activeTab} onClose={onClose} />\n    </GrafanaExportDrawer>\n  );\n}\n\ninterface GrafanaRulesExportPreviewProps {\n  exportFormat: ExportFormats;\n  onClose: () => void;\n}\n\nfunction GrafanaRulesExportPreview({ exportFormat, onClose }: GrafanaRulesExportPreviewProps) {\n  const { currentData: rulesDefinition = '', isFetching } = alertRuleApi.endpoints.exportRules.useQuery({\n    format: exportFormat,\n  });\n\n  const downloadFileName = `alert-rules-${new Date().getTime()}`;\n\n  if (isFetching) {\n    return <LoadingPlaceholder text=\"Loading....\" />;\n  }\n\n  return (\n    <FileExportPreview\n      format={exportFormat}\n      textDefinition={rulesDefinition}\n      downloadFileName={downloadFileName}\n      onClose={onClose}\n    />\n  );\n}\n","import { isEmpty } from 'lodash';\nimport React from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { useToggle } from 'react-use';\n\nimport { urlUtil } from '@grafana/data';\nimport { Button, Dropdown, Icon, LinkButton, Menu, MenuItem } from '@grafana/ui';\n\nimport { logInfo, LogMessages } from './Analytics';\nimport { GrafanaRulesExporter } from './components/export/GrafanaRulesExporter';\nimport { AlertingAction, useAlertingAbility } from './hooks/useAbilities';\n\ninterface Props {}\n\nexport function MoreActionsRuleButtons({}: Props) {\n  const [createRuleSupported, createRuleAllowed] = useAlertingAbility(AlertingAction.CreateAlertRule);\n  const [createCloudRuleSupported, createCloudRuleAllowed] = useAlertingAbility(AlertingAction.CreateExternalAlertRule);\n  const [exportRulesSupported, exportRulesAllowed] = useAlertingAbility(AlertingAction.ExportGrafanaManagedRules);\n\n  const location = useLocation();\n  const [showExportDrawer, toggleShowExportDrawer] = useToggle(false);\n\n  const canCreateGrafanaRules = createRuleSupported && createRuleAllowed;\n  const canCreateCloudRules = createCloudRuleSupported && createCloudRuleAllowed;\n  const canExportRules = exportRulesSupported && exportRulesAllowed;\n\n  const menuItems: JSX.Element[] = [];\n\n  if (canCreateGrafanaRules || canCreateCloudRules) {\n    menuItems.push(\n      <MenuItem\n        label=\"New recording rule\"\n        key=\"new-recording-rule\"\n        url={urlUtil.renderUrl(`alerting/new/recording`, {\n          returnTo: location.pathname + location.search,\n        })}\n      />\n    );\n  }\n\n  if (canExportRules) {\n    menuItems.push(\n      <MenuItem label=\"Export all Grafana-managed rules\" key=\"export-all-rules\" onClick={toggleShowExportDrawer} />\n    );\n  }\n\n  return (\n    <>\n      {(canCreateGrafanaRules || canCreateCloudRules) && (\n        <LinkButton\n          href={urlUtil.renderUrl('alerting/new/alerting', { returnTo: location.pathname + location.search })}\n          icon=\"plus\"\n          onClick={() => logInfo(LogMessages.alertRuleFromScratch)}\n        >\n          New alert rule\n        </LinkButton>\n      )}\n\n      {!isEmpty(menuItems) && (\n        <Dropdown overlay={<Menu>{menuItems}</Menu>}>\n          <Button variant=\"secondary\">\n            More\n            <Icon name=\"angle-down\" />\n          </Button>\n        </Dropdown>\n      )}\n      {canExportRules && showExportDrawer && <GrafanaRulesExporter onClose={toggleShowExportDrawer} />}\n    </>\n  );\n}\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data/src/themes';\nimport { CallToActionCard, useStyles2, Stack } from '@grafana/ui';\nimport EmptyListCTA from 'app/core/components/EmptyListCTA/EmptyListCTA';\n\nimport { logInfo, LogMessages } from '../../Analytics';\nimport { useRulesAccess } from '../../utils/accessControlHooks';\n\nexport const NoRulesSplash = () => {\n  const { canCreateGrafanaRules, canCreateCloudRules } = useRulesAccess();\n  const styles = useStyles2(getStyles);\n  if (canCreateGrafanaRules || canCreateCloudRules) {\n    return (\n      <div>\n        <p>{\"You haven't created any alert rules yet\"}</p>\n        <Stack gap={1}>\n          <div className={styles.newRuleCard}>\n            <EmptyListCTA\n              title=\"\"\n              buttonIcon=\"bell\"\n              buttonLink={'alerting/new/alerting'}\n              buttonTitle=\"New alert rule\"\n              proTip=\"you can also create alert rules from existing panels and queries.\"\n              proTipLink=\"https://grafana.com/docs/\"\n              proTipLinkTitle=\"Learn more\"\n              proTipTarget=\"_blank\"\n              onClick={() => logInfo(LogMessages.alertRuleFromScratch)}\n            />\n          </div>\n\n          <div className={styles.newRuleCard}>\n            <EmptyListCTA\n              title=\"\"\n              buttonIcon=\"plus\"\n              buttonLink={'alerting/new/recording'}\n              buttonTitle=\"New recording rule\"\n              onClick={() => logInfo(LogMessages.recordingRuleFromScratch)}\n            />\n          </div>\n        </Stack>\n      </div>\n    );\n  }\n  return <CallToActionCard message=\"No rules exist yet.\" callToActionElement={<div />} />;\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  newRuleCard: css`\n    width: calc(50% - ${theme.spacing(1)});\n\n    > div {\n      height: 100%;\n    }\n  `,\n});\n","import { css } from '@emotion/css';\nimport { SerializedError } from '@reduxjs/toolkit';\nimport pluralize from 'pluralize';\nimport React, { useMemo, ReactElement, useState, FC } from 'react';\nimport { useLocalStorage } from 'react-use';\n\nimport { DataSourceInstanceSettings, GrafanaTheme2 } from '@grafana/data';\nimport { Alert, Button, Tooltip, useStyles2 } from '@grafana/ui';\n\nimport { useUnifiedAlertingSelector } from '../../hooks/useUnifiedAlertingSelector';\nimport { getRulesDataSources, GRAFANA_RULES_SOURCE_NAME } from '../../utils/datasource';\nimport { makeDataSourceLink } from '../../utils/misc';\nimport { isRulerNotSupportedResponse } from '../../utils/rules';\n\nexport function RuleListErrors(): ReactElement {\n  const [expanded, setExpanded] = useState(false);\n  const [closed, setClosed] = useLocalStorage('grafana.unifiedalerting.hideErrors', false);\n  const dataSourceConfigRequests = useUnifiedAlertingSelector((state) => state.dataSources);\n  const promRuleRequests = useUnifiedAlertingSelector((state) => state.promRules);\n  const rulerRuleRequests = useUnifiedAlertingSelector((state) => state.rulerRules);\n  const styles = useStyles2(getStyles);\n\n  const errors = useMemo((): JSX.Element[] => {\n    const [dataSourceConfigErrors, promRequestErrors, rulerRequestErrors] = [\n      dataSourceConfigRequests,\n      promRuleRequests,\n      rulerRuleRequests,\n    ].map((requests) =>\n      getRulesDataSources().reduce<Array<{ error: SerializedError; dataSource: DataSourceInstanceSettings }>>(\n        (result, dataSource) => {\n          const error = requests[dataSource.name]?.error;\n          if (requests[dataSource.name] && error && !isRulerNotSupportedResponse(requests[dataSource.name])) {\n            return [...result, { dataSource, error }];\n          }\n          return result;\n        },\n        []\n      )\n    );\n    const grafanaPromError = promRuleRequests[GRAFANA_RULES_SOURCE_NAME]?.error;\n    const grafanaRulerError = rulerRuleRequests[GRAFANA_RULES_SOURCE_NAME]?.error;\n\n    const result: JSX.Element[] = [];\n\n    if (grafanaPromError) {\n      result.push(<>Failed to load Grafana rules state: {grafanaPromError.message || 'Unknown error.'}</>);\n    }\n    if (grafanaRulerError) {\n      result.push(<>Failed to load Grafana rules config: {grafanaRulerError.message || 'Unknown error.'}</>);\n    }\n\n    dataSourceConfigErrors.forEach(({ dataSource, error }) => {\n      result.push(\n        <>\n          Failed to load the data source configuration for{' '}\n          <a href={makeDataSourceLink(dataSource)} className={styles.dsLink}>\n            {dataSource.name}\n          </a>\n          : {error.message || 'Unknown error.'}\n        </>\n      );\n    });\n\n    promRequestErrors.forEach(({ dataSource, error }) =>\n      result.push(\n        <>\n          Failed to load rules state from{' '}\n          <a href={makeDataSourceLink(dataSource)} className={styles.dsLink}>\n            {dataSource.name}\n          </a>\n          : {error.message || 'Unknown error.'}\n        </>\n      )\n    );\n\n    rulerRequestErrors.forEach(({ dataSource, error }) =>\n      result.push(\n        <>\n          Failed to load rules config from{' '}\n          <a href={makeDataSourceLink(dataSource)} className={styles.dsLink}>\n            {dataSource.name}\n          </a>\n          : {error.message || 'Unknown error.'}\n        </>\n      )\n    );\n\n    return result;\n  }, [dataSourceConfigRequests, promRuleRequests, rulerRuleRequests, styles.dsLink]);\n\n  return (\n    <>\n      {!!errors.length && closed && (\n        <ErrorSummaryButton count={errors.length} onClick={() => setClosed((closed) => !closed)} />\n      )}\n      {!!errors.length && !closed && (\n        <Alert\n          data-testid=\"cloud-rulessource-errors\"\n          title=\"Errors loading rules\"\n          severity=\"error\"\n          onRemove={() => setClosed(true)}\n        >\n          {expanded && errors.map((item, idx) => <div key={idx}>{item}</div>)}\n          {!expanded && (\n            <>\n              <div>{errors[0]}</div>\n              {errors.length >= 2 && (\n                <Button\n                  className={styles.moreButton}\n                  fill=\"text\"\n                  icon=\"angle-right\"\n                  size=\"sm\"\n                  onClick={() => setExpanded(true)}\n                >\n                  {errors.length - 1} more {pluralize('error', errors.length - 1)}\n                </Button>\n              )}\n            </>\n          )}\n        </Alert>\n      )}\n    </>\n  );\n}\n\ninterface ErrorSummaryProps {\n  count: number;\n  onClick: () => void;\n}\n\nconst ErrorSummaryButton: FC<ErrorSummaryProps> = ({ count, onClick }) => {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={styles.floatRight}>\n      <Tooltip content=\"Show all errors\" placement=\"bottom\">\n        <Button fill=\"text\" variant=\"destructive\" icon=\"exclamation-triangle\" onClick={onClick}>\n          {count > 1 ? <>{count} errors</> : <>1 error</>}\n        </Button>\n      </Tooltip>\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  moreButton: css`\n    padding: 0;\n  `,\n  floatRight: css`\n    display: flex;\n    justify-content: flex-end;\n  `,\n  dsLink: css`\n    font-weight: ${theme.typography.fontWeightBold};\n  `,\n});\n","import React, { useState } from 'react';\n\nimport { LoadingPlaceholder } from '@grafana/ui';\n\nimport { FolderDTO } from '../../../../../types';\nimport { alertRuleApi } from '../../api/alertRuleApi';\n\nimport { FileExportPreview } from './FileExportPreview';\nimport { GrafanaExportDrawer } from './GrafanaExportDrawer';\nimport { allGrafanaExportProviders, ExportFormats } from './providers';\n\ninterface GrafanaRuleFolderExporterProps {\n  folder: FolderDTO;\n  onClose: () => void;\n}\n\nexport function GrafanaRuleFolderExporter({ folder, onClose }: GrafanaRuleFolderExporterProps) {\n  const [activeTab, setActiveTab] = useState<ExportFormats>('yaml');\n\n  return (\n    <GrafanaExportDrawer\n      title={`Export ${folder.title} rules`}\n      activeTab={activeTab}\n      onTabChange={setActiveTab}\n      onClose={onClose}\n      formatProviders={Object.values(allGrafanaExportProviders)}\n    >\n      <GrafanaRuleFolderExportPreview folder={folder} exportFormat={activeTab} onClose={onClose} />\n    </GrafanaExportDrawer>\n  );\n}\n\ninterface GrafanaRuleFolderExportPreviewProps {\n  folder: FolderDTO;\n  exportFormat: ExportFormats;\n  onClose: () => void;\n}\n\nfunction GrafanaRuleFolderExportPreview({ folder, exportFormat, onClose }: GrafanaRuleFolderExportPreviewProps) {\n  const { currentData: exportFolderDefinition = '', isFetching } = alertRuleApi.endpoints.exportRules.useQuery({\n    folderUid: folder.uid,\n    format: exportFormat,\n  });\n\n  if (isFetching) {\n    return <LoadingPlaceholder text=\"Loading....\" />;\n  }\n\n  const downloadFileName = `${folder.title}-${folder.uid}`;\n\n  return (\n    <FileExportPreview\n      format={exportFormat}\n      textDefinition={exportFolderDefinition}\n      downloadFileName={downloadFileName}\n      onClose={onClose}\n    />\n  );\n}\n","import React, { useState } from 'react';\n\nimport { LoadingPlaceholder } from '@grafana/ui';\n\nimport { alertRuleApi } from '../../api/alertRuleApi';\n\nimport { FileExportPreview } from './FileExportPreview';\nimport { GrafanaExportDrawer } from './GrafanaExportDrawer';\nimport { allGrafanaExportProviders, ExportFormats } from './providers';\n\ninterface GrafanaRuleGroupExporterProps {\n  folderUid: string;\n  groupName: string;\n  onClose: () => void;\n}\n\nexport function GrafanaRuleGroupExporter({ folderUid, groupName, onClose }: GrafanaRuleGroupExporterProps) {\n  const [activeTab, setActiveTab] = useState<ExportFormats>('yaml');\n\n  return (\n    <GrafanaExportDrawer\n      title={`Export ${groupName} rules`}\n      activeTab={activeTab}\n      onTabChange={setActiveTab}\n      onClose={onClose}\n      formatProviders={Object.values(allGrafanaExportProviders)}\n    >\n      <GrafanaRuleGroupExportPreview\n        folderUid={folderUid}\n        groupName={groupName}\n        exportFormat={activeTab}\n        onClose={onClose}\n      />\n    </GrafanaExportDrawer>\n  );\n}\n\ninterface GrafanaRuleGroupExportPreviewProps {\n  folderUid: string;\n  groupName: string;\n  exportFormat: ExportFormats;\n  onClose: () => void;\n}\n\nfunction GrafanaRuleGroupExportPreview({\n  folderUid,\n  groupName,\n  exportFormat,\n  onClose,\n}: GrafanaRuleGroupExportPreviewProps) {\n  const { currentData: ruleGroupTextDefinition = '', isFetching } = alertRuleApi.endpoints.exportRules.useQuery({\n    folderUid,\n    group: groupName,\n    format: exportFormat,\n  });\n\n  if (isFetching) {\n    return <LoadingPlaceholder text=\"Loading....\" />;\n  }\n\n  return (\n    <FileExportPreview\n      format={exportFormat}\n      textDefinition={ruleGroupTextDefinition}\n      downloadFileName={groupName}\n      onClose={onClose}\n    />\n  );\n}\n","import { css } from '@emotion/css';\nimport cx from 'classnames';\nimport { compact } from 'lodash';\nimport React, { useCallback, useState } from 'react';\nimport {\n  DragDropContext,\n  Draggable,\n  DraggableProvided,\n  Droppable,\n  DroppableProvided,\n  DropResult,\n} from 'react-beautiful-dnd';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Badge, Icon, Modal, Tooltip, useStyles2 } from '@grafana/ui';\nimport { dispatch } from 'app/store/store';\nimport { CombinedRule, CombinedRuleGroup, CombinedRuleNamespace } from 'app/types/unified-alerting';\n\nimport { updateRulesOrder } from '../../state/actions';\nimport { getRulesSourceName, isCloudRulesSource } from '../../utils/datasource';\nimport { hashRulerRule } from '../../utils/rule-id';\nimport { isAlertingRule, isRecordingRule } from '../../utils/rules';\n\nimport { AlertStateTag } from './AlertStateTag';\n\ninterface ModalProps {\n  namespace: CombinedRuleNamespace;\n  group: CombinedRuleGroup;\n  onClose: () => void;\n}\n\ntype CombinedRuleWithUID = { uid: string } & CombinedRule;\n\nexport const ReorderCloudGroupModal = (props: ModalProps) => {\n  const { group, namespace, onClose } = props;\n  const [pending, setPending] = useState<boolean>(false);\n  const [rulesList, setRulesList] = useState<CombinedRule[]>(group.rules);\n\n  const styles = useStyles2(getStyles);\n\n  const onDragEnd = useCallback(\n    (result: DropResult) => {\n      // check for no-ops so we don't update the group unless we have changes\n      if (!result.destination) {\n        return;\n      }\n\n      const sameIndex = result.destination.index === result.source.index;\n      if (sameIndex) {\n        return;\n      }\n\n      const newOrderedRules = reorder(rulesList, result.source.index, result.destination.index);\n      setRulesList(newOrderedRules); // optimistically update the new rules list\n\n      const rulesSourceName = getRulesSourceName(namespace.rulesSource);\n      const rulerRules = compact(newOrderedRules.map((rule) => rule.rulerRule));\n\n      setPending(true);\n      dispatch(\n        updateRulesOrder({\n          namespaceName: namespace.name,\n          groupName: group.name,\n          rulesSourceName: rulesSourceName,\n          newRules: rulerRules,\n        })\n      )\n        .unwrap()\n        .finally(() => {\n          setPending(false);\n        });\n    },\n    [group.name, namespace.name, namespace.rulesSource, rulesList]\n  );\n\n  // assign unique but stable identifiers to each (alerting / recording) rule\n  const rulesWithUID: CombinedRuleWithUID[] = rulesList.map((rule) => ({\n    ...rule,\n    uid: String(hashRulerRule(rule.rulerRule!)), // TODO fix this coercion?\n  }));\n\n  return (\n    <Modal\n      className={styles.modal}\n      isOpen={true}\n      title={<ModalHeader namespace={namespace} group={group} />}\n      onDismiss={onClose}\n      onClickBackdrop={onClose}\n    >\n      <DragDropContext onDragEnd={onDragEnd}>\n        <Droppable\n          droppableId=\"alert-list\"\n          mode=\"standard\"\n          renderClone={(provided, _snapshot, rubric) => (\n            <ListItem provided={provided} rule={rulesWithUID[rubric.source.index]} isClone />\n          )}\n        >\n          {(droppableProvided: DroppableProvided) => (\n            <div\n              ref={droppableProvided.innerRef}\n              className={cx(styles.listContainer, pending && styles.disabled)}\n              {...droppableProvided.droppableProps}\n            >\n              {rulesWithUID.map((rule, index) => (\n                <Draggable key={rule.uid} draggableId={rule.uid} index={index} isDragDisabled={pending}>\n                  {(provided: DraggableProvided) => <ListItem key={rule.uid} provided={provided} rule={rule} />}\n                </Draggable>\n              ))}\n              {droppableProvided.placeholder}\n            </div>\n          )}\n        </Droppable>\n      </DragDropContext>\n    </Modal>\n  );\n};\n\ninterface ListItemProps extends React.HTMLAttributes<HTMLDivElement> {\n  provided: DraggableProvided;\n  rule: CombinedRule;\n  isClone?: boolean;\n  isDragging?: boolean;\n}\n\nconst ListItem = ({ provided, rule, isClone = false, isDragging = false }: ListItemProps) => {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div\n      className={cx(styles.listItem, isClone && 'isClone', isDragging && 'isDragging')}\n      ref={provided.innerRef}\n      {...provided.draggableProps}\n      {...provided.dragHandleProps}\n    >\n      {isAlertingRule(rule.promRule) && <AlertStateTag state={rule.promRule.state} />}\n      {isRecordingRule(rule.promRule) && <Badge text={'Recording'} color={'blue'} />}\n      <div className={styles.listItemName}>{rule.name}</div>\n      <Icon name={'draggabledots'} />\n    </div>\n  );\n};\n\ninterface ModalHeaderProps {\n  namespace: CombinedRuleNamespace;\n  group: CombinedRuleGroup;\n}\n\nconst ModalHeader = ({ namespace, group }: ModalHeaderProps) => {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={styles.header}>\n      <Icon name=\"folder\" />\n      {isCloudRulesSource(namespace.rulesSource) && (\n        <Tooltip content={namespace.rulesSource.name} placement=\"top\">\n          <img\n            alt={namespace.rulesSource.meta.name}\n            className={styles.dataSourceIcon}\n            src={namespace.rulesSource.meta.info.logos.small}\n          />\n        </Tooltip>\n      )}\n      <span>{namespace.name}</span>\n      <Icon name=\"angle-right\" />\n      <span>{group.name}</span>\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  modal: css`\n    max-width: 640px;\n    max-height: 80%;\n    overflow: hidden;\n  `,\n  listItem: css`\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n\n    gap: ${theme.spacing()};\n\n    background: ${theme.colors.background.primary};\n    color: ${theme.colors.text.secondary};\n\n    border-bottom: solid 1px ${theme.colors.border.medium};\n    padding: ${theme.spacing(1)} ${theme.spacing(2)};\n\n    &:last-child {\n      border-bottom: none;\n    }\n\n    &.isClone {\n      border: solid 1px ${theme.colors.primary.shade};\n    }\n  `,\n  listContainer: css`\n    user-select: none;\n    border: solid 1px ${theme.colors.border.medium};\n  `,\n  disabled: css`\n    opacity: 0.5;\n    pointer-events: none;\n  `,\n  listItemName: css`\n    flex: 1;\n\n    overflow: hidden;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n  `,\n  header: css`\n    display: flex;\n    align-items: center;\n\n    gap: ${theme.spacing(1)};\n  `,\n  dataSourceIcon: css`\n    width: ${theme.spacing(2)};\n    height: ${theme.spacing(2)};\n  `,\n});\n\nexport function reorder<T>(rules: T[], startIndex: number, endIndex: number): T[] {\n  const result = Array.from(rules);\n  const [removed] = result.splice(startIndex, 1);\n  result.splice(endIndex, 0, removed);\n\n  return result;\n}\n","import { css } from '@emotion/css';\nimport pluralize from 'pluralize';\nimport React, { useEffect, useState } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Badge, ConfirmModal, HorizontalGroup, Icon, Spinner, Tooltip, useStyles2, Stack } from '@grafana/ui';\nimport { useDispatch } from 'app/types';\nimport { CombinedRuleGroup, CombinedRuleNamespace } from 'app/types/unified-alerting';\n\nimport { logInfo, LogMessages } from '../../Analytics';\nimport { useFolder } from '../../hooks/useFolder';\nimport { useHasRuler } from '../../hooks/useHasRuler';\nimport { deleteRulesGroupAction } from '../../state/actions';\nimport { useRulesAccess } from '../../utils/accessControlHooks';\nimport { GRAFANA_RULES_SOURCE_NAME, isCloudRulesSource } from '../../utils/datasource';\nimport { makeFolderLink, makeFolderSettingsLink } from '../../utils/misc';\nimport { isFederatedRuleGroup, isGrafanaRulerRule } from '../../utils/rules';\nimport { CollapseToggle } from '../CollapseToggle';\nimport { RuleLocation } from '../RuleLocation';\nimport { GrafanaRuleFolderExporter } from '../export/GrafanaRuleFolderExporter';\nimport { GrafanaRuleGroupExporter } from '../export/GrafanaRuleGroupExporter';\n\nimport { ActionIcon } from './ActionIcon';\nimport { EditCloudGroupModal } from './EditRuleGroupModal';\nimport { ReorderCloudGroupModal } from './ReorderRuleGroupModal';\nimport { RuleGroupStats } from './RuleStats';\nimport { RulesTable } from './RulesTable';\n\ntype ViewMode = 'grouped' | 'list';\n\ninterface Props {\n  namespace: CombinedRuleNamespace;\n  group: CombinedRuleGroup;\n  expandAll: boolean;\n  viewMode: ViewMode;\n}\n\nexport const RulesGroup = React.memo(({ group, namespace, expandAll, viewMode }: Props) => {\n  const { rulesSource } = namespace;\n  const dispatch = useDispatch();\n  const styles = useStyles2(getStyles);\n\n  const [isEditingGroup, setIsEditingGroup] = useState(false);\n  const [isDeletingGroup, setIsDeletingGroup] = useState(false);\n  const [isReorderingGroup, setIsReorderingGroup] = useState(false);\n  const [isExporting, setIsExporting] = useState<'group' | 'folder' | undefined>(undefined);\n  const [isCollapsed, setIsCollapsed] = useState(!expandAll);\n\n  const { canEditRules } = useRulesAccess();\n\n  useEffect(() => {\n    setIsCollapsed(!expandAll);\n  }, [expandAll]);\n\n  const { hasRuler, rulerRulesLoaded } = useHasRuler();\n  const rulerRule = group.rules[0]?.rulerRule;\n  const folderUID = (rulerRule && isGrafanaRulerRule(rulerRule) && rulerRule.grafana_alert.namespace_uid) || undefined;\n  const { folder } = useFolder(folderUID);\n\n  // group \"is deleting\" if rules source has ruler, but this group has no rules that are in ruler\n  const isDeleting =\n    hasRuler(rulesSource) && rulerRulesLoaded(rulesSource) && !group.rules.find((rule) => !!rule.rulerRule);\n  const isFederated = isFederatedRuleGroup(group);\n\n  // check if group has provisioned items\n  const isProvisioned = group.rules.some((rule) => {\n    return isGrafanaRulerRule(rule.rulerRule) && rule.rulerRule.grafana_alert.provenance;\n  });\n\n  // check what view mode we are in\n  const isListView = viewMode === 'list';\n  const isGroupView = viewMode === 'grouped';\n\n  const deleteGroup = () => {\n    dispatch(deleteRulesGroupAction(namespace, group));\n    setIsDeletingGroup(false);\n  };\n\n  const actionIcons: React.ReactNode[] = [];\n\n  // for grafana, link to folder views\n  if (isDeleting) {\n    actionIcons.push(\n      <HorizontalGroup key=\"is-deleting\">\n        <Spinner />\n        deleting\n      </HorizontalGroup>\n    );\n  } else if (rulesSource === GRAFANA_RULES_SOURCE_NAME) {\n    if (folderUID) {\n      const baseUrl = makeFolderLink(folderUID);\n      if (folder?.canSave) {\n        if (isGroupView && !isProvisioned) {\n          actionIcons.push(\n            <ActionIcon\n              aria-label=\"edit rule group\"\n              data-testid=\"edit-group\"\n              key=\"edit\"\n              icon=\"pen\"\n              tooltip=\"edit rule group\"\n              onClick={() => setIsEditingGroup(true)}\n            />\n          );\n          actionIcons.push(\n            <ActionIcon\n              aria-label=\"re-order rules\"\n              data-testid=\"reorder-group\"\n              key=\"reorder\"\n              icon=\"exchange-alt\"\n              tooltip=\"reorder rules\"\n              className={styles.rotate90}\n              onClick={() => setIsReorderingGroup(true)}\n            />\n          );\n        }\n        if (isListView) {\n          actionIcons.push(\n            <ActionIcon\n              aria-label=\"go to folder\"\n              key=\"goto\"\n              icon=\"folder-open\"\n              tooltip=\"go to folder\"\n              to={baseUrl}\n              target=\"__blank\"\n            />\n          );\n\n          if (folder?.canAdmin) {\n            actionIcons.push(\n              <ActionIcon\n                aria-label=\"manage permissions\"\n                key=\"manage-perms\"\n                icon=\"lock\"\n                tooltip=\"manage permissions\"\n                to={baseUrl + '/permissions'}\n                target=\"__blank\"\n              />\n            );\n          }\n        }\n      }\n      if (folder) {\n        if (isListView) {\n          actionIcons.push(\n            <ActionIcon\n              aria-label=\"export rule folder\"\n              data-testid=\"export-folder\"\n              key=\"export-folder\"\n              icon=\"download-alt\"\n              tooltip=\"Export rules folder\"\n              onClick={() => setIsExporting('folder')}\n            />\n          );\n        } else if (isGroupView) {\n          actionIcons.push(\n            <ActionIcon\n              aria-label=\"export rule group\"\n              data-testid=\"export-group\"\n              key=\"export-group\"\n              icon=\"download-alt\"\n              tooltip=\"Export rule group\"\n              onClick={() => setIsExporting('group')}\n            />\n          );\n        }\n      }\n    }\n  } else if (canEditRules(rulesSource.name) && hasRuler(rulesSource)) {\n    if (!isFederated) {\n      actionIcons.push(\n        <ActionIcon\n          aria-label=\"edit rule group\"\n          data-testid=\"edit-group\"\n          key=\"edit\"\n          icon=\"pen\"\n          tooltip=\"edit rule group\"\n          onClick={() => setIsEditingGroup(true)}\n        />\n      );\n      actionIcons.push(\n        <ActionIcon\n          aria-label=\"re-order rules\"\n          data-testid=\"reorder-group\"\n          key=\"reorder\"\n          icon=\"exchange-alt\"\n          tooltip=\"re-order rules\"\n          className={styles.rotate90}\n          onClick={() => setIsReorderingGroup(true)}\n        />\n      );\n    }\n\n    actionIcons.push(\n      <ActionIcon\n        aria-label=\"delete rule group\"\n        data-testid=\"delete-group\"\n        key=\"delete-group\"\n        icon=\"trash-alt\"\n        tooltip=\"delete rule group\"\n        onClick={() => setIsDeletingGroup(true)}\n      />\n    );\n  }\n\n  // ungrouped rules are rules that are in the \"default\" group name\n  const groupName = isListView ? (\n    <RuleLocation namespace={namespace.name} />\n  ) : (\n    <RuleLocation namespace={namespace.name} group={group.name} />\n  );\n\n  const closeEditModal = (saved = false) => {\n    if (!saved) {\n      logInfo(LogMessages.leavingRuleGroupEdit);\n    }\n    setIsEditingGroup(false);\n  };\n\n  return (\n    <div className={styles.wrapper} data-testid=\"rule-group\">\n      <div className={styles.header} data-testid=\"rule-group-header\">\n        <CollapseToggle\n          size=\"sm\"\n          className={styles.collapseToggle}\n          isCollapsed={isCollapsed}\n          onToggle={setIsCollapsed}\n          data-testid=\"group-collapse-toggle\"\n        />\n        <Icon name={isCollapsed ? 'folder' : 'folder-open'} />\n        {isCloudRulesSource(rulesSource) && (\n          <Tooltip content={rulesSource.name} placement=\"top\">\n            <img\n              alt={rulesSource.meta.name}\n              className={styles.dataSourceIcon}\n              src={rulesSource.meta.info.logos.small}\n            />\n          </Tooltip>\n        )}\n        {\n          // eslint-disable-next-line\n          <div className={styles.groupName} onClick={() => setIsCollapsed(!isCollapsed)}>\n            {isFederated && <Badge color=\"purple\" text=\"Federated\" />} {groupName}\n          </div>\n        }\n        <div className={styles.spacer} />\n        <div className={styles.headerStats}>\n          <RuleGroupStats group={group} />\n        </div>\n        {isProvisioned && (\n          <>\n            <div className={styles.actionsSeparator}>|</div>\n            <div className={styles.actionIcons}>\n              <Badge color=\"purple\" text=\"Provisioned\" />\n            </div>\n          </>\n        )}\n        {!!actionIcons.length && (\n          <>\n            <div className={styles.actionsSeparator}>|</div>\n            <div className={styles.actionIcons}>\n              <Stack gap={0.5}>{actionIcons}</Stack>\n            </div>\n          </>\n        )}\n      </div>\n      {!isCollapsed && (\n        <RulesTable\n          showSummaryColumn={true}\n          className={styles.rulesTable}\n          showGuidelines={true}\n          showNextEvaluationColumn={Boolean(group.interval)}\n          rules={group.rules}\n        />\n      )}\n      {isEditingGroup && (\n        <EditCloudGroupModal\n          namespace={namespace}\n          group={group}\n          onClose={() => closeEditModal()}\n          folderUrl={folder?.canEdit ? makeFolderSettingsLink(folder) : undefined}\n        />\n      )}\n      {isReorderingGroup && (\n        <ReorderCloudGroupModal group={group} namespace={namespace} onClose={() => setIsReorderingGroup(false)} />\n      )}\n      <ConfirmModal\n        isOpen={isDeletingGroup}\n        title=\"Delete group\"\n        body={\n          <div>\n            <p>\n              Deleting &quot;<strong>{group.name}</strong>&quot; will permanently remove the group and{' '}\n              {group.rules.length} alert {pluralize('rule', group.rules.length)} belonging to it.\n            </p>\n            <p>Are you sure you want to delete this group?</p>\n          </div>\n        }\n        onConfirm={deleteGroup}\n        onDismiss={() => setIsDeletingGroup(false)}\n        confirmText=\"Delete\"\n      />\n      {folder && isExporting === 'folder' && (\n        <GrafanaRuleFolderExporter folder={folder} onClose={() => setIsExporting(undefined)} />\n      )}\n      {folder && isExporting === 'group' && (\n        <GrafanaRuleGroupExporter\n          folderUid={folder.uid}\n          groupName={group.name}\n          onClose={() => setIsExporting(undefined)}\n        />\n      )}\n    </div>\n  );\n});\n\nRulesGroup.displayName = 'RulesGroup';\n\nexport const getStyles = (theme: GrafanaTheme2) => {\n  return {\n    wrapper: css``,\n    header: css`\n      display: flex;\n      flex-direction: row;\n      align-items: center;\n      padding: ${theme.spacing(1)} ${theme.spacing(1)} ${theme.spacing(1)} 0;\n      flex-wrap: nowrap;\n      border-bottom: 1px solid ${theme.colors.border.weak};\n\n      &:hover {\n        background-color: ${theme.components.table.rowHoverBackground};\n      }\n    `,\n    headerStats: css`\n      flex-shrink: 0;\n\n      span {\n        vertical-align: middle;\n      }\n\n      ${theme.breakpoints.down('sm')} {\n        order: 2;\n        width: 100%;\n        padding-left: ${theme.spacing(1)};\n      }\n    `,\n    groupName: css`\n      margin-left: ${theme.spacing(1)};\n      margin-bottom: 0;\n      cursor: pointer;\n\n      white-space: nowrap;\n      overflow: hidden;\n      text-overflow: ellipsis;\n    `,\n    spacer: css`\n      flex: 1;\n    `,\n    collapseToggle: css`\n      background: none;\n      border: none;\n      margin-top: -${theme.spacing(1)};\n      margin-bottom: -${theme.spacing(1)};\n\n      svg {\n        margin-bottom: 0;\n      }\n    `,\n    dataSourceIcon: css`\n      width: ${theme.spacing(2)};\n      height: ${theme.spacing(2)};\n      margin-left: ${theme.spacing(2)};\n    `,\n    dataSourceOrigin: css`\n      margin-right: 1em;\n      color: ${theme.colors.text.disabled};\n    `,\n    actionsSeparator: css`\n      margin: 0 ${theme.spacing(2)};\n    `,\n    actionIcons: css`\n      width: 80px;\n      align-items: center;\n\n      flex-shrink: 0;\n    `,\n    rulesTable: css`\n      margin: ${theme.spacing(2, 0)};\n    `,\n    rotate90: css`\n      transform: rotate(90deg);\n    `,\n  };\n};\n","import { useMemo } from 'react';\n\nimport { CombinedRuleNamespace } from '../../../../../types/unified-alerting';\n\nexport function useCombinedGroupNamespace(namespaces: CombinedRuleNamespace[]) {\n  return useMemo(\n    () =>\n      namespaces.flatMap((ns) =>\n        ns.groups.map((g) => ({\n          namespace: ns,\n          group: g,\n        }))\n      ),\n    [namespaces]\n  );\n}\n","import { css } from '@emotion/css';\nimport pluralize from 'pluralize';\nimport React, { useMemo } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { LoadingPlaceholder, Pagination, Spinner, useStyles2 } from '@grafana/ui';\nimport { CombinedRuleNamespace } from 'app/types/unified-alerting';\n\nimport { DEFAULT_PER_PAGE_PAGINATION } from '../../../../../core/constants';\nimport { usePagination } from '../../hooks/usePagination';\nimport { useUnifiedAlertingSelector } from '../../hooks/useUnifiedAlertingSelector';\nimport { getPaginationStyles } from '../../styles/pagination';\nimport { getRulesDataSources, getRulesSourceUid } from '../../utils/datasource';\nimport { isAsyncRequestStatePending } from '../../utils/redux';\n\nimport { RulesGroup } from './RulesGroup';\nimport { useCombinedGroupNamespace } from './useCombinedGroupNamespace';\n\ninterface Props {\n  namespaces: CombinedRuleNamespace[];\n  expandAll: boolean;\n}\n\nexport const CloudRules = ({ namespaces, expandAll }: Props) => {\n  const styles = useStyles2(getStyles);\n\n  const dsConfigs = useUnifiedAlertingSelector((state) => state.dataSources);\n  const promRules = useUnifiedAlertingSelector((state) => state.promRules);\n  const rulesDataSources = useMemo(getRulesDataSources, []);\n  const groupsWithNamespaces = useCombinedGroupNamespace(namespaces);\n\n  const dataSourcesLoading = useMemo(\n    () =>\n      rulesDataSources.filter(\n        (ds) => isAsyncRequestStatePending(promRules[ds.name]) || isAsyncRequestStatePending(dsConfigs[ds.name])\n      ),\n    [promRules, dsConfigs, rulesDataSources]\n  );\n\n  const hasSomeResults = rulesDataSources.some((ds) => Boolean(promRules[ds.name]?.result?.length));\n\n  const hasDataSourcesConfigured = rulesDataSources.length > 0;\n  const hasDataSourcesLoading = dataSourcesLoading.length > 0;\n  const hasNamespaces = namespaces.length > 0;\n\n  const { numberOfPages, onPageChange, page, pageItems } = usePagination(\n    groupsWithNamespaces,\n    1,\n    DEFAULT_PER_PAGE_PAGINATION\n  );\n\n  return (\n    <section className={styles.wrapper}>\n      <div className={styles.sectionHeader}>\n        <h5>Mimir / Cortex / Loki</h5>\n        {dataSourcesLoading.length ? (\n          <LoadingPlaceholder\n            className={styles.loader}\n            text={`Loading rules from ${dataSourcesLoading.length} ${pluralize('source', dataSourcesLoading.length)}`}\n          />\n        ) : (\n          <div />\n        )}\n      </div>\n\n      {pageItems.map(({ group, namespace }) => {\n        return (\n          <RulesGroup\n            group={group}\n            key={`${getRulesSourceUid(namespace.rulesSource)}-${namespace.name}-${group.name}`}\n            namespace={namespace}\n            expandAll={expandAll}\n            viewMode={'grouped'}\n          />\n        );\n      })}\n\n      {!hasDataSourcesConfigured && <p>There are no Prometheus or Loki data sources configured.</p>}\n      {hasDataSourcesConfigured && !hasDataSourcesLoading && !hasNamespaces && <p>No rules found.</p>}\n      {!hasSomeResults && hasDataSourcesLoading && <Spinner size=\"xl\" className={styles.spinner} />}\n\n      <Pagination\n        className={styles.pagination}\n        currentPage={page}\n        numberOfPages={numberOfPages}\n        onNavigate={onPageChange}\n        hideWhenSinglePage\n      />\n    </section>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  loader: css`\n    margin-bottom: 0;\n  `,\n  sectionHeader: css`\n    display: flex;\n    justify-content: space-between;\n  `,\n  wrapper: css`\n    margin-bottom: ${theme.spacing(4)};\n  `,\n  spinner: css`\n    text-align: center;\n    padding: ${theme.spacing(2)};\n  `,\n  pagination: getPaginationStyles(theme),\n});\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { LoadingPlaceholder, Pagination, Spinner, useStyles2 } from '@grafana/ui';\nimport { useQueryParams } from 'app/core/hooks/useQueryParams';\nimport { CombinedRuleNamespace } from 'app/types/unified-alerting';\n\nimport { DEFAULT_PER_PAGE_PAGINATION } from '../../../../../core/constants';\nimport { flattenGrafanaManagedRules } from '../../hooks/useCombinedRuleNamespaces';\nimport { usePagination } from '../../hooks/usePagination';\nimport { useUnifiedAlertingSelector } from '../../hooks/useUnifiedAlertingSelector';\nimport { getPaginationStyles } from '../../styles/pagination';\nimport { GRAFANA_RULES_SOURCE_NAME } from '../../utils/datasource';\nimport { initialAsyncRequestState } from '../../utils/redux';\n\nimport { RulesGroup } from './RulesGroup';\nimport { useCombinedGroupNamespace } from './useCombinedGroupNamespace';\n\ninterface Props {\n  namespaces: CombinedRuleNamespace[];\n  expandAll: boolean;\n}\n\nexport const GrafanaRules = ({ namespaces, expandAll }: Props) => {\n  const styles = useStyles2(getStyles);\n  const [queryParams] = useQueryParams();\n\n  const { prom, ruler } = useUnifiedAlertingSelector((state) => ({\n    prom: state.promRules[GRAFANA_RULES_SOURCE_NAME] || initialAsyncRequestState,\n    ruler: state.rulerRules[GRAFANA_RULES_SOURCE_NAME] || initialAsyncRequestState,\n  }));\n\n  const loading = prom.loading || ruler.loading;\n  const hasResult = !!prom.result || !!ruler.result;\n\n  const wantsListView = queryParams['view'] === 'list';\n  const namespacesFormat = wantsListView ? flattenGrafanaManagedRules(namespaces) : namespaces;\n\n  const groupsWithNamespaces = useCombinedGroupNamespace(namespacesFormat);\n\n  const { numberOfPages, onPageChange, page, pageItems } = usePagination(\n    groupsWithNamespaces,\n    1,\n    DEFAULT_PER_PAGE_PAGINATION\n  );\n\n  return (\n    <section className={styles.wrapper}>\n      <div className={styles.sectionHeader}>\n        <h5>Grafana</h5>\n        {loading ? <LoadingPlaceholder className={styles.loader} text=\"Loading...\" /> : <div />}\n      </div>\n\n      {pageItems.map(({ group, namespace }) => (\n        <RulesGroup\n          group={group}\n          key={`${namespace.name}-${group.name}`}\n          namespace={namespace}\n          expandAll={expandAll}\n          viewMode={wantsListView ? 'list' : 'grouped'}\n        />\n      ))}\n      {hasResult && namespacesFormat?.length === 0 && <p>No rules found.</p>}\n      {!hasResult && loading && <Spinner size=\"xl\" className={styles.spinner} />}\n      <Pagination\n        className={styles.pagination}\n        currentPage={page}\n        numberOfPages={numberOfPages}\n        onNavigate={onPageChange}\n        hideWhenSinglePage\n      />\n    </section>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  loader: css`\n    margin-bottom: 0;\n  `,\n  sectionHeader: css`\n    display: flex;\n    justify-content: space-between;\n    margin-bottom: ${theme.spacing(1)};\n  `,\n  wrapper: css`\n    margin-bottom: ${theme.spacing(4)};\n  `,\n  spinner: css`\n    text-align: center;\n    padding: ${theme.spacing(2)};\n  `,\n  pagination: getPaginationStyles(theme),\n});\n","import React, { useEffect, useMemo } from 'react';\n\nimport { CombinedRuleNamespace } from 'app/types/unified-alerting';\n\nimport { LogMessages, logInfo } from '../../Analytics';\nimport { AlertingAction } from '../../hooks/useAbilities';\nimport { isCloudRulesSource, isGrafanaRulesSource } from '../../utils/datasource';\nimport { Authorize } from '../Authorize';\n\nimport { CloudRules } from './CloudRules';\nimport { GrafanaRules } from './GrafanaRules';\n\ninterface Props {\n  namespaces: CombinedRuleNamespace[];\n  expandAll: boolean;\n}\n\nexport const RuleListGroupView = ({ namespaces, expandAll }: Props) => {\n  const [grafanaNamespaces, cloudNamespaces] = useMemo(() => {\n    const sorted = namespaces\n      .map((namespace) => ({\n        ...namespace,\n        groups: namespace.groups.sort((a, b) => a.name.localeCompare(b.name)),\n      }))\n      .sort((a, b) => a.name.localeCompare(b.name));\n    return [\n      sorted.filter((ns) => isGrafanaRulesSource(ns.rulesSource)),\n      sorted.filter((ns) => isCloudRulesSource(ns.rulesSource)),\n    ];\n  }, [namespaces]);\n\n  useEffect(() => {\n    logInfo(LogMessages.loadedList);\n  }, []);\n\n  return (\n    <>\n      <Authorize actions={[AlertingAction.ViewAlertRule]}>\n        <GrafanaRules namespaces={grafanaNamespaces} expandAll={expandAll} />\n      </Authorize>\n      <Authorize actions={[AlertingAction.ViewExternalAlertRule]}>\n        <CloudRules namespaces={cloudNamespaces} expandAll={expandAll} />\n      </Authorize>\n    </>\n  );\n};\n","import { css } from '@emotion/css';\nimport React, { useState } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\nimport { CombinedRule } from 'app/types/unified-alerting';\nimport { PromAlertingRuleState } from 'app/types/unified-alerting-dto';\n\nimport { alertStateToReadable } from '../../utils/rules';\nimport { CollapseToggle } from '../CollapseToggle';\n\nimport { RulesTable } from './RulesTable';\n\ninterface Props {\n  rules: CombinedRule[];\n  state: PromAlertingRuleState;\n  defaultCollapsed?: boolean;\n}\n\nexport const RuleListStateSection = ({ rules, state, defaultCollapsed = false }: Props) => {\n  const [collapsed, setCollapsed] = useState(defaultCollapsed);\n  const styles = useStyles2(getStyles);\n  return (\n    <>\n      <h4 className={styles.header}>\n        <CollapseToggle\n          className={styles.collapseToggle}\n          size=\"xxl\"\n          isCollapsed={collapsed}\n          onToggle={() => setCollapsed(!collapsed)}\n        />\n        {alertStateToReadable(state)} ({rules.length})\n      </h4>\n      {!collapsed && <RulesTable className={styles.rulesTable} rules={rules} showGroupColumn={true} />}\n    </>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  collapseToggle: css`\n    vertical-align: middle;\n  `,\n  header: css`\n    margin-top: ${theme.spacing(2)};\n  `,\n  rulesTable: css`\n    margin-top: ${theme.spacing(3)};\n  `,\n});\n","import React, { useMemo } from 'react';\n\nimport { useQueryParams } from 'app/core/hooks/useQueryParams';\nimport { CombinedRule, CombinedRuleNamespace } from 'app/types/unified-alerting';\nimport { PromAlertingRuleState } from 'app/types/unified-alerting-dto';\n\nimport { getFiltersFromUrlParams } from '../../utils/misc';\nimport { isAlertingRule } from '../../utils/rules';\n\nimport { RuleListStateSection } from './RuleListStateSection';\n\ninterface Props {\n  namespaces: CombinedRuleNamespace[];\n  expandAll?: boolean;\n}\n\ntype GroupedRules = Record<PromAlertingRuleState, CombinedRule[]>;\n\nexport const RuleListStateView = ({ namespaces }: Props) => {\n  const filters = getFiltersFromUrlParams(useQueryParams()[0]);\n\n  const groupedRules = useMemo(() => {\n    const result: GroupedRules = {\n      [PromAlertingRuleState.Firing]: [],\n      [PromAlertingRuleState.Inactive]: [],\n      [PromAlertingRuleState.Pending]: [],\n    };\n\n    namespaces.forEach((namespace) =>\n      namespace.groups.forEach((group) =>\n        group.rules.forEach((rule) => {\n          if (rule.promRule && isAlertingRule(rule.promRule)) {\n            result[rule.promRule.state].push(rule);\n          }\n        })\n      )\n    );\n\n    Object.values(result).forEach((rules) => rules.sort((a, b) => a.name.localeCompare(b.name)));\n\n    return result;\n  }, [namespaces]);\n  return (\n    <>\n      {(!filters.alertState || filters.alertState === PromAlertingRuleState.Firing) && (\n        <RuleListStateSection state={PromAlertingRuleState.Firing} rules={groupedRules[PromAlertingRuleState.Firing]} />\n      )}\n      {(!filters.alertState || filters.alertState === PromAlertingRuleState.Pending) && (\n        <RuleListStateSection\n          state={PromAlertingRuleState.Pending}\n          rules={groupedRules[PromAlertingRuleState.Pending]}\n        />\n      )}\n      {(!filters.alertState || filters.alertState === PromAlertingRuleState.Inactive) && (\n        <RuleListStateSection\n          defaultCollapsed={filters.alertState !== PromAlertingRuleState.Inactive}\n          state={PromAlertingRuleState.Inactive}\n          rules={groupedRules[PromAlertingRuleState.Inactive]}\n        />\n      )}\n    </>\n  );\n};\n","import uFuzzy from '@leeoniya/ufuzzy';\nimport { produce } from 'immer';\nimport { chain, compact, isEmpty } from 'lodash';\nimport { useCallback, useEffect, useMemo } from 'react';\n\nimport { getDataSourceSrv } from '@grafana/runtime';\nimport { Matcher } from 'app/plugins/datasource/alertmanager/types';\nimport { CombinedRuleGroup, CombinedRuleNamespace, Rule } from 'app/types/unified-alerting';\nimport { isPromAlertingRuleState, PromRuleType, RulerGrafanaRuleDTO } from 'app/types/unified-alerting-dto';\n\nimport { applySearchFilterToQuery, getSearchFilterFromQuery, RulesFilter } from '../search/rulesSearchParser';\nimport { labelsMatchMatchers, matcherToMatcherField, parseMatchers } from '../utils/alertmanager';\nimport { isCloudRulesSource } from '../utils/datasource';\nimport { parseMatcher } from '../utils/matchers';\nimport { getRuleHealth, isAlertingRule, isGrafanaRulerRule, isPromRuleType } from '../utils/rules';\n\nimport { calculateGroupTotals, calculateRuleFilteredTotals, calculateRuleTotals } from './useCombinedRuleNamespaces';\nimport { useURLSearchParams } from './useURLSearchParams';\n\nexport function useRulesFilter() {\n  const [queryParams, updateQueryParams] = useURLSearchParams();\n  const searchQuery = queryParams.get('search') ?? '';\n\n  const filterState = useMemo(() => getSearchFilterFromQuery(searchQuery), [searchQuery]);\n  const hasActiveFilters = useMemo(() => Object.values(filterState).some((filter) => !isEmpty(filter)), [filterState]);\n\n  const updateFilters = useCallback(\n    (newFilter: RulesFilter) => {\n      const newSearchQuery = applySearchFilterToQuery(searchQuery, newFilter);\n      updateQueryParams({ search: newSearchQuery });\n    },\n    [searchQuery, updateQueryParams]\n  );\n\n  const setSearchQuery = useCallback(\n    (newSearchQuery: string | undefined) => {\n      updateQueryParams({ search: newSearchQuery });\n    },\n    [updateQueryParams]\n  );\n\n  // Handle legacy filters\n  useEffect(() => {\n    const legacyFilters = {\n      dataSource: queryParams.get('dataSource') ?? undefined,\n      alertState: queryParams.get('alertState') ?? undefined,\n      ruleType: queryParams.get('ruleType') ?? undefined,\n      labels: parseMatchers(queryParams.get('queryString') ?? '').map(matcherToMatcherField),\n    };\n\n    const hasLegacyFilters = Object.values(legacyFilters).some((legacyFilter) => !isEmpty(legacyFilter));\n    if (hasLegacyFilters) {\n      updateQueryParams({ dataSource: undefined, alertState: undefined, ruleType: undefined, queryString: undefined });\n      // Existing query filters takes precedence over legacy ones\n      updateFilters(\n        produce(filterState, (draft) => {\n          draft.dataSourceNames ??= legacyFilters.dataSource ? [legacyFilters.dataSource] : [];\n          if (legacyFilters.alertState && isPromAlertingRuleState(legacyFilters.alertState)) {\n            draft.ruleState ??= legacyFilters.alertState;\n          }\n          if (legacyFilters.ruleType && isPromRuleType(legacyFilters.ruleType)) {\n            draft.ruleType ??= legacyFilters.ruleType;\n          }\n          if (draft.labels.length === 0 && legacyFilters.labels.length > 0) {\n            const legacyLabelsAsStrings = legacyFilters.labels.map(\n              ({ name, operator, value }) => `${name}${operator}${value}`\n            );\n            draft.labels.push(...legacyLabelsAsStrings);\n          }\n        })\n      );\n    }\n  }, [queryParams, updateFilters, filterState, updateQueryParams]);\n\n  return { filterState, hasActiveFilters, searchQuery, setSearchQuery, updateFilters };\n}\n\nexport const useFilteredRules = (namespaces: CombinedRuleNamespace[], filterState: RulesFilter) => {\n  return useMemo(() => {\n    const filteredRules = filterRules(namespaces, filterState);\n\n    // Totals recalculation is a workaround for the lack of server-side filtering\n    filteredRules.forEach((namespace) => {\n      namespace.groups.forEach((group) => {\n        group.rules.forEach((rule) => {\n          if (isAlertingRule(rule.promRule)) {\n            rule.instanceTotals = calculateRuleTotals(rule.promRule);\n            rule.filteredInstanceTotals = calculateRuleFilteredTotals(rule.promRule);\n          }\n        });\n\n        group.totals = calculateGroupTotals({\n          rules: group.rules.map((r) => r.promRule).filter((r): r is Rule => !!r),\n        });\n      });\n    });\n\n    return filteredRules;\n  }, [namespaces, filterState]);\n};\n\n// Options details can be found here https://github.com/leeoniya/uFuzzy#options\n// The following configuration complies with Damerau-Levenshtein distance\n// https://en.wikipedia.org/wiki/Damerau%E2%80%93Levenshtein_distance\nconst ufuzzy = new uFuzzy({\n  intraMode: 1,\n  intraIns: 1,\n  intraSub: 1,\n  intraTrn: 1,\n  intraDel: 1,\n});\n\nexport const filterRules = (\n  namespaces: CombinedRuleNamespace[],\n  filterState: RulesFilter = { dataSourceNames: [], labels: [], freeFormWords: [] }\n): CombinedRuleNamespace[] => {\n  let filteredNamespaces = namespaces;\n\n  const dataSourceFilter = filterState.dataSourceNames;\n  if (dataSourceFilter.length) {\n    filteredNamespaces = filteredNamespaces.filter(({ rulesSource }) =>\n      isCloudRulesSource(rulesSource) ? dataSourceFilter.includes(rulesSource.name) : true\n    );\n  }\n\n  const namespaceFilter = filterState.namespace;\n\n  if (namespaceFilter) {\n    const namespaceHaystack = filteredNamespaces.map((ns) => ns.name);\n\n    const [idxs, info, order] = ufuzzy.search(namespaceHaystack, namespaceFilter);\n    if (info && order) {\n      filteredNamespaces = order.map((idx) => filteredNamespaces[info.idx[idx]]);\n    } else if (idxs) {\n      filteredNamespaces = idxs.map((idx) => filteredNamespaces[idx]);\n    }\n  }\n\n  // If a namespace and group have rules that match the rules filters then keep them.\n  return filteredNamespaces.reduce<CombinedRuleNamespace[]>(reduceNamespaces(filterState), []);\n};\n\nconst reduceNamespaces = (filterState: RulesFilter) => {\n  return (namespaceAcc: CombinedRuleNamespace[], namespace: CombinedRuleNamespace) => {\n    const groupNameFilter = filterState.groupName;\n    let filteredGroups = namespace.groups;\n\n    if (groupNameFilter) {\n      const groupsHaystack = filteredGroups.map((g) => g.name);\n      const [idxs, info, order] = ufuzzy.search(groupsHaystack, groupNameFilter);\n      if (info && order) {\n        filteredGroups = order.map((idx) => filteredGroups[info.idx[idx]]);\n      } else if (idxs) {\n        filteredGroups = idxs.map((idx) => filteredGroups[idx]);\n      }\n    }\n\n    filteredGroups = filteredGroups.reduce<CombinedRuleGroup[]>(reduceGroups(filterState), []);\n\n    if (filteredGroups.length) {\n      namespaceAcc.push({\n        ...namespace,\n        groups: filteredGroups,\n      });\n    }\n\n    return namespaceAcc;\n  };\n};\n\n// Reduces groups to only groups that have rules matching the filters\nconst reduceGroups = (filterState: RulesFilter) => {\n  const ruleNameQuery = filterState.ruleName ?? filterState.freeFormWords.join(' ');\n\n  return (groupAcc: CombinedRuleGroup[], group: CombinedRuleGroup) => {\n    let filteredRules = group.rules;\n\n    if (ruleNameQuery) {\n      const rulesHaystack = filteredRules.map((r) => r.name);\n      const [idxs, info, order] = ufuzzy.search(rulesHaystack, ruleNameQuery);\n      if (info && order) {\n        filteredRules = order.map((idx) => filteredRules[info.idx[idx]]);\n      } else if (idxs) {\n        filteredRules = idxs.map((idx) => filteredRules[idx]);\n      }\n    }\n\n    filteredRules = filteredRules.filter((rule) => {\n      const promRuleDefition = rule.promRule;\n\n      // this will track what properties we're checking predicates for\n      // all predicates must be \"true\" to include the rule in the result set\n      // (this will result in an AND operation for our matchers)\n      const matchesFilterFor = chain(filterState)\n        // ⚠️ keep this list of properties we filter for here up-to-date ⚠️\n        // We are ignoring predicates we've matched before we get here (like \"freeFormWords\")\n        .pick(['ruleType', 'dataSourceNames', 'ruleHealth', 'labels', 'ruleState'])\n        .omitBy(isEmpty)\n        .mapValues(() => false)\n        .value();\n\n      if ('ruleType' in matchesFilterFor && filterState.ruleType === promRuleDefition?.type) {\n        matchesFilterFor.ruleType = true;\n      }\n\n      if ('dataSourceNames' in matchesFilterFor) {\n        if (isGrafanaRulerRule(rule.rulerRule)) {\n          const doesNotQueryDs = isQueryingDataSource(rule.rulerRule, filterState);\n\n          if (doesNotQueryDs) {\n            matchesFilterFor.dataSourceNames = true;\n          }\n        } else {\n          matchesFilterFor.dataSourceNames = true;\n        }\n      }\n\n      if ('ruleHealth' in filterState && promRuleDefition) {\n        const ruleHealth = getRuleHealth(promRuleDefition.health);\n        const match = filterState.ruleHealth === ruleHealth;\n\n        if (match) {\n          matchesFilterFor.ruleHealth = true;\n        }\n      }\n\n      // Query strings can match alert name, label keys, and label values\n      if ('labels' in matchesFilterFor) {\n        const matchers = compact(filterState.labels.map(looseParseMatcher));\n\n        // check if the label we query for exists in _either_ the rule definition or in any of its alerts\n        const doRuleLabelsMatchQuery = matchers.length > 0 && labelsMatchMatchers(rule.labels, matchers);\n        const doAlertsContainMatchingLabels =\n          matchers.length > 0 &&\n          promRuleDefition &&\n          promRuleDefition.type === PromRuleType.Alerting &&\n          promRuleDefition.alerts &&\n          promRuleDefition.alerts.some((alert) => labelsMatchMatchers(alert.labels, matchers));\n\n        if (doRuleLabelsMatchQuery || doAlertsContainMatchingLabels) {\n          matchesFilterFor.labels = true;\n        }\n      }\n\n      if ('ruleState' in matchesFilterFor) {\n        const promRule = rule.promRule;\n        const hasPromRuleDefinition = promRule && isAlertingRule(promRule);\n\n        const ruleStateMatches = hasPromRuleDefinition && promRule.state === filterState.ruleState;\n\n        if (ruleStateMatches) {\n          matchesFilterFor.ruleState = true;\n        }\n      }\n\n      return Object.values(matchesFilterFor).every((match) => match === true);\n    });\n\n    // Add rules to the group that match the rule list filters\n    if (filteredRules.length) {\n      groupAcc.push({\n        ...group,\n        rules: filteredRules,\n      });\n    }\n    return groupAcc;\n  };\n};\n\nfunction looseParseMatcher(matcherQuery: string): Matcher | undefined {\n  try {\n    return parseMatcher(matcherQuery);\n  } catch {\n    // Try to createa a matcher than matches all values for a given key\n    return { name: matcherQuery, value: '', isRegex: true, isEqual: true };\n  }\n}\n\nconst isQueryingDataSource = (rulerRule: RulerGrafanaRuleDTO, filterState: RulesFilter): boolean => {\n  if (!filterState.dataSourceNames?.length) {\n    return true;\n  }\n\n  return !!rulerRule.grafana_alert.data.find((query) => {\n    if (!query.datasourceUid) {\n      return false;\n    }\n    const ds = getDataSourceSrv().getInstanceSettings(query.datasourceUid);\n    return ds?.name && filterState?.dataSourceNames?.includes(ds.name);\n  });\n};\n","import React, { useState } from 'react';\nimport { PopValueActionMeta, RemoveValueActionMeta } from 'react-select';\n\nimport {\n  DataSourceInstanceSettings,\n  getDataSourceUID,\n  isUnsignedPluginSignature,\n  SelectableValue,\n} from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { getDataSourceSrv, DataSourcePickerState, DataSourcePickerProps } from '@grafana/runtime';\nimport { ExpressionDatasourceRef } from '@grafana/runtime/src/utils/DataSourceWithBackend';\nimport { ActionMeta, HorizontalGroup, PluginSignatureBadge, MultiSelect } from '@grafana/ui';\n\nimport { isDataSourceManagingAlerts } from '../../utils/datasource';\n\nexport interface MultipleDataSourcePickerProps extends Omit<DataSourcePickerProps, 'onChange' | 'current'> {\n  onChange: (ds: DataSourceInstanceSettings, action: 'add' | 'remove') => void;\n  current: string[] | undefined;\n}\n\nexport const MultipleDataSourcePicker = (props: MultipleDataSourcePickerProps) => {\n  const dataSourceSrv = getDataSourceSrv();\n\n  const [state, setState] = useState<DataSourcePickerState>();\n\n  const onChange = (items: Array<SelectableValue<string>>, actionMeta: ActionMeta) => {\n    if (actionMeta.action === 'clear' && props.onClear) {\n      props.onClear();\n      return;\n    }\n\n    const selectedItem = items[items.length - 1];\n\n    let dataSourceName, action: 'add' | 'remove';\n\n    if (actionMeta.action === 'pop-value' || actionMeta.action === 'remove-value') {\n      const castedActionMeta:\n        | RemoveValueActionMeta<SelectableValue<string>>\n        | PopValueActionMeta<SelectableValue<string>> = actionMeta;\n      dataSourceName = castedActionMeta.removedValue?.value;\n      action = 'remove';\n    } else {\n      dataSourceName = selectedItem.value;\n      action = 'add';\n    }\n\n    const dsSettings = dataSourceSrv.getInstanceSettings(dataSourceName);\n\n    if (dsSettings) {\n      props.onChange(dsSettings, action);\n      setState({ error: undefined });\n    }\n  };\n\n  const getCurrentValue = (): Array<SelectableValue<string>> | undefined => {\n    const { current, hideTextValue, noDefault } = props;\n    if (!current && noDefault) {\n      return;\n    }\n\n    return current?.map((dataSourceName: string) => {\n      const ds = dataSourceSrv.getInstanceSettings(dataSourceName);\n      if (ds) {\n        return {\n          label: ds.name.slice(0, 37),\n          value: ds.name,\n          imgUrl: ds.meta.info.logos.small,\n          hideText: hideTextValue,\n          meta: ds.meta,\n        };\n      }\n\n      const uid = getDataSourceUID(dataSourceName);\n\n      if (uid === ExpressionDatasourceRef.uid || uid === ExpressionDatasourceRef.name) {\n        return { label: uid, value: uid, hideText: hideTextValue };\n      }\n\n      return {\n        label: (uid ?? 'no name') + ' - not found',\n        value: uid ?? undefined,\n        imgUrl: '',\n        hideText: hideTextValue,\n      };\n    });\n  };\n\n  const getDataSourceOptions = () => {\n    const { alerting, tracing, metrics, mixed, dashboard, variables, annotations, pluginId, type, filter, logs } =\n      props;\n\n    const dataSources = dataSourceSrv.getList({\n      alerting,\n      tracing,\n      metrics,\n      logs,\n      dashboard,\n      mixed,\n      variables,\n      annotations,\n      pluginId,\n      filter,\n      type,\n    });\n\n    const alertManagingDs = dataSources.filter(isDataSourceManagingAlerts).map((ds) => ({\n      value: ds.name,\n      label: `${ds.name}${ds.isDefault ? ' (default)' : ''}`,\n      imgUrl: ds.meta.info.logos.small,\n      meta: ds.meta,\n    }));\n\n    const nonAlertManagingDs = dataSources\n      .filter((ds) => !isDataSourceManagingAlerts(ds))\n      .map((ds) => ({\n        value: ds.name,\n        label: `${ds.name}${ds.isDefault ? ' (default)' : ''}`,\n        imgUrl: ds.meta.info.logos.small,\n        meta: ds.meta,\n      }));\n\n    const groupedOptions = [\n      { label: 'Data sources with configured alert rules', options: alertManagingDs, expanded: true },\n      { label: 'Other data sources', options: nonAlertManagingDs, expanded: true },\n    ];\n\n    return groupedOptions;\n  };\n\n  const {\n    autoFocus,\n    onBlur,\n    onClear,\n    openMenuOnFocus,\n    placeholder,\n    width,\n    inputId,\n    disabled = false,\n    isLoading = false,\n  } = props;\n\n  const options = getDataSourceOptions();\n  const value = getCurrentValue();\n  const isClearable = typeof onClear === 'function';\n\n  return (\n    <div data-testid={selectors.components.DataSourcePicker.container}>\n      <MultiSelect\n        isLoading={isLoading}\n        disabled={disabled}\n        data-testid={selectors.components.DataSourcePicker.inputV2}\n        inputId={inputId || 'data-source-picker'}\n        className=\"ds-picker select-container\"\n        isClearable={isClearable}\n        backspaceRemovesValue={true}\n        onChange={onChange}\n        options={options}\n        autoFocus={autoFocus}\n        onBlur={onBlur}\n        width={width}\n        openMenuOnFocus={openMenuOnFocus}\n        maxMenuHeight={500}\n        placeholder={placeholder}\n        noOptionsMessage=\"No datasources found\"\n        value={value ?? []}\n        invalid={Boolean(state?.error) || Boolean(props.invalid)}\n        getOptionLabel={(o) => {\n          if (o.meta && isUnsignedPluginSignature(o.meta.signature) && o !== value) {\n            return (\n              <HorizontalGroup align=\"center\" justify=\"space-between\" height=\"auto\">\n                <span>{o.label}</span> <PluginSignatureBadge status={o.meta.signature} />\n              </HorizontalGroup>\n            );\n          }\n          return o.label || '';\n        }}\n      />\n    </div>\n  );\n};\n","import { css } from '@emotion/css';\nimport React, { useEffect, useRef, useState } from 'react';\nimport { useForm } from 'react-hook-form';\n\nimport { DataSourceInstanceSettings, GrafanaTheme2, SelectableValue } from '@grafana/data';\nimport { Button, Field, Icon, Input, Label, RadioButtonGroup, Tooltip, useStyles2, Stack } from '@grafana/ui';\nimport { useQueryParams } from 'app/core/hooks/useQueryParams';\nimport { PromAlertingRuleState, PromRuleType } from 'app/types/unified-alerting-dto';\n\nimport { logInfo, LogMessages } from '../../Analytics';\nimport { useRulesFilter } from '../../hooks/useFilteredRules';\nimport { RuleHealth } from '../../search/rulesSearchParser';\nimport { alertStateToReadable } from '../../utils/rules';\nimport { HoverCard } from '../HoverCard';\n\nimport { MultipleDataSourcePicker } from './MultipleDataSourcePicker';\n\nconst ViewOptions: SelectableValue[] = [\n  {\n    icon: 'folder',\n    label: 'Grouped',\n    value: 'grouped',\n  },\n  {\n    icon: 'list-ul',\n    label: 'List',\n    value: 'list',\n  },\n  {\n    icon: 'heart-rate',\n    label: 'State',\n    value: 'state',\n  },\n];\n\nconst RuleTypeOptions: SelectableValue[] = [\n  {\n    label: 'Alert ',\n    value: PromRuleType.Alerting,\n  },\n  {\n    label: 'Recording ',\n    value: PromRuleType.Recording,\n  },\n];\n\nconst RuleHealthOptions: SelectableValue[] = [\n  { label: 'Ok', value: RuleHealth.Ok },\n  { label: 'No Data', value: RuleHealth.NoData },\n  { label: 'Error', value: RuleHealth.Error },\n];\n\ninterface RulesFilerProps {\n  onFilterCleared?: () => void;\n}\n\nconst RuleStateOptions = Object.entries(PromAlertingRuleState).map(([key, value]) => ({\n  label: alertStateToReadable(value),\n  value,\n}));\n\nconst RulesFilter = ({ onFilterCleared = () => undefined }: RulesFilerProps) => {\n  const styles = useStyles2(getStyles);\n  const [queryParams, setQueryParams] = useQueryParams();\n  const { filterState, hasActiveFilters, searchQuery, setSearchQuery, updateFilters } = useRulesFilter();\n\n  // This key is used to force a rerender on the inputs when the filters are cleared\n  const [filterKey, setFilterKey] = useState<number>(Math.floor(Math.random() * 100));\n  const dataSourceKey = `dataSource-${filterKey}`;\n  const queryStringKey = `queryString-${filterKey}`;\n\n  const searchQueryRef = useRef<HTMLInputElement | null>(null);\n  const { handleSubmit, register, setValue } = useForm<{ searchQuery: string }>({ defaultValues: { searchQuery } });\n  const { ref, ...rest } = register('searchQuery');\n\n  useEffect(() => {\n    setValue('searchQuery', searchQuery);\n  }, [searchQuery, setValue]);\n\n  const handleDataSourceChange = (dataSourceValue: DataSourceInstanceSettings, action: 'add' | 'remove') => {\n    const dataSourceNames =\n      action === 'add'\n        ? [...filterState.dataSourceNames].concat([dataSourceValue.name])\n        : filterState.dataSourceNames.filter((name) => name !== dataSourceValue.name);\n\n    updateFilters({\n      ...filterState,\n      dataSourceNames,\n    });\n\n    setFilterKey((key) => key + 1);\n  };\n\n  const clearDataSource = () => {\n    updateFilters({ ...filterState, dataSourceNames: [] });\n    setFilterKey((key) => key + 1);\n  };\n\n  const handleAlertStateChange = (value: PromAlertingRuleState) => {\n    logInfo(LogMessages.clickingAlertStateFilters);\n    updateFilters({ ...filterState, ruleState: value });\n    setFilterKey((key) => key + 1);\n  };\n\n  const handleViewChange = (view: string) => {\n    setQueryParams({ view });\n  };\n\n  const handleRuleTypeChange = (ruleType: PromRuleType) => {\n    updateFilters({ ...filterState, ruleType });\n    setFilterKey((key) => key + 1);\n  };\n\n  const handleRuleHealthChange = (ruleHealth: RuleHealth) => {\n    updateFilters({ ...filterState, ruleHealth });\n    setFilterKey((key) => key + 1);\n  };\n\n  const handleClearFiltersClick = () => {\n    setSearchQuery(undefined);\n    onFilterCleared();\n\n    setTimeout(() => setFilterKey(filterKey + 1), 100);\n  };\n\n  const searchIcon = <Icon name={'search'} />;\n  return (\n    <div className={styles.container}>\n      <Stack direction=\"column\" gap={1}>\n        <Stack direction=\"row\" gap={1}>\n          <Field\n            className={styles.dsPickerContainer}\n            label={\n              <Label htmlFor=\"data-source-picker\">\n                <Stack gap={0.5}>\n                  <span>Search by data sources</span>\n                  <Tooltip\n                    content={\n                      <div>\n                        <p>\n                          Data sources containing configured alert rules are Mimir or Loki data sources where alert\n                          rules are stored and evaluated in the data source itself.\n                        </p>\n                        <p>\n                          In these data sources, you can select Manage alerts via Alerting UI to be able to manage these\n                          alert rules in the Grafana UI as well as in the data source where they were configured.\n                        </p>\n                      </div>\n                    }\n                  >\n                    <Icon name=\"info-circle\" size=\"sm\" />\n                  </Tooltip>\n                </Stack>\n              </Label>\n            }\n          >\n            <MultipleDataSourcePicker\n              key={dataSourceKey}\n              alerting\n              noDefault\n              placeholder=\"All data sources\"\n              current={filterState.dataSourceNames}\n              onChange={handleDataSourceChange}\n              onClear={clearDataSource}\n            />\n          </Field>\n\n          <div>\n            <Label>State</Label>\n            <RadioButtonGroup\n              options={RuleStateOptions}\n              value={filterState.ruleState}\n              onChange={handleAlertStateChange}\n            />\n          </div>\n          <div>\n            <Label>Rule type</Label>\n            <RadioButtonGroup options={RuleTypeOptions} value={filterState.ruleType} onChange={handleRuleTypeChange} />\n          </div>\n          <div>\n            <Label>Health</Label>\n            <RadioButtonGroup\n              options={RuleHealthOptions}\n              value={filterState.ruleHealth}\n              onChange={handleRuleHealthChange}\n            />\n          </div>\n        </Stack>\n        <Stack direction=\"column\" gap={1}>\n          <Stack direction=\"row\" gap={1}>\n            <form\n              className={styles.searchInput}\n              onSubmit={handleSubmit((data) => {\n                setSearchQuery(data.searchQuery);\n                searchQueryRef.current?.blur();\n              })}\n            >\n              <Field\n                label={\n                  <Label htmlFor=\"rulesSearchInput\">\n                    <Stack gap={0.5}>\n                      <span>Search</span>\n                      <HoverCard content={<SearchQueryHelp />}>\n                        <Icon name=\"info-circle\" size=\"sm\" tabIndex={0} />\n                      </HoverCard>\n                    </Stack>\n                  </Label>\n                }\n              >\n                <Input\n                  id=\"rulesSearchInput\"\n                  key={queryStringKey}\n                  prefix={searchIcon}\n                  ref={(e) => {\n                    ref(e);\n                    searchQueryRef.current = e;\n                  }}\n                  {...rest}\n                  placeholder=\"Search\"\n                  data-testid=\"search-query-input\"\n                />\n              </Field>\n              <input type=\"submit\" hidden />\n            </form>\n            <div>\n              <Label>View as</Label>\n              <RadioButtonGroup\n                options={ViewOptions}\n                value={String(queryParams['view'] ?? ViewOptions[0].value)}\n                onChange={handleViewChange}\n              />\n            </div>\n          </Stack>\n          {hasActiveFilters && (\n            <div>\n              <Button fullWidth={false} icon=\"times\" variant=\"secondary\" onClick={handleClearFiltersClick}>\n                Clear filters\n              </Button>\n            </div>\n          )}\n        </Stack>\n      </Stack>\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    container: css`\n      margin-bottom: ${theme.spacing(1)};\n    `,\n    dsPickerContainer: css`\n      width: 550px;\n      flex-grow: 0;\n      margin: 0;\n    `,\n    searchInput: css`\n      flex: 1;\n      margin: 0;\n    `,\n  };\n};\n\nfunction SearchQueryHelp() {\n  const styles = useStyles2(helpStyles);\n\n  return (\n    <div>\n      <div>Search syntax allows to query alert rules by the parameters defined below.</div>\n      <hr />\n      <div className={styles.grid}>\n        <div>Filter type</div>\n        <div>Expression</div>\n        <HelpRow title=\"Datasources\" expr=\"datasource:mimir datasource:prometheus\" />\n        <HelpRow title=\"Folder/Namespace\" expr=\"namespace:global\" />\n        <HelpRow title=\"Group\" expr=\"group:cpu-usage\" />\n        <HelpRow title=\"Rule\" expr='rule:\"cpu 80%\"' />\n        <HelpRow title=\"Labels\" expr=\"label:team=A label:cluster=a1\" />\n        <HelpRow title=\"State\" expr=\"state:firing|normal|pending\" />\n        <HelpRow title=\"Type\" expr=\"type:alerting|recording\" />\n        <HelpRow title=\"Health\" expr=\"health:ok|nodata|error\" />\n      </div>\n    </div>\n  );\n}\n\nfunction HelpRow({ title, expr }: { title: string; expr: string }) {\n  const styles = useStyles2(helpStyles);\n\n  return (\n    <>\n      <div>{title}</div>\n      <code className={styles.code}>{expr}</code>\n    </>\n  );\n}\n\nconst helpStyles = (theme: GrafanaTheme2) => ({\n  grid: css`\n    display: grid;\n    grid-template-columns: max-content auto;\n    gap: ${theme.spacing(1)};\n    align-items: center;\n  `,\n  code: css`\n    display: block;\n    text-align: center;\n  `,\n});\n\nexport default RulesFilter;\n","import { css } from '@emotion/css';\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport { useAsyncFn, useInterval } from 'react-use';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Button, useStyles2, withErrorBoundary, Stack } from '@grafana/ui';\nimport { useQueryParams } from 'app/core/hooks/useQueryParams';\nimport { useDispatch } from 'app/types';\n\nimport { CombinedRuleNamespace } from '../../../types/unified-alerting';\n\nimport { trackRuleListNavigation } from './Analytics';\nimport { MoreActionsRuleButtons } from './MoreActionsRuleButtons';\nimport { AlertingPageWrapper } from './components/AlertingPageWrapper';\nimport { NoRulesSplash } from './components/rules/NoRulesCTA';\nimport { INSTANCES_DISPLAY_LIMIT } from './components/rules/RuleDetails';\nimport { RuleListErrors } from './components/rules/RuleListErrors';\nimport { RuleListGroupView } from './components/rules/RuleListGroupView';\nimport { RuleListStateView } from './components/rules/RuleListStateView';\nimport { RuleStats } from './components/rules/RuleStats';\nimport RulesFilter from './components/rules/RulesFilter';\nimport { useCombinedRuleNamespaces } from './hooks/useCombinedRuleNamespaces';\nimport { useFilteredRules, useRulesFilter } from './hooks/useFilteredRules';\nimport { useUnifiedAlertingSelector } from './hooks/useUnifiedAlertingSelector';\nimport { fetchAllPromAndRulerRulesAction } from './state/actions';\nimport { RULE_LIST_POLL_INTERVAL_MS } from './utils/constants';\nimport { getAllRulesSourceNames } from './utils/datasource';\n\nconst VIEWS = {\n  groups: RuleListGroupView,\n  state: RuleListStateView,\n};\n\n// make sure we ask for 1 more so we show the \"show x more\" button\nconst LIMIT_ALERTS = INSTANCES_DISPLAY_LIMIT + 1;\n\nconst RuleList = withErrorBoundary(\n  () => {\n    const dispatch = useDispatch();\n    const styles = useStyles2(getStyles);\n    const rulesDataSourceNames = useMemo(getAllRulesSourceNames, []);\n    const [expandAll, setExpandAll] = useState(false);\n\n    const onFilterCleared = useCallback(() => setExpandAll(false), []);\n\n    const [queryParams] = useQueryParams();\n    const { filterState, hasActiveFilters } = useRulesFilter();\n\n    const view = VIEWS[queryParams['view'] as keyof typeof VIEWS]\n      ? (queryParams['view'] as keyof typeof VIEWS)\n      : 'groups';\n\n    const ViewComponent = VIEWS[view];\n\n    const promRuleRequests = useUnifiedAlertingSelector((state) => state.promRules);\n    const rulerRuleRequests = useUnifiedAlertingSelector((state) => state.rulerRules);\n\n    const loading = rulesDataSourceNames.some(\n      (name) => promRuleRequests[name]?.loading || rulerRuleRequests[name]?.loading\n    );\n\n    const promRequests = Object.entries(promRuleRequests);\n    const rulerRequests = Object.entries(rulerRuleRequests);\n\n    const allPromLoaded = promRequests.every(\n      ([_, state]) => state.dispatched && (state?.result !== undefined || state?.error !== undefined)\n    );\n    const allRulerLoaded = rulerRequests.every(\n      ([_, state]) => state.dispatched && (state?.result !== undefined || state?.error !== undefined)\n    );\n\n    const allPromEmpty = promRequests.every(([_, state]) => state.dispatched && state?.result?.length === 0);\n\n    const allRulerEmpty = rulerRequests.every(([_, state]) => {\n      const rulerRules = Object.entries(state?.result ?? {});\n      const noRules = rulerRules.every(([_, result]) => result?.length === 0);\n      return noRules && state.dispatched;\n    });\n\n    const limitAlerts = hasActiveFilters ? undefined : LIMIT_ALERTS;\n    // Trigger data refresh only when the RULE_LIST_POLL_INTERVAL_MS elapsed since the previous load FINISHED\n    const [_, fetchRules] = useAsyncFn(async () => {\n      if (!loading) {\n        await dispatch(fetchAllPromAndRulerRulesAction(false, { limitAlerts }));\n      }\n    }, [loading, limitAlerts, dispatch]);\n\n    useEffect(() => {\n      trackRuleListNavigation().catch(() => {});\n    }, []);\n\n    // fetch rules, then poll every RULE_LIST_POLL_INTERVAL_MS\n    useEffect(() => {\n      dispatch(fetchAllPromAndRulerRulesAction(false, { limitAlerts }));\n    }, [dispatch, limitAlerts]);\n    useInterval(fetchRules, RULE_LIST_POLL_INTERVAL_MS);\n\n    // Show splash only when we loaded all of the data sources and none of them has alerts\n    const hasNoAlertRulesCreatedYet =\n      allPromLoaded && allPromEmpty && promRequests.length > 0 && allRulerEmpty && allRulerLoaded;\n\n    const combinedNamespaces: CombinedRuleNamespace[] = useCombinedRuleNamespaces();\n    const filteredNamespaces = useFilteredRules(combinedNamespaces, filterState);\n\n    return (\n      // We don't want to show the Loading... indicator for the whole page.\n      // We show separate indicators for Grafana-managed and Cloud rules\n      <AlertingPageWrapper navId=\"alert-list\" isLoading={false}>\n        <RuleListErrors />\n        <RulesFilter onFilterCleared={onFilterCleared} />\n        {!hasNoAlertRulesCreatedYet && (\n          <>\n            <div className={styles.break} />\n            <div className={styles.buttonsContainer}>\n              <div className={styles.statsContainer}>\n                {view === 'groups' && hasActiveFilters && (\n                  <Button\n                    className={styles.expandAllButton}\n                    icon={expandAll ? 'angle-double-up' : 'angle-double-down'}\n                    variant=\"secondary\"\n                    onClick={() => setExpandAll(!expandAll)}\n                  >\n                    {expandAll ? 'Collapse all' : 'Expand all'}\n                  </Button>\n                )}\n                <RuleStats namespaces={filteredNamespaces} />\n              </div>\n              <Stack direction=\"row\" gap={0.5}>\n                <MoreActionsRuleButtons />\n              </Stack>\n            </div>\n          </>\n        )}\n        {hasNoAlertRulesCreatedYet && <NoRulesSplash />}\n        {!hasNoAlertRulesCreatedYet && <ViewComponent expandAll={expandAll} namespaces={filteredNamespaces} />}\n      </AlertingPageWrapper>\n    );\n  },\n  { style: 'page' }\n);\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  break: css`\n    width: 100%;\n    height: 0;\n    margin-bottom: ${theme.spacing(2)};\n    border-bottom: solid 1px ${theme.colors.border.medium};\n  `,\n  buttonsContainer: css`\n    margin-bottom: ${theme.spacing(2)};\n    display: flex;\n    justify-content: space-between;\n  `,\n  statsContainer: css`\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n  `,\n  expandAllButton: css`\n    margin-right: ${theme.spacing(1)};\n  `,\n});\n\nexport default RuleList;\n","import { chain, filter } from 'lodash';\nimport React, { PropsWithChildren } from 'react';\n\nimport {\n  Abilities,\n  Action,\n  AlertingAction,\n  AlertmanagerAction,\n  useAlertingAbilities,\n  useAllAlertmanagerAbilities,\n} from '../hooks/useAbilities';\n\ninterface AuthorizeProps extends PropsWithChildren {\n  actions: AlertmanagerAction[] | AlertingAction[];\n}\n\nexport const Authorize = ({ actions, children }: AuthorizeProps) => {\n  const alertmanagerActions = filter(actions, isAlertmanagerAction) as AlertmanagerAction[];\n  const alertSourceActions = filter(actions, isAlertingAction) as AlertingAction[];\n\n  if (alertmanagerActions.length) {\n    return <AuthorizeAlertmanager actions={alertmanagerActions}>{children}</AuthorizeAlertmanager>;\n  }\n\n  if (alertSourceActions.length) {\n    return <AuthorizeAlertsource actions={alertSourceActions}>{children}</AuthorizeAlertsource>;\n  }\n\n  return null;\n};\n\ninterface ActionsProps<T extends Action> extends PropsWithChildren {\n  actions: T[];\n}\n\nconst AuthorizeAlertmanager = ({ actions, children }: ActionsProps<AlertmanagerAction>) => {\n  const alertmanagerAbilties = useAllAlertmanagerAbilities();\n  const allowed = actionsAllowed(alertmanagerAbilties, actions);\n\n  if (allowed) {\n    return <>{children}</>;\n  } else {\n    return null;\n  }\n};\n\nconst AuthorizeAlertsource = ({ actions, children }: ActionsProps<AlertingAction>) => {\n  const alertSourceAbilities = useAlertingAbilities();\n  const allowed = actionsAllowed(alertSourceAbilities, actions);\n\n  if (allowed) {\n    return <>{children}</>;\n  } else {\n    return null;\n  }\n};\n\n// TODO add some authorize helper components for alert source and individual alert rules\n\n// check if some action is allowed from the abilities\nfunction actionsAllowed<T extends Action>(abilities: Abilities<T>, actions: T[]) {\n  return chain(abilities)\n    .pick(actions)\n    .values()\n    .value()\n    .some(([_supported, allowed]) => allowed === true);\n}\n\nfunction isAlertmanagerAction(action: AlertmanagerAction) {\n  return Object.values(AlertmanagerAction).includes(action);\n}\n\nfunction isAlertingAction(action: AlertingAction) {\n  return Object.values(AlertingAction).includes(action);\n}\n","import { css } from '@emotion/css';\nimport saveAs from 'file-saver';\nimport React, { useCallback, useMemo } from 'react';\nimport AutoSizer from 'react-virtualized-auto-sizer';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Button, ClipboardButton, CodeEditor, useStyles2 } from '@grafana/ui';\n\nimport { allGrafanaExportProviders, ExportFormats } from './providers';\n\ninterface FileExportPreviewProps {\n  format: ExportFormats;\n  textDefinition: string;\n\n  /*** Filename without extension ***/\n  downloadFileName: string;\n  onClose: () => void;\n}\n\nexport function FileExportPreview({ format, textDefinition, downloadFileName, onClose }: FileExportPreviewProps) {\n  const styles = useStyles2(fileExportPreviewStyles);\n\n  const onDownload = useCallback(() => {\n    const blob = new Blob([textDefinition], {\n      type: `application/${format};charset=utf-8`,\n    });\n    saveAs(blob, `${downloadFileName}.${format}`);\n  }, [textDefinition, downloadFileName, format]);\n\n  const formattedTextDefinition = useMemo(() => {\n    const provider = allGrafanaExportProviders[format];\n    return provider.formatter ? provider.formatter(textDefinition) : textDefinition;\n  }, [format, textDefinition]);\n\n  return (\n    // TODO Handle empty content\n    <div className={styles.container}>\n      <div className={styles.content}>\n        <AutoSizer disableWidth>\n          {({ height }) => (\n            <CodeEditor\n              width=\"100%\"\n              height={height}\n              language={format}\n              value={formattedTextDefinition}\n              monacoOptions={{\n                minimap: {\n                  enabled: false,\n                },\n                scrollBeyondLastLine: false,\n                lineNumbers: 'on',\n                readOnly: true,\n              }}\n            />\n          )}\n        </AutoSizer>\n      </div>\n      <div className={styles.actions}>\n        <Button variant=\"secondary\" onClick={onClose}>\n          Cancel\n        </Button>\n        <ClipboardButton icon=\"copy\" getText={() => textDefinition}>\n          Copy code\n        </ClipboardButton>\n        <Button icon=\"download-alt\" onClick={onDownload}>\n          Download\n        </Button>\n      </div>\n    </div>\n  );\n}\n\nconst fileExportPreviewStyles = (theme: GrafanaTheme2) => ({\n  container: css`\n    display: flex;\n    flex-direction: column;\n    height: 100%;\n    gap: ${theme.spacing(2)};\n  `,\n  content: css`\n    flex: 1 1 100%;\n  `,\n  actions: css`\n    flex: 0;\n    justify-content: flex-end;\n    display: flex;\n    gap: ${theme.spacing(1)};\n  `,\n});\n","import React from 'react';\n\nimport { Drawer } from '@grafana/ui';\n\nimport { RuleInspectorTabs } from '../rule-editor/RuleInspector';\n\nimport { ExportFormats, ExportProvider } from './providers';\n\ninterface GrafanaExportDrawerProps {\n  activeTab: ExportFormats;\n  onTabChange: (tab: ExportFormats) => void;\n  children: React.ReactNode;\n  onClose: () => void;\n  formatProviders: Array<ExportProvider<ExportFormats>>;\n  title?: string;\n}\n\nexport function GrafanaExportDrawer({\n  activeTab,\n  onTabChange,\n  children,\n  onClose,\n  formatProviders,\n  title = 'Export',\n}: GrafanaExportDrawerProps) {\n  const grafanaRulesTabs = Object.values(formatProviders).map((provider) => ({\n    label: provider.name,\n    value: provider.exportFormat,\n  }));\n  return (\n    <Drawer\n      title={title}\n      subtitle=\"Select the format and download the file or copy the contents to clipboard\"\n      tabs={\n        <RuleInspectorTabs<ExportFormats> tabs={grafanaRulesTabs} setActiveTab={onTabChange} activeTab={activeTab} />\n      }\n      onClose={onClose}\n      size=\"md\"\n    >\n      {children}\n    </Drawer>\n  );\n}\n","export interface ExportProvider<TFormat> {\n  name: string;\n  exportFormat: TFormat;\n  formatter?: (raw: string) => string;\n}\n\nexport const JsonExportProvider: ExportProvider<'json'> = {\n  name: 'JSON',\n  exportFormat: 'json',\n  formatter: (raw: string) => {\n    try {\n      return JSON.stringify(JSON.parse(raw), null, 4);\n    } catch (e) {\n      return raw;\n    }\n  },\n};\n\nexport const YamlExportProvider: ExportProvider<'yaml'> = {\n  name: 'YAML',\n  exportFormat: 'yaml',\n};\n\nexport const HclExportProvider: ExportProvider<'hcl'> = {\n  name: 'Terraform (HCL)',\n  exportFormat: 'hcl',\n};\n\nexport const allGrafanaExportProviders = {\n  [JsonExportProvider.exportFormat]: JsonExportProvider,\n  [YamlExportProvider.exportFormat]: YamlExportProvider,\n  [HclExportProvider.exportFormat]: HclExportProvider,\n} as const;\n\nexport const jsonAndYamlGrafanaExportProviders = [JsonExportProvider, YamlExportProvider];\n\nexport type ExportFormats = keyof typeof allGrafanaExportProviders;\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Icon, Text, Toggletip, useStyles2, Stack } from '@grafana/ui';\n\ninterface NeedHelpInfoProps {\n  contentText: string | JSX.Element;\n  externalLink?: string;\n  linkText?: string;\n  title: string;\n}\nexport function NeedHelpInfo({ contentText, externalLink, linkText, title }: NeedHelpInfoProps) {\n  const styles = useStyles2(getStyles);\n  return (\n    <Toggletip\n      content={<div className={styles.mutedText}>{contentText}</div>}\n      title={\n        <Stack gap={1} direction=\"row\">\n          <Icon name=\"question-circle\" />\n          {title}\n        </Stack>\n      }\n      footer={\n        externalLink ? (\n          <a href={externalLink} target=\"_blank\" rel=\"noreferrer\">\n            <Stack direction=\"row\" gap={0.5} alignItems=\"center\">\n              <Text color=\"link\">\n                {linkText} <Icon size=\"sm\" name=\"external-link-alt\" />\n              </Text>\n            </Stack>\n          </a>\n        ) : undefined\n      }\n      closeButton={true}\n      placement=\"bottom-start\"\n    >\n      <div className={styles.helpInfo}>\n        <Stack direction=\"row\" alignItems=\"center\" gap={0.5}>\n          <Icon name=\"question-circle\" size=\"sm\" />\n          <Text variant=\"bodySmall\" color=\"primary\">\n            Need help?\n          </Text>\n        </Stack>\n      </div>\n    </Toggletip>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  mutedText: css`\n    color: ${theme.colors.text.secondary};\n    font-size: ${theme.typography.size.sm};\n  `,\n  helpInfo: css`\n    cursor: pointer;\n    text-decoration: underline;\n  `,\n});\n","import { css, cx } from '@emotion/css';\nimport React, { ReactElement } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { FieldSet, Text, useStyles2, Stack } from '@grafana/ui';\n\nexport interface RuleEditorSectionProps {\n  title: string;\n  stepNo: number;\n  description?: string | ReactElement;\n  fullWidth?: boolean;\n}\n\nexport const RuleEditorSection = ({\n  title,\n  stepNo,\n  children,\n  fullWidth = false,\n  description,\n}: React.PropsWithChildren<RuleEditorSectionProps>) => {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={styles.parent}>\n      <FieldSet\n        className={cx(fullWidth && styles.fullWidth)}\n        label={\n          <Text variant=\"h3\">\n            {stepNo}. {title}\n          </Text>\n        }\n      >\n        <Stack direction=\"column\">\n          {description && <div className={styles.description}>{description}</div>}\n          {children}\n        </Stack>\n      </FieldSet>\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  parent: css`\n    display: flex;\n    flex-direction: row;\n    max-width: ${theme.breakpoints.values.xl}px;\n    border: solid 1px ${theme.colors.border.weak};\n    border-radius: ${theme.shape.radius.default};\n    padding: ${theme.spacing(2)} ${theme.spacing(3)};\n  `,\n  description: css`\n    margin-top: -${theme.spacing(2)};\n  `,\n  fullWidth: css`\n    width: 100%;\n  `,\n});\n","import { css } from '@emotion/css';\nimport { dump, load } from 'js-yaml';\nimport React, { useState } from 'react';\nimport { useFormContext } from 'react-hook-form';\nimport AutoSizer from 'react-virtualized-auto-sizer';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Button, CodeEditor, Drawer, Icon, Tab, TabsBar, useStyles2, Tooltip } from '@grafana/ui';\n\nimport { RulerRuleDTO } from '../../../../../types/unified-alerting-dto';\nimport { RuleFormValues } from '../../types/rule-form';\nimport {\n  alertingRulerRuleToRuleForm,\n  formValuesToRulerRuleDTO,\n  recordingRulerRuleToRuleForm,\n} from '../../utils/rule-form';\nimport { isAlertingRulerRule, isRecordingRulerRule } from '../../utils/rules';\n\ninterface Props {\n  onClose: () => void;\n}\n\nconst cloudRulesTabs = [{ label: 'Yaml', value: 'yaml' }];\n\nexport const RuleInspector = ({ onClose }: Props) => {\n  const [activeTab, setActiveTab] = useState('yaml');\n  const { setValue } = useFormContext<RuleFormValues>();\n  const styles = useStyles2(drawerStyles);\n\n  const onApply = (formValues: RuleFormValues) => {\n    // Need to loop through all values and set them individually\n    // TODO this is not type-safe :(\n    for (const key in formValues) {\n      // @ts-ignore\n      setValue(key, formValues[key]);\n    }\n    onClose();\n  };\n\n  return (\n    <Drawer\n      title=\"Inspect Alert rule\"\n      subtitle={\n        <div className={styles.subtitle}>\n          <RuleInspectorTabs tabs={cloudRulesTabs} setActiveTab={setActiveTab} activeTab={activeTab} />\n        </div>\n      }\n      onClose={onClose}\n    >\n      {activeTab === 'yaml' && <InspectorYamlTab onSubmit={onApply} />}\n    </Drawer>\n  );\n};\n\ninterface RuleInspectorTabsProps<T = string> {\n  tabs: Array<{ label: string; value: T }>;\n  activeTab: T;\n  setActiveTab: (tab: T) => void;\n}\n\nexport function RuleInspectorTabs<T extends string>({ tabs, activeTab, setActiveTab }: RuleInspectorTabsProps<T>) {\n  return (\n    <TabsBar>\n      {tabs.map((tab, index) => {\n        return (\n          <Tab\n            key={`${tab.value}-${index}`}\n            label={tab.label}\n            value={tab.value}\n            onChangeTab={() => setActiveTab(tab.value)}\n            active={activeTab === tab.value}\n          />\n        );\n      })}\n    </TabsBar>\n  );\n}\n\ninterface YamlTabProps {\n  onSubmit: (newModel: RuleFormValues) => void;\n}\n\nconst InspectorYamlTab = ({ onSubmit }: YamlTabProps) => {\n  const styles = useStyles2(yamlTabStyle);\n  const { getValues } = useFormContext<RuleFormValues>();\n\n  const yamlValues = formValuesToRulerRuleDTO(getValues());\n  const [alertRuleAsYaml, setAlertRuleAsYaml] = useState(dump(yamlValues));\n\n  const onApply = () => {\n    const rulerRule = load(alertRuleAsYaml) as RulerRuleDTO;\n    const currentFormValues = getValues();\n\n    const yamlFormValues = rulerRuleToRuleFormValues(rulerRule);\n    onSubmit({ ...currentFormValues, ...yamlFormValues });\n  };\n\n  return (\n    <>\n      <div className={styles.applyButton}>\n        <Button type=\"button\" onClick={onApply}>\n          Apply\n        </Button>\n        <Tooltip content={<YamlContentInfo />} theme=\"info\" placement=\"left-start\" interactive={true}>\n          <Icon name=\"exclamation-triangle\" size=\"xl\" />\n        </Tooltip>\n      </div>\n\n      <div className={styles.content}>\n        <AutoSizer disableWidth>\n          {({ height }) => (\n            <CodeEditor\n              width=\"100%\"\n              height={height}\n              language=\"yaml\"\n              value={alertRuleAsYaml}\n              onBlur={setAlertRuleAsYaml}\n              monacoOptions={{\n                minimap: {\n                  enabled: false,\n                },\n              }}\n            />\n          )}\n        </AutoSizer>\n      </div>\n    </>\n  );\n};\n\nfunction YamlContentInfo() {\n  return (\n    <div>\n      The YAML content in the editor only contains alert rule configuration <br />\n      To configure Prometheus, you need to provide the rest of the{' '}\n      <a\n        href=\"https://prometheus.io/docs/prometheus/latest/configuration/alerting_rules/\"\n        target=\"_blank\"\n        rel=\"noreferrer\"\n      >\n        configuration file content.\n      </a>\n    </div>\n  );\n}\n\nfunction rulerRuleToRuleFormValues(rulerRule: RulerRuleDTO): Partial<RuleFormValues> {\n  if (isAlertingRulerRule(rulerRule)) {\n    return alertingRulerRuleToRuleForm(rulerRule);\n  } else if (isRecordingRulerRule(rulerRule)) {\n    return recordingRulerRuleToRuleForm(rulerRule);\n  }\n\n  return {};\n}\n\nexport const yamlTabStyle = (theme: GrafanaTheme2) => ({\n  content: css`\n    flex-grow: 1;\n    height: 100%;\n    padding-bottom: 16px;\n    margin-bottom: ${theme.spacing(2)};\n  `,\n  applyButton: css`\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n    align-items: center;\n    flex-grow: 0;\n    margin-bottom: ${theme.spacing(2)};\n  `,\n});\n\nexport const drawerStyles = () => ({\n  subtitle: css`\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n  `,\n});\n","import { compact, memoize, uniq } from 'lodash';\nimport memoizeOne from 'memoize-one';\n\nimport { Edge, Graph, Node } from 'app/core/utils/dag';\nimport { isExpressionQuery } from 'app/features/expressions/guards';\nimport { AlertQuery } from 'app/types/unified-alerting-dto';\n\n// memoized version of _createDagFromQueries to prevent recreating the DAG if no sources or targets are modified\nexport const createDagFromQueries = memoizeOne(\n  _createDagFromQueries,\n  (previous: Parameters<typeof _createDagFromQueries>, next: Parameters<typeof _createDagFromQueries>) => {\n    return fingerPrintQueries(previous[0]) === fingerPrintQueries(next[0]);\n  }\n);\n\n/**\n * Turn the array of alert queries (this means data queries and expressions)\n * in to a DAG, a directed acyclical graph\n */\nexport function _createDagFromQueries(queries: AlertQuery[]): Graph {\n  const graph = new Graph();\n\n  const nodes = queries.map((query) => query.refId);\n  graph.createNodes(nodes);\n\n  queries.forEach((query) => {\n    const source = query.refId;\n    const isMathExpression = isExpressionQuery(query.model) && query.model.type === 'math';\n\n    // some expressions have multiple targets (like the math expression)\n    const targets = isMathExpression\n      ? parseRefsFromMathExpression(query.model.expression ?? '')\n      : [query.model.expression];\n\n    targets.forEach((target) => {\n      const isSelf = source === target;\n\n      if (source && target && !isSelf) {\n        graph.link(target, source);\n      }\n    });\n  });\n\n  return graph;\n}\n\n/**\n * parse an expression like \"$A > $B\" or \"${FOO BAR} > 0\" to an array of refIds\n */\nexport function parseRefsFromMathExpression(input: string): string[] {\n  // we'll use two regular expressions, one for \"${var}\" and one for \"$var\"\n  const r1 = new RegExp(/\\$\\{(?<var>[a-zA-Z0-9_ ]+?)\\}/gm);\n  const r2 = new RegExp(/\\$(?<var>[a-zA-Z0-9_]+)/gm);\n\n  const m1 = Array.from(input.matchAll(r1)).map((m) => m.groups?.var);\n  const m2 = Array.from(input.matchAll(r2)).map((m) => m.groups?.var);\n\n  return compact(uniq([...m1, ...m2]));\n}\n\nexport const getOriginOfRefId = memoize(_getOriginsOfRefId, (refId, graph) => refId + fingerprintGraph(graph));\n\nexport function _getOriginsOfRefId(refId: string, graph: Graph): string[] {\n  const node = graph.getNode(refId);\n\n  let origins: Node[] = [];\n\n  // recurse through \"node > inputEdges > inputNode\"\n  function findChildNode(node: Node) {\n    const inputEdges = node.inputEdges;\n\n    if (inputEdges.length > 0) {\n      inputEdges.forEach((edge) => {\n        if (edge.inputNode) {\n          findChildNode(edge.inputNode);\n        }\n      });\n    } else {\n      origins?.push(node);\n    }\n  }\n\n  findChildNode(node);\n\n  return origins.map((origin) => origin.name);\n}\n\n// create a unique fingerprint of the DAG\nexport function fingerprintGraph(graph: Graph) {\n  return Object.keys(graph.nodes)\n    .map((name) => {\n      const n = graph.nodes[name];\n      let outputEdges = n.outputEdges.map((e: Edge) => e.outputNode?.name).join(', ');\n      let inputEdges = n.inputEdges.map((e: Edge) => e.inputNode?.name).join(', ');\n      return `${n.name}:${outputEdges}:${inputEdges}`;\n    })\n    .join(' ');\n}\n\n// create a unique fingerprint of the array of queries\nexport function fingerPrintQueries(queries: AlertQuery[]) {\n  return queries\n    .map((query) => {\n      const type = isExpressionQuery(query.model) ? query.model.type : query.queryType;\n      return query.refId + (query.model.expression ?? '') + type;\n    })\n    .join();\n}\n","import { xor } from 'lodash';\nimport { ValidateResult } from 'react-hook-form';\n\nimport {\n  DataFrame,\n  isTimeSeriesFrames,\n  LoadingState,\n  PanelData,\n  ThresholdsConfig,\n  ThresholdsMode,\n} from '@grafana/data';\nimport { GraphTresholdsStyleMode } from '@grafana/schema';\nimport { config } from 'app/core/config';\nimport { EvalFunction } from 'app/features/alerting/state/alertDef';\nimport { isExpressionQuery } from 'app/features/expressions/guards';\nimport { ClassicCondition, ExpressionQueryType } from 'app/features/expressions/types';\nimport { AlertQuery } from 'app/types/unified-alerting-dto';\n\nimport { RuleFormType } from '../../types/rule-form';\n\nimport { createDagFromQueries, getOriginOfRefId } from './dag';\n\nexport function queriesWithUpdatedReferences(\n  queries: AlertQuery[],\n  previousRefId: string,\n  newRefId: string\n): AlertQuery[] {\n  return queries.map((query) => {\n    if (previousRefId === newRefId) {\n      return query;\n    }\n\n    if (!isExpressionQuery(query.model)) {\n      return query;\n    }\n\n    const isMathExpression = query.model.type === 'math';\n    const isReduceExpression = query.model.type === 'reduce';\n    const isResampleExpression = query.model.type === 'resample';\n    const isClassicExpression = query.model.type === 'classic_conditions';\n    const isThresholdExpression = query.model.type === 'threshold';\n\n    if (isMathExpression) {\n      return {\n        ...query,\n        model: {\n          ...query.model,\n          expression: updateMathExpressionRefs(query.model.expression ?? '', previousRefId, newRefId),\n        },\n      };\n    }\n\n    if (isResampleExpression || isReduceExpression || isThresholdExpression) {\n      const isReferencing = query.model.expression === previousRefId;\n\n      return {\n        ...query,\n        model: {\n          ...query.model,\n          expression: isReferencing ? newRefId : query.model.expression,\n        },\n      };\n    }\n\n    if (isClassicExpression) {\n      const conditions = query.model.conditions?.map((condition) => ({\n        ...condition,\n        query: {\n          ...condition.query,\n          params: condition.query.params.map((param: string) => (param === previousRefId ? newRefId : param)),\n        },\n      }));\n\n      return { ...query, model: { ...query.model, conditions } };\n    }\n\n    return query;\n  });\n}\n\nexport function updateMathExpressionRefs(expression: string, previousRefId: string, newRefId: string): string {\n  const oldExpression = new RegExp('(\\\\$' + previousRefId + '\\\\b)|(\\\\${' + previousRefId + '})', 'gm');\n  const newExpression = '${' + newRefId + '}';\n\n  return expression.replace(oldExpression, newExpression);\n}\n\nexport function refIdExists(queries: AlertQuery[], refId: string | null): boolean {\n  return queries.find((query) => query.refId === refId) !== undefined;\n}\n\n// some gateways (like Istio) will decode \"/\" and \"\\\" characters – this will cause 404 errors for any API call\n// that includes these values in the URL (ie. /my/path%2fto/resource -> /my/path/to/resource)\n//\n// see https://istio.io/latest/docs/ops/best-practices/security/#customize-your-system-on-path-normalization\nexport function checkForPathSeparator(value: string): ValidateResult {\n  const containsPathSeparator = value.includes('/') || value.includes('\\\\');\n  if (containsPathSeparator) {\n    return 'Cannot contain \"/\" or \"\\\\\" characters';\n  }\n\n  return true;\n}\n\n// this function assumes we've already checked if the data passed in to the function is of the alert condition\nexport function errorFromCurrentCondition(data: PanelData): Error | undefined {\n  if (data.series.length === 0) {\n    return;\n  }\n\n  const isTimeSeriesResults = isTimeSeriesFrames(data.series);\n\n  let error;\n  if (isTimeSeriesResults) {\n    error = new Error('You cannot use time series data as an alert condition, consider adding a reduce expression.');\n  }\n\n  return error;\n}\n\nexport function errorFromPreviewData(data: PanelData): Error | undefined {\n  // give preference to QueryErrors\n  if (data.errors?.length) {\n    return new Error(data.errors[0].message);\n  }\n\n  return;\n}\n\nexport function warningFromSeries(series: DataFrame[]): Error | undefined {\n  const notices = series[0]?.meta?.notices ?? [];\n  const warning = notices.find((notice) => notice.severity === 'warning')?.text;\n\n  return warning ? new Error(warning) : undefined;\n}\n\nexport type ThresholdDefinition = {\n  config: ThresholdsConfig;\n  mode: GraphTresholdsStyleMode;\n};\n\nexport type ThresholdDefinitions = Record<string, ThresholdDefinition>;\n\n/**\n * This function will retrieve threshold definitions for the given array of data and expression queries.\n */\nexport function getThresholdsForQueries(queries: AlertQuery[]) {\n  const thresholds: ThresholdDefinitions = {};\n  const SUPPORTED_EXPRESSION_TYPES = [ExpressionQueryType.threshold, ExpressionQueryType.classic];\n\n  for (const query of queries) {\n    if (!isExpressionQuery(query.model)) {\n      continue;\n    }\n\n    // currently only supporting \"threshold\" & \"classic_condition\" expressions\n    if (!SUPPORTED_EXPRESSION_TYPES.includes(query.model.type)) {\n      continue;\n    }\n\n    if (!Array.isArray(query.model.conditions)) {\n      continue;\n    }\n\n    // if any of the conditions are a \"range\" we switch to an \"area\" threshold view and ignore single threshold values\n    // the time series panel does not support both.\n    const hasRangeThreshold = query.model.conditions.some(isRangeCondition);\n\n    query.model.conditions.forEach((condition) => {\n      const threshold = condition.evaluator.params;\n\n      // \"classic_conditions\" use `condition.query.params[]` and \"threshold\" uses `query.model.expression`\n      const refId = condition.query?.params[0] ?? query.model.expression;\n\n      // if an expression hasn't been linked to a data query yet, it won't have a refId\n      if (!refId) {\n        return;\n      }\n\n      const isRangeThreshold = isRangeCondition(condition);\n\n      try {\n        // create a DAG so we can find the origin of the current expression\n        const graph = createDagFromQueries(queries);\n\n        const originRefIDs = getOriginOfRefId(refId, graph);\n        const originQueries = queries.filter((query) => originRefIDs.includes(query.refId));\n\n        originQueries.forEach((originQuery) => {\n          const originRefID = originQuery.refId;\n\n          // check if the origin is a data query\n          const originIsDataQuery = !isExpressionQuery(originQuery?.model);\n\n          // if yes, add threshold config to the refId of the data Query\n          const hasValidOrigin = Boolean(originIsDataQuery && originRefID);\n\n          // create the initial data structure for this origin refId\n          if (originRefID && !thresholds[originRefID]) {\n            thresholds[originRefID] = {\n              config: {\n                mode: ThresholdsMode.Absolute,\n                steps: [],\n              },\n              mode: GraphTresholdsStyleMode.Line,\n            };\n          }\n\n          if (originRefID && hasValidOrigin && !isRangeThreshold && !hasRangeThreshold) {\n            appendSingleThreshold(originRefID, threshold[0]);\n          } else if (originRefID && hasValidOrigin && isRangeThreshold) {\n            appendRangeThreshold(originRefID, threshold, condition.evaluator.type);\n            thresholds[originRefID].mode = GraphTresholdsStyleMode.LineAndArea;\n          }\n        });\n      } catch (err) {\n        console.error('Failed to parse thresholds', err);\n        return;\n      }\n    });\n  }\n\n  function appendSingleThreshold(refId: string, value: number): void {\n    thresholds[refId].config.steps.push(\n      ...[\n        {\n          value: -Infinity,\n          color: 'transparent',\n        },\n        {\n          value: value,\n          color: config.theme2.colors.error.main,\n        },\n      ]\n    );\n  }\n\n  function appendRangeThreshold(refId: string, values: number[], type: EvalFunction): void {\n    if (type === EvalFunction.IsWithinRange) {\n      thresholds[refId].config.steps.push(\n        ...[\n          {\n            value: -Infinity,\n            color: 'transparent',\n          },\n          {\n            value: values[0],\n            color: config.theme2.colors.error.main,\n          },\n          {\n            value: values[1],\n            color: config.theme2.colors.error.main,\n          },\n          {\n            value: values[1],\n            color: 'transparent',\n          },\n        ]\n      );\n    }\n\n    if (type === EvalFunction.IsOutsideRange) {\n      thresholds[refId].config.steps.push(\n        ...[\n          {\n            value: -Infinity,\n            color: config.theme2.colors.error.main,\n          },\n          // we have to duplicate this value, or the graph will not display the handle in the right color\n          {\n            value: values[0],\n            color: config.theme2.colors.error.main,\n          },\n          {\n            value: values[0],\n            color: 'transparent',\n          },\n          {\n            value: values[1],\n            color: config.theme2.colors.error.main,\n          },\n        ]\n      );\n    }\n\n    // now also sort the threshold values, if we don't then they will look weird in the time series panel\n    // TODO this doesn't work for negative values for now, those need to be sorted inverse\n    thresholds[refId].config.steps.sort((a, b) => a.value - b.value);\n\n    // also make sure we remove any \"undefined\" values from our steps in case the threshold config is incomplete\n    thresholds[refId].config.steps = thresholds[refId].config.steps.filter((step) => step.value !== undefined);\n  }\n\n  return thresholds;\n}\n\nfunction isRangeCondition(condition: ClassicCondition) {\n  return (\n    condition.evaluator.type === EvalFunction.IsWithinRange || condition.evaluator.type === EvalFunction.IsOutsideRange\n  );\n}\n\nexport function getStatusMessage(data: PanelData): string | undefined {\n  const genericErrorMessage = 'Failed to fetch data';\n  if (data.state !== LoadingState.Error) {\n    return;\n  }\n\n  const errors = data.errors;\n  if (errors?.length) {\n    return errors.map((error) => error.message ?? genericErrorMessage).join(', ');\n  }\n\n  return data.error?.message ?? genericErrorMessage;\n}\n\nexport function translateRouteParamToRuleType(param = ''): RuleFormType {\n  if (param === 'recording') {\n    return RuleFormType.cloudRecording;\n  }\n\n  return RuleFormType.grafana;\n}\n\n/**\n * This function finds what refIds have been updated given the previous Array of queries and an Array of updated data queries.\n * All expression queries are discarded from the arrays, since we have separate handlers for those (see \"onUpdateRefId\") of the ExpressionEditor\n *\n * This code assumes not more than 1 query refId has changed per \"onChangeQueries\",\n */\nexport function findRenamedDataQueryReferences(\n  previousQueries: AlertQuery[],\n  updatedQueries: AlertQuery[]\n): [string, string] {\n  const updatedDataQueries = updatedQueries\n    .filter((query) => !isExpressionQuery(query.model))\n    .map((query) => query.refId);\n  const previousDataQueries = previousQueries\n    .filter((query) => !isExpressionQuery(query.model))\n    .map((query) => query.refId);\n\n  // given the following two arrays\n  // ['A', 'B', 'C'] and ['FOO', 'B' 'C']\n  // the \"xor\" function will return ['A', 'FOO'] because those are not in both arrays\n  const [oldRefId, newRefId] = xor(previousDataQueries, updatedDataQueries);\n\n  return [oldRefId, newRefId];\n}\n","import React from 'react';\n\nimport { IconName, Tooltip, LinkButton, Button } from '@grafana/ui';\nimport { PopoverContent, TooltipPlacement } from '@grafana/ui/src/components/Tooltip';\n\ninterface Props {\n  tooltip: PopoverContent;\n  icon: IconName;\n  className?: string;\n  tooltipPlacement?: TooltipPlacement;\n  to?: string;\n  target?: string;\n  onClick?: () => void;\n  'data-testid'?: string;\n}\n\nexport const ActionIcon = ({\n  tooltip,\n  icon,\n  to,\n  target,\n  onClick,\n  className,\n  tooltipPlacement = 'top',\n  ...rest\n}: Props) => {\n  const ariaLabel = typeof tooltip === 'string' ? tooltip : undefined;\n\n  return (\n    <Tooltip content={tooltip} placement={tooltipPlacement}>\n      {to ? (\n        <LinkButton\n          variant=\"secondary\"\n          fill=\"text\"\n          icon={icon}\n          href={to}\n          size=\"sm\"\n          target={target}\n          {...rest}\n          aria-label={ariaLabel}\n        />\n      ) : (\n        <Button\n          className={className}\n          variant=\"secondary\"\n          fill=\"text\"\n          size=\"sm\"\n          icon={icon}\n          type=\"button\"\n          onClick={onClick}\n          {...rest}\n          aria-label={ariaLabel}\n        />\n      )}\n    </Tooltip>\n  );\n};\n","import { useCallback, useMemo } from 'react';\nimport { useLocation } from 'react-router-dom';\n\nimport { locationService } from '@grafana/runtime';\n\nexport function useURLSearchParams(): [\n  URLSearchParams,\n  (searchValues: Record<string, string | string[] | undefined>, replace?: boolean) => void,\n] {\n  const { search } = useLocation();\n  const queryParams = useMemo(() => new URLSearchParams(search), [search]);\n\n  const update = useCallback((searchValues: Record<string, string | string[] | undefined>, replace?: boolean) => {\n    locationService.partial(searchValues, replace);\n  }, []);\n\n  return [queryParams, update];\n}\n","import { isExpressionReference } from '@grafana/runtime/src/utils/DataSourceWithBackend';\nimport { DataQuery } from '@grafana/schema';\n\nimport { ExpressionQuery, ExpressionQueryType } from './types';\n\nexport const isExpressionQuery = (dataQuery?: DataQuery): dataQuery is ExpressionQuery => {\n  if (!dataQuery) {\n    return false;\n  }\n\n  if (isExpressionReference(dataQuery.datasource)) {\n    return true;\n  }\n\n  const expression = dataQuery as ExpressionQuery;\n\n  if (typeof expression.type !== 'string') {\n    return false;\n  }\n  return Object.values(ExpressionQueryType).includes(expression.type);\n};\n","import { useEffect, useRef } from 'react';\nvar useInterval = function (callback, delay) {\n    var savedCallback = useRef(function () { });\n    useEffect(function () {\n        savedCallback.current = callback;\n    });\n    useEffect(function () {\n        if (delay !== null) {\n            var interval_1 = setInterval(function () { return savedCallback.current(); }, delay || 0);\n            return function () { return clearInterval(interval_1); };\n        }\n        return undefined;\n    }, [delay]);\n};\nexport default useInterval;\n"],"names":["useCleanup","cleanupAction","dispatch","selectorRef","GrafanaRulesExporter","onClose","activeTab","setActiveTab","GrafanaExportDrawer","GrafanaRulesExportPreview","exportFormat","rulesDefinition","isFetching","alertRuleApi","downloadFileName","LoadingPlaceholder","FileExportPreview","MoreActionsRuleButtons","createRuleSupported","createRuleAllowed","createCloudRuleSupported","createCloudRuleAllowed","exportRulesSupported","exportRulesAllowed","location","showExportDrawer","toggleShowExportDrawer","useToggle","canCreateGrafanaRules","canCreateCloudRules","canExportRules","menuItems","MenuItem","url","Dropdown","Menu","Button","Icon","NoRulesSplash","styles","getStyles","Stack","EmptyListCTA","CallToActionCard","theme","RuleListErrors","expanded","setExpanded","closed","setClosed","useLocalStorage","dataSourceConfigRequests","useUnifiedAlertingSelector","state","promRuleRequests","rulerRuleRequests","errors","dataSourceConfigErrors","promRequestErrors","rulerRequestErrors","requests","result","dataSource","error","grafanaPromError","grafanaRulerError","ErrorSummaryButton","Alert","item","idx","count","onClick","Tooltip","GrafanaRuleFolderExporter","folder","GrafanaRuleFolderExportPreview","exportFolderDefinition","GrafanaRuleGroupExporter","folderUid","groupName","GrafanaRuleGroupExportPreview","ruleGroupTextDefinition","ReorderCloudGroupModal","props","group","namespace","pending","setPending","rulesList","setRulesList","onDragEnd","newOrderedRules","reorder","rulesSourceName","rulerRules","rule","rulesWithUID","Modal","ModalHeader","provided","_snapshot","rubric","ListItem","droppableProvided","index","isClone","isDragging","AlertStateTag","Badge","rules","startIndex","endIndex","removed","RulesGroup","expandAll","viewMode","rulesSource","isEditingGroup","setIsEditingGroup","isDeletingGroup","setIsDeletingGroup","isReorderingGroup","setIsReorderingGroup","isExporting","setIsExporting","isCollapsed","setIsCollapsed","canEditRules","hasRuler","rulerRulesLoaded","useHasRuler","rulerRule","folderUID","useFolder","isDeleting","isFederated","isProvisioned","isListView","isGroupView","deleteGroup","actionIcons","Spinner","baseUrl","ActionIcon","RuleLocation","closeEditModal","saved","CollapseToggle","RulesTable","ConfirmModal","useCombinedGroupNamespace","namespaces","ns","g","CloudRules","dsConfigs","promRules","rulesDataSources","groupsWithNamespaces","dataSourcesLoading","ds","hasSomeResults","hasDataSourcesConfigured","hasDataSourcesLoading","hasNamespaces","numberOfPages","onPageChange","page","pageItems","usePagination","Pagination","GrafanaRules","queryParams","useQueryParams","prom","ruler","loading","hasResult","wantsListView","namespacesFormat","RuleListGroupView","grafanaNamespaces","cloudNamespaces","sorted","a","b","Authorize","RuleListStateSection","defaultCollapsed","collapsed","setCollapsed","RuleListStateView","filters","groupedRules","useRulesFilter","updateQueryParams","useURLSearchParams","searchQuery","filterState","hasActiveFilters","filter","updateFilters","newFilter","newSearchQuery","setSearchQuery","legacyFilters","legacyFilter","draft","legacyLabelsAsStrings","name","operator","value","useFilteredRules","filteredRules","filterRules","r","ufuzzy","filteredNamespaces","dataSourceFilter","namespaceFilter","namespaceHaystack","idxs","info","order","reduceNamespaces","namespaceAcc","groupNameFilter","filteredGroups","groupsHaystack","reduceGroups","ruleNameQuery","groupAcc","rulesHaystack","promRuleDefition","matchesFilterFor","isQueryingDataSource","ruleHealth","matchers","looseParseMatcher","doRuleLabelsMatchQuery","doAlertsContainMatchingLabels","alert","promRule","match","matcherQuery","query","MultipleDataSourcePicker","dataSourceSrv","setState","onChange","items","actionMeta","selectedItem","dataSourceName","action","dsSettings","getCurrentValue","current","hideTextValue","noDefault","uid","getDataSourceOptions","alerting","tracing","metrics","mixed","dashboard","variables","annotations","pluginId","type","logs","dataSources","alertManagingDs","nonAlertManagingDs","autoFocus","onBlur","onClear","openMenuOnFocus","placeholder","width","inputId","disabled","isLoading","options","isClearable","selectors","o","PluginSignatureBadge","ViewOptions","RuleTypeOptions","RuleHealthOptions","RuleStateOptions","key","RulesFilter","onFilterCleared","setQueryParams","filterKey","setFilterKey","dataSourceKey","queryStringKey","searchQueryRef","handleSubmit","register","setValue","ref","rest","handleDataSourceChange","dataSourceValue","dataSourceNames","clearDataSource","handleAlertStateChange","handleViewChange","view","handleRuleTypeChange","ruleType","handleRuleHealthChange","handleClearFiltersClick","searchIcon","Field","Label","RadioButtonGroup","data","HoverCard","SearchQueryHelp","Input","e","helpStyles","HelpRow","title","expr","VIEWS","LIMIT_ALERTS","RuleList","rulesDataSourceNames","setExpandAll","ViewComponent","promRequests","rulerRequests","allPromLoaded","_","allRulerLoaded","allPromEmpty","allRulerEmpty","limitAlerts","fetchRules","useAsyncFn","useInterval","hasNoAlertRulesCreatedYet","combinedNamespaces","useCombinedRuleNamespaces","AlertingPageWrapper","RuleStats","actions","children","alertmanagerActions","isAlertmanagerAction","alertSourceActions","isAlertingAction","AuthorizeAlertmanager","AuthorizeAlertsource","alertmanagerAbilties","actionsAllowed","alertSourceAbilities","abilities","_supported","allowed","format","textDefinition","fileExportPreviewStyles","onDownload","blob","formattedTextDefinition","provider","height","onTabChange","formatProviders","grafanaRulesTabs","JsonExportProvider","raw","YamlExportProvider","HclExportProvider","allGrafanaExportProviders","jsonAndYamlGrafanaExportProviders","NeedHelpInfo","contentText","externalLink","linkText","RuleEditorSection","stepNo","fullWidth","description","cloudRulesTabs","RuleInspector","drawerStyles","onApply","formValues","RuleInspectorTabs","InspectorYamlTab","tabs","tab","onSubmit","yamlTabStyle","getValues","yamlValues","alertRuleAsYaml","setAlertRuleAsYaml","currentFormValues","yamlFormValues","rulerRuleToRuleFormValues","YamlContentInfo","createDagFromQueries","_createDagFromQueries","previous","next","fingerPrintQueries","queries","graph","nodes","source","parseRefsFromMathExpression","target","input","r1","r2","m1","m","m2","getOriginOfRefId","_getOriginsOfRefId","refId","fingerprintGraph","node","origins","findChildNode","inputEdges","edge","origin","n","outputEdges","queriesWithUpdatedReferences","previousRefId","newRefId","isMathExpression","isReduceExpression","isResampleExpression","isClassicExpression","isThresholdExpression","updateMathExpressionRefs","isReferencing","conditions","condition","param","expression","oldExpression","newExpression","refIdExists","checkForPathSeparator","errorFromCurrentCondition","isTimeSeriesResults","errorFromPreviewData","warningFromSeries","series","warning","notice","getThresholdsForQueries","thresholds","SUPPORTED_EXPRESSION_TYPES","hasRangeThreshold","isRangeCondition","threshold","isRangeThreshold","originRefIDs","originQuery","originRefID","hasValidOrigin","appendSingleThreshold","appendRangeThreshold","err","config","values","step","getStatusMessage","genericErrorMessage","translateRouteParamToRuleType","findRenamedDataQueryReferences","previousQueries","updatedQueries","updatedDataQueries","previousDataQueries","oldRefId","tooltip","icon","to","className","tooltipPlacement","ariaLabel","search","update","searchValues","replace","isExpressionQuery","dataQuery","callback","delay","savedCallback","interval_1"],"sourceRoot":""}