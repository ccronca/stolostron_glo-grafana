{"version":3,"file":"AlertAmRoutes.37fd49d1f5ad0c73badd.js","mappings":"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","sources":["webpack://grafana/./public/app/core/hooks/useCleanup.ts","webpack://grafana/./public/app/features/alerting/unified/api/receiversApi.ts","webpack://grafana/./public/app/features/alerting/unified/components/EmptyAreaWithCTA.tsx","webpack://grafana/./public/app/features/alerting/unified/components/export/GrafanaMuteTimingsExporter.tsx","webpack://grafana/./public/app/features/alerting/unified/components/mute-timings/MuteTimingsTable.tsx","webpack://grafana/./public/app/features/alerting/unified/components/notification-policies/Filters.tsx","webpack://grafana/./public/app/features/alerting/unified/components/receivers/grafanaAppReceivers/grafanaApp.ts","webpack://grafana/./public/app/features/alerting/unified/components/notification-policies/AlertGroupsSummary.tsx","webpack://grafana/./public/app/features/alerting/unified/components/notification-policies/EditDefaultPolicyForm.tsx","webpack://grafana/./public/app/features/alerting/unified/components/notification-policies/EditNotificationPolicyForm.tsx","webpack://grafana/./public/app/features/alerting/unified/components/notification-policies/Modals.tsx","webpack://grafana/./public/app/features/alerting/unified/components/export/GrafanaPoliciesExporter.tsx","webpack://grafana/./public/app/features/alerting/unified/components/notification-policies/Policy.tsx","webpack://grafana/./public/app/features/alerting/unified/NotificationPolicies.tsx","webpack://grafana/./public/app/features/alerting/components/CollapsibleAlert.tsx","webpack://grafana/./public/app/features/alerting/components/UAPreviewNotice.tsx","webpack://grafana/./public/app/features/alerting/unified/components/AlertManagerPicker.tsx","webpack://grafana/./public/app/features/alerting/unified/components/NoAlertManagerWarning.tsx","webpack://grafana/./public/app/features/alerting/unified/components/AlertingPageWrapper.tsx","webpack://grafana/./public/app/features/alerting/unified/components/DynamicTableWithGuidelines.tsx","webpack://grafana/./public/app/features/alerting/unified/components/EmptyArea.tsx","webpack://grafana/./public/app/features/alerting/unified/components/alert-groups/AlertDetails.tsx","webpack://grafana/./public/app/features/alerting/unified/components/alert-groups/AlertGroupAlertsTable.tsx","webpack://grafana/./public/app/features/alerting/unified/components/alert-groups/AlertGroup.tsx","webpack://grafana/./public/app/features/alerting/unified/components/mute-timings/util.tsx","webpack://grafana/./public/app/features/alerting/unified/components/notification-policies/Matchers.tsx","webpack://grafana/./public/app/features/alerting/unified/components/notification-policies/PromDurationDocs.tsx","webpack://grafana/./public/app/features/alerting/unified/components/notification-policies/PromDurationInput.tsx","webpack://grafana/./public/app/features/alerting/unified/components/notification-policies/formStyles.ts","webpack://grafana/./public/app/features/alerting/unified/components/notification-policies/routeTimingsFields.ts","webpack://grafana/./public/app/features/alerting/unified/components/notification-policies/timingOptions.ts","webpack://grafana/./public/app/features/alerting/unified/components/silences/AmAlertStateTag.tsx","webpack://grafana/./public/app/features/alerting/unified/hooks/useAlertmanagerConfig.ts","webpack://grafana/./public/app/features/alerting/unified/hooks/useMuteTimingOptions.ts","webpack://grafana/./public/app/features/alerting/unified/createRouteGroupsMatcherWorker.ts","webpack://grafana/./public/app/features/alerting/unified/useRouteGroupsMatcher.ts","webpack://grafana/./public/app/features/alerting/unified/utils/amroutes.ts","webpack://grafana/./public/app/features/alerting/unified/utils/routeTree.ts"],"sourcesContent":["import { useEffect, useRef } from 'react';\n\nimport { useDispatch } from 'app/types';\n\nimport { cleanUpAction, CleanUpAction } from '../actions/cleanUp';\n\nexport function useCleanup(cleanupAction: CleanUpAction) {\n  const dispatch = useDispatch();\n  //bit of a hack to unburden user from having to wrap stateSelcetor in a useCallback. Otherwise cleanup would happen on every render\n  const selectorRef = useRef(cleanupAction);\n  selectorRef.current = cleanupAction;\n  useEffect(() => {\n    return () => {\n      dispatch(cleanUpAction({ cleanupAction: selectorRef.current }));\n    };\n  }, [dispatch]);\n}\n","import { ContactPointsState } from 'app/types';\n\nimport { CONTACT_POINTS_STATE_INTERVAL_MS } from '../utils/constants';\n\nimport { alertingApi } from './alertingApi';\nimport { fetchContactPointsState } from './grafana';\n\nexport const receiversApi = alertingApi.injectEndpoints({\n  endpoints: (build) => ({\n    contactPointsState: build.query<ContactPointsState, { amSourceName: string }>({\n      queryFn: async ({ amSourceName }) => {\n        try {\n          const contactPointsState = await fetchContactPointsState(amSourceName);\n          return { data: contactPointsState };\n        } catch (error) {\n          return { error: error };\n        }\n      },\n    }),\n  }),\n});\n\nexport const useGetContactPointsState = (alertManagerSourceName: string) => {\n  const contactPointsStateEmpty: ContactPointsState = { receivers: {}, errorCount: 0 };\n  const { currentData: contactPointsState } = receiversApi.useContactPointsStateQuery(\n    { amSourceName: alertManagerSourceName ?? '' },\n    {\n      skip: !alertManagerSourceName,\n      pollingInterval: CONTACT_POINTS_STATE_INTERVAL_MS,\n    }\n  );\n  return contactPointsState ?? contactPointsStateEmpty;\n};\n","import { css } from '@emotion/css';\nimport React, { ButtonHTMLAttributes } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Button, ButtonVariant, IconName, LinkButton, useStyles2 } from '@grafana/ui';\n\nimport { EmptyArea } from './EmptyArea';\n\nexport interface EmptyAreaWithCTAProps {\n  buttonLabel: string;\n  href?: string;\n  onButtonClick?: ButtonHTMLAttributes<HTMLButtonElement>['onClick'];\n  text: string;\n\n  buttonIcon?: IconName;\n  buttonSize?: 'xs' | 'sm' | 'md' | 'lg';\n  buttonVariant?: ButtonVariant;\n  showButton?: boolean;\n}\n\nexport const EmptyAreaWithCTA = ({\n  buttonIcon,\n  buttonLabel,\n  buttonSize = 'lg',\n  buttonVariant = 'primary',\n  onButtonClick,\n  text,\n  href,\n  showButton = true,\n}: EmptyAreaWithCTAProps) => {\n  const styles = useStyles2(getStyles);\n\n  const commonProps = {\n    className: styles.button,\n    icon: buttonIcon,\n    size: buttonSize,\n    variant: buttonVariant,\n  };\n\n  return (\n    <EmptyArea>\n      <>\n        <p className={styles.text}>{text}</p>\n        {showButton &&\n          (href ? (\n            <LinkButton href={href} type=\"button\" {...commonProps}>\n              {buttonLabel}\n            </LinkButton>\n          ) : (\n            <Button onClick={onButtonClick} type=\"button\" {...commonProps}>\n              {buttonLabel}\n            </Button>\n          ))}\n      </>\n    </EmptyArea>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    container: css`\n      background-color: ${theme.colors.background.secondary};\n      color: ${theme.colors.text.secondary};\n      padding: ${theme.spacing(4)};\n      text-align: center;\n    `,\n    text: css`\n      margin-bottom: ${theme.spacing(2)};\n    `,\n    button: css`\n      margin: ${theme.spacing(2, 0, 1)};\n    `,\n  };\n};\n","import React, { useState } from 'react';\n\nimport { LoadingPlaceholder } from '@grafana/ui';\n\nimport { alertRuleApi } from '../../api/alertRuleApi';\n\nimport { FileExportPreview } from './FileExportPreview';\nimport { GrafanaExportDrawer } from './GrafanaExportDrawer';\nimport { allGrafanaExportProviders, ExportFormats } from './providers';\ninterface MuteTimingsExporterPreviewProps {\n  exportFormat: ExportFormats;\n  onClose: () => void;\n}\n\nconst GrafanaMuteTimingsExporterPreview = ({ exportFormat, onClose }: MuteTimingsExporterPreviewProps) => {\n  const { currentData: muteTimingsDefinition = '', isFetching } = alertRuleApi.useExportMuteTimingsQuery({\n    format: exportFormat,\n  });\n  const downloadFileName = `mute-timings-${new Date().getTime()}`;\n\n  if (isFetching) {\n    return <LoadingPlaceholder text=\"Loading....\" />;\n  }\n  return (\n    <FileExportPreview\n      format={exportFormat}\n      textDefinition={muteTimingsDefinition}\n      downloadFileName={downloadFileName}\n      onClose={onClose}\n    />\n  );\n};\n\ninterface GrafanaMuteTimingExporterPreviewProps extends MuteTimingsExporterPreviewProps {\n  muteTimingName: string;\n}\nconst GrafanaMuteTimingExporterPreview = ({\n  exportFormat,\n  onClose,\n  muteTimingName,\n}: GrafanaMuteTimingExporterPreviewProps) => {\n  const { currentData: muteTimingsDefinition = '', isFetching } = alertRuleApi.useExportMuteTimingQuery({\n    format: exportFormat,\n    muteTiming: muteTimingName,\n  });\n  const downloadFileName = `mute-timing-${muteTimingName}-${new Date().getTime()}`;\n\n  if (isFetching) {\n    return <LoadingPlaceholder text=\"Loading....\" />;\n  }\n  return (\n    <FileExportPreview\n      format={exportFormat}\n      textDefinition={muteTimingsDefinition}\n      downloadFileName={downloadFileName}\n      onClose={onClose}\n    />\n  );\n};\ninterface GrafanaMuteTimingsExporterProps {\n  onClose: () => void;\n  muteTimingName?: string;\n}\n\nexport const GrafanaMuteTimingsExporter = ({ onClose, muteTimingName }: GrafanaMuteTimingsExporterProps) => {\n  const [activeTab, setActiveTab] = useState<ExportFormats>('yaml');\n  return (\n    <GrafanaExportDrawer\n      activeTab={activeTab}\n      onTabChange={setActiveTab}\n      onClose={onClose}\n      formatProviders={Object.values(allGrafanaExportProviders)}\n    >\n      {muteTimingName ? (\n        <GrafanaMuteTimingExporterPreview exportFormat={activeTab} onClose={onClose} muteTimingName={muteTimingName} />\n      ) : (\n        <GrafanaMuteTimingsExporterPreview exportFormat={activeTab} onClose={onClose} />\n      )}\n    </GrafanaExportDrawer>\n  );\n};\n","import { css } from '@emotion/css';\nimport React, { useCallback, useMemo, useState } from 'react';\nimport { useToggle } from 'react-use';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Button, ConfirmModal, IconButton, Link, LinkButton, Menu, Stack, useStyles2 } from '@grafana/ui';\nimport { MuteTimeInterval } from 'app/plugins/datasource/alertmanager/types';\nimport { useDispatch } from 'app/types/store';\n\nimport { Authorize } from '../../components/Authorize';\nimport { AlertmanagerAction, useAlertmanagerAbilities, useAlertmanagerAbility } from '../../hooks/useAbilities';\nimport { useAlertmanagerConfig } from '../../hooks/useAlertmanagerConfig';\nimport { deleteMuteTimingAction } from '../../state/actions';\nimport { makeAMLink } from '../../utils/misc';\nimport { DynamicTable, DynamicTableColumnProps, DynamicTableItemProps } from '../DynamicTable';\nimport { EmptyAreaWithCTA } from '../EmptyAreaWithCTA';\nimport { ProvisioningBadge } from '../Provisioning';\nimport { Spacer } from '../Spacer';\nimport { GrafanaMuteTimingsExporter } from '../export/GrafanaMuteTimingsExporter';\n\nimport { renderTimeIntervals } from './util';\n\nconst ALL_MUTE_TIMINGS = Symbol('all mute timings');\n\ntype ExportProps = [JSX.Element | null, (muteTiming: string | typeof ALL_MUTE_TIMINGS) => void];\n\nconst useExportMuteTiming = (): ExportProps => {\n  const [muteTimingName, setMuteTimingName] = useState<string | typeof ALL_MUTE_TIMINGS | null>(null);\n  const [isExportDrawerOpen, toggleShowExportDrawer] = useToggle(false);\n\n  const handleClose = useCallback(() => {\n    setMuteTimingName(null);\n    toggleShowExportDrawer(false);\n  }, [toggleShowExportDrawer]);\n\n  const handleOpen = (receiverName: string | typeof ALL_MUTE_TIMINGS) => {\n    setMuteTimingName(receiverName);\n    toggleShowExportDrawer(true);\n  };\n\n  const drawer = useMemo(() => {\n    if (!muteTimingName || !isExportDrawerOpen) {\n      return null;\n    }\n\n    if (muteTimingName === ALL_MUTE_TIMINGS) {\n      // use this drawer when we want to export all mute timings\n      return <GrafanaMuteTimingsExporter onClose={handleClose} />;\n    } else {\n      // use this one for exporting a single mute timing\n      return <GrafanaMuteTimingsExporter muteTimingName={muteTimingName} onClose={handleClose} />;\n    }\n  }, [isExportDrawerOpen, handleClose, muteTimingName]);\n\n  return [drawer, handleOpen];\n};\n\ninterface MuteTimingsTableProps {\n  alertManagerSourceName: string;\n  muteTimingNames?: string[];\n  hideActions?: boolean;\n}\n\nexport const MuteTimingsTable = ({ alertManagerSourceName, muteTimingNames, hideActions }: MuteTimingsTableProps) => {\n  const styles = useStyles2(getStyles);\n  const dispatch = useDispatch();\n\n  const { currentData } = useAlertmanagerConfig(alertManagerSourceName, {\n    refetchOnFocus: true,\n    refetchOnReconnect: true,\n  });\n  const config = currentData?.alertmanager_config;\n\n  const [muteTimingName, setMuteTimingName] = useState<string>('');\n\n  const items = useMemo((): Array<DynamicTableItemProps<MuteTimeInterval>> => {\n    const muteTimings = config?.mute_time_intervals ?? [];\n    const muteTimingsProvenances = config?.muteTimeProvenances ?? {};\n\n    return muteTimings\n      .filter(({ name }) => (muteTimingNames ? muteTimingNames.includes(name) : true))\n      .map((mute) => {\n        return {\n          id: mute.name,\n          data: {\n            ...mute,\n            provenance: muteTimingsProvenances[mute.name],\n          },\n        };\n      });\n  }, [config?.mute_time_intervals, config?.muteTimeProvenances, muteTimingNames]);\n\n  const [_, allowedToCreateMuteTiming] = useAlertmanagerAbility(AlertmanagerAction.CreateMuteTiming);\n\n  const [ExportDrawer, showExportDrawer] = useExportMuteTiming();\n  const [exportMuteTimingsSupported, exportMuteTimingsAllowed] = useAlertmanagerAbility(\n    AlertmanagerAction.ExportMuteTimings\n  );\n  const columns = useColumns(alertManagerSourceName, hideActions, setMuteTimingName, showExportDrawer);\n\n  return (\n    <div className={styles.container}>\n      <Stack direction=\"row\" alignItems=\"center\">\n        <span>\n          Enter specific time intervals when not to send notifications or freeze notifications for recurring periods of\n          time.\n        </span>\n        <Spacer />\n        {!hideActions && items.length > 0 && (\n          <Authorize actions={[AlertmanagerAction.CreateMuteTiming]}>\n            <LinkButton\n              className={styles.muteTimingsButtons}\n              icon=\"plus\"\n              variant=\"primary\"\n              href={makeAMLink('alerting/routes/mute-timing/new', alertManagerSourceName)}\n            >\n              Add mute timing\n            </LinkButton>\n          </Authorize>\n        )}\n        {exportMuteTimingsSupported && (\n          <Button\n            icon=\"download-alt\"\n            className={styles.muteTimingsButtons}\n            variant=\"secondary\"\n            aria-label=\"export all\"\n            disabled={!exportMuteTimingsAllowed}\n            onClick={() => showExportDrawer(ALL_MUTE_TIMINGS)}\n          >\n            Export all\n          </Button>\n        )}\n      </Stack>\n      {items.length > 0 ? (\n        <DynamicTable items={items} cols={columns} pagination={{ itemsPerPage: 25 }} />\n      ) : !hideActions ? (\n        <EmptyAreaWithCTA\n          text=\"You haven't created any mute timings yet\"\n          buttonLabel=\"Add mute timing\"\n          buttonIcon=\"plus\"\n          buttonSize=\"lg\"\n          href={makeAMLink('alerting/routes/mute-timing/new', alertManagerSourceName)}\n          showButton={allowedToCreateMuteTiming}\n        />\n      ) : (\n        <EmptyAreaWithCTA text=\"No mute timings configured\" buttonLabel={''} showButton={false} />\n      )}\n      {!hideActions && (\n        <ConfirmModal\n          isOpen={!!muteTimingName}\n          title=\"Delete mute timing\"\n          body={`Are you sure you would like to delete \"${muteTimingName}\"`}\n          confirmText=\"Delete\"\n          onConfirm={() => {\n            dispatch(deleteMuteTimingAction(alertManagerSourceName, muteTimingName));\n            setMuteTimingName('');\n          }}\n          onDismiss={() => setMuteTimingName('')}\n        />\n      )}\n      {ExportDrawer}\n    </div>\n  );\n};\n\nfunction useColumns(\n  alertManagerSourceName: string,\n  hideActions = false,\n  setMuteTimingName: (name: string) => void,\n  openExportDrawer: (muteTiming: string | typeof ALL_MUTE_TIMINGS) => void\n) {\n  const [[_editSupported, allowedToEdit], [_deleteSupported, allowedToDelete]] = useAlertmanagerAbilities([\n    AlertmanagerAction.UpdateMuteTiming,\n    AlertmanagerAction.DeleteMuteTiming,\n  ]);\n  const showActions = !hideActions && (allowedToEdit || allowedToDelete);\n\n  // const [ExportDrawer, openExportDrawer] = useExportMuteTiming();\n  // const [_, openExportDrawer] = useExportMuteTiming();\n  const [exportSupported, exportAllowed] = useAlertmanagerAbility(AlertmanagerAction.ExportMuteTimings);\n\n  return useMemo((): Array<DynamicTableColumnProps<MuteTimeInterval>> => {\n    const columns: Array<DynamicTableColumnProps<MuteTimeInterval>> = [\n      {\n        id: 'name',\n        label: 'Name',\n        renderCell: function renderName({ data }) {\n          return (\n            <>\n              {data.name} {data.provenance && <ProvisioningBadge />}\n            </>\n          );\n        },\n        size: '250px',\n      },\n      {\n        id: 'timeRange',\n        label: 'Time range',\n        renderCell: ({ data }) => {\n          return renderTimeIntervals(data);\n        },\n      },\n    ];\n    if (showActions) {\n      columns.push({\n        id: 'actions',\n        label: 'Actions',\n        renderCell: function renderActions({ data }) {\n          if (data.provenance) {\n            return (\n              <div>\n                <Link\n                  href={makeAMLink(`/alerting/routes/mute-timing/edit`, alertManagerSourceName, {\n                    muteName: data.name,\n                  })}\n                >\n                  <IconButton name=\"file-alt\" tooltip=\"View mute timing\" />\n                </Link>\n              </div>\n            );\n          }\n          return (\n            <div>\n              <Authorize actions={[AlertmanagerAction.UpdateMuteTiming]}>\n                <Link\n                  href={makeAMLink(`/alerting/routes/mute-timing/edit`, alertManagerSourceName, {\n                    muteName: data.name,\n                  })}\n                >\n                  <IconButton name=\"edit\" tooltip=\"Edit mute timing\" />\n                </Link>\n              </Authorize>\n              <Authorize actions={[AlertmanagerAction.DeleteMuteTiming]}>\n                <IconButton\n                  name=\"trash-alt\"\n                  tooltip=\"Delete mute timing\"\n                  onClick={() => setMuteTimingName(data.name)}\n                />\n              </Authorize>\n            </div>\n          );\n        },\n        size: '80px',\n      });\n    }\n    if (exportSupported) {\n      columns.push({\n        id: 'actions',\n        label: '',\n        renderCell: function renderActions({ data }) {\n          return (\n            <div>\n              <Menu.Item\n                icon=\"download-alt\"\n                label=\"Export\"\n                ariaLabel=\"export\"\n                disabled={!exportAllowed}\n                data-testid=\"export\"\n                onClick={() => openExportDrawer(data.name)}\n              />\n            </div>\n          );\n        },\n        size: '100px',\n      });\n    }\n    return columns;\n  }, [alertManagerSourceName, setMuteTimingName, showActions, exportSupported, exportAllowed, openExportDrawer]);\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  container: css`\n    display: flex;\n    flex-flow: column nowrap;\n  `,\n  muteTimingsButtons: css`\n    margin-bottom: ${theme.spacing(2)};\n    align-self: flex-end;\n  `,\n});\n","import { css } from '@emotion/css';\nimport { debounce } from 'lodash';\nimport React, { useCallback, useEffect, useRef } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { Button, Field, Icon, Input, Label as LabelElement, Select, Tooltip, useStyles2, Stack } from '@grafana/ui';\nimport { ObjectMatcher, Receiver, RouteWithID } from 'app/plugins/datasource/alertmanager/types';\n\nimport { useURLSearchParams } from '../../hooks/useURLSearchParams';\nimport { matcherToObjectMatcher, parseMatchers } from '../../utils/alertmanager';\n\ninterface NotificationPoliciesFilterProps {\n  receivers: Receiver[];\n  onChangeMatchers: (labels: ObjectMatcher[]) => void;\n  onChangeReceiver: (receiver: string | undefined) => void;\n}\n\nconst NotificationPoliciesFilter = ({\n  receivers,\n  onChangeReceiver,\n  onChangeMatchers,\n}: NotificationPoliciesFilterProps) => {\n  const [searchParams, setSearchParams] = useURLSearchParams();\n  const searchInputRef = useRef<HTMLInputElement | null>(null);\n  const { queryString, contactPoint } = getNotificationPoliciesFilters(searchParams);\n  const styles = useStyles2(getStyles);\n\n  const handleChangeLabels = useCallback(() => debounce(onChangeMatchers, 500), [onChangeMatchers]);\n\n  useEffect(() => {\n    onChangeReceiver(contactPoint);\n  }, [contactPoint, onChangeReceiver]);\n\n  useEffect(() => {\n    const matchers = parseMatchers(queryString ?? '').map(matcherToObjectMatcher);\n    handleChangeLabels()(matchers);\n  }, [handleChangeLabels, queryString]);\n\n  const clearFilters = useCallback(() => {\n    if (searchInputRef.current) {\n      searchInputRef.current.value = '';\n    }\n    setSearchParams({ contactPoint: undefined, queryString: undefined });\n  }, [setSearchParams]);\n\n  const receiverOptions: Array<SelectableValue<string>> = receivers.map(toOption);\n  const selectedContactPoint = receiverOptions.find((option) => option.value === contactPoint) ?? null;\n\n  const hasFilters = queryString || contactPoint;\n  const inputInvalid = queryString && queryString.length > 3 ? parseMatchers(queryString).length === 0 : false;\n\n  return (\n    <Stack direction=\"row\" alignItems=\"flex-start\" gap={0.5}>\n      <Field\n        className={styles.noBottom}\n        label={\n          <LabelElement>\n            <Stack gap={0.5}>\n              <span>Search by matchers</span>\n              <Tooltip\n                content={\n                  <div>\n                    Filter silences by matchers using a comma separated list of matchers, ie:\n                    <pre>{`severity=critical, instance=~cluster-us-.+`}</pre>\n                  </div>\n                }\n              >\n                <Icon name=\"info-circle\" size=\"sm\" />\n              </Tooltip>\n            </Stack>\n          </LabelElement>\n        }\n        invalid={inputInvalid}\n        error={inputInvalid ? 'Query must use valid matcher syntax' : null}\n      >\n        <Input\n          ref={searchInputRef}\n          data-testid=\"search-query-input\"\n          placeholder=\"Search\"\n          width={46}\n          prefix={<Icon name=\"search\" />}\n          onChange={(event) => {\n            setSearchParams({ queryString: event.currentTarget.value });\n          }}\n          defaultValue={queryString}\n        />\n      </Field>\n      <Field label=\"Search by contact point\" style={{ marginBottom: 0 }}>\n        <Select\n          id=\"receiver\"\n          aria-label=\"Search by contact point\"\n          value={selectedContactPoint}\n          options={receiverOptions}\n          onChange={(option) => {\n            setSearchParams({ contactPoint: option?.value });\n          }}\n          width={28}\n          isClearable\n        />\n      </Field>\n      {hasFilters && (\n        <Button variant=\"secondary\" icon=\"times\" onClick={clearFilters} style={{ marginTop: 19 }}>\n          Clear filters\n        </Button>\n      )}\n    </Stack>\n  );\n};\n\n/**\n * Find a list of route IDs that match given input filters\n */\ntype FilterPredicate = (route: RouteWithID) => boolean;\n\nexport function findRoutesMatchingPredicate(routeTree: RouteWithID, predicateFn: FilterPredicate): RouteWithID[] {\n  const matches: RouteWithID[] = [];\n\n  function findMatch(route: RouteWithID) {\n    if (predicateFn(route)) {\n      matches.push(route);\n    }\n\n    route.routes?.forEach(findMatch);\n  }\n\n  findMatch(routeTree);\n  return matches;\n}\n\nconst toOption = (receiver: Receiver) => ({\n  label: receiver.name,\n  value: receiver.name,\n});\n\nconst getNotificationPoliciesFilters = (searchParams: URLSearchParams) => ({\n  queryString: searchParams.get('queryString') ?? undefined,\n  contactPoint: searchParams.get('contactPoint') ?? undefined,\n});\n\nconst getStyles = () => ({\n  noBottom: css`\n    margin-bottom: 0;\n  `,\n});\n\nexport { NotificationPoliciesFilter };\n","import { Receiver } from 'app/plugins/datasource/alertmanager/types';\n\nimport { onCallApi } from '../../../api/onCallApi';\nimport { usePluginBridge } from '../../../hooks/usePluginBridge';\nimport { SupportedPlugin } from '../../../types/pluginBridges';\n\nimport { isOnCallReceiver } from './onCall/onCall';\nimport { AmRouteReceiver } from './types';\n\nexport const useGetGrafanaReceiverTypeChecker = () => {\n  const { installed: isOnCallEnabled } = usePluginBridge(SupportedPlugin.OnCall);\n  const { data } = onCallApi.useGrafanaOnCallIntegrationsQuery(undefined, {\n    skip: !isOnCallEnabled,\n  });\n  const getGrafanaReceiverType = (receiver: Receiver): SupportedPlugin | undefined => {\n    //CHECK FOR ONCALL PLUGIN\n    const onCallIntegrations = data ?? [];\n    if (isOnCallEnabled && isOnCallReceiver(receiver, onCallIntegrations)) {\n      return SupportedPlugin.OnCall;\n    }\n    //WE WILL ADD IN HERE IF THERE ARE MORE TYPES TO CHECK\n    return undefined;\n  };\n\n  return getGrafanaReceiverType;\n};\n\nexport const useGetAmRouteReceiverWithGrafanaAppTypes = (receivers: Receiver[]) => {\n  const getGrafanaReceiverType = useGetGrafanaReceiverTypeChecker();\n  const receiverToSelectableContactPointValue = (receiver: Receiver): AmRouteReceiver => {\n    const amRouteReceiverValue: AmRouteReceiver = {\n      label: receiver.name,\n      value: receiver.name,\n      grafanaAppReceiverType: getGrafanaReceiverType(receiver),\n    };\n    return amRouteReceiverValue;\n  };\n\n  return receivers.map(receiverToSelectableContactPointValue);\n};\n","import pluralize from 'pluralize';\nimport React, { Fragment } from 'react';\n\nimport { Badge, Stack } from '@grafana/ui';\n\ninterface Props {\n  active?: number;\n  suppressed?: number;\n  unprocessed?: number;\n}\n\nexport const AlertGroupsSummary = ({ active = 0, suppressed = 0, unprocessed = 0 }: Props) => {\n  const statsComponents: React.ReactNode[] = [];\n  const total = active + suppressed + unprocessed;\n\n  if (active) {\n    statsComponents.push(<Badge color=\"red\" key=\"firing\" text={`${active} firing`} />);\n  }\n\n  if (suppressed) {\n    statsComponents.push(<Badge color=\"blue\" key=\"suppressed\" text={`${suppressed} suppressed`} />);\n  }\n\n  if (unprocessed) {\n    statsComponents.push(<Badge color=\"orange\" key=\"unprocessed\" text={`${unprocessed} unprocessed`} />);\n  }\n\n  // if we only have one category it's not really necessary to repeat the total\n  if (statsComponents.length > 1) {\n    statsComponents.unshift(\n      <Fragment key=\"total\">\n        {total} {pluralize('instance', total)}\n      </Fragment>\n    );\n  }\n\n  const hasStats = Boolean(statsComponents.length);\n\n  return hasStats ? <Stack gap={0.5}>{statsComponents}</Stack> : null;\n};\n","import React, { ReactNode, useState } from 'react';\n\nimport { Collapse, Field, Form, InputControl, Link, MultiSelect, Select, useStyles2 } from '@grafana/ui';\nimport { RouteWithID } from 'app/plugins/datasource/alertmanager/types';\n\nimport { FormAmRoute } from '../../types/amroutes';\nimport {\n  amRouteToFormAmRoute,\n  commonGroupByOptions,\n  mapMultiSelectValueToStrings,\n  mapSelectValueToString,\n  promDurationValidator,\n  repeatIntervalValidator,\n  stringsToSelectableValues,\n  stringToSelectableValue,\n} from '../../utils/amroutes';\nimport { makeAMLink } from '../../utils/misc';\nimport { AmRouteReceiver } from '../receivers/grafanaAppReceivers/types';\n\nimport { PromDurationInput } from './PromDurationInput';\nimport { getFormStyles } from './formStyles';\nimport { TIMING_OPTIONS_DEFAULTS } from './timingOptions';\n\nexport interface AmRootRouteFormProps {\n  alertManagerSourceName: string;\n  actionButtons: ReactNode;\n  onSubmit: (route: Partial<FormAmRoute>) => void;\n  receivers: AmRouteReceiver[];\n  route: RouteWithID;\n}\n\nexport const AmRootRouteForm = ({\n  actionButtons,\n  alertManagerSourceName,\n  onSubmit,\n  receivers,\n  route,\n}: AmRootRouteFormProps) => {\n  const styles = useStyles2(getFormStyles);\n  const [isTimingOptionsExpanded, setIsTimingOptionsExpanded] = useState(false);\n  const [groupByOptions, setGroupByOptions] = useState(stringsToSelectableValues(route.group_by));\n\n  const defaultValues = amRouteToFormAmRoute(route);\n\n  return (\n    <Form defaultValues={{ ...defaultValues, overrideTimings: true, overrideGrouping: true }} onSubmit={onSubmit}>\n      {({ register, control, errors, setValue, getValues }) => (\n        <>\n          <Field label=\"Default contact point\" invalid={!!errors.receiver} error={errors.receiver?.message}>\n            <>\n              <div className={styles.container} data-testid=\"am-receiver-select\">\n                <InputControl\n                  render={({ field: { onChange, ref, ...field } }) => (\n                    <Select\n                      aria-label=\"Default contact point\"\n                      {...field}\n                      className={styles.input}\n                      onChange={(value) => onChange(mapSelectValueToString(value))}\n                      options={receivers}\n                    />\n                  )}\n                  control={control}\n                  name=\"receiver\"\n                  rules={{ required: { value: true, message: 'Required.' } }}\n                />\n                <span>or</span>\n                <Link\n                  className={styles.linkText}\n                  href={makeAMLink('/alerting/notifications/receivers/new', alertManagerSourceName)}\n                >\n                  Create a contact point\n                </Link>\n              </div>\n            </>\n          </Field>\n          <Field\n            label=\"Group by\"\n            description=\"Group alerts when you receive a notification based on labels.\"\n            data-testid=\"am-group-select\"\n          >\n            {/* @ts-ignore-check: react-hook-form made me do this */}\n            <InputControl\n              render={({ field: { onChange, ref, ...field } }) => (\n                <MultiSelect\n                  aria-label=\"Group by\"\n                  {...field}\n                  allowCustomValue\n                  className={styles.input}\n                  onCreateOption={(opt: string) => {\n                    setGroupByOptions((opts) => [...opts, stringToSelectableValue(opt)]);\n\n                    // @ts-ignore-check: react-hook-form made me do this\n                    setValue('groupBy', [...field.value, opt]);\n                  }}\n                  onChange={(value) => onChange(mapMultiSelectValueToStrings(value))}\n                  options={[...commonGroupByOptions, ...groupByOptions]}\n                />\n              )}\n              control={control}\n              name=\"groupBy\"\n            />\n          </Field>\n          <Collapse\n            collapsible\n            className={styles.collapse}\n            isOpen={isTimingOptionsExpanded}\n            label=\"Timing options\"\n            onToggle={setIsTimingOptionsExpanded}\n          >\n            <div className={styles.timingFormContainer}>\n              <Field\n                label=\"Group wait\"\n                description=\"The waiting time until the initial notification is sent for a new group created by an incoming alert. Default 30 seconds.\"\n                invalid={!!errors.groupWaitValue}\n                error={errors.groupWaitValue?.message}\n                data-testid=\"am-group-wait\"\n              >\n                <PromDurationInput\n                  {...register('groupWaitValue', { validate: promDurationValidator })}\n                  placeholder={TIMING_OPTIONS_DEFAULTS.group_wait}\n                  className={styles.promDurationInput}\n                  aria-label=\"Group wait\"\n                />\n              </Field>\n              <Field\n                label=\"Group interval\"\n                description=\"The waiting time to send a batch of new alerts for that group after the first notification was sent. Default 5 minutes.\"\n                invalid={!!errors.groupIntervalValue}\n                error={errors.groupIntervalValue?.message}\n                data-testid=\"am-group-interval\"\n              >\n                <PromDurationInput\n                  {...register('groupIntervalValue', { validate: promDurationValidator })}\n                  placeholder={TIMING_OPTIONS_DEFAULTS.group_interval}\n                  className={styles.promDurationInput}\n                  aria-label=\"Group interval\"\n                />\n              </Field>\n              <Field\n                label=\"Repeat interval\"\n                description=\"The waiting time to resend an alert after they have successfully been sent. Default 4 hours. Should be a multiple of Group interval.\"\n                invalid={!!errors.repeatIntervalValue}\n                error={errors.repeatIntervalValue?.message}\n                data-testid=\"am-repeat-interval\"\n              >\n                <PromDurationInput\n                  {...register('repeatIntervalValue', {\n                    validate: (value: string) => {\n                      const groupInterval = getValues('groupIntervalValue');\n                      return repeatIntervalValidator(value, groupInterval);\n                    },\n                  })}\n                  placeholder={TIMING_OPTIONS_DEFAULTS.repeat_interval}\n                  className={styles.promDurationInput}\n                  aria-label=\"Repeat interval\"\n                />\n              </Field>\n            </div>\n          </Collapse>\n          <div className={styles.container}>{actionButtons}</div>\n        </>\n      )}\n    </Form>\n  );\n};\n","import { css } from '@emotion/css';\nimport React, { ReactNode, useState } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport {\n  Badge,\n  Button,\n  Field,\n  FieldArray,\n  FieldValidationMessage,\n  Form,\n  IconButton,\n  Input,\n  InputControl,\n  MultiSelect,\n  Select,\n  Stack,\n  Switch,\n  useStyles2,\n} from '@grafana/ui';\nimport { MatcherOperator, RouteWithID } from 'app/plugins/datasource/alertmanager/types';\n\nimport { useMuteTimingOptions } from '../../hooks/useMuteTimingOptions';\nimport { FormAmRoute } from '../../types/amroutes';\nimport { SupportedPlugin } from '../../types/pluginBridges';\nimport { matcherFieldOptions } from '../../utils/alertmanager';\nimport {\n  amRouteToFormAmRoute,\n  commonGroupByOptions,\n  emptyArrayFieldMatcher,\n  mapMultiSelectValueToStrings,\n  mapSelectValueToString,\n  promDurationValidator,\n  repeatIntervalValidator,\n  stringToSelectableValue,\n  stringsToSelectableValues,\n} from '../../utils/amroutes';\nimport { AmRouteReceiver } from '../receivers/grafanaAppReceivers/types';\n\nimport { PromDurationInput } from './PromDurationInput';\nimport { getFormStyles } from './formStyles';\nimport { routeTimingsFields } from './routeTimingsFields';\n\nexport interface AmRoutesExpandedFormProps {\n  receivers: AmRouteReceiver[];\n  route?: RouteWithID;\n  onSubmit: (route: Partial<FormAmRoute>) => void;\n  actionButtons: ReactNode;\n  defaults?: Partial<FormAmRoute>;\n}\n\nexport const AmRoutesExpandedForm = ({\n  actionButtons,\n  receivers,\n  route,\n  onSubmit,\n  defaults,\n}: AmRoutesExpandedFormProps) => {\n  const styles = useStyles2(getStyles);\n  const formStyles = useStyles2(getFormStyles);\n  const [groupByOptions, setGroupByOptions] = useState(stringsToSelectableValues(route?.group_by));\n  const muteTimingOptions = useMuteTimingOptions();\n  const emptyMatcher = [{ name: '', operator: MatcherOperator.equal, value: '' }];\n\n  const receiversWithOnCallOnTop = receivers.sort(onCallFirst);\n\n  const formAmRoute = {\n    ...amRouteToFormAmRoute(route),\n    ...defaults,\n  };\n\n  const defaultValues: Omit<FormAmRoute, 'routes'> = {\n    ...formAmRoute,\n    // if we're adding a new route, show at least one empty matcher\n    object_matchers: route ? formAmRoute.object_matchers : emptyMatcher,\n  };\n\n  return (\n    <Form defaultValues={defaultValues} onSubmit={onSubmit} maxWidth=\"none\">\n      {({ control, register, errors, setValue, watch, getValues }) => (\n        <>\n          <input type=\"hidden\" {...register('id')} />\n          {/* @ts-ignore-check: react-hook-form made me do this */}\n          <FieldArray name=\"object_matchers\" control={control}>\n            {({ fields, append, remove }) => (\n              <>\n                <Stack direction=\"column\" alignItems=\"flex-start\">\n                  <div>Matching labels</div>\n                  {fields.length === 0 && (\n                    <Badge\n                      color=\"orange\"\n                      className={styles.noMatchersWarning}\n                      icon=\"exclamation-triangle\"\n                      text=\"If no matchers are specified, this notification policy will handle all alert instances.\"\n                    />\n                  )}\n                  {fields.length > 0 && (\n                    <div className={styles.matchersContainer}>\n                      {fields.map((field, index) => {\n                        return (\n                          <Stack direction=\"row\" key={field.id} alignItems=\"center\">\n                            <Field\n                              label=\"Label\"\n                              invalid={!!errors.object_matchers?.[index]?.name}\n                              error={errors.object_matchers?.[index]?.name?.message}\n                            >\n                              <Input\n                                {...register(`object_matchers.${index}.name`, { required: 'Field is required' })}\n                                defaultValue={field.name}\n                                placeholder=\"label\"\n                                autoFocus\n                              />\n                            </Field>\n                            <Field label={'Operator'}>\n                              <InputControl\n                                render={({ field: { onChange, ref, ...field } }) => (\n                                  <Select\n                                    {...field}\n                                    className={styles.matchersOperator}\n                                    onChange={(value) => onChange(value?.value)}\n                                    options={matcherFieldOptions}\n                                    aria-label=\"Operator\"\n                                  />\n                                )}\n                                defaultValue={field.operator}\n                                control={control}\n                                name={`object_matchers.${index}.operator`}\n                                rules={{ required: { value: true, message: 'Required.' } }}\n                              />\n                            </Field>\n                            <Field\n                              label=\"Value\"\n                              invalid={!!errors.object_matchers?.[index]?.value}\n                              error={errors.object_matchers?.[index]?.value?.message}\n                            >\n                              <Input\n                                {...register(`object_matchers.${index}.value`, { required: 'Field is required' })}\n                                defaultValue={field.value}\n                                placeholder=\"value\"\n                              />\n                            </Field>\n                            <IconButton tooltip=\"Remove matcher\" name={'trash-alt'} onClick={() => remove(index)}>\n                              Remove\n                            </IconButton>\n                          </Stack>\n                        );\n                      })}\n                    </div>\n                  )}\n                  <Button\n                    className={styles.addMatcherBtn}\n                    icon=\"plus\"\n                    onClick={() => append(emptyArrayFieldMatcher)}\n                    variant=\"secondary\"\n                    type=\"button\"\n                  >\n                    Add matcher\n                  </Button>\n                </Stack>\n              </>\n            )}\n          </FieldArray>\n          <Field label=\"Contact point\">\n            <InputControl\n              render={({ field: { onChange, ref, ...field } }) => (\n                <Select\n                  aria-label=\"Contact point\"\n                  {...field}\n                  className={formStyles.input}\n                  onChange={(value) => onChange(mapSelectValueToString(value))}\n                  options={receiversWithOnCallOnTop}\n                  isClearable\n                />\n              )}\n              control={control}\n              name=\"receiver\"\n            />\n          </Field>\n          <Field label=\"Continue matching subsequent sibling nodes\">\n            <Switch id=\"continue-toggle\" {...register('continue')} />\n          </Field>\n          <Field label=\"Override grouping\">\n            <Switch id=\"override-grouping-toggle\" {...register('overrideGrouping')} />\n          </Field>\n          {watch().overrideGrouping && (\n            <Field\n              label=\"Group by\"\n              description=\"Group alerts when you receive a notification based on labels. If empty it will be inherited from the parent policy.\"\n            >\n              <InputControl\n                rules={{\n                  validate: (value) => {\n                    if (!value || value.length === 0) {\n                      return 'At least one group by option is required.';\n                    }\n                    return true;\n                  },\n                }}\n                render={({ field: { onChange, ref, ...field }, fieldState: { error } }) => (\n                  <>\n                    <MultiSelect\n                      aria-label=\"Group by\"\n                      {...field}\n                      invalid={Boolean(error)}\n                      allowCustomValue\n                      className={formStyles.input}\n                      onCreateOption={(opt: string) => {\n                        setGroupByOptions((opts) => [...opts, stringToSelectableValue(opt)]);\n\n                        // @ts-ignore-check: react-hook-form made me do this\n                        setValue('groupBy', [...field.value, opt]);\n                      }}\n                      onChange={(value) => onChange(mapMultiSelectValueToStrings(value))}\n                      options={[...commonGroupByOptions, ...groupByOptions]}\n                    />\n                    {error && <FieldValidationMessage>{error.message}</FieldValidationMessage>}\n                  </>\n                )}\n                control={control}\n                name=\"groupBy\"\n              />\n            </Field>\n          )}\n          <Field label=\"Override general timings\">\n            <Switch id=\"override-timings-toggle\" {...register('overrideTimings')} />\n          </Field>\n          {watch().overrideTimings && (\n            <>\n              <Field\n                label={routeTimingsFields.groupWait.label}\n                description={routeTimingsFields.groupWait.description}\n                invalid={!!errors.groupWaitValue}\n                error={errors.groupWaitValue?.message}\n              >\n                <PromDurationInput\n                  {...register('groupWaitValue', { validate: promDurationValidator })}\n                  aria-label={routeTimingsFields.groupWait.ariaLabel}\n                  className={formStyles.promDurationInput}\n                />\n              </Field>\n              <Field\n                label={routeTimingsFields.groupInterval.label}\n                description={routeTimingsFields.groupInterval.description}\n                invalid={!!errors.groupIntervalValue}\n                error={errors.groupIntervalValue?.message}\n              >\n                <PromDurationInput\n                  {...register('groupIntervalValue', { validate: promDurationValidator })}\n                  aria-label={routeTimingsFields.groupInterval.ariaLabel}\n                  className={formStyles.promDurationInput}\n                />\n              </Field>\n              <Field\n                label={routeTimingsFields.repeatInterval.label}\n                description={routeTimingsFields.repeatInterval.description}\n                invalid={!!errors.repeatIntervalValue}\n                error={errors.repeatIntervalValue?.message}\n              >\n                <PromDurationInput\n                  {...register('repeatIntervalValue', {\n                    validate: (value = '') => {\n                      const groupInterval = getValues('groupIntervalValue');\n                      return repeatIntervalValidator(value, groupInterval);\n                    },\n                  })}\n                  aria-label={routeTimingsFields.repeatInterval.ariaLabel}\n                  className={formStyles.promDurationInput}\n                />\n              </Field>\n            </>\n          )}\n          <Field\n            label=\"Mute timings\"\n            data-testid=\"am-mute-timing-select\"\n            description=\"Add mute timing to policy\"\n            invalid={!!errors.muteTimeIntervals}\n          >\n            <InputControl\n              render={({ field: { onChange, ref, ...field } }) => (\n                <MultiSelect\n                  aria-label=\"Mute timings\"\n                  {...field}\n                  className={formStyles.input}\n                  onChange={(value) => onChange(mapMultiSelectValueToStrings(value))}\n                  options={muteTimingOptions}\n                />\n              )}\n              control={control}\n              name=\"muteTimeIntervals\"\n            />\n          </Field>\n          {actionButtons}\n        </>\n      )}\n    </Form>\n  );\n};\n\nfunction onCallFirst(receiver: AmRouteReceiver) {\n  if (receiver.grafanaAppReceiverType === SupportedPlugin.OnCall) {\n    return -1;\n  } else {\n    return 0;\n  }\n}\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  const commonSpacing = theme.spacing(3.5);\n\n  return {\n    addMatcherBtn: css`\n      margin-bottom: ${commonSpacing};\n    `,\n    matchersContainer: css`\n      background-color: ${theme.colors.background.secondary};\n      padding: ${theme.spacing(1.5)} ${theme.spacing(2)};\n      padding-bottom: 0;\n      width: fit-content;\n    `,\n    matchersOperator: css`\n      min-width: 120px;\n    `,\n    noMatchersWarning: css`\n      padding: ${theme.spacing(1)} ${theme.spacing(2)};\n    `,\n  };\n};\n","import { groupBy } from 'lodash';\nimport React, { FC, useCallback, useMemo, useState } from 'react';\n\nimport { Button, Icon, Modal, ModalProps, Spinner, Stack } from '@grafana/ui';\nimport {\n  AlertmanagerGroup,\n  AlertState,\n  ObjectMatcher,\n  Receiver,\n  RouteWithID,\n} from 'app/plugins/datasource/alertmanager/types';\n\nimport { FormAmRoute } from '../../types/amroutes';\nimport { AlertGroup } from '../alert-groups/AlertGroup';\nimport { useGetAmRouteReceiverWithGrafanaAppTypes } from '../receivers/grafanaAppReceivers/grafanaApp';\n\nimport { AlertGroupsSummary } from './AlertGroupsSummary';\nimport { AmRootRouteForm } from './EditDefaultPolicyForm';\nimport { AmRoutesExpandedForm } from './EditNotificationPolicyForm';\nimport { Matchers } from './Matchers';\n\ntype ModalHook<T = undefined> = [JSX.Element, (item: T) => void, () => void];\ntype EditModalHook = [JSX.Element, (item: RouteWithID, isDefaultRoute?: boolean) => void, () => void];\n\nconst useAddPolicyModal = (\n  receivers: Receiver[] = [],\n  handleAdd: (route: Partial<FormAmRoute>, parentRoute: RouteWithID) => void,\n  loading: boolean\n): ModalHook<RouteWithID> => {\n  const [showModal, setShowModal] = useState(false);\n  const [parentRoute, setParentRoute] = useState<RouteWithID>();\n  const AmRouteReceivers = useGetAmRouteReceiverWithGrafanaAppTypes(receivers);\n\n  const handleDismiss = useCallback(() => {\n    setParentRoute(undefined);\n    setShowModal(false);\n  }, []);\n\n  const handleShow = useCallback((parentRoute: RouteWithID) => {\n    setParentRoute(parentRoute);\n    setShowModal(true);\n  }, []);\n\n  const modalElement = useMemo(\n    () =>\n      loading ? (\n        <UpdatingModal isOpen={showModal} />\n      ) : (\n        <Modal\n          isOpen={showModal}\n          onDismiss={handleDismiss}\n          closeOnBackdropClick={true}\n          closeOnEscape={true}\n          title=\"Add notification policy\"\n        >\n          <AmRoutesExpandedForm\n            receivers={AmRouteReceivers}\n            defaults={{\n              groupBy: parentRoute?.group_by,\n            }}\n            onSubmit={(newRoute) => parentRoute && handleAdd(newRoute, parentRoute)}\n            actionButtons={\n              <Modal.ButtonRow>\n                <Button type=\"button\" variant=\"secondary\" onClick={handleDismiss} fill=\"outline\">\n                  Cancel\n                </Button>\n                <Button type=\"submit\">Save policy</Button>\n              </Modal.ButtonRow>\n            }\n          />\n        </Modal>\n      ),\n    [AmRouteReceivers, handleAdd, handleDismiss, loading, parentRoute, showModal]\n  );\n\n  return [modalElement, handleShow, handleDismiss];\n};\n\nconst useEditPolicyModal = (\n  alertManagerSourceName: string,\n  receivers: Receiver[],\n  handleSave: (route: Partial<FormAmRoute>) => void,\n  loading: boolean\n): EditModalHook => {\n  const [showModal, setShowModal] = useState(false);\n  const [isDefaultPolicy, setIsDefaultPolicy] = useState(false);\n  const [route, setRoute] = useState<RouteWithID>();\n  const AmRouteReceivers = useGetAmRouteReceiverWithGrafanaAppTypes(receivers);\n\n  const handleDismiss = useCallback(() => {\n    setRoute(undefined);\n    setShowModal(false);\n  }, []);\n\n  const handleShow = useCallback((route: RouteWithID, isDefaultPolicy?: boolean) => {\n    setIsDefaultPolicy(isDefaultPolicy ?? false);\n    setRoute(route);\n    setShowModal(true);\n  }, []);\n\n  const modalElement = useMemo(\n    () =>\n      loading ? (\n        <UpdatingModal isOpen={showModal} />\n      ) : (\n        <Modal\n          isOpen={showModal}\n          onDismiss={handleDismiss}\n          closeOnBackdropClick={true}\n          closeOnEscape={true}\n          title=\"Edit notification policy\"\n        >\n          {isDefaultPolicy && route && (\n            <AmRootRouteForm\n              // TODO *sigh* this alertmanagersourcename should come from context or something\n              // passing it down all the way here is a code smell\n              alertManagerSourceName={alertManagerSourceName}\n              onSubmit={handleSave}\n              receivers={AmRouteReceivers}\n              route={route}\n              actionButtons={\n                <Modal.ButtonRow>\n                  <Button type=\"button\" variant=\"secondary\" onClick={handleDismiss} fill=\"outline\">\n                    Cancel\n                  </Button>\n                  <Button type=\"submit\">Update default policy</Button>\n                </Modal.ButtonRow>\n              }\n            />\n          )}\n          {!isDefaultPolicy && (\n            <AmRoutesExpandedForm\n              receivers={AmRouteReceivers}\n              route={route}\n              onSubmit={handleSave}\n              actionButtons={\n                <Modal.ButtonRow>\n                  <Button type=\"button\" variant=\"secondary\" onClick={handleDismiss} fill=\"outline\">\n                    Cancel\n                  </Button>\n                  <Button type=\"submit\">Update policy</Button>\n                </Modal.ButtonRow>\n              }\n            />\n          )}\n        </Modal>\n      ),\n    [AmRouteReceivers, alertManagerSourceName, handleDismiss, handleSave, isDefaultPolicy, loading, route, showModal]\n  );\n\n  return [modalElement, handleShow, handleDismiss];\n};\n\nconst useDeletePolicyModal = (handleDelete: (route: RouteWithID) => void, loading: boolean): ModalHook<RouteWithID> => {\n  const [showModal, setShowModal] = useState(false);\n  const [route, setRoute] = useState<RouteWithID>();\n\n  const handleDismiss = useCallback(() => {\n    setRoute(undefined);\n    setShowModal(false);\n  }, [setRoute]);\n\n  const handleShow = useCallback((route: RouteWithID) => {\n    setRoute(route);\n    setShowModal(true);\n  }, []);\n\n  const handleSubmit = useCallback(() => {\n    if (route) {\n      handleDelete(route);\n    }\n  }, [handleDelete, route]);\n\n  const modalElement = useMemo(\n    () =>\n      loading ? (\n        <UpdatingModal isOpen={showModal} />\n      ) : (\n        <Modal\n          isOpen={showModal}\n          onDismiss={handleDismiss}\n          closeOnBackdropClick={true}\n          closeOnEscape={true}\n          title=\"Delete notification policy\"\n        >\n          <p>Deleting this notification policy will permanently remove it.</p>\n          <p>Are you sure you want to delete this policy?</p>\n\n          <Modal.ButtonRow>\n            <Button type=\"button\" variant=\"destructive\" onClick={handleSubmit}>\n              Yes, delete policy\n            </Button>\n            <Button type=\"button\" variant=\"secondary\" onClick={handleDismiss}>\n              Cancel\n            </Button>\n          </Modal.ButtonRow>\n        </Modal>\n      ),\n    [handleDismiss, handleSubmit, loading, showModal]\n  );\n\n  return [modalElement, handleShow, handleDismiss];\n};\n\nconst useAlertGroupsModal = (): [\n  JSX.Element,\n  (alertGroups: AlertmanagerGroup[], matchers?: ObjectMatcher[]) => void,\n  () => void,\n] => {\n  const [showModal, setShowModal] = useState(false);\n  const [alertGroups, setAlertGroups] = useState<AlertmanagerGroup[]>([]);\n  const [matchers, setMatchers] = useState<ObjectMatcher[]>([]);\n\n  const handleDismiss = useCallback(() => {\n    setShowModal(false);\n    setAlertGroups([]);\n    setMatchers([]);\n  }, []);\n\n  const handleShow = useCallback((alertGroups: AlertmanagerGroup[], matchers?: ObjectMatcher[]) => {\n    setAlertGroups(alertGroups);\n    if (matchers) {\n      setMatchers(matchers);\n    }\n    setShowModal(true);\n  }, []);\n\n  const instancesByState = useMemo(() => {\n    const instances = alertGroups.flatMap((group) => group.alerts);\n    return groupBy(instances, (instance) => instance.status.state);\n  }, [alertGroups]);\n\n  const modalElement = useMemo(\n    () => (\n      <Modal\n        isOpen={showModal}\n        onDismiss={handleDismiss}\n        closeOnBackdropClick={true}\n        closeOnEscape={true}\n        title={\n          <Stack direction=\"row\" alignItems=\"center\" gap={1} wrap={'wrap'}>\n            <Stack direction=\"row\" alignItems=\"center\" gap={0.5}>\n              <Icon name=\"x\" /> Matchers\n            </Stack>\n            <Matchers matchers={matchers} />\n          </Stack>\n        }\n      >\n        <Stack direction=\"column\">\n          <AlertGroupsSummary\n            active={instancesByState[AlertState.Active]?.length}\n            suppressed={instancesByState[AlertState.Suppressed]?.length}\n            unprocessed={instancesByState[AlertState.Unprocessed]?.length}\n          />\n          <div>\n            {alertGroups.map((group, index) => (\n              <AlertGroup key={index} alertManagerSourceName={''} group={group} />\n            ))}\n          </div>\n        </Stack>\n        <Modal.ButtonRow>\n          <Button type=\"button\" variant=\"secondary\" onClick={handleDismiss}>\n            Cancel\n          </Button>\n        </Modal.ButtonRow>\n      </Modal>\n    ),\n    [alertGroups, handleDismiss, instancesByState, matchers, showModal]\n  );\n\n  return [modalElement, handleShow, handleDismiss];\n};\n\nconst UpdatingModal: FC<Pick<ModalProps, 'isOpen'>> = ({ isOpen }) => (\n  <Modal\n    isOpen={isOpen}\n    onDismiss={() => {}}\n    closeOnBackdropClick={false}\n    closeOnEscape={false}\n    title={\n      <Stack direction=\"row\" alignItems=\"center\" gap={0.5}>\n        Updating... <Spinner inline />\n      </Stack>\n    }\n  >\n    Please wait while we update your notification policies.\n  </Modal>\n);\n\nexport { useAddPolicyModal, useDeletePolicyModal, useEditPolicyModal, useAlertGroupsModal };\n","import React, { useState } from 'react';\n\nimport { LoadingPlaceholder } from '@grafana/ui';\n\nimport { alertRuleApi } from '../../api/alertRuleApi';\n\nimport { FileExportPreview } from './FileExportPreview';\nimport { GrafanaExportDrawer } from './GrafanaExportDrawer';\nimport { allGrafanaExportProviders, ExportFormats } from './providers';\ninterface GrafanaPoliciesPreviewProps {\n  exportFormat: ExportFormats;\n  onClose: () => void;\n}\n\nconst GrafanaPoliciesExporterPreview = ({ exportFormat, onClose }: GrafanaPoliciesPreviewProps) => {\n  const { currentData: policiesDefinition = '', isFetching } = alertRuleApi.useExportPoliciesQuery({\n    format: exportFormat,\n  });\n\n  const downloadFileName = `policies-${new Date().getTime()}`;\n\n  if (isFetching) {\n    return <LoadingPlaceholder text=\"Loading....\" />;\n  }\n\n  return (\n    <FileExportPreview\n      format={exportFormat}\n      textDefinition={policiesDefinition}\n      downloadFileName={downloadFileName}\n      onClose={onClose}\n    />\n  );\n};\n\ninterface GrafanaPoliciesExporterProps {\n  onClose: () => void;\n}\n\nexport const GrafanaPoliciesExporter = ({ onClose }: GrafanaPoliciesExporterProps) => {\n  const [activeTab, setActiveTab] = useState<ExportFormats>('yaml');\n\n  return (\n    <GrafanaExportDrawer\n      activeTab={activeTab}\n      onTabChange={setActiveTab}\n      onClose={onClose}\n      formatProviders={Object.values(allGrafanaExportProviders)}\n    >\n      <GrafanaPoliciesExporterPreview exportFormat={activeTab} onClose={onClose} />\n    </GrafanaExportDrawer>\n  );\n};\n","import { css } from '@emotion/css';\nimport { defaults, groupBy, isArray, sumBy, uniqueId, upperFirst } from 'lodash';\nimport pluralize from 'pluralize';\nimport React, { FC, Fragment, ReactNode } from 'react';\nimport { Link } from 'react-router-dom';\nimport { useToggle } from 'react-use';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport {\n  Badge,\n  Button,\n  Dropdown,\n  Icon,\n  Menu,\n  Stack,\n  Text,\n  Tooltip,\n  getTagColorsFromName,\n  useStyles2,\n} from '@grafana/ui';\nimport ConditionalWrap from 'app/features/alerting/components/ConditionalWrap';\nimport { AlertmanagerGroup, ObjectMatcher, Receiver, RouteWithID } from 'app/plugins/datasource/alertmanager/types';\nimport { ReceiversState } from 'app/types';\n\nimport { AlertmanagerAction, useAlertmanagerAbilities } from '../../hooks/useAbilities';\nimport { INTEGRATION_ICONS } from '../../types/contact-points';\nimport { normalizeMatchers } from '../../utils/matchers';\nimport { createContactPointLink, createMuteTimingLink } from '../../utils/misc';\nimport { getInheritedProperties, InhertitableProperties } from '../../utils/notification-policies';\nimport { Authorize } from '../Authorize';\nimport { HoverCard } from '../HoverCard';\nimport { Label } from '../Label';\nimport { MetaText } from '../MetaText';\nimport { ProvisioningBadge } from '../Provisioning';\nimport { Spacer } from '../Spacer';\nimport { Strong } from '../Strong';\nimport { GrafanaPoliciesExporter } from '../export/GrafanaPoliciesExporter';\n\nimport { Matchers } from './Matchers';\nimport { TimingOptions, TIMING_OPTIONS_DEFAULTS } from './timingOptions';\n\ninterface PolicyComponentProps {\n  receivers?: Receiver[];\n  alertGroups?: AlertmanagerGroup[];\n  contactPointsState?: ReceiversState;\n  readOnly?: boolean;\n  provisioned?: boolean;\n  inheritedProperties?: Partial<InhertitableProperties>;\n  routesMatchingFilters?: RouteWithID[];\n  // routeAlertGroupsMap?: Map<string, AlertmanagerGroup[]>;\n\n  matchingInstancesPreview?: { groupsMap?: Map<string, AlertmanagerGroup[]>; enabled: boolean };\n\n  routeTree: RouteWithID;\n  currentRoute: RouteWithID;\n  alertManagerSourceName: string;\n  onEditPolicy: (route: RouteWithID, isDefault?: boolean) => void;\n  onAddPolicy: (route: RouteWithID) => void;\n  onDeletePolicy: (route: RouteWithID) => void;\n  onShowAlertInstances: (alertGroups: AlertmanagerGroup[], matchers?: ObjectMatcher[]) => void;\n}\n\nconst Policy: FC<PolicyComponentProps> = ({\n  receivers = [],\n  contactPointsState,\n  readOnly = false,\n  provisioned = false,\n  alertGroups = [],\n  alertManagerSourceName,\n  currentRoute,\n  routeTree,\n  inheritedProperties,\n  routesMatchingFilters = [],\n  matchingInstancesPreview = { enabled: false },\n  onEditPolicy,\n  onAddPolicy,\n  onDeletePolicy,\n  onShowAlertInstances,\n}) => {\n  const styles = useStyles2(getStyles);\n  const isDefaultPolicy = currentRoute === routeTree;\n\n  const [\n    [updatePoliciesSupported, updatePoliciesAllowed],\n    [deletePolicySupported, deletePolicyAllowed],\n    [exportPoliciesSupported, exportPoliciesAllowed],\n  ] = useAlertmanagerAbilities([\n    AlertmanagerAction.UpdateNotificationPolicyTree,\n    AlertmanagerAction.DeleteNotificationPolicy,\n    AlertmanagerAction.ExportNotificationPolicies,\n  ]);\n\n  const contactPoint = currentRoute.receiver;\n  const continueMatching = currentRoute.continue ?? false;\n  const groupBy = currentRoute.group_by;\n  const muteTimings = currentRoute.mute_time_intervals ?? [];\n  const timingOptions: TimingOptions = {\n    group_wait: currentRoute.group_wait,\n    group_interval: currentRoute.group_interval,\n    repeat_interval: currentRoute.repeat_interval,\n  };\n\n  const matchers = normalizeMatchers(currentRoute);\n  const hasMatchers = Boolean(matchers && matchers.length);\n  const hasMuteTimings = Boolean(muteTimings.length);\n  const hasFocus = routesMatchingFilters.some((route) => route.id === currentRoute.id);\n\n  // gather errors here\n  const errors: ReactNode[] = [];\n\n  // if the route has no matchers, is not the default policy (that one has none) and it does not continue\n  // then we should warn the user that it's a suspicious setup\n  const showMatchesAllLabelsWarning = !hasMatchers && !isDefaultPolicy && !continueMatching;\n\n  // if the receiver / contact point has any errors show it on the policy\n  const actualContactPoint = contactPoint ?? inheritedProperties?.receiver ?? '';\n  const contactPointErrors = contactPointsState ? getContactPointErrors(actualContactPoint, contactPointsState) : [];\n\n  contactPointErrors.forEach((error) => {\n    errors.push(error);\n  });\n\n  const hasInheritedProperties = inheritedProperties && Object.keys(inheritedProperties).length > 0;\n\n  const childPolicies = currentRoute.routes ?? [];\n\n  const inheritedGrouping = hasInheritedProperties && inheritedProperties.group_by;\n  const noGrouping = isArray(groupBy) && groupBy[0] === '...';\n  const customGrouping = !noGrouping && isArray(groupBy) && groupBy.length > 0;\n  const singleGroup = isDefaultPolicy && isArray(groupBy) && groupBy.length === 0;\n\n  const matchingAlertGroups = matchingInstancesPreview?.groupsMap?.get(currentRoute.id);\n\n  // sum all alert instances for all groups we're handling\n  const numberOfAlertInstances = matchingAlertGroups\n    ? sumBy(matchingAlertGroups, (group) => group.alerts.length)\n    : undefined;\n\n  const [showExportDrawer, toggleShowExportDrawer] = useToggle(false);\n  const showExportAction = exportPoliciesAllowed && exportPoliciesSupported && isDefaultPolicy;\n  const showEditAction = updatePoliciesSupported && updatePoliciesAllowed;\n  const showDeleteAction = deletePolicySupported && deletePolicyAllowed && !isDefaultPolicy;\n\n  // build the menu actions for our policy\n  const dropdownMenuActions: JSX.Element[] = [];\n\n  if (showEditAction) {\n    dropdownMenuActions.push(\n      <Fragment key=\"edit-policy\">\n        <ConditionalWrap shouldWrap={provisioned} wrap={ProvisionedTooltip}>\n          <Menu.Item\n            icon=\"edit\"\n            disabled={provisioned}\n            label=\"Edit\"\n            onClick={() => onEditPolicy(currentRoute, isDefaultPolicy)}\n          />\n        </ConditionalWrap>\n      </Fragment>\n    );\n  }\n\n  if (showExportAction) {\n    dropdownMenuActions.push(\n      <Menu.Item key=\"export-policy\" icon=\"download-alt\" label=\"Export\" onClick={toggleShowExportDrawer} />\n    );\n  }\n\n  if (showDeleteAction) {\n    dropdownMenuActions.push(\n      <Fragment key=\"delete-policy\">\n        <Menu.Divider />\n        <ConditionalWrap shouldWrap={provisioned} wrap={ProvisionedTooltip}>\n          <Menu.Item\n            destructive\n            icon=\"trash-alt\"\n            disabled={provisioned}\n            label=\"Delete\"\n            onClick={() => onDeletePolicy(currentRoute)}\n          />\n        </ConditionalWrap>\n      </Fragment>\n    );\n  }\n\n  // TODO dead branch detection, warnings for all sort of configs that won't work or will never be activated\n  return (\n    <Stack direction=\"column\" gap={1.5}>\n      <div\n        className={styles.policyWrapper(hasFocus)}\n        data-testid={isDefaultPolicy ? 'am-root-route-container' : 'am-route-container'}\n      >\n        {/* continueMatching and showMatchesAllLabelsWarning are mutually exclusive so the icons can't overlap */}\n        {continueMatching && <ContinueMatchingIndicator />}\n        {showMatchesAllLabelsWarning && <AllMatchesIndicator />}\n        <div className={styles.policyItemWrapper}>\n          <Stack direction=\"column\" gap={1}>\n            {/* Matchers and actions */}\n            <div>\n              <Stack direction=\"row\" alignItems=\"center\" gap={1}>\n                {isDefaultPolicy ? (\n                  <DefaultPolicyIndicator />\n                ) : hasMatchers ? (\n                  <Matchers matchers={matchers ?? []} />\n                ) : (\n                  <span className={styles.metadata}>No matchers</span>\n                )}\n                <Spacer />\n                {/* TODO maybe we should move errors to the gutter instead? */}\n                {errors.length > 0 && <Errors errors={errors} />}\n                {provisioned && <ProvisioningBadge />}\n                {!readOnly && (\n                  <Stack direction=\"row\" gap={0.5}>\n                    <Authorize actions={[AlertmanagerAction.CreateNotificationPolicy]}>\n                      <ConditionalWrap shouldWrap={provisioned} wrap={ProvisionedTooltip}>\n                        <Button\n                          variant=\"secondary\"\n                          icon=\"plus\"\n                          size=\"sm\"\n                          onClick={() => onAddPolicy(currentRoute)}\n                          disabled={provisioned}\n                          type=\"button\"\n                        >\n                          New nested policy\n                        </Button>\n                      </ConditionalWrap>\n                    </Authorize>\n                    {dropdownMenuActions.length > 0 && (\n                      <Dropdown overlay={<Menu>{dropdownMenuActions}</Menu>}>\n                        <Button\n                          icon=\"ellipsis-h\"\n                          variant=\"secondary\"\n                          size=\"sm\"\n                          type=\"button\"\n                          aria-label=\"more-actions\"\n                          data-testid=\"more-actions\"\n                        />\n                      </Dropdown>\n                    )}\n                  </Stack>\n                )}\n              </Stack>\n            </div>\n\n            {/* Metadata row */}\n            <div className={styles.metadataRow}>\n              <Stack direction=\"row\" alignItems=\"center\" gap={1}>\n                {matchingInstancesPreview.enabled && (\n                  <MetaText\n                    icon=\"layers-alt\"\n                    onClick={() => {\n                      matchingAlertGroups && onShowAlertInstances(matchingAlertGroups, matchers);\n                    }}\n                    data-testid=\"matching-instances\"\n                  >\n                    <Strong>{numberOfAlertInstances ?? '-'}</Strong>\n                    <span>{pluralize('instance', numberOfAlertInstances)}</span>\n                  </MetaText>\n                )}\n                {contactPoint && (\n                  <MetaText icon=\"at\" data-testid=\"contact-point\">\n                    <span>Delivered to</span>\n                    <ContactPointsHoverDetails\n                      alertManagerSourceName={alertManagerSourceName}\n                      receivers={receivers}\n                      contactPoint={contactPoint}\n                    />\n                  </MetaText>\n                )}\n                {!inheritedGrouping && (\n                  <>\n                    {customGrouping && (\n                      <MetaText icon=\"layer-group\" data-testid=\"grouping\">\n                        <span>Grouped by</span>\n                        <Strong>{groupBy.join(', ')}</Strong>\n                      </MetaText>\n                    )}\n                    {singleGroup && (\n                      <MetaText icon=\"layer-group\">\n                        <span>Single group</span>\n                      </MetaText>\n                    )}\n                    {noGrouping && (\n                      <MetaText icon=\"layer-group\">\n                        <span>Not grouping</span>\n                      </MetaText>\n                    )}\n                  </>\n                )}\n                {hasMuteTimings && (\n                  <MetaText icon=\"calendar-slash\" data-testid=\"mute-timings\">\n                    <span>Muted when</span>\n                    <MuteTimings timings={muteTimings} alertManagerSourceName={alertManagerSourceName} />\n                  </MetaText>\n                )}\n                {timingOptions && (\n                  // for the default policy we will also merge the default timings, that way a user can observe what the timing options would be\n                  <TimingOptionsMeta\n                    timingOptions={isDefaultPolicy ? defaults(timingOptions, TIMING_OPTIONS_DEFAULTS) : timingOptions}\n                  />\n                )}\n                {hasInheritedProperties && (\n                  <>\n                    <MetaText icon=\"corner-down-right-alt\" data-testid=\"inherited-properties\">\n                      <span>Inherited</span>\n                      <InheritedProperties properties={inheritedProperties} />\n                    </MetaText>\n                  </>\n                )}\n              </Stack>\n            </div>\n          </Stack>\n        </div>\n      </div>\n      <div className={styles.childPolicies}>\n        {/* pass the \"readOnly\" prop from the parent, because if you can't edit the parent you can't edit children */}\n        {childPolicies.map((child) => {\n          const childInheritedProperties = getInheritedProperties(currentRoute, child, inheritedProperties);\n\n          return (\n            <Policy\n              key={uniqueId()}\n              routeTree={routeTree}\n              currentRoute={child}\n              receivers={receivers}\n              contactPointsState={contactPointsState}\n              readOnly={readOnly || provisioned}\n              inheritedProperties={childInheritedProperties}\n              onAddPolicy={onAddPolicy}\n              onEditPolicy={onEditPolicy}\n              onDeletePolicy={onDeletePolicy}\n              onShowAlertInstances={onShowAlertInstances}\n              alertManagerSourceName={alertManagerSourceName}\n              alertGroups={alertGroups}\n              routesMatchingFilters={routesMatchingFilters}\n              matchingInstancesPreview={matchingInstancesPreview}\n            />\n          );\n        })}\n      </div>\n      {showExportDrawer && <GrafanaPoliciesExporter onClose={toggleShowExportDrawer} />}\n    </Stack>\n  );\n};\n\nconst ProvisionedTooltip = (children: ReactNode) => (\n  <Tooltip content=\"Provisioned items cannot be edited in the UI\" placement=\"top\">\n    <span>{children}</span>\n  </Tooltip>\n);\n\nconst Errors: FC<{ errors: React.ReactNode[] }> = ({ errors }) => (\n  <HoverCard\n    arrow\n    placement=\"top\"\n    content={\n      <Stack direction=\"column\" gap={0.5}>\n        {errors.map((error) => (\n          <Fragment key={uniqueId()}>{error}</Fragment>\n        ))}\n      </Stack>\n    }\n  >\n    <span>\n      <Badge icon=\"exclamation-circle\" color=\"red\" text={pluralize('error', errors.length, true)} />\n    </span>\n  </HoverCard>\n);\n\nconst ContinueMatchingIndicator: FC = () => {\n  const styles = useStyles2(getStyles);\n  return (\n    <Tooltip placement=\"top\" content=\"This route will continue matching other policies\">\n      <div className={styles.gutterIcon} data-testid=\"continue-matching\">\n        <Icon name=\"arrow-down\" />\n      </div>\n    </Tooltip>\n  );\n};\n\nconst AllMatchesIndicator: FC = () => {\n  const styles = useStyles2(getStyles);\n  return (\n    <Tooltip placement=\"top\" content=\"This policy matches all labels\">\n      <div className={styles.gutterIcon} data-testid=\"matches-all\">\n        <Icon name=\"exclamation-triangle\" />\n      </div>\n    </Tooltip>\n  );\n};\n\nconst DefaultPolicyIndicator: FC = () => {\n  const styles = useStyles2(getStyles);\n  return (\n    <>\n      <strong>Default policy</strong>\n      <span className={styles.metadata}>\n        All alert instances will be handled by the default policy if no other matching policies are found.\n      </span>\n    </>\n  );\n};\n\nconst InheritedProperties: FC<{ properties: InhertitableProperties }> = ({ properties }) => (\n  <HoverCard\n    arrow\n    placement=\"top\"\n    content={\n      <Stack direction=\"row\" gap={0.5}>\n        {Object.entries(properties).map(([key, value]) => (\n          <Label\n            key={key}\n            label={routePropertyToLabel(key)}\n            value={<Strong>{routePropertyToValue(key, value)}</Strong>}\n          />\n        ))}\n      </Stack>\n    }\n  >\n    <div>\n      <Strong>{pluralize('property', Object.keys(properties).length, true)}</Strong>\n    </div>\n  </HoverCard>\n);\n\nconst MuteTimings: FC<{ timings: string[]; alertManagerSourceName: string }> = ({\n  timings,\n  alertManagerSourceName,\n}) => {\n  /* TODO make a better mute timing overview, allow combining multiple in to one overview */\n  /*\n    <HoverCard\n      arrow\n      placement=\"top\"\n      header={<MetaText icon=\"calendar-slash\">Mute Timings</MetaText>}\n      content={\n        // TODO show a combined view of all mute timings here, combining the weekdays, years, months, etc\n        <Stack direction=\"row\" gap={0.5}>\n          <Label label=\"Weekdays\" value=\"Saturday and Sunday\" />\n        </Stack>\n      }\n    >\n      <div>\n        <Strong>{muteTimings.join(', ')}</Strong>\n      </div>\n    </HoverCard>\n  */\n  return (\n    <div>\n      <Strong>\n        {timings.map((timing) => (\n          <Link key={timing} to={createMuteTimingLink(timing, alertManagerSourceName)}>\n            {timing}\n          </Link>\n        ))}\n      </Strong>\n    </div>\n  );\n};\n\nconst TimingOptionsMeta: FC<{ timingOptions: TimingOptions }> = ({ timingOptions }) => {\n  const groupWait = timingOptions.group_wait;\n  const groupInterval = timingOptions.group_interval;\n\n  // we don't have any timing options to show – we're inheriting everything from the parent\n  // and those show up in a separate \"inherited properties\" component\n  if (!groupWait && !groupInterval) {\n    return null;\n  }\n\n  return (\n    <MetaText icon=\"hourglass\" data-testid=\"timing-options\">\n      <span>Wait</span>\n      {groupWait && (\n        <Tooltip\n          placement=\"top\"\n          content=\"How long to initially wait to send a notification for a group of alert instances.\"\n        >\n          <span>\n            <Strong>{groupWait}</Strong> <span>to group instances</span>\n            {groupWait && groupInterval && ','}\n          </span>\n        </Tooltip>\n      )}\n      {groupInterval && (\n        <Tooltip\n          placement=\"top\"\n          content=\"How long to wait before sending a notification about new alerts that are added to a group of alerts for which an initial notification has already been sent.\"\n        >\n          <span>\n            <Strong>{groupInterval}</Strong> <span>before sending updates</span>\n          </span>\n        </Tooltip>\n      )}\n    </MetaText>\n  );\n};\n\ninterface ContactPointDetailsProps {\n  alertManagerSourceName: string;\n  contactPoint: string;\n  receivers: Receiver[];\n}\n\n// @TODO make this work for cloud AMs too\nconst ContactPointsHoverDetails: FC<ContactPointDetailsProps> = ({\n  alertManagerSourceName,\n  contactPoint,\n  receivers,\n}) => {\n  const details = receivers.find((receiver) => receiver.name === contactPoint);\n  if (!details) {\n    return (\n      <Link to={createContactPointLink(contactPoint, alertManagerSourceName)}>\n        <Strong>{contactPoint}</Strong>\n      </Link>\n    );\n  }\n\n  const integrations = details.grafana_managed_receiver_configs;\n  if (!integrations) {\n    return (\n      <Link to={createContactPointLink(contactPoint, alertManagerSourceName)}>\n        <Strong>{contactPoint}</Strong>\n      </Link>\n    );\n  }\n\n  const groupedIntegrations = groupBy(details.grafana_managed_receiver_configs, (config) => config.type);\n\n  return (\n    <HoverCard\n      arrow\n      placement=\"top\"\n      header={\n        <MetaText icon=\"at\">\n          <div>Contact Point</div>\n          <Strong>{contactPoint}</Strong>\n        </MetaText>\n      }\n      key={uniqueId()}\n      content={\n        <Stack direction=\"row\" gap={0.5}>\n          {/* use \"label\" to indicate how many of that type we have in the contact point */}\n          {Object.entries(groupedIntegrations).map(([type, integrations]) => (\n            <Label\n              key={uniqueId()}\n              label={integrations.length > 1 ? integrations.length : undefined}\n              icon={INTEGRATION_ICONS[type]}\n              value={upperFirst(type)}\n            />\n          ))}\n        </Stack>\n      }\n    >\n      <Link to={createContactPointLink(contactPoint, alertManagerSourceName)}>\n        <Strong>{contactPoint}</Strong>\n      </Link>\n    </HoverCard>\n  );\n};\n\nfunction getContactPointErrors(contactPoint: string, contactPointsState: ReceiversState): JSX.Element[] {\n  const notifierStates = Object.entries(contactPointsState[contactPoint]?.notifiers ?? []);\n  const contactPointErrors = notifierStates.reduce((acc: JSX.Element[] = [], [_, notifierStatuses]) => {\n    const notifierErrors = notifierStatuses\n      .filter((status) => status.lastNotifyAttemptError)\n      .map((status) => (\n        <Label\n          icon=\"at\"\n          key={uniqueId()}\n          label={`Contact Point › ${status.name}`}\n          value={status.lastNotifyAttemptError}\n        />\n      ));\n\n    return acc.concat(notifierErrors);\n  }, []);\n\n  return contactPointErrors;\n}\n\nconst routePropertyToLabel = (key: keyof InhertitableProperties | string): string => {\n  switch (key) {\n    case 'receiver':\n      return 'Contact Point';\n    case 'group_by':\n      return 'Group by';\n    case 'group_interval':\n      return 'Group interval';\n    case 'group_wait':\n      return 'Group wait';\n    case 'repeat_interval':\n      return 'Repeat interval';\n    default:\n      return key;\n  }\n};\n\nconst routePropertyToValue = (\n  key: keyof InhertitableProperties | string,\n  value: string | string[]\n): React.ReactNode => {\n  const isNotGrouping = key === 'group_by' && Array.isArray(value) && value[0] === '...';\n  const isSingleGroup = key === 'group_by' && Array.isArray(value) && value.length === 0;\n\n  if (isNotGrouping) {\n    return (\n      <Text variant=\"bodySmall\" color=\"secondary\">\n        Not grouping\n      </Text>\n    );\n  }\n\n  if (isSingleGroup) {\n    return (\n      <Text variant=\"bodySmall\" color=\"secondary\">\n        Single group\n      </Text>\n    );\n  }\n\n  return Array.isArray(value) ? value.join(', ') : value;\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  matcher: (label: string) => {\n    const { color, borderColor } = getTagColorsFromName(label);\n\n    return {\n      wrapper: css`\n        color: #fff;\n        background: ${color};\n        padding: ${theme.spacing(0.33)} ${theme.spacing(0.66)};\n        font-size: ${theme.typography.bodySmall.fontSize};\n\n        border: solid 1px ${borderColor};\n        border-radius: ${theme.shape.radius.default};\n      `,\n    };\n  },\n  childPolicies: css`\n    margin-left: ${theme.spacing(4)};\n    position: relative;\n\n    &:before {\n      content: '';\n      position: absolute;\n      height: calc(100% - 10px);\n\n      border-left: solid 1px ${theme.colors.border.weak};\n\n      margin-top: 0;\n      margin-left: -20px;\n    }\n  `,\n  policyItemWrapper: css`\n    padding: ${theme.spacing(1.5)};\n  `,\n  metadataRow: css`\n    background: ${theme.colors.background.secondary};\n\n    border-bottom-left-radius: ${theme.shape.borderRadius(2)};\n    border-bottom-right-radius: ${theme.shape.borderRadius(2)};\n  `,\n  policyWrapper: (hasFocus = false) => css`\n    flex: 1;\n    position: relative;\n    background: ${theme.colors.background.secondary};\n\n    border-radius: ${theme.shape.radius.default};\n    border: solid 1px ${theme.colors.border.weak};\n\n    ${hasFocus &&\n    css`\n      border-color: ${theme.colors.primary.border};\n    `}\n  `,\n  metadata: css`\n    color: ${theme.colors.text.secondary};\n\n    font-size: ${theme.typography.bodySmall.fontSize};\n    font-weight: ${theme.typography.bodySmall.fontWeight};\n  `,\n  break: css`\n    width: 100%;\n    height: 0;\n    margin-bottom: ${theme.spacing(2)};\n  `,\n  gutterIcon: css`\n    position: absolute;\n\n    top: 0;\n    transform: translateY(50%);\n    left: -${theme.spacing(4)};\n\n    color: ${theme.colors.text.secondary};\n    background: ${theme.colors.background.primary};\n\n    width: 25px;\n    height: 25px;\n    text-align: center;\n\n    border: solid 1px ${theme.colors.border.weak};\n    border-radius: ${theme.shape.radius.default};\n\n    padding: 0;\n  `,\n});\n\nexport { Policy };\n","import { css } from '@emotion/css';\nimport { intersectionBy, isEqual } from 'lodash';\nimport React, { useEffect, useMemo, useState } from 'react';\nimport { useAsyncFn } from 'react-use';\n\nimport { GrafanaTheme2, UrlQueryMap } from '@grafana/data';\nimport { Alert, LoadingPlaceholder, Tab, TabContent, TabsBar, useStyles2, withErrorBoundary, Stack } from '@grafana/ui';\nimport { useQueryParams } from 'app/core/hooks/useQueryParams';\nimport { ObjectMatcher, Route, RouteWithID } from 'app/plugins/datasource/alertmanager/types';\nimport { useDispatch } from 'app/types';\n\nimport { useCleanup } from '../../../core/hooks/useCleanup';\n\nimport { alertmanagerApi } from './api/alertmanagerApi';\nimport { useGetContactPointsState } from './api/receiversApi';\nimport { AlertmanagerPageWrapper } from './components/AlertingPageWrapper';\nimport { GrafanaAlertmanagerDeliveryWarning } from './components/GrafanaAlertmanagerDeliveryWarning';\nimport { MuteTimingsTable } from './components/mute-timings/MuteTimingsTable';\nimport { findRoutesMatchingPredicate, NotificationPoliciesFilter } from './components/notification-policies/Filters';\nimport {\n  useAddPolicyModal,\n  useEditPolicyModal,\n  useDeletePolicyModal,\n  useAlertGroupsModal,\n} from './components/notification-policies/Modals';\nimport { Policy } from './components/notification-policies/Policy';\nimport { useAlertmanagerConfig } from './hooks/useAlertmanagerConfig';\nimport { useAlertmanager } from './state/AlertmanagerContext';\nimport { updateAlertManagerConfigAction } from './state/actions';\nimport { FormAmRoute } from './types/amroutes';\nimport { useRouteGroupsMatcher } from './useRouteGroupsMatcher';\nimport { addUniqueIdentifierToRoute } from './utils/amroutes';\nimport { normalizeMatchers } from './utils/matchers';\nimport { computeInheritedTree } from './utils/notification-policies';\nimport { initialAsyncRequestState } from './utils/redux';\nimport { addRouteToParentRoute, mergePartialAmRouteWithRouteTree, omitRouteFromRouteTree } from './utils/routeTree';\n\nenum ActiveTab {\n  NotificationPolicies = 'notification_policies',\n  MuteTimings = 'mute_timings',\n}\n\nconst AmRoutes = () => {\n  const dispatch = useDispatch();\n  const styles = useStyles2(getStyles);\n\n  const { useGetAlertmanagerAlertGroupsQuery } = alertmanagerApi;\n\n  const [queryParams, setQueryParams] = useQueryParams();\n  const { tab } = getActiveTabFromUrl(queryParams);\n\n  const [activeTab, setActiveTab] = useState<ActiveTab>(tab);\n  const [updatingTree, setUpdatingTree] = useState<boolean>(false);\n  const [contactPointFilter, setContactPointFilter] = useState<string | undefined>();\n  const [labelMatchersFilter, setLabelMatchersFilter] = useState<ObjectMatcher[]>([]);\n\n  const { getRouteGroupsMap } = useRouteGroupsMatcher();\n  const { selectedAlertmanager, hasConfigurationAPI } = useAlertmanager();\n\n  const contactPointsState = useGetContactPointsState(selectedAlertmanager ?? '');\n\n  const {\n    currentData: result,\n    isLoading: resultLoading,\n    error: resultError,\n  } = useAlertmanagerConfig(selectedAlertmanager, {\n    refetchOnFocus: true,\n    refetchOnReconnect: true,\n  });\n\n  const config = result?.alertmanager_config;\n\n  const { currentData: alertGroups, refetch: refetchAlertGroups } = useGetAlertmanagerAlertGroupsQuery(\n    { amSourceName: selectedAlertmanager ?? '' },\n    { skip: !selectedAlertmanager }\n  );\n\n  const receivers = config?.receivers ?? [];\n\n  const rootRoute = useMemo(() => {\n    if (config?.route) {\n      return addUniqueIdentifierToRoute(config.route);\n    }\n    return;\n  }, [config?.route]);\n\n  // useAsync could also work but it's hard to wait until it's done in the tests\n  // Combining with useEffect gives more predictable results because the condition is in useEffect\n  const [{ value: routeAlertGroupsMap, error: instancesPreviewError }, triggerGetRouteGroupsMap] = useAsyncFn(\n    getRouteGroupsMap,\n    [getRouteGroupsMap]\n  );\n\n  useEffect(() => {\n    if (rootRoute && alertGroups) {\n      triggerGetRouteGroupsMap(rootRoute, alertGroups);\n    }\n  }, [rootRoute, alertGroups, triggerGetRouteGroupsMap]);\n\n  // these are computed from the contactPoint and labels matchers filter\n  const routesMatchingFilters = useMemo(() => {\n    if (!rootRoute) {\n      return [];\n    }\n    return findRoutesMatchingFilters(rootRoute, { contactPointFilter, labelMatchersFilter });\n  }, [contactPointFilter, labelMatchersFilter, rootRoute]);\n\n  const isProvisioned = Boolean(config?.route?.provenance);\n\n  function handleSave(partialRoute: Partial<FormAmRoute>) {\n    if (!rootRoute) {\n      return;\n    }\n    const newRouteTree = mergePartialAmRouteWithRouteTree(selectedAlertmanager ?? '', partialRoute, rootRoute);\n    updateRouteTree(newRouteTree);\n  }\n\n  function handleDelete(route: RouteWithID) {\n    if (!rootRoute) {\n      return;\n    }\n    const newRouteTree = omitRouteFromRouteTree(route, rootRoute);\n    updateRouteTree(newRouteTree);\n  }\n\n  function handleAdd(partialRoute: Partial<FormAmRoute>, parentRoute: RouteWithID) {\n    if (!rootRoute) {\n      return;\n    }\n\n    const newRouteTree = addRouteToParentRoute(selectedAlertmanager ?? '', partialRoute, parentRoute, rootRoute);\n    updateRouteTree(newRouteTree);\n  }\n\n  function updateRouteTree(routeTree: Route) {\n    if (!result) {\n      return;\n    }\n\n    setUpdatingTree(true);\n\n    dispatch(\n      updateAlertManagerConfigAction({\n        newConfig: {\n          ...result,\n          alertmanager_config: {\n            ...result.alertmanager_config,\n            route: routeTree,\n          },\n        },\n        oldConfig: result,\n        alertManagerSourceName: selectedAlertmanager!,\n        successMessage: 'Updated notification policies',\n      })\n    )\n      .unwrap()\n      .then(() => {\n        if (selectedAlertmanager) {\n          refetchAlertGroups();\n        }\n        closeEditModal();\n        closeAddModal();\n        closeDeleteModal();\n      })\n      .finally(() => {\n        setUpdatingTree(false);\n      });\n  }\n\n  // edit, add, delete modals\n  const [addModal, openAddModal, closeAddModal] = useAddPolicyModal(receivers, handleAdd, updatingTree);\n  const [editModal, openEditModal, closeEditModal] = useEditPolicyModal(\n    selectedAlertmanager ?? '',\n    receivers,\n    handleSave,\n    updatingTree\n  );\n  const [deleteModal, openDeleteModal, closeDeleteModal] = useDeletePolicyModal(handleDelete, updatingTree);\n  const [alertInstancesModal, showAlertGroupsModal] = useAlertGroupsModal();\n\n  useCleanup((state) => (state.unifiedAlerting.saveAMConfig = initialAsyncRequestState));\n\n  if (!selectedAlertmanager) {\n    return null;\n  }\n\n  const numberOfMuteTimings = result?.alertmanager_config.mute_time_intervals?.length ?? 0;\n  const haveData = result && !resultError && !resultLoading;\n  const isFetching = !result && resultLoading;\n  const haveError = resultError && !resultLoading;\n\n  const muteTimingsTabActive = activeTab === ActiveTab.MuteTimings;\n  const policyTreeTabActive = activeTab === ActiveTab.NotificationPolicies;\n\n  return (\n    <>\n      <TabsBar>\n        <Tab\n          label={'Notification Policies'}\n          active={policyTreeTabActive}\n          onChangeTab={() => {\n            setActiveTab(ActiveTab.NotificationPolicies);\n            setQueryParams({ tab: ActiveTab.NotificationPolicies });\n          }}\n        />\n        <Tab\n          label={'Mute Timings'}\n          active={muteTimingsTabActive}\n          counter={numberOfMuteTimings}\n          onChangeTab={() => {\n            setActiveTab(ActiveTab.MuteTimings);\n            setQueryParams({ tab: ActiveTab.MuteTimings });\n          }}\n        />\n      </TabsBar>\n      <TabContent className={styles.tabContent}>\n        {isFetching && <LoadingPlaceholder text=\"Loading Alertmanager config...\" />}\n        {haveError && (\n          <Alert severity=\"error\" title=\"Error loading Alertmanager config\">\n            {resultError.message || 'Unknown error.'}\n          </Alert>\n        )}\n        {haveData && (\n          <>\n            {policyTreeTabActive && (\n              <>\n                <GrafanaAlertmanagerDeliveryWarning currentAlertmanager={selectedAlertmanager} />\n                <Stack direction=\"column\" gap={1}>\n                  {rootRoute && (\n                    <NotificationPoliciesFilter\n                      receivers={receivers}\n                      onChangeMatchers={setLabelMatchersFilter}\n                      onChangeReceiver={setContactPointFilter}\n                    />\n                  )}\n                  {rootRoute && (\n                    <Policy\n                      receivers={receivers}\n                      routeTree={rootRoute}\n                      currentRoute={rootRoute}\n                      alertGroups={alertGroups ?? []}\n                      contactPointsState={contactPointsState.receivers}\n                      readOnly={!hasConfigurationAPI}\n                      provisioned={isProvisioned}\n                      alertManagerSourceName={selectedAlertmanager}\n                      onAddPolicy={openAddModal}\n                      onEditPolicy={openEditModal}\n                      onDeletePolicy={openDeleteModal}\n                      onShowAlertInstances={showAlertGroupsModal}\n                      routesMatchingFilters={routesMatchingFilters}\n                      matchingInstancesPreview={{ groupsMap: routeAlertGroupsMap, enabled: !instancesPreviewError }}\n                    />\n                  )}\n                </Stack>\n                {addModal}\n                {editModal}\n                {deleteModal}\n                {alertInstancesModal}\n              </>\n            )}\n            {muteTimingsTabActive && (\n              <MuteTimingsTable alertManagerSourceName={selectedAlertmanager} hideActions={!hasConfigurationAPI} />\n            )}\n          </>\n        )}\n      </TabContent>\n    </>\n  );\n};\n\ntype RouteFilters = {\n  contactPointFilter?: string;\n  labelMatchersFilter?: ObjectMatcher[];\n};\n\nexport const findRoutesMatchingFilters = (rootRoute: RouteWithID, filters: RouteFilters): RouteWithID[] => {\n  const { contactPointFilter, labelMatchersFilter = [] } = filters;\n\n  let matchedRoutes: RouteWithID[][] = [];\n\n  const fullRoute = computeInheritedTree(rootRoute);\n\n  const routesMatchingContactPoint = contactPointFilter\n    ? findRoutesMatchingPredicate(fullRoute, (route) => route.receiver === contactPointFilter)\n    : undefined;\n\n  if (routesMatchingContactPoint) {\n    matchedRoutes.push(routesMatchingContactPoint);\n  }\n\n  const routesMatchingLabelMatchers = labelMatchersFilter.length\n    ? findRoutesMatchingPredicate(fullRoute, (route) => {\n        const routeMatchers = normalizeMatchers(route);\n        return labelMatchersFilter.every((filter) => routeMatchers.some((matcher) => isEqual(filter, matcher)));\n      })\n    : undefined;\n\n  if (routesMatchingLabelMatchers) {\n    matchedRoutes.push(routesMatchingLabelMatchers);\n  }\n\n  return intersectionBy(...matchedRoutes, 'id');\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  tabContent: css`\n    margin-top: ${theme.spacing(2)};\n  `,\n});\n\ninterface QueryParamValues {\n  tab: ActiveTab;\n}\n\nfunction getActiveTabFromUrl(queryParams: UrlQueryMap): QueryParamValues {\n  let tab = ActiveTab.NotificationPolicies; // default tab\n\n  if (queryParams['tab'] === ActiveTab.NotificationPolicies) {\n    tab = ActiveTab.NotificationPolicies;\n  }\n\n  if (queryParams['tab'] === ActiveTab.MuteTimings) {\n    tab = ActiveTab.MuteTimings;\n  }\n\n  return {\n    tab,\n  };\n}\n\nconst NotificationPoliciesPage = () => (\n  <AlertmanagerPageWrapper navId=\"am-routes\" accessType=\"notification\">\n    <AmRoutes />\n  </AlertmanagerPageWrapper>\n);\n\nexport default withErrorBoundary(NotificationPoliciesPage, { style: 'page' });\n","import { css } from '@emotion/css';\nimport React, { HTMLAttributes } from 'react';\nimport { useLocalStorage } from 'react-use';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Alert, AlertVariant, Button, HorizontalGroup, Tooltip, useTheme2 } from '@grafana/ui';\nimport { getIconFromSeverity } from '@grafana/ui/src/components/Alert/Alert';\n\ntype Justify = 'flex-start' | 'flex-end' | 'space-between' | 'center';\n\ninterface CollapsibleAlertProps extends HTMLAttributes<HTMLDivElement> {\n  localStoreKey: string;\n  startClosed?: boolean;\n  severity?: AlertVariant;\n  collapseText?: string;\n  collapseTooltip: string;\n  collapseJustify?: Justify;\n  alertTitle: string;\n  children?: React.ReactNode;\n}\n\nexport const CollapsibleAlert = ({\n  localStoreKey,\n  startClosed = false,\n  severity = 'error',\n  collapseText,\n  collapseTooltip,\n  collapseJustify = 'flex-end',\n  alertTitle,\n  children,\n}: CollapsibleAlertProps) => {\n  const theme = useTheme2();\n  const styles = getStyles(theme, severity);\n  const [closed, setClosed] = useLocalStorage(localStoreKey, startClosed);\n\n  return (\n    <>\n      {closed && (\n        <HorizontalGroup justify={collapseJustify}>\n          <Tooltip content={collapseTooltip} placement=\"bottom\">\n            <Button\n              fill=\"text\"\n              variant=\"secondary\"\n              icon={getIconFromSeverity(severity)}\n              className={styles.warningButton}\n              onClick={() => setClosed(false)}\n            >\n              {collapseText}\n            </Button>\n          </Tooltip>\n        </HorizontalGroup>\n      )}\n      {!closed && (\n        <Alert severity={severity} title={alertTitle} onRemove={() => setClosed(true)}>\n          {children}\n        </Alert>\n      )}\n    </>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2, severity: AlertVariant) => {\n  const color = theme.colors[severity];\n  return {\n    warningButton: css({\n      color: color.text,\n\n      '&:hover': {\n        background: color.transparent,\n      },\n    }),\n  };\n};\n","import React from 'react';\n\nimport { config } from '@grafana/runtime';\nimport { TextLink } from '@grafana/ui';\n\nimport { CollapsibleAlert } from './CollapsibleAlert';\n\nconst LOCAL_STORAGE_KEY = 'grafana.unifiedalerting.upgrade.previewNotice';\n\nexport const UAPreviewNotice = () => {\n  if (config.unifiedAlertingEnabled || !config.featureToggles.alertingPreviewUpgrade) {\n    return null;\n  }\n\n  return (\n    <CollapsibleAlert\n      localStoreKey={LOCAL_STORAGE_KEY}\n      alertTitle={'This is a preview of the upgraded Grafana Alerting'}\n      collapseText={'Grafana Alerting Preview'}\n      collapseTooltip={'Show preview warning'}\n      severity={'warning'}\n    >\n      <p>\n        No rules are being evaluated and legacy alerting is still running.\n        <br />\n        Please contact your administrator to upgrade permanently.\n      </p>\n      <TextLink external href={'https://grafana.com/docs/grafana/latest/alerting/set-up/migrating-alerts/'}>\n        Read about upgrading\n      </TextLink>\n    </CollapsibleAlert>\n  );\n};\n","import { css } from '@emotion/css';\nimport React, { useMemo } from 'react';\n\nimport { GrafanaTheme2, SelectableValue } from '@grafana/data';\nimport { InlineField, Select, useStyles2 } from '@grafana/ui';\n\nimport { useAlertmanager } from '../state/AlertmanagerContext';\nimport { AlertManagerDataSource, GRAFANA_RULES_SOURCE_NAME } from '../utils/datasource';\n\ninterface Props {\n  disabled?: boolean;\n}\n\nfunction getAlertManagerLabel(alertManager: AlertManagerDataSource) {\n  return alertManager.name === GRAFANA_RULES_SOURCE_NAME ? 'Grafana' : alertManager.name.slice(0, 37);\n}\n\nexport const AlertManagerPicker = ({ disabled = false }: Props) => {\n  const styles = useStyles2(getStyles);\n\n  const { selectedAlertmanager, availableAlertManagers, setSelectedAlertmanager } = useAlertmanager();\n\n  const options: Array<SelectableValue<string>> = useMemo(() => {\n    return availableAlertManagers.map((ds) => ({\n      label: getAlertManagerLabel(ds),\n      value: ds.name,\n      imgUrl: ds.imgUrl,\n      meta: ds.meta,\n    }));\n  }, [availableAlertManagers]);\n\n  return (\n    <InlineField\n      className={styles.field}\n      label={disabled ? 'Alertmanager' : 'Choose Alertmanager'}\n      disabled={disabled || options.length === 1}\n      data-testid=\"alertmanager-picker\"\n    >\n      <Select\n        aria-label={disabled ? 'Alertmanager' : 'Choose Alertmanager'}\n        width={29}\n        className=\"ds-picker select-container\"\n        backspaceRemovesValue={false}\n        onChange={(value) => {\n          if (value?.value) {\n            setSelectedAlertmanager(value.value);\n          }\n        }}\n        options={options}\n        maxMenuHeight={500}\n        noOptionsMessage=\"No datasources found\"\n        value={selectedAlertmanager}\n        getOptionLabel={(o) => o.label}\n      />\n    </InlineField>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  field: css`\n    margin: 0;\n  `,\n});\n","import React from 'react';\n\nimport { Alert } from '@grafana/ui';\n\nimport { AlertManagerDataSource } from '../utils/datasource';\n\ninterface Props {\n  availableAlertManagers: AlertManagerDataSource[];\n}\n\nconst NoAlertManagersAvailable = () => (\n  <Alert title=\"No Alertmanager found\" severity=\"warning\">\n    We could not find any external Alertmanagers and you may not have access to the built-in Grafana Alertmanager.\n  </Alert>\n);\n\nconst OtherAlertManagersAvailable = () => (\n  <Alert title=\"Selected Alertmanager not found.\" severity=\"warning\">\n    The selected Alertmanager no longer exists or you may not have permission to access it. You can select a different\n    Alertmanager from the dropdown.\n  </Alert>\n);\n\nexport const NoAlertManagerWarning = ({ availableAlertManagers }: Props) => {\n  const hasOtherAMs = availableAlertManagers.length > 0;\n\n  return <div>{hasOtherAMs ? <OtherAlertManagersAvailable /> : <NoAlertManagersAvailable />}</div>;\n};\n","import React, { PropsWithChildren } from 'react';\nimport { useLocation } from 'react-use';\n\nimport { Page } from 'app/core/components/Page/Page';\nimport { PageProps } from 'app/core/components/Page/types';\n\nimport { UAPreviewNotice } from '../../components/UAPreviewNotice';\nimport { AlertmanagerProvider, useAlertmanager } from '../state/AlertmanagerContext';\n\nimport { AlertManagerPicker } from './AlertManagerPicker';\nimport { NoAlertManagerWarning } from './NoAlertManagerWarning';\n\n/**\n * This is the main alerting page wrapper, used by the alertmanager page wrapper and the alert rules list view\n */\ninterface AlertingPageWrapperProps extends PageProps {\n  isLoading?: boolean;\n}\n\nexport const AlertingPageWrapper = ({ children, isLoading, ...rest }: AlertingPageWrapperProps) => (\n  <Page {...rest}>\n    <Page.Contents isLoading={isLoading}>\n      <div>\n        <UAPreviewNotice />\n        {children}\n      </div>\n    </Page.Contents>\n  </Page>\n);\n\n/**\n * This wrapper is for pages that use the Alertmanager API\n */\ninterface AlertmanagerPageWrapperProps extends AlertingPageWrapperProps {\n  accessType: 'instance' | 'notification';\n}\nexport const AlertmanagerPageWrapper = ({ children, accessType, ...props }: AlertmanagerPageWrapperProps) => {\n  const disableAlertmanager = useIsDisabledAlertmanagerSelection();\n\n  return (\n    <AlertmanagerProvider accessType={accessType}>\n      <AlertingPageWrapper {...props} actions={<AlertManagerPicker disabled={disableAlertmanager} />}>\n        <AlertManagerPagePermissionsCheck>{children}</AlertManagerPagePermissionsCheck>\n      </AlertingPageWrapper>\n    </AlertmanagerProvider>\n  );\n};\n\n/**\n * This function tells us when we want to disable the alertmanager picker\n * It's not great...\n */\nfunction useIsDisabledAlertmanagerSelection() {\n  const location = useLocation();\n  const disabledPathSegment = ['/edit', '/new'];\n\n  return disabledPathSegment.some((match) => location?.pathname?.includes(match));\n}\n\n/**\n * This component will render an error message if the user doesn't have sufficient permissions or if the requested\n * alertmanager doesn't exist\n */\nconst AlertManagerPagePermissionsCheck = ({ children }: PropsWithChildren) => {\n  const { availableAlertManagers, selectedAlertmanager } = useAlertmanager();\n\n  if (!selectedAlertmanager) {\n    return <NoAlertManagerWarning availableAlertManagers={availableAlertManagers} />;\n  }\n\n  return <>{children}</>;\n};\n","import { css, cx } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\n\nimport { DynamicTable, DynamicTableProps } from './DynamicTable';\n\nexport type DynamicTableWithGuidelinesProps<T> = Omit<DynamicTableProps<T>, 'renderPrefixHeader, renderPrefixCell'>;\n\n// DynamicTable, but renders visual guidelines on the left, for larger screen widths\nexport const DynamicTableWithGuidelines = <T extends object>({\n  renderExpandedContent,\n  ...props\n}: DynamicTableWithGuidelinesProps<T>) => {\n  const styles = useStyles2(getStyles);\n  return (\n    <DynamicTable\n      renderExpandedContent={\n        renderExpandedContent\n          ? (item, index, items) => (\n              <>\n                {!(index === items.length - 1) && <div className={cx(styles.contentGuideline, styles.guideline)} />}\n                {renderExpandedContent(item, index, items)}\n              </>\n            )\n          : undefined\n      }\n      renderPrefixHeader={() => (\n        <div className={styles.relative}>\n          <div className={cx(styles.headerGuideline, styles.guideline)} />\n        </div>\n      )}\n      renderPrefixCell={(_, index, items) => (\n        <div className={styles.relative}>\n          <div className={cx(styles.topGuideline, styles.guideline)} />\n          {!(index === items.length - 1) && <div className={cx(styles.bottomGuideline, styles.guideline)} />}\n        </div>\n      )}\n      {...props}\n    />\n  );\n};\n\nexport const getStyles = (theme: GrafanaTheme2) => ({\n  relative: css`\n    position: relative;\n    height: 100%;\n  `,\n  guideline: css`\n    left: -19px;\n    border-left: 1px solid ${theme.colors.border.weak};\n    position: absolute;\n\n    ${theme.breakpoints.down('md')} {\n      display: none;\n    }\n  `,\n  topGuideline: css`\n    width: 18px;\n    border-bottom: 1px solid ${theme.colors.border.medium};\n    top: 0;\n    bottom: 50%;\n  `,\n  bottomGuideline: css`\n    top: 50%;\n    bottom: 0;\n  `,\n  contentGuideline: css`\n    top: 0;\n    bottom: 0;\n    left: -49px !important;\n  `,\n  headerGuideline: css`\n    top: -17px;\n    bottom: 0;\n  `,\n});\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\n\nexport const EmptyArea = ({ children }: React.PropsWithChildren<{}>) => {\n  const styles = useStyles2(getStyles);\n\n  return <div className={styles.container}>{children}</div>;\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    container: css`\n      background-color: ${theme.colors.background.secondary};\n      color: ${theme.colors.text.secondary};\n      padding: ${theme.spacing(4)};\n      text-align: center;\n    `,\n  };\n};\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { LinkButton, useStyles2 } from '@grafana/ui';\nimport { contextSrv } from 'app/core/services/context_srv';\nimport { AlertmanagerAlert, AlertState } from 'app/plugins/datasource/alertmanager/types';\nimport { AccessControlAction } from 'app/types';\n\nimport { AlertmanagerAction } from '../../hooks/useAbilities';\nimport { isGrafanaRulesSource } from '../../utils/datasource';\nimport { makeAMLink, makeLabelBasedSilenceLink } from '../../utils/misc';\nimport { AnnotationDetailsField } from '../AnnotationDetailsField';\nimport { Authorize } from '../Authorize';\n\ninterface AmNotificationsAlertDetailsProps {\n  alertManagerSourceName: string;\n  alert: AlertmanagerAlert;\n}\n\nexport const AlertDetails = ({ alert, alertManagerSourceName }: AmNotificationsAlertDetailsProps) => {\n  const styles = useStyles2(getStyles);\n\n  // For Grafana Managed alerts the Generator URL redirects to the alert rule edit page, so update permission is required\n  // For external alert manager the Generator URL redirects to an external service which we don't control\n  const isGrafanaSource = isGrafanaRulesSource(alertManagerSourceName);\n  const isSeeSourceButtonEnabled = isGrafanaSource\n    ? contextSrv.hasPermission(AccessControlAction.AlertingRuleRead)\n    : true;\n\n  return (\n    <>\n      <div className={styles.actionsRow}>\n        {alert.status.state === AlertState.Suppressed && (\n          <Authorize actions={[AlertmanagerAction.CreateSilence, AlertmanagerAction.UpdateSilence]}>\n            <LinkButton\n              href={`${makeAMLink(\n                '/alerting/silences',\n                alertManagerSourceName\n              )}&silenceIds=${alert.status.silencedBy.join(',')}`}\n              className={styles.button}\n              icon={'bell'}\n              size={'sm'}\n            >\n              Manage silences\n            </LinkButton>\n          </Authorize>\n        )}\n        {alert.status.state === AlertState.Active && (\n          <Authorize actions={[AlertmanagerAction.CreateSilence]}>\n            <LinkButton\n              href={makeLabelBasedSilenceLink(alertManagerSourceName, alert.labels)}\n              className={styles.button}\n              icon={'bell-slash'}\n              size={'sm'}\n            >\n              Silence\n            </LinkButton>\n          </Authorize>\n        )}\n        {isSeeSourceButtonEnabled && alert.generatorURL && (\n          <LinkButton className={styles.button} href={alert.generatorURL} icon={'chart-line'} size={'sm'}>\n            See source\n          </LinkButton>\n        )}\n      </div>\n      {Object.entries(alert.annotations).map(([annotationKey, annotationValue]) => (\n        <AnnotationDetailsField key={annotationKey} annotationKey={annotationKey} value={annotationValue} />\n      ))}\n      <div className={styles.receivers}>\n        Receivers:{' '}\n        {alert.receivers\n          .map(({ name }) => name)\n          .filter((name) => !!name)\n          .join(', ')}\n      </div>\n    </>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  button: css`\n    & + & {\n      margin-left: ${theme.spacing(1)};\n    }\n  `,\n  actionsRow: css`\n    padding: ${theme.spacing(2, 0)} !important;\n    border-bottom: 1px solid ${theme.colors.border.medium};\n  `,\n  receivers: css`\n    padding: ${theme.spacing(1, 0)};\n  `,\n});\n","import { css } from '@emotion/css';\nimport React, { useMemo } from 'react';\n\nimport { GrafanaTheme2, intervalToAbbreviatedDurationString } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\nimport { AlertmanagerAlert } from 'app/plugins/datasource/alertmanager/types';\n\nimport { AlertLabels } from '../AlertLabels';\nimport { DynamicTableColumnProps, DynamicTableItemProps } from '../DynamicTable';\nimport { DynamicTableWithGuidelines } from '../DynamicTableWithGuidelines';\nimport { AmAlertStateTag } from '../silences/AmAlertStateTag';\n\nimport { AlertDetails } from './AlertDetails';\n\ninterface Props {\n  alerts: AlertmanagerAlert[];\n  alertManagerSourceName: string;\n}\n\ntype AlertGroupAlertsTableColumnProps = DynamicTableColumnProps<AlertmanagerAlert>;\ntype AlertGroupAlertsTableItemProps = DynamicTableItemProps<AlertmanagerAlert>;\n\nexport const AlertGroupAlertsTable = ({ alerts, alertManagerSourceName }: Props) => {\n  const styles = useStyles2(getStyles);\n\n  const columns = useMemo(\n    (): AlertGroupAlertsTableColumnProps[] => [\n      {\n        id: 'state',\n        label: 'State',\n        // eslint-disable-next-line react/display-name\n        renderCell: ({ data: alert }) => (\n          <>\n            <AmAlertStateTag state={alert.status.state} />\n            <span className={styles.duration}>\n              for{' '}\n              {intervalToAbbreviatedDurationString({\n                start: new Date(alert.startsAt),\n                end: new Date(alert.endsAt),\n              })}\n            </span>\n          </>\n        ),\n        size: '220px',\n      },\n      {\n        id: 'labels',\n        label: 'Labels',\n        // eslint-disable-next-line react/display-name\n        renderCell: ({ data: { labels } }) => <AlertLabels labels={labels} size=\"sm\" />,\n        size: 1,\n      },\n    ],\n    [styles]\n  );\n\n  const items = useMemo(\n    (): AlertGroupAlertsTableItemProps[] =>\n      alerts.map((alert) => ({\n        id: alert.fingerprint,\n        data: alert,\n      })),\n    [alerts]\n  );\n\n  return (\n    <div className={styles.tableWrapper} data-testid=\"alert-group-table\">\n      <DynamicTableWithGuidelines\n        cols={columns}\n        items={items}\n        isExpandable={true}\n        renderExpandedContent={({ data: alert }) => (\n          <AlertDetails alert={alert} alertManagerSourceName={alertManagerSourceName} />\n        )}\n      />\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  tableWrapper: css`\n    margin-top: ${theme.spacing(3)};\n    ${theme.breakpoints.up('md')} {\n      margin-left: ${theme.spacing(4.5)};\n    }\n  `,\n  duration: css`\n    margin-left: ${theme.spacing(1)};\n    font-size: ${theme.typography.bodySmall.fontSize};\n  `,\n});\n","import { css } from '@emotion/css';\nimport React, { useState } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2, Stack } from '@grafana/ui';\nimport { AlertmanagerGroup, AlertState } from 'app/plugins/datasource/alertmanager/types';\n\nimport { AlertLabels } from '../AlertLabels';\nimport { CollapseToggle } from '../CollapseToggle';\nimport { MetaText } from '../MetaText';\nimport { Strong } from '../Strong';\n\nimport { AlertGroupAlertsTable } from './AlertGroupAlertsTable';\nimport { AlertGroupHeader } from './AlertGroupHeader';\n\ninterface Props {\n  group: AlertmanagerGroup;\n  alertManagerSourceName: string;\n}\n\nexport const AlertGroup = ({ alertManagerSourceName, group }: Props) => {\n  const [isCollapsed, setIsCollapsed] = useState<boolean>(true);\n  const styles = useStyles2(getStyles);\n  // When group is grouped, receiver.name is 'NONE' as it can contain multiple receivers\n  const receiverInGroup = group.receiver.name !== 'NONE';\n  return (\n    <div className={styles.wrapper}>\n      <div className={styles.header}>\n        <div className={styles.group} data-testid=\"alert-group\">\n          <CollapseToggle\n            size=\"sm\"\n            isCollapsed={isCollapsed}\n            onToggle={() => setIsCollapsed(!isCollapsed)}\n            data-testid=\"alert-group-collapse-toggle\"\n          />\n          {Object.keys(group.labels).length ? (\n            <Stack direction=\"row\" alignItems=\"center\">\n              <AlertLabels labels={group.labels} size=\"sm\" />\n              {receiverInGroup && (\n                <MetaText icon=\"at\">\n                  Delivered to <Strong>{group.receiver.name}</Strong>\n                </MetaText>\n              )}\n            </Stack>\n          ) : (\n            <span>No grouping</span>\n          )}\n        </div>\n        <AlertGroupHeader group={group} />\n      </div>\n      {!isCollapsed && <AlertGroupAlertsTable alertManagerSourceName={alertManagerSourceName} alerts={group.alerts} />}\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  wrapper: css({\n    '& + &': {\n      marginTop: theme.spacing(2),\n    },\n  }),\n  header: css({\n    display: 'flex',\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    padding: `${theme.spacing(1)} ${theme.spacing(1)} ${theme.spacing(1)} 0`,\n    backgroundColor: theme.colors.background.secondary,\n    width: '100%',\n  }),\n  group: css({\n    display: 'flex',\n    flexDirection: 'row',\n    alignItems: 'center',\n  }),\n  summary: css({}),\n  [AlertState.Active]: css({\n    color: theme.colors.error.main,\n  }),\n  [AlertState.Suppressed]: css({\n    color: theme.colors.primary.main,\n  }),\n  [AlertState.Unprocessed]: css({\n    color: theme.colors.secondary.main,\n  }),\n});\n","import moment from 'moment';\nimport React from 'react';\n\nimport { MuteTimeInterval } from 'app/plugins/datasource/alertmanager/types';\n\nimport {\n  getDaysOfMonthString,\n  getMonthsString,\n  getTimeString,\n  getWeekdayString,\n  getYearsString,\n} from '../../utils/alertmanager';\n\n// https://github.com/prometheus/alertmanager/blob/9de8ef36755298a68b6ab20244d4369d38bdea99/timeinterval/timeinterval.go#L443\nconst TIME_RANGE_REGEX = /^((([01][0-9])|(2[0-3])):[0-5][0-9])$|(^24:00$)/;\n\nconst isvalidTimeFormat = (timeString: string): boolean => {\n  return timeString ? TIME_RANGE_REGEX.test(timeString) : true;\n};\n\nconst isValidStartAndEndTime = (startTime?: string, endTime?: string): boolean => {\n  // empty time range is perfactly valid for a mute timing\n  if (!startTime && !endTime) {\n    return true;\n  }\n\n  if ((!startTime && endTime) || (startTime && !endTime)) {\n    return false;\n  }\n\n  const timeUnit = 'HH:mm';\n  // @ts-ignore typescript types here incorrect, sigh\n  const startDate = moment().startOf('day').add(startTime, timeUnit);\n  // @ts-ignore typescript types here incorrect, sigh\n  const endDate = moment().startOf('day').add(endTime, timeUnit);\n\n  if (startTime && endTime && startDate.isBefore(endDate)) {\n    return true;\n  }\n\n  if (startTime && endTime && endDate.isAfter(startDate)) {\n    return true;\n  }\n\n  return false;\n};\n\nfunction renderTimeIntervals(muteTiming: MuteTimeInterval) {\n  const timeIntervals = muteTiming.time_intervals;\n\n  return timeIntervals.map((interval, index) => {\n    const { times, weekdays, days_of_month, months, years, location } = interval;\n    const timeString = getTimeString(times, location);\n    const weekdayString = getWeekdayString(weekdays);\n    const daysString = getDaysOfMonthString(days_of_month);\n    const monthsString = getMonthsString(months);\n    const yearsString = getYearsString(years);\n\n    return (\n      <React.Fragment key={JSON.stringify(interval) + index}>\n        {`${timeString} ${weekdayString}`}\n        <br />\n        {[daysString, monthsString, yearsString].join(' | ')}\n        <br />\n      </React.Fragment>\n    );\n  });\n}\n\nexport { isvalidTimeFormat, isValidStartAndEndTime, renderTimeIntervals };\n","import { css } from '@emotion/css';\nimport { take, takeRight, uniqueId } from 'lodash';\nimport React, { FC } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { getTagColorsFromName, useStyles2, Stack } from '@grafana/ui';\nimport { ObjectMatcher } from 'app/plugins/datasource/alertmanager/types';\n\nimport { HoverCard } from '../HoverCard';\n\ntype MatchersProps = { matchers: ObjectMatcher[] };\n\n// renders the first N number of matchers\nconst Matchers: FC<MatchersProps> = ({ matchers }) => {\n  const styles = useStyles2(getStyles);\n\n  const NUM_MATCHERS = 5;\n\n  const firstFew = take(matchers, NUM_MATCHERS);\n  const rest = takeRight(matchers, matchers.length - NUM_MATCHERS);\n  const hasMoreMatchers = rest.length > 0;\n\n  return (\n    <span data-testid=\"label-matchers\">\n      <Stack direction=\"row\" gap={1} alignItems=\"center\" wrap={'wrap'}>\n        {firstFew.map((matcher) => (\n          <MatcherBadge key={uniqueId()} matcher={matcher} />\n        ))}\n        {/* TODO hover state to show all matchers we're not showing */}\n        {hasMoreMatchers && (\n          <HoverCard\n            arrow\n            placement=\"top\"\n            content={\n              <>\n                {rest.map((matcher) => (\n                  <MatcherBadge key={uniqueId()} matcher={matcher} />\n                ))}\n              </>\n            }\n          >\n            <span>\n              <div className={styles.metadata}>{`and ${rest.length} more`}</div>\n            </span>\n          </HoverCard>\n        )}\n      </Stack>\n    </span>\n  );\n};\n\ninterface MatcherBadgeProps {\n  matcher: ObjectMatcher;\n}\n\nconst MatcherBadge: FC<MatcherBadgeProps> = ({ matcher: [label, operator, value] }) => {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={styles.matcher(label).wrapper}>\n      <Stack direction=\"row\" gap={0} alignItems=\"baseline\">\n        {label} {operator} {value}\n      </Stack>\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  matcher: (label: string) => {\n    const { color, borderColor } = getTagColorsFromName(label);\n\n    return {\n      wrapper: css`\n        color: #fff;\n        background: ${color};\n        padding: ${theme.spacing(0.33)} ${theme.spacing(0.66)};\n        font-size: ${theme.typography.bodySmall.fontSize};\n\n        border: solid 1px ${borderColor};\n        border-radius: ${theme.shape.borderRadius(2)};\n      `,\n    };\n  },\n  metadata: css`\n    color: ${theme.colors.text.secondary};\n\n    font-size: ${theme.typography.bodySmall.fontSize};\n    font-weight: ${theme.typography.bodySmall.fontWeight};\n  `,\n});\n\nexport { Matchers };\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\n\nimport { TimeOptions } from '../../types/time';\n\nexport function PromDurationDocs() {\n  const styles = useStyles2(getPromDurationStyles);\n  return (\n    <div>\n      Prometheus duration format consist of a number followed by a time unit.\n      <br />\n      Different units can be combined for more granularity.\n      <hr />\n      <div className={styles.list}>\n        <div className={styles.header}>\n          <div>Symbol</div>\n          <div>Time unit</div>\n          <div>Example</div>\n        </div>\n        <PromDurationDocsTimeUnit unit={TimeOptions.seconds} name=\"seconds\" example=\"20s\" />\n        <PromDurationDocsTimeUnit unit={TimeOptions.minutes} name=\"minutes\" example=\"10m\" />\n        <PromDurationDocsTimeUnit unit={TimeOptions.hours} name=\"hours\" example=\"4h\" />\n        <PromDurationDocsTimeUnit unit={TimeOptions.days} name=\"days\" example=\"3d\" />\n        <PromDurationDocsTimeUnit unit={TimeOptions.weeks} name=\"weeks\" example=\"2w\" />\n        <div className={styles.examples}>\n          <div>Multiple units combined</div>\n          <code>1m30s, 2h30m20s, 1w2d</code>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nfunction PromDurationDocsTimeUnit({ unit, name, example }: { unit: TimeOptions; name: string; example: string }) {\n  const styles = useStyles2(getPromDurationStyles);\n\n  return (\n    <>\n      <div className={styles.unit}>{unit}</div>\n      <div>{name}</div>\n      <code>{example}</code>\n    </>\n  );\n}\n\nconst getPromDurationStyles = (theme: GrafanaTheme2) => ({\n  unit: css`\n    font-weight: ${theme.typography.fontWeightBold};\n  `,\n  list: css`\n    display: grid;\n    grid-template-columns: max-content 1fr 2fr;\n    gap: ${theme.spacing(1, 3)};\n  `,\n  header: css`\n    display: contents;\n    font-weight: ${theme.typography.fontWeightBold};\n  `,\n  examples: css`\n    display: contents;\n    & > div {\n      grid-column: 1 / span 2;\n    }\n  `,\n});\n","import React from 'react';\n\nimport { Icon, Input } from '@grafana/ui';\n\nimport { HoverCard } from '../HoverCard';\n\nimport { PromDurationDocs } from './PromDurationDocs';\n\nexport const PromDurationInput = React.forwardRef<HTMLInputElement, React.ComponentProps<typeof Input>>(\n  (props, ref) => {\n    return (\n      <Input\n        suffix={\n          <HoverCard content={<PromDurationDocs />} disabled={false}>\n            <Icon name=\"info-circle\" size=\"lg\" />\n          </HoverCard>\n        }\n        {...props}\n        ref={ref}\n      />\n    );\n  }\n);\n\nPromDurationInput.displayName = 'PromDurationInput';\n","import { css } from '@emotion/css';\n\nimport { GrafanaTheme2 } from '@grafana/data';\n\nexport const getFormStyles = (theme: GrafanaTheme2) => {\n  return {\n    container: css`\n      align-items: center;\n      display: flex;\n      flex-flow: row nowrap;\n\n      & > * + * {\n        margin-left: ${theme.spacing(1)};\n      }\n    `,\n    input: css`\n      flex: 1;\n    `,\n    promDurationInput: css`\n      max-width: ${theme.spacing(32)};\n    `,\n    timingFormContainer: css`\n      padding: ${theme.spacing(1)};\n    `,\n    linkText: css`\n      text-decoration: underline;\n    `,\n    collapse: css`\n      border: none;\n      background: none;\n      color: ${theme.colors.text.primary};\n    `,\n  };\n};\n","export const routeTimingsFields = {\n  groupWait: {\n    label: 'Group wait',\n    description:\n      'The waiting time until the initial notification is sent for a new group created by an incoming alert. If empty it will be inherited from the parent policy.',\n    ariaLabel: 'Group wait value',\n  },\n  groupInterval: {\n    label: 'Group interval',\n    description:\n      'The waiting time to send a batch of new alerts for that group after the first notification was sent. If empty it will be inherited from the parent policy.',\n    ariaLabel: 'Group interval value',\n  },\n  repeatInterval: {\n    label: 'Repeat interval',\n    description: 'The waiting time to resend an alert after they have successfully been sent.',\n    ariaLabel: 'Repeat interval value',\n  },\n};\n","export type TimingOptions = {\n  group_wait?: string;\n  group_interval?: string;\n  repeat_interval?: string;\n};\n\nexport const TIMING_OPTIONS_DEFAULTS: Required<TimingOptions> = {\n  group_wait: '30s',\n  group_interval: '5m',\n  repeat_interval: '4h',\n};\n","import React from 'react';\n\nimport { AlertState } from 'app/plugins/datasource/alertmanager/types';\n\nimport { State, StateTag } from '../StateTag';\n\nconst alertStateToState: Record<AlertState, State> = {\n  [AlertState.Active]: 'bad',\n  [AlertState.Unprocessed]: 'neutral',\n  [AlertState.Suppressed]: 'info',\n};\n\ninterface Props {\n  state: AlertState;\n}\n\nexport const AmAlertStateTag = ({ state }: Props) => <StateTag state={alertStateToState[state]}>{state}</StateTag>;\n","import { SerializedError } from '@reduxjs/toolkit';\n\nimport { alertmanagerApi } from '../api/alertmanagerApi';\n\ntype Options = {\n  refetchOnFocus: boolean;\n  refetchOnReconnect: boolean;\n};\n\n// TODO refactor this so we can just call \"alertmanagerApi.endpoints.getAlertmanagerConfiguration\" everywhere\n// and remove this hook since it adds little value\nexport function useAlertmanagerConfig(amSourceName?: string, options?: Options) {\n  const fetchConfig = alertmanagerApi.endpoints.getAlertmanagerConfiguration.useQuery(amSourceName ?? '', {\n    ...options,\n    skip: !amSourceName,\n  });\n\n  return {\n    ...fetchConfig,\n    // TODO refactor to get rid of this type assertion\n    error: fetchConfig.error as SerializedError,\n  };\n}\n","import { useMemo } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\n\nimport { useAlertmanager } from '../state/AlertmanagerContext';\nimport { timeIntervalToString } from '../utils/alertmanager';\n\nimport { useAlertmanagerConfig } from './useAlertmanagerConfig';\n\nexport function useMuteTimingOptions(): Array<SelectableValue<string>> {\n  const { selectedAlertmanager } = useAlertmanager();\n  const { currentData } = useAlertmanagerConfig(selectedAlertmanager);\n  const config = currentData?.alertmanager_config;\n\n  return useMemo(() => {\n    const muteTimingsOptions: Array<SelectableValue<string>> =\n      config?.mute_time_intervals?.map((value) => ({\n        value: value.name,\n        label: value.name,\n        description: value.time_intervals.map((interval) => timeIntervalToString(interval)).join(', AND '),\n      })) ?? [];\n\n    return muteTimingsOptions;\n  }, [config]);\n}\n","import { CorsWorker as Worker } from 'app/core/utils/CorsWorker';\n\n// CorsWorker is needed as a workaround for CORS issue caused\n// by static assets served from an url different from origin\nexport const createWorker = () => new Worker(new URL('./routeGroupsMatcher.worker.ts', import.meta.url));\n","import * as comlink from 'comlink';\nimport { useCallback, useEffect } from 'react';\n\nimport { logError } from '@grafana/runtime';\n\nimport { AlertmanagerGroup, RouteWithID } from '../../../plugins/datasource/alertmanager/types';\nimport { Labels } from '../../../types/unified-alerting-dto';\n\nimport { logInfo } from './Analytics';\nimport { createWorker } from './createRouteGroupsMatcherWorker';\nimport type { RouteGroupsMatcher } from './routeGroupsMatcher';\n\nlet routeMatcher: comlink.Remote<RouteGroupsMatcher> | undefined;\n\n// Load worker loads the worker if it's not loaded yet\n// and returns a function to dispose of the worker\n// We do it to enable feature toggling. If the feature is disabled we don't wont to load the worker code at all\n// An alternative way would be to move all this code to the hook below, but it will create and terminate the worker much more often\nfunction loadWorker() {\n  let worker: Worker | undefined;\n\n  if (routeMatcher === undefined) {\n    try {\n      worker = createWorker();\n      routeMatcher = comlink.wrap<RouteGroupsMatcher>(worker);\n    } catch (e: unknown) {\n      if (e instanceof Error) {\n        logError(e);\n      }\n    }\n  }\n\n  const disposeWorker = () => {\n    if (worker && routeMatcher) {\n      routeMatcher[comlink.releaseProxy]();\n      worker.terminate();\n\n      routeMatcher = undefined;\n      worker = undefined;\n    }\n  };\n\n  return { disposeWorker };\n}\n\nfunction validateWorker(matcher: typeof routeMatcher): asserts matcher is comlink.Remote<RouteGroupsMatcher> {\n  if (!routeMatcher) {\n    throw new Error('Route Matcher has not been initialized');\n  }\n}\n\nexport function useRouteGroupsMatcher() {\n  useEffect(() => {\n    const { disposeWorker } = loadWorker();\n    return disposeWorker;\n\n    return () => null;\n  }, []);\n\n  const getRouteGroupsMap = useCallback(async (rootRoute: RouteWithID, alertGroups: AlertmanagerGroup[]) => {\n    validateWorker(routeMatcher);\n\n    const startTime = performance.now();\n\n    const result = await routeMatcher.getRouteGroupsMap(rootRoute, alertGroups);\n\n    const timeSpent = performance.now() - startTime;\n\n    logInfo(`Route Groups Matched in  ${timeSpent} ms`, {\n      matchingTime: timeSpent.toString(),\n      alertGroupsCount: alertGroups.length.toString(),\n      // Counting all nested routes might be too time-consuming, so we only count the first level\n      topLevelRoutesCount: rootRoute.routes?.length.toString() ?? '0',\n    });\n\n    return result;\n  }, []);\n\n  const matchInstancesToRoute = useCallback(async (rootRoute: RouteWithID, instancesToMatch: Labels[]) => {\n    validateWorker(routeMatcher);\n\n    const startTime = performance.now();\n\n    const result = await routeMatcher.matchInstancesToRoute(rootRoute, instancesToMatch);\n\n    const timeSpent = performance.now() - startTime;\n\n    logInfo(`Instances Matched in  ${timeSpent} ms`, {\n      matchingTime: timeSpent.toString(),\n      instancesToMatchCount: instancesToMatch.length.toString(),\n      // Counting all nested routes might be too time-consuming, so we only count the first level\n      topLevelRoutesCount: rootRoute.routes?.length.toString() ?? '0',\n    });\n\n    return result;\n  }, []);\n\n  return { getRouteGroupsMap, matchInstancesToRoute };\n}\n","import { uniqueId } from 'lodash';\n\nimport { SelectableValue } from '@grafana/data';\nimport { MatcherOperator, ObjectMatcher, Route, RouteWithID } from 'app/plugins/datasource/alertmanager/types';\n\nimport { FormAmRoute } from '../types/amroutes';\nimport { MatcherFieldValue } from '../types/silence-form';\n\nimport { matcherToMatcherField } from './alertmanager';\nimport { GRAFANA_RULES_SOURCE_NAME } from './datasource';\nimport { normalizeMatchers, parseMatcher } from './matchers';\nimport { findExistingRoute } from './routeTree';\nimport { isValidPrometheusDuration, safeParseDurationstr } from './time';\n\nconst matchersToArrayFieldMatchers = (\n  matchers: Record<string, string> | undefined,\n  isRegex: boolean\n): MatcherFieldValue[] =>\n  Object.entries(matchers ?? {}).reduce<MatcherFieldValue[]>(\n    (acc, [name, value]) => [\n      ...acc,\n      {\n        name,\n        value,\n        operator: isRegex ? MatcherOperator.regex : MatcherOperator.equal,\n      },\n    ],\n    []\n  );\n\nconst selectableValueToString = (selectableValue: SelectableValue<string>): string => selectableValue.value!;\n\nconst selectableValuesToStrings = (arr: Array<SelectableValue<string>> | undefined): string[] =>\n  (arr ?? []).map(selectableValueToString);\n\nexport const emptyArrayFieldMatcher: MatcherFieldValue = {\n  name: '',\n  value: '',\n  operator: MatcherOperator.equal,\n};\n\n// Default route group_by labels for newly created routes.\nexport const defaultGroupBy = ['grafana_folder', 'alertname'];\n\n// Common route group_by options for multiselect drop-down\nexport const commonGroupByOptions = [\n  { label: 'grafana_folder', value: 'grafana_folder' },\n  { label: 'alertname', value: 'alertname' },\n  { label: 'Disable (...)', value: '...' },\n];\n\nexport const emptyRoute: FormAmRoute = {\n  id: '',\n  overrideGrouping: false,\n  groupBy: defaultGroupBy,\n  object_matchers: [],\n  routes: [],\n  continue: false,\n  receiver: '',\n  overrideTimings: false,\n  groupWaitValue: '',\n  groupIntervalValue: '',\n  repeatIntervalValue: '',\n  muteTimeIntervals: [],\n};\n\n// add unique identifiers to each route in the route tree, that way we can figure out what route we've edited / deleted\nexport function addUniqueIdentifierToRoute(route: Route): RouteWithID {\n  return {\n    id: uniqueId('route-'),\n    ...route,\n    routes: (route.routes ?? []).map(addUniqueIdentifierToRoute),\n  };\n}\n\n//returns route, and a record mapping id to existing route\nexport const amRouteToFormAmRoute = (route: RouteWithID | Route | undefined): FormAmRoute => {\n  if (!route) {\n    return emptyRoute;\n  }\n\n  const id = 'id' in route ? route.id : uniqueId('route-');\n\n  if (Object.keys(route).length === 0) {\n    const formAmRoute = { ...emptyRoute, id };\n    return formAmRoute;\n  }\n\n  const formRoutes: FormAmRoute[] = [];\n  route.routes?.forEach((subRoute) => {\n    const subFormRoute = amRouteToFormAmRoute(subRoute);\n    formRoutes.push(subFormRoute);\n  });\n\n  const objectMatchers =\n    route.object_matchers?.map((matcher) => ({ name: matcher[0], operator: matcher[1], value: matcher[2] })) ?? [];\n  const matchers = route.matchers?.map((matcher) => matcherToMatcherField(parseMatcher(matcher))) ?? [];\n\n  return {\n    id,\n    // Frontend migration to use object_matchers instead of matchers, match, and match_re\n    object_matchers: [\n      ...matchers,\n      ...objectMatchers,\n      ...matchersToArrayFieldMatchers(route.match, false),\n      ...matchersToArrayFieldMatchers(route.match_re, true),\n    ],\n    continue: route.continue ?? false,\n    receiver: route.receiver ?? '',\n    overrideGrouping: Array.isArray(route.group_by) && route.group_by.length > 0,\n    groupBy: route.group_by ?? undefined,\n    overrideTimings: [route.group_wait, route.group_interval, route.repeat_interval].some(Boolean),\n    groupWaitValue: route.group_wait ?? '',\n    groupIntervalValue: route.group_interval ?? '',\n    repeatIntervalValue: route.repeat_interval ?? '',\n    routes: formRoutes,\n    muteTimeIntervals: route.mute_time_intervals ?? [],\n  };\n};\n\n// convert a FormAmRoute to a Route\nexport const formAmRouteToAmRoute = (\n  alertManagerSourceName: string,\n  formAmRoute: Partial<FormAmRoute>,\n  routeTree: RouteWithID\n): Route => {\n  const existing = findExistingRoute(formAmRoute.id ?? '', routeTree);\n\n  const {\n    overrideGrouping,\n    groupBy,\n    overrideTimings,\n    groupWaitValue,\n    groupIntervalValue,\n    repeatIntervalValue,\n    receiver,\n  } = formAmRoute;\n\n  // \"undefined\" means \"inherit from the parent policy\", currently supported by group_by, group_wait, group_interval, and repeat_interval\n  const INHERIT_FROM_PARENT = undefined;\n\n  const group_by = overrideGrouping ? groupBy : INHERIT_FROM_PARENT;\n\n  const overrideGroupWait = overrideTimings && groupWaitValue;\n  const group_wait = overrideGroupWait ? groupWaitValue : INHERIT_FROM_PARENT;\n\n  const overrideGroupInterval = overrideTimings && groupIntervalValue;\n  const group_interval = overrideGroupInterval ? groupIntervalValue : INHERIT_FROM_PARENT;\n\n  const overrideRepeatInterval = overrideTimings && repeatIntervalValue;\n  const repeat_interval = overrideRepeatInterval ? repeatIntervalValue : INHERIT_FROM_PARENT;\n  const object_matchers: ObjectMatcher[] | undefined = formAmRoute.object_matchers\n    ?.filter((route) => route.name && route.value && route.operator)\n    .map(({ name, operator, value }) => [name, operator, value]);\n\n  const routes = formAmRoute.routes?.map((subRoute) =>\n    formAmRouteToAmRoute(alertManagerSourceName, subRoute, routeTree)\n  );\n\n  const amRoute: Route = {\n    ...(existing ?? {}),\n    continue: formAmRoute.continue,\n    group_by: group_by,\n    object_matchers: object_matchers,\n    match: undefined, // DEPRECATED: Use matchers\n    match_re: undefined, // DEPRECATED: Use matchers\n    group_wait,\n    group_interval,\n    repeat_interval,\n    routes: routes,\n    mute_time_intervals: formAmRoute.muteTimeIntervals,\n    receiver: receiver,\n  };\n\n  // non-Grafana managed rules should use \"matchers\", Grafana-managed rules should use \"object_matchers\"\n  // Grafana maintains a fork of AM to support all utf-8 characters in the \"object_matchers\" property values but this\n  // does not exist in upstream AlertManager\n  if (alertManagerSourceName !== GRAFANA_RULES_SOURCE_NAME) {\n    amRoute.matchers = formAmRoute.object_matchers?.map(({ name, operator, value }) => `${name}${operator}${value}`);\n    amRoute.object_matchers = undefined;\n  } else {\n    amRoute.object_matchers = normalizeMatchers(amRoute);\n    amRoute.matchers = undefined;\n  }\n\n  if (formAmRoute.receiver) {\n    amRoute.receiver = formAmRoute.receiver;\n  }\n\n  return amRoute;\n};\n\nexport const stringToSelectableValue = (str: string): SelectableValue<string> => ({\n  label: str,\n  value: str,\n});\n\nexport const stringsToSelectableValues = (arr: string[] | undefined): Array<SelectableValue<string>> =>\n  (arr ?? []).map(stringToSelectableValue);\n\nexport const mapSelectValueToString = (selectableValue: SelectableValue<string>): string | undefined => {\n  // this allows us to deal with cleared values\n  if (selectableValue === null) {\n    return undefined;\n  }\n\n  if (!selectableValue) {\n    return '';\n  }\n\n  return selectableValueToString(selectableValue) ?? '';\n};\n\nexport const mapMultiSelectValueToStrings = (\n  selectableValues: Array<SelectableValue<string>> | undefined\n): string[] => {\n  if (!selectableValues) {\n    return [];\n  }\n\n  return selectableValuesToStrings(selectableValues);\n};\n\nexport function promDurationValidator(duration?: string) {\n  if (!duration || duration.length === 0) {\n    return true;\n  }\n\n  return isValidPrometheusDuration(duration) || 'Invalid duration format. Must be {number}{time_unit}';\n}\n\n// function to convert ObjectMatchers to a array of strings\nexport const objectMatchersToString = (matchers: ObjectMatcher[]): string[] => {\n  return matchers.map((matcher) => {\n    const [name, operator, value] = matcher;\n    return `${name}${operator}${value}`;\n  });\n};\n\nexport const repeatIntervalValidator = (repeatInterval: string, groupInterval = '') => {\n  if (repeatInterval.length === 0) {\n    return true;\n  }\n\n  const validRepeatInterval = promDurationValidator(repeatInterval);\n  const validGroupInterval = promDurationValidator(groupInterval);\n\n  if (validRepeatInterval !== true) {\n    return validRepeatInterval;\n  }\n\n  if (validGroupInterval !== true) {\n    return validGroupInterval;\n  }\n\n  const repeatDuration = safeParseDurationstr(repeatInterval);\n  const groupDuration = safeParseDurationstr(groupInterval);\n\n  const isRepeatLowerThanGroupDuration = groupDuration !== 0 && repeatDuration < groupDuration;\n\n  return isRepeatLowerThanGroupDuration ? 'Repeat interval should be higher or equal to Group interval' : true;\n};\n","/**\n * Various helper functions to modify (immutably) the route tree, aka \"notification policies\"\n */\n\nimport { omit } from 'lodash';\n\nimport { Route, RouteWithID } from 'app/plugins/datasource/alertmanager/types';\n\nimport { FormAmRoute } from '../types/amroutes';\n\nimport { formAmRouteToAmRoute } from './amroutes';\n\n// add a form submission to the route tree\nexport const mergePartialAmRouteWithRouteTree = (\n  alertManagerSourceName: string,\n  partialFormRoute: Partial<FormAmRoute>,\n  routeTree: RouteWithID\n): Route => {\n  const existing = findExistingRoute(partialFormRoute.id ?? '', routeTree);\n  if (!existing) {\n    throw new Error(`No such route with ID '${partialFormRoute.id}'`);\n  }\n\n  function findAndReplace(currentRoute: RouteWithID): Route {\n    let updatedRoute: Route = currentRoute;\n\n    if (currentRoute.id === partialFormRoute.id) {\n      const newRoute = formAmRouteToAmRoute(alertManagerSourceName, partialFormRoute, routeTree);\n      updatedRoute = omit(\n        {\n          ...currentRoute,\n          ...newRoute,\n        },\n        'id'\n      );\n    }\n\n    return omit(\n      {\n        ...updatedRoute,\n        routes: currentRoute.routes?.map(findAndReplace),\n      },\n      'id'\n    );\n  }\n\n  return findAndReplace(routeTree);\n};\n\n// remove a route from the policy tree, returns a new tree\n// make sure to omit the \"id\" because Prometheus / Loki / Mimir will reject the payload\nexport const omitRouteFromRouteTree = (findRoute: RouteWithID, routeTree: RouteWithID): Route => {\n  if (findRoute.id === routeTree.id) {\n    throw new Error('You cant remove the root policy');\n  }\n\n  function findAndOmit(currentRoute: RouteWithID): Route {\n    return omit(\n      {\n        ...currentRoute,\n        routes: currentRoute.routes?.reduce((acc: Route[] = [], route) => {\n          if (route.id === findRoute.id) {\n            return acc;\n          }\n\n          acc.push(findAndOmit(route));\n          return acc;\n        }, []),\n      },\n      'id'\n    );\n  }\n\n  return findAndOmit(routeTree);\n};\n\n// add a new route to a parent route\nexport const addRouteToParentRoute = (\n  alertManagerSourceName: string,\n  partialFormRoute: Partial<FormAmRoute>,\n  parentRoute: RouteWithID,\n  routeTree: RouteWithID\n): Route => {\n  const newRoute = formAmRouteToAmRoute(alertManagerSourceName, partialFormRoute, routeTree);\n\n  function findAndAdd(currentRoute: RouteWithID): RouteWithID {\n    if (currentRoute.id === parentRoute.id) {\n      return {\n        ...currentRoute,\n        // TODO fix this typescript exception, it's... complicated\n        // @ts-ignore\n        routes: currentRoute.routes?.concat(newRoute),\n      };\n    }\n\n    return {\n      ...currentRoute,\n      routes: currentRoute.routes?.map(findAndAdd),\n    };\n  }\n\n  function findAndOmitId(currentRoute: RouteWithID): Route {\n    return omit(\n      {\n        ...currentRoute,\n        routes: currentRoute.routes?.map(findAndOmitId),\n      },\n      'id'\n    );\n  }\n\n  return findAndOmitId(findAndAdd(routeTree));\n};\n\nexport function findExistingRoute(id: string, routeTree: RouteWithID): RouteWithID | undefined {\n  return routeTree.id === id ? routeTree : routeTree.routes?.find((route) => findExistingRoute(id, route));\n}\n"],"names":["useCleanup","cleanupAction","dispatch","selectorRef","receiversApi","alertingApi","build","amSourceName","error","useGetContactPointsState","alertManagerSourceName","contactPointsStateEmpty","contactPointsState","EmptyAreaWithCTA","buttonIcon","buttonLabel","buttonSize","buttonVariant","onButtonClick","text","href","showButton","styles","getStyles","commonProps","EmptyArea","Button","theme","GrafanaMuteTimingsExporterPreview","exportFormat","onClose","muteTimingsDefinition","isFetching","alertRuleApi","downloadFileName","LoadingPlaceholder","FileExportPreview","GrafanaMuteTimingExporterPreview","muteTimingName","GrafanaMuteTimingsExporter","activeTab","setActiveTab","GrafanaExportDrawer","ALL_MUTE_TIMINGS","useExportMuteTiming","setMuteTimingName","isExportDrawerOpen","toggleShowExportDrawer","useToggle","handleClose","handleOpen","receiverName","MuteTimingsTable","muteTimingNames","hideActions","currentData","useAlertmanagerConfig","config","items","muteTimings","muteTimingsProvenances","name","mute","_","allowedToCreateMuteTiming","ExportDrawer","showExportDrawer","exportMuteTimingsSupported","exportMuteTimingsAllowed","columns","useColumns","Stack","Spacer","Authorize","DynamicTable","ConfirmModal","openExportDrawer","_editSupported","allowedToEdit","_deleteSupported","allowedToDelete","showActions","exportSupported","exportAllowed","data","Provisioning","Link","IconButton","Menu","NotificationPoliciesFilter","receivers","onChangeReceiver","onChangeMatchers","searchParams","setSearchParams","useURLSearchParams","searchInputRef","queryString","contactPoint","getNotificationPoliciesFilters","handleChangeLabels","matchers","clearFilters","receiverOptions","toOption","selectedContactPoint","option","hasFilters","inputInvalid","Field","Label","Tooltip","Icon","Input","event","Select","findRoutesMatchingPredicate","routeTree","predicateFn","matches","findMatch","route","receiver","useGetGrafanaReceiverTypeChecker","isOnCallEnabled","usePluginBridge","onCallApi","onCallIntegrations","useGetAmRouteReceiverWithGrafanaAppTypes","getGrafanaReceiverType","receiverToSelectableContactPointValue","AlertGroupsSummary","active","suppressed","unprocessed","statsComponents","total","Badge","AmRootRouteForm","actionButtons","onSubmit","isTimingOptionsExpanded","setIsTimingOptionsExpanded","groupByOptions","setGroupByOptions","defaultValues","Form","register","control","errors","setValue","getValues","InputControl","onChange","ref","field","value","opt","opts","Collapse","PromDurationInput","groupInterval","AmRoutesExpandedForm","defaults","formStyles","muteTimingOptions","useMuteTimingOptions","emptyMatcher","receiversWithOnCallOnTop","onCallFirst","formAmRoute","watch","FieldArray","fields","append","remove","index","Switch","FieldValidationMessage","routeTimingsFields","commonSpacing","useAddPolicyModal","handleAdd","loading","showModal","setShowModal","parentRoute","setParentRoute","AmRouteReceivers","handleDismiss","handleShow","UpdatingModal","Modal","newRoute","useEditPolicyModal","handleSave","isDefaultPolicy","setIsDefaultPolicy","setRoute","useDeletePolicyModal","handleDelete","handleSubmit","useAlertGroupsModal","alertGroups","setAlertGroups","setMatchers","instancesByState","instances","group","instance","Matchers","AlertGroup","isOpen","Spinner","GrafanaPoliciesExporterPreview","policiesDefinition","GrafanaPoliciesExporter","Policy","readOnly","provisioned","currentRoute","inheritedProperties","routesMatchingFilters","matchingInstancesPreview","onEditPolicy","onAddPolicy","onDeletePolicy","onShowAlertInstances","updatePoliciesSupported","updatePoliciesAllowed","deletePolicySupported","deletePolicyAllowed","exportPoliciesSupported","exportPoliciesAllowed","continueMatching","groupBy","timingOptions","hasMatchers","hasMuteTimings","hasFocus","showMatchesAllLabelsWarning","actualContactPoint","getContactPointErrors","hasInheritedProperties","childPolicies","inheritedGrouping","noGrouping","customGrouping","singleGroup","matchingAlertGroups","numberOfAlertInstances","showExportAction","showEditAction","showDeleteAction","dropdownMenuActions","ConditionalWrap","ProvisionedTooltip","ContinueMatchingIndicator","AllMatchesIndicator","DefaultPolicyIndicator","Errors","Dropdown","MetaText","Strong","ContactPointsHoverDetails","MuteTimings","TimingOptionsMeta","InheritedProperties","child","childInheritedProperties","children","HoverCard","properties","key","routePropertyToLabel","routePropertyToValue","timings","timing","groupWait","details","groupedIntegrations","type","integrations","acc","notifierStatuses","notifierErrors","status","isNotGrouping","isSingleGroup","Text","label","color","borderColor","ActiveTab","AmRoutes","useGetAlertmanagerAlertGroupsQuery","alertmanagerApi","queryParams","setQueryParams","useQueryParams","tab","getActiveTabFromUrl","updatingTree","setUpdatingTree","contactPointFilter","setContactPointFilter","labelMatchersFilter","setLabelMatchersFilter","getRouteGroupsMap","useRouteGroupsMatcher","selectedAlertmanager","hasConfigurationAPI","result","resultLoading","resultError","refetchAlertGroups","rootRoute","routeAlertGroupsMap","instancesPreviewError","triggerGetRouteGroupsMap","useAsyncFn","findRoutesMatchingFilters","isProvisioned","partialRoute","newRouteTree","updateRouteTree","closeEditModal","closeAddModal","closeDeleteModal","addModal","openAddModal","editModal","openEditModal","deleteModal","openDeleteModal","alertInstancesModal","showAlertGroupsModal","state","numberOfMuteTimings","haveData","haveError","muteTimingsTabActive","policyTreeTabActive","TabsBar","Tab","TabContent","Alert","GrafanaAlertmanagerDeliveryWarning","filters","matchedRoutes","fullRoute","routesMatchingContactPoint","routesMatchingLabelMatchers","routeMatchers","filter","matcher","NotificationPoliciesPage","CollapsibleAlert","localStoreKey","startClosed","severity","collapseText","collapseTooltip","collapseJustify","alertTitle","closed","setClosed","useLocalStorage","LOCAL_STORAGE_KEY","UAPreviewNotice","TextLink","getAlertManagerLabel","alertManager","AlertManagerPicker","disabled","availableAlertManagers","setSelectedAlertmanager","options","ds","InlineField","o","NoAlertManagersAvailable","OtherAlertManagersAvailable","NoAlertManagerWarning","hasOtherAMs","AlertingPageWrapper","isLoading","rest","Page","AlertmanagerPageWrapper","accessType","props","disableAlertmanager","useIsDisabledAlertmanagerSelection","AlertManagerPagePermissionsCheck","location","useLocation","match","DynamicTableWithGuidelines","renderExpandedContent","item","AlertDetails","alert","isSeeSourceButtonEnabled","annotationKey","annotationValue","AnnotationDetailsField","AlertGroupAlertsTable","alerts","AmAlertStateTag","labels","AlertLabels","isCollapsed","setIsCollapsed","receiverInGroup","CollapseToggle","AlertGroupHeader","TIME_RANGE_REGEX","isvalidTimeFormat","timeString","isValidStartAndEndTime","startTime","endTime","timeUnit","startDate","endDate","renderTimeIntervals","muteTiming","interval","times","weekdays","days_of_month","months","years","weekdayString","daysString","monthsString","yearsString","NUM_MATCHERS","firstFew","hasMoreMatchers","MatcherBadge","operator","PromDurationDocs","getPromDurationStyles","PromDurationDocsTimeUnit","unit","example","getFormStyles","TIMING_OPTIONS_DEFAULTS","alertStateToState","fetchConfig","createWorker","routeMatcher","loadWorker","worker","comlink","e","validateWorker","disposeWorker","timeSpent","matchInstancesToRoute","instancesToMatch","matchersToArrayFieldMatchers","isRegex","selectableValueToString","selectableValue","selectableValuesToStrings","arr","emptyArrayFieldMatcher","defaultGroupBy","commonGroupByOptions","emptyRoute","addUniqueIdentifierToRoute","amRouteToFormAmRoute","id","formRoutes","subRoute","subFormRoute","objectMatchers","formAmRouteToAmRoute","existing","overrideGrouping","overrideTimings","groupWaitValue","groupIntervalValue","repeatIntervalValue","INHERIT_FROM_PARENT","group_by","group_wait","group_interval","repeat_interval","object_matchers","routes","amRoute","stringToSelectableValue","str","stringsToSelectableValues","mapSelectValueToString","mapMultiSelectValueToStrings","selectableValues","promDurationValidator","duration","objectMatchersToString","repeatIntervalValidator","repeatInterval","validRepeatInterval","validGroupInterval","repeatDuration","groupDuration","mergePartialAmRouteWithRouteTree","partialFormRoute","findExistingRoute","findAndReplace","updatedRoute","omitRouteFromRouteTree","findRoute","findAndOmit","addRouteToParentRoute","findAndAdd","findAndOmitId"],"sourceRoot":""}