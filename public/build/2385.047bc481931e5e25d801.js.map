{"version":3,"file":"2385.047bc481931e5e25d801.js","mappings":"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","sources":["webpack://grafana/./public/app/features/alerting/unified/components/rule-viewer/RuleViewerVisualization.tsx","webpack://grafana/./public/app/features/alerting/unified/GrafanaRuleQueryViewer.tsx","webpack://grafana/./public/app/features/alerting/unified/utils/query.ts","webpack://grafana/./public/app/features/alerting/unified/components/rule-viewer/tabs/Query.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport React, { useCallback } from 'react';\n\nimport {\n  DataSourceInstanceSettings,\n  DataSourceJsonData,\n  DateTime,\n  dateTime,\n  GrafanaTheme2,\n  PanelData,\n  RelativeTimeRange,\n  urlUtil,\n} from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport { DataSourceRef } from '@grafana/schema';\nimport { DateTimePicker, LinkButton, useStyles2 } from '@grafana/ui';\nimport { contextSrv } from 'app/core/core';\nimport { isExpressionQuery } from 'app/features/expressions/guards';\nimport { AlertDataQuery, AlertQuery } from 'app/types/unified-alerting-dto';\n\nimport { VizWrapper } from '../rule-editor/VizWrapper';\nimport { ThresholdDefinition } from '../rule-editor/util';\n\ninterface RuleViewerVisualizationProps extends Pick<AlertQuery, 'refId' | 'model' | 'relativeTimeRange'> {\n  dsSettings: DataSourceInstanceSettings<DataSourceJsonData>;\n  data?: PanelData;\n  thresholds?: ThresholdDefinition;\n  onTimeRangeChange: (range: RelativeTimeRange) => void;\n  className?: string;\n}\n\nconst headerHeight = 4;\n\nexport function RuleViewerVisualization({\n  data,\n  model,\n  thresholds,\n  dsSettings,\n  relativeTimeRange,\n  onTimeRangeChange,\n  className,\n}: RuleViewerVisualizationProps): JSX.Element | null {\n  const styles = useStyles2(getStyles);\n  const isExpression = isExpressionQuery(model);\n\n  const onTimeChange = useCallback(\n    (newDateTime: DateTime) => {\n      const now = dateTime().unix() - newDateTime.unix();\n\n      if (relativeTimeRange) {\n        const interval = relativeTimeRange.from - relativeTimeRange.to;\n        onTimeRangeChange({ from: now + interval, to: now });\n      }\n    },\n    [onTimeRangeChange, relativeTimeRange]\n  );\n\n  const setDateTime = useCallback((relativeTimeRangeTo: number) => {\n    return relativeTimeRangeTo === 0 ? dateTime() : dateTime().subtract(relativeTimeRangeTo, 'seconds');\n  }, []);\n\n  if (!data) {\n    return null;\n  }\n\n  const allowedToExploreDataSources = contextSrv.hasAccessToExplore();\n\n  return (\n    <div className={className}>\n      <div className={styles.header}>\n        <div className={styles.actions}>\n          {!isExpression && relativeTimeRange ? (\n            <DateTimePicker date={setDateTime(relativeTimeRange.to)} onChange={onTimeChange} maxDate={new Date()} />\n          ) : null}\n\n          {allowedToExploreDataSources && !isExpression && (\n            <LinkButton\n              size=\"md\"\n              variant=\"secondary\"\n              icon=\"compass\"\n              target=\"_blank\"\n              href={createExploreLink(dsSettings, model)}\n            >\n              View in Explore\n            </LinkButton>\n          )}\n        </div>\n      </div>\n      <VizWrapper data={data} thresholds={thresholds?.config} thresholdsType={thresholds?.mode} />\n    </div>\n  );\n}\n\nfunction createExploreLink(settings: DataSourceRef, model: AlertDataQuery): string {\n  const { uid, type } = settings;\n  const { refId, ...rest } = model;\n\n  /*\n    In my testing I've found some alerts that don't have a data source embedded inside the model.\n    At this moment in time it is unclear to me why some alert definitions not have a data source embedded in the model.\n\n    I don't think that should happen here, the fact that the datasource ref is sometimes missing here is a symptom of another cause. (Gilles)\n   */\n  return urlUtil.renderUrl(`${config.appSubUrl}/explore`, {\n    left: JSON.stringify({\n      datasource: settings.uid,\n      queries: [{ refId: 'A', ...rest, datasource: { type, uid } }],\n      range: { from: 'now-1h', to: 'now' },\n    }),\n  });\n}\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    header: css`\n      height: ${theme.spacing(headerHeight)};\n      display: flex;\n      align-items: center;\n      justify-content: flex-end;\n      white-space: nowrap;\n      margin-bottom: ${theme.spacing(2)};\n    `,\n    refId: css`\n      font-weight: ${theme.typography.fontWeightMedium};\n      color: ${theme.colors.text.link};\n      overflow: hidden;\n    `,\n    dataSource: css`\n      margin-left: ${theme.spacing(1)};\n      font-style: italic;\n      color: ${theme.colors.text.secondary};\n    `,\n    actions: css`\n      display: flex;\n      align-items: center;\n    `,\n    errorMessage: css`\n      white-space: pre-wrap;\n    `,\n  };\n};\n","import { css, cx } from '@emotion/css';\nimport { dump } from 'js-yaml';\nimport { keyBy, startCase } from 'lodash';\nimport React from 'react';\n\nimport { DataSourceInstanceSettings, GrafanaTheme2, PanelData, RelativeTimeRange } from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport { Badge, Stack, useStyles2 } from '@grafana/ui';\nimport { mapRelativeTimeRangeToOption } from '@grafana/ui/src/components/DateTimePickers/RelativeTimeRangePicker/utils';\n\nimport { AlertQuery } from '../../../types/unified-alerting-dto';\nimport { isExpressionQuery } from '../../expressions/guards';\nimport {\n  downsamplingTypes,\n  ExpressionQuery,\n  ExpressionQueryType,\n  ReducerMode,\n  reducerModes,\n  reducerTypes,\n  thresholdFunctions,\n  upsamplingTypes,\n} from '../../expressions/types';\nimport alertDef, { EvalFunction } from '../state/alertDef';\n\nimport { ExpressionResult } from './components/expressions/Expression';\nimport { getThresholdsForQueries, ThresholdDefinition } from './components/rule-editor/util';\nimport { RuleViewerVisualization } from './components/rule-viewer/RuleViewerVisualization';\n\ninterface GrafanaRuleViewerProps {\n  queries: AlertQuery[];\n  condition: string;\n  evalDataByQuery?: Record<string, PanelData>;\n  evalTimeRanges?: Record<string, RelativeTimeRange>;\n  onTimeRangeChange: (queryRef: string, timeRange: RelativeTimeRange) => void;\n}\n\nexport function GrafanaRuleQueryViewer({\n  queries,\n  condition,\n  evalDataByQuery = {},\n  evalTimeRanges = {},\n  onTimeRangeChange,\n}: GrafanaRuleViewerProps) {\n  const dsByUid = keyBy(Object.values(config.datasources), (ds) => ds.uid);\n  const dataQueries = queries.filter((q) => !isExpressionQuery(q.model));\n  const expressions = queries.filter((q) => isExpressionQuery(q.model));\n  const styles = useStyles2(getExpressionViewerStyles);\n\n  const thresholds = getThresholdsForQueries(queries);\n\n  return (\n    <Stack gap={2} direction=\"column\">\n      <div className={styles.maxWidthContainer}>\n        <Stack gap={2} wrap=\"wrap\" data-testid=\"queries-container\">\n          {dataQueries.map(({ model, relativeTimeRange, refId, datasourceUid }, index) => {\n            const dataSource = dsByUid[datasourceUid];\n\n            return (\n              <QueryPreview\n                key={index}\n                refId={refId}\n                isAlertCondition={condition === refId}\n                model={model}\n                relativeTimeRange={relativeTimeRange}\n                evalTimeRange={evalTimeRanges[refId]}\n                dataSource={dataSource}\n                thresholds={thresholds[refId]}\n                queryData={evalDataByQuery[refId]}\n                onEvalTimeRangeChange={(timeRange) => onTimeRangeChange(refId, timeRange)}\n              />\n            );\n          })}\n        </Stack>\n      </div>\n      <div className={styles.maxWidthContainer}>\n        <Stack gap={1} wrap=\"wrap\" data-testid=\"expressions-container\">\n          {expressions.map(({ model, refId, datasourceUid }, index) => {\n            const dataSource = dsByUid[datasourceUid];\n\n            return (\n              isExpressionQuery(model) && (\n                <ExpressionPreview\n                  key={index}\n                  refId={refId}\n                  isAlertCondition={condition === refId}\n                  model={model}\n                  dataSource={dataSource}\n                  evalData={evalDataByQuery[refId]}\n                />\n              )\n            );\n          })}\n        </Stack>\n      </div>\n    </Stack>\n  );\n}\n\ninterface QueryPreviewProps extends Pick<AlertQuery, 'refId' | 'relativeTimeRange' | 'model'> {\n  isAlertCondition: boolean;\n  dataSource?: DataSourceInstanceSettings;\n  queryData?: PanelData;\n  thresholds?: ThresholdDefinition;\n  evalTimeRange?: RelativeTimeRange;\n  onEvalTimeRangeChange: (timeRange: RelativeTimeRange) => void;\n}\n\nexport function QueryPreview({\n  refId,\n  relativeTimeRange,\n  thresholds,\n  model,\n  dataSource,\n  queryData,\n  evalTimeRange,\n  onEvalTimeRangeChange,\n}: QueryPreviewProps) {\n  const styles = useStyles2(getQueryPreviewStyles);\n\n  // relativeTimeRange is what is defined for a query\n  // evalTimeRange is temporary value which the user can change\n  const headerItems = [dataSource?.name ?? '[[Data source not found]]'];\n  if (relativeTimeRange) {\n    headerItems.push(mapRelativeTimeRangeToOption(relativeTimeRange).display);\n  }\n\n  return (\n    <QueryBox refId={refId} headerItems={headerItems} className={styles.contentBox}>\n      <pre className={styles.code}>\n        <code>{dump(model)}</code>\n      </pre>\n      {dataSource && (\n        <RuleViewerVisualization\n          refId={refId}\n          dsSettings={dataSource}\n          model={model}\n          data={queryData}\n          thresholds={thresholds}\n          relativeTimeRange={evalTimeRange}\n          onTimeRangeChange={onEvalTimeRangeChange}\n          className={styles.visualization}\n        />\n      )}\n    </QueryBox>\n  );\n}\n\nconst getQueryPreviewStyles = (theme: GrafanaTheme2) => ({\n  code: css`\n    margin: ${theme.spacing(1)};\n  `,\n  contentBox: css`\n    flex: 1 0 100%;\n  `,\n  visualization: css`\n    padding: ${theme.spacing(1)};\n  `,\n});\n\ninterface ExpressionPreviewProps extends Pick<AlertQuery, 'refId'> {\n  isAlertCondition: boolean;\n  model: ExpressionQuery;\n  dataSource: DataSourceInstanceSettings;\n  evalData?: PanelData;\n}\n\nfunction ExpressionPreview({ refId, model, evalData, isAlertCondition }: ExpressionPreviewProps) {\n  function renderPreview() {\n    switch (model.type) {\n      case ExpressionQueryType.math:\n        return <MathExpressionViewer model={model} />;\n\n      case ExpressionQueryType.reduce:\n        return <ReduceConditionViewer model={model} />;\n\n      case ExpressionQueryType.resample:\n        return <ResampleExpressionViewer model={model} />;\n\n      case ExpressionQueryType.classic:\n        return <ClassicConditionViewer model={model} />;\n\n      case ExpressionQueryType.threshold:\n        return <ThresholdExpressionViewer model={model} />;\n\n      default:\n        return <>Expression not supported: {model.type}</>;\n    }\n  }\n\n  return (\n    <QueryBox refId={refId} headerItems={[startCase(model.type)]} isAlertCondition={isAlertCondition}>\n      {renderPreview()}\n      {evalData && <ExpressionResult series={evalData.series} isAlertCondition={isAlertCondition} />}\n    </QueryBox>\n  );\n}\n\ninterface QueryBoxProps extends React.PropsWithChildren<unknown> {\n  refId: string;\n  headerItems?: string[];\n  isAlertCondition?: boolean;\n  className?: string;\n}\n\nfunction QueryBox({ refId, headerItems = [], children, isAlertCondition, className }: QueryBoxProps) {\n  const styles = useStyles2(getQueryBoxStyles);\n\n  return (\n    <div className={cx(styles.container, className)}>\n      <header className={styles.header}>\n        <span className={styles.refId}>{refId}</span>\n        {headerItems.map((item, index) => (\n          <span key={index} className={styles.textBlock}>\n            {item}\n          </span>\n        ))}\n        {isAlertCondition && (\n          <div className={styles.conditionIndicator}>\n            <Badge color=\"green\" icon=\"check\" text=\"Alert condition\" />\n          </div>\n        )}\n      </header>\n      {children}\n    </div>\n  );\n}\n\nconst getQueryBoxStyles = (theme: GrafanaTheme2) => ({\n  container: css`\n    flex: 1 0 25%;\n    border: 1px solid ${theme.colors.border.strong};\n    max-width: 100%;\n  `,\n  header: css`\n    display: flex;\n    align-items: center;\n    gap: ${theme.spacing(1)};\n    padding: ${theme.spacing(1)};\n    background-color: ${theme.colors.background.secondary};\n  `,\n  textBlock: css`\n    border: 1px solid ${theme.colors.border.weak};\n    padding: ${theme.spacing(0.5, 1)};\n    background-color: ${theme.colors.background.primary};\n  `,\n  refId: css`\n    color: ${theme.colors.text.link};\n    padding: ${theme.spacing(0.5, 1)};\n    border: 1px solid ${theme.colors.border.weak};\n  `,\n  conditionIndicator: css`\n    margin-left: auto;\n  `,\n});\n\nfunction ClassicConditionViewer({ model }: { model: ExpressionQuery }) {\n  const styles = useStyles2(getClassicConditionViewerStyles);\n\n  const reducerFunctions = keyBy(alertDef.reducerTypes, (rt) => rt.value);\n  const evalOperators = keyBy(alertDef.evalOperators, (eo) => eo.value);\n  const evalFunctions = keyBy(alertDef.evalFunctions, (ef) => ef.value);\n\n  return (\n    <div className={styles.container}>\n      {model.conditions?.map(({ query, operator, reducer, evaluator }, index) => {\n        const isRange = isRangeEvaluator(evaluator);\n\n        return (\n          <React.Fragment key={index}>\n            <div className={styles.blue}>\n              {index === 0 ? 'WHEN' : !!operator?.type && evalOperators[operator?.type]?.text}\n            </div>\n            <div className={styles.bold}>{reducer?.type && reducerFunctions[reducer.type]?.text}</div>\n            <div className={styles.blue}>OF</div>\n            <div className={styles.bold}>{query.params[0]}</div>\n            <div className={styles.blue}>{evalFunctions[evaluator.type].text}</div>\n            <div className={styles.bold}>\n              {isRange ? `(${evaluator.params[0]}; ${evaluator.params[1]})` : evaluator.params[0]}\n            </div>\n          </React.Fragment>\n        );\n      })}\n    </div>\n  );\n}\n\nconst getClassicConditionViewerStyles = (theme: GrafanaTheme2) => ({\n  container: css`\n    padding: ${theme.spacing(1)};\n    display: grid;\n    grid-template-columns: max-content max-content max-content max-content max-content max-content;\n    gap: ${theme.spacing(0, 1)};\n  `,\n  ...getCommonQueryStyles(theme),\n});\n\nfunction ReduceConditionViewer({ model }: { model: ExpressionQuery }) {\n  const styles = useStyles2(getReduceConditionViewerStyles);\n\n  const { reducer, expression, settings } = model;\n  const reducerType = reducerTypes.find((rt) => rt.value === reducer);\n\n  const reducerMode = settings?.mode ?? ReducerMode.Strict;\n  const modeName = reducerModes.find((rm) => rm.value === reducerMode);\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.label}>Function</div>\n      <div className={styles.value}>{reducerType?.label}</div>\n\n      <div className={styles.label}>Input</div>\n      <div className={styles.value}>{expression}</div>\n\n      <div className={styles.label}>Mode</div>\n      <div className={styles.value}>{modeName?.label}</div>\n    </div>\n  );\n}\n\nconst getReduceConditionViewerStyles = (theme: GrafanaTheme2) => ({\n  container: css`\n    padding: ${theme.spacing(1)};\n    display: grid;\n    gap: ${theme.spacing(1)};\n    grid-template-rows: 1fr 1fr;\n    grid-template-columns: 1fr 1fr 1fr 1fr;\n\n    > :nth-child(6) {\n      grid-column: span 3;\n    }\n  `,\n  ...getCommonQueryStyles(theme),\n});\n\nfunction ResampleExpressionViewer({ model }: { model: ExpressionQuery }) {\n  const styles = useStyles2(getResampleExpressionViewerStyles);\n\n  const { expression, window, downsampler, upsampler } = model;\n  const downsamplerType = downsamplingTypes.find((dt) => dt.value === downsampler);\n  const upsamplerType = upsamplingTypes.find((ut) => ut.value === upsampler);\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.label}>Input</div>\n      <div className={styles.value}>{expression}</div>\n\n      <div className={styles.label}>Resample to</div>\n      <div className={styles.value}>{window}</div>\n\n      <div className={styles.label}>Downsample</div>\n      <div className={styles.value}>{downsamplerType?.label}</div>\n\n      <div className={styles.label}>Upsample</div>\n      <div className={styles.value}>{upsamplerType?.label}</div>\n    </div>\n  );\n}\n\nconst getResampleExpressionViewerStyles = (theme: GrafanaTheme2) => ({\n  container: css`\n    padding: ${theme.spacing(1)};\n    display: grid;\n    gap: ${theme.spacing(1)};\n    grid-template-columns: 1fr 1fr 1fr 1fr;\n    grid-template-rows: 1fr 1fr;\n  `,\n  ...getCommonQueryStyles(theme),\n});\n\nfunction ThresholdExpressionViewer({ model }: { model: ExpressionQuery }) {\n  const styles = useStyles2(getExpressionViewerStyles);\n\n  const { expression, conditions } = model;\n\n  const evaluator = conditions && conditions[0]?.evaluator;\n  const thresholdFunction = thresholdFunctions.find((tf) => tf.value === evaluator?.type);\n\n  const isRange = evaluator ? isRangeEvaluator(evaluator) : false;\n\n  const unloadEvaluator = conditions && conditions[0]?.unloadEvaluator;\n  const unloadThresholdFunction = thresholdFunctions.find((tf) => tf.value === unloadEvaluator?.type);\n\n  const unloadIsRange = unloadEvaluator ? isRangeEvaluator(unloadEvaluator) : false;\n\n  return (\n    <>\n      <div className={styles.container}>\n        <div className={styles.label}>Input</div>\n        <div className={styles.value}>{expression}</div>\n\n        {evaluator && (\n          <>\n            <div className={styles.blue}>{thresholdFunction?.label}</div>\n            <div className={styles.bold}>\n              {isRange ? `(${evaluator.params[0]}; ${evaluator.params[1]})` : evaluator.params[0]}\n            </div>\n          </>\n        )}\n      </div>\n      <div className={styles.container}>\n        {unloadEvaluator && (\n          <>\n            <div className={styles.label}>Stop alerting when </div>\n            <div className={styles.value}>{expression}</div>\n\n            <>\n              <div className={styles.blue}>{unloadThresholdFunction?.label}</div>\n              <div className={styles.bold}>\n                {unloadIsRange\n                  ? `(${unloadEvaluator.params[0]}; ${unloadEvaluator.params[1]})`\n                  : unloadEvaluator.params[0]}\n              </div>\n            </>\n          </>\n        )}\n      </div>\n    </>\n  );\n}\n\nconst getExpressionViewerStyles = (theme: GrafanaTheme2) => {\n  const { blue, bold, ...common } = getCommonQueryStyles(theme);\n\n  return {\n    ...common,\n    maxWidthContainer: css`\n      max-width: 100%;\n    `,\n    container: css`\n      padding: ${theme.spacing(1)};\n      display: flex;\n      gap: ${theme.spacing(1)};\n    `,\n    blue: css`\n      ${blue};\n      margin: auto 0;\n    `,\n    bold: css`\n      ${bold};\n      margin: auto 0;\n    `,\n  };\n};\n\nfunction MathExpressionViewer({ model }: { model: ExpressionQuery }) {\n  const styles = useStyles2(getExpressionViewerStyles);\n\n  const { expression } = model;\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.label}>Input</div>\n      <div className={styles.value}>{expression}</div>\n    </div>\n  );\n}\n\nconst getCommonQueryStyles = (theme: GrafanaTheme2) => ({\n  blue: css`\n    color: ${theme.colors.text.link};\n  `,\n  bold: css`\n    font-weight: ${theme.typography.fontWeightBold};\n  `,\n  label: css`\n    display: flex;\n    align-items: center;\n    padding: ${theme.spacing(0.5, 1)};\n    background-color: ${theme.colors.background.secondary};\n    font-size: ${theme.typography.bodySmall.fontSize};\n    line-height: ${theme.typography.bodySmall.lineHeight};\n    font-weight: ${theme.typography.fontWeightBold};\n  `,\n  value: css`\n    padding: ${theme.spacing(0.5, 1)};\n    border: 1px solid ${theme.colors.border.weak};\n  `,\n});\n\nfunction isRangeEvaluator(evaluator: { params: number[]; type: EvalFunction }) {\n  return evaluator.type === EvalFunction.IsWithinRange || evaluator.type === EvalFunction.IsOutsideRange;\n}\n","import { DataSourceInstanceSettings } from '@grafana/data';\nimport { DataQuery } from '@grafana/schema';\nimport { LokiQuery } from 'app/plugins/datasource/loki/types';\nimport { PromQuery } from 'app/plugins/datasource/prometheus/types';\nimport { CombinedRule } from 'app/types/unified-alerting';\nimport { AlertQuery } from 'app/types/unified-alerting-dto';\n\nimport { isCloudRulesSource, isGrafanaRulesSource } from './datasource';\nimport { isGrafanaRulerRule } from './rules';\n\nexport function alertRuleToQueries(combinedRule: CombinedRule | undefined | null): AlertQuery[] {\n  if (!combinedRule) {\n    return [];\n  }\n  const { namespace, rulerRule } = combinedRule;\n  const { rulesSource } = namespace;\n\n  if (isGrafanaRulesSource(rulesSource)) {\n    if (isGrafanaRulerRule(rulerRule)) {\n      return rulerRule.grafana_alert.data;\n    }\n  }\n\n  if (isCloudRulesSource(rulesSource)) {\n    const model = cloudAlertRuleToModel(rulesSource, combinedRule);\n\n    return [dataQueryToAlertQuery(model, rulesSource.uid)];\n  }\n\n  return [];\n}\n\nexport function dataQueryToAlertQuery(dataQuery: DataQuery, dataSourceUid: string): AlertQuery {\n  return {\n    refId: dataQuery.refId,\n    datasourceUid: dataSourceUid,\n    queryType: '',\n    model: dataQuery,\n    relativeTimeRange: {\n      from: 360,\n      to: 0,\n    },\n  };\n}\n\nfunction cloudAlertRuleToModel(dsSettings: DataSourceInstanceSettings, rule: CombinedRule): DataQuery {\n  const refId = 'A';\n\n  switch (dsSettings.type) {\n    case 'prometheus': {\n      const query: PromQuery = {\n        refId,\n        expr: rule.query,\n      };\n\n      return query;\n    }\n\n    case 'loki': {\n      const query: LokiQuery = {\n        refId,\n        expr: rule.query,\n      };\n\n      return query;\n    }\n\n    default:\n      throw new Error(`Query for datasource type ${dsSettings.type} is currently not supported by cloud alert rules.`);\n  }\n}\n","import { produce } from 'immer';\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport { useObservable } from 'react-use';\n\nimport { LoadingState, PanelData, RelativeTimeRange } from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport { Alert } from '@grafana/ui';\nimport { CombinedRule } from 'app/types/unified-alerting';\nimport { AlertQuery } from 'app/types/unified-alerting-dto';\n\nimport { GrafanaRuleQueryViewer, QueryPreview } from '../../../GrafanaRuleQueryViewer';\nimport { useAlertQueriesStatus } from '../../../hooks/useAlertQueriesStatus';\nimport { AlertingQueryRunner } from '../../../state/AlertingQueryRunner';\nimport { alertRuleToQueries } from '../../../utils/query';\nimport { isFederatedRuleGroup, isGrafanaRulerRule } from '../../../utils/rules';\n\ninterface Props {\n  rule: CombinedRule;\n}\n\nconst QueryResults = ({ rule }: Props) => {\n  const [evaluationTimeRanges, setEvaluationTimeRanges] = useState<Record<string, RelativeTimeRange>>({});\n\n  const runner = useMemo(() => new AlertingQueryRunner(), []);\n  const data = useObservable(runner.get());\n  const loadingData = isLoading(data);\n\n  const queries = useMemo(() => alertRuleToQueries(rule), [rule]);\n\n  const { allDataSourcesAvailable } = useAlertQueriesStatus(queries);\n\n  const onRunQueries = useCallback(() => {\n    if (queries.length > 0 && allDataSourcesAvailable) {\n      const evalCustomizedQueries = queries.map<AlertQuery>((q) => ({\n        ...q,\n        relativeTimeRange: evaluationTimeRanges[q.refId] ?? q.relativeTimeRange,\n      }));\n\n      let condition;\n      if (rule && isGrafanaRulerRule(rule.rulerRule)) {\n        condition = rule.rulerRule.grafana_alert.condition;\n      }\n      runner.run(evalCustomizedQueries, condition ?? 'A');\n    }\n  }, [queries, allDataSourcesAvailable, rule, runner, evaluationTimeRanges]);\n\n  useEffect(() => {\n    const alertQueries = alertRuleToQueries(rule);\n    const defaultEvalTimeRanges = Object.fromEntries(\n      alertQueries.map((q) => [q.refId, q.relativeTimeRange ?? { from: 0, to: 0 }])\n    );\n\n    setEvaluationTimeRanges(defaultEvalTimeRanges);\n  }, [rule]);\n\n  useEffect(() => {\n    if (allDataSourcesAvailable) {\n      onRunQueries();\n    }\n  }, [allDataSourcesAvailable, onRunQueries]);\n\n  useEffect(() => {\n    return () => runner.destroy();\n  }, [runner]);\n\n  const onQueryTimeRangeChange = useCallback(\n    (refId: string, timeRange: RelativeTimeRange) => {\n      const newEvalTimeRanges = produce(evaluationTimeRanges, (draft) => {\n        draft[refId] = timeRange;\n      });\n      setEvaluationTimeRanges(newEvalTimeRanges);\n    },\n    [evaluationTimeRanges, setEvaluationTimeRanges]\n  );\n\n  const isFederatedRule = isFederatedRuleGroup(rule.group);\n\n  return (\n    <>\n      {loadingData ? (\n        'Loading...'\n      ) : (\n        <>\n          {isGrafanaRulerRule(rule.rulerRule) && !isFederatedRule && (\n            <GrafanaRuleQueryViewer\n              condition={rule.rulerRule.grafana_alert.condition}\n              queries={queries}\n              evalDataByQuery={data}\n              evalTimeRanges={evaluationTimeRanges}\n              onTimeRangeChange={onQueryTimeRangeChange}\n            />\n          )}\n\n          {!isGrafanaRulerRule(rule.rulerRule) && !isFederatedRule && data && Object.keys(data).length > 0 && (\n            <div>\n              {queries.map((query) => {\n                return (\n                  <QueryPreview\n                    key={query.refId}\n                    refId={query.refId}\n                    model={query.model}\n                    dataSource={Object.values(config.datasources).find((ds) => ds.uid === query.datasourceUid)}\n                    queryData={data[query.refId]}\n                    relativeTimeRange={query.relativeTimeRange}\n                    evalTimeRange={evaluationTimeRanges[query.refId]}\n                    onEvalTimeRangeChange={(timeRange) => onQueryTimeRangeChange(query.refId, timeRange)}\n                    isAlertCondition={false}\n                  />\n                );\n              })}\n            </div>\n          )}\n          {!isFederatedRule && !allDataSourcesAvailable && (\n            <Alert title=\"Query not available\" severity=\"warning\">\n              Cannot display the query preview. Some of the data sources used in the queries are not available.\n            </Alert>\n          )}\n        </>\n      )}\n    </>\n  );\n};\n\nfunction isLoading(data?: Record<string, PanelData>): boolean {\n  if (!data) {\n    return true;\n  }\n\n  return !!Object.values(data).find((d) => d.state === LoadingState.Loading);\n}\n\nexport { QueryResults };\n"],"names":["headerHeight","RuleViewerVisualization","data","model","thresholds","dsSettings","relativeTimeRange","onTimeRangeChange","className","styles","getStyles","isExpression","onTimeChange","newDateTime","now","interval","setDateTime","relativeTimeRangeTo","allowedToExploreDataSources","DateTimePicker","createExploreLink","VizWrapper","settings","uid","type","refId","rest","url","config","theme","GrafanaRuleQueryViewer","queries","condition","evalDataByQuery","evalTimeRanges","dsByUid","ds","dataQueries","q","expressions","getExpressionViewerStyles","Stack","datasourceUid","index","dataSource","QueryPreview","timeRange","ExpressionPreview","queryData","evalTimeRange","onEvalTimeRangeChange","getQueryPreviewStyles","headerItems","QueryBox","evalData","isAlertCondition","renderPreview","MathExpressionViewer","ReduceConditionViewer","ResampleExpressionViewer","ClassicConditionViewer","ThresholdExpressionViewer","Expression","children","getQueryBoxStyles","item","Badge","getClassicConditionViewerStyles","reducerFunctions","alertDef","rt","evalOperators","eo","evalFunctions","ef","query","operator","reducer","evaluator","isRange","isRangeEvaluator","getCommonQueryStyles","getReduceConditionViewerStyles","expression","reducerType","reducerMode","modeName","rm","getResampleExpressionViewerStyles","window","downsampler","upsampler","downsamplerType","dt","upsamplerType","ut","conditions","thresholdFunction","tf","unloadEvaluator","unloadThresholdFunction","unloadIsRange","blue","bold","common","alertRuleToQueries","combinedRule","namespace","rulerRule","rulesSource","cloudAlertRuleToModel","dataQueryToAlertQuery","dataQuery","dataSourceUid","rule","QueryResults","evaluationTimeRanges","setEvaluationTimeRanges","runner","AlertingQueryRunner","useObservable","loadingData","isLoading","allDataSourcesAvailable","useAlertQueriesStatus","onRunQueries","evalCustomizedQueries","alertQueries","defaultEvalTimeRanges","onQueryTimeRangeChange","newEvalTimeRanges","draft","isFederatedRule","Alert","d"],"sourceRoot":""}