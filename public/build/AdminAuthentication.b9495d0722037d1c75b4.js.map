{"version":3,"file":"AdminAuthentication.b9495d0722037d1c75b4.js","mappings":"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","sources":["webpack://grafana/./public/app/features/auth-config/components/ConfigureAuthCTA.tsx","webpack://grafana/./public/app/features/auth-config/constants.ts","webpack://grafana/./public/app/features/auth-config/utils/url.ts","webpack://grafana/./public/app/features/auth-config/components/ProviderCard.tsx","webpack://grafana/./public/app/features/auth-config/AuthProvidersListPage.tsx","webpack://grafana/./public/app/core/components/FormPrompt/FormPrompt.tsx","webpack://grafana/./public/app/features/auth-config/utils/guards.ts","webpack://grafana/./public/app/features/auth-config/fields.ts","webpack://grafana/./public/app/features/auth-config/utils/data.ts","webpack://grafana/./public/app/features/auth-config/ProviderConfigForm.tsx","webpack://grafana/./public/app/features/auth-config/ProviderConfigPage.tsx","webpack://grafana/./public/app/features/auth-config/state/actions.ts"],"sourcesContent":["import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Icon, Stack, Text, TextLink, useStyles2 } from '@grafana/ui';\n\nexport interface Props {}\n\nconst ConfigureAuthCTA: React.FunctionComponent<Props> = () => {\n  const styles = useStyles2(getStyles);\n  return (\n    <div className={styles.container}>\n      <Stack gap={1} alignItems={'center'}>\n        <Icon name={'cog'} />\n        <Text>Configuration required</Text>\n      </Stack>\n      <Text variant={'bodySmall'} color={'secondary'}>\n        You have no authentication configuration created at the moment.\n      </Text>\n      <TextLink href={'https://grafana.com/docs/grafana/latest/auth/overview/'} external>\n        Refer to the documentation on how to configure authentication\n      </TextLink>\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    container: css({\n      display: 'flex',\n      flexDirection: 'column',\n      gap: theme.spacing(2),\n      backgroundColor: theme.colors.background.secondary,\n      borderRadius: theme.shape.radius.default,\n      padding: theme.spacing(3),\n      width: 'max-content',\n      margin: theme.spacing(3, 'auto'),\n    }),\n  };\n};\n\nexport default ConfigureAuthCTA;\n","export const BASE_PATH = 'admin/authentication/';\n","import { BASE_PATH } from '../constants';\nimport { AuthProviderInfo } from '../types';\n\nexport function getProviderUrl(provider: AuthProviderInfo) {\n  return BASE_PATH + (provider.configPath || `advanced/${provider.id}`);\n}\n","import React from 'react';\n\nimport { IconName, isIconName } from '@grafana/data';\nimport { Badge, Card, Icon } from '@grafana/ui';\n\nimport { getProviderUrl } from '../utils/url';\n\ntype Props = {\n  providerId: string;\n  enabled: boolean;\n  configPath?: string;\n  authType?: string;\n  onClick?: () => void;\n};\n\n// TODO Remove when this is available from API\nconst UIMap: Record<string, [IconName, string]> = {\n  github: ['github', 'GitHub'],\n  gitlab: ['gitlab', 'GitLab'],\n  google: ['google', 'Google'],\n  generic_oauth: ['lock', 'Generic OAuth'],\n  grafana_com: ['grafana', 'Grafana.com'],\n  azuread: ['microsoft', 'Azure AD'],\n  okta: ['okta', 'Okta'],\n};\n\nexport function ProviderCard({ providerId, enabled, configPath, authType, onClick }: Props) {\n  //@ts-expect-error\n  const url = getProviderUrl({ configPath, id: providerId });\n  const [iconName, displayName] = UIMap[providerId] || ['lock', providerId.toUpperCase()];\n  return (\n    <Card href={url} onClick={onClick}>\n      <Card.Heading>{displayName}</Card.Heading>\n      <Card.Meta>{authType}</Card.Meta>\n      {isIconName(iconName) && (\n        <Card.Figure>\n          <Icon name={iconName} size={'xxxl'} />\n        </Card.Figure>\n      )}\n      <Card.Actions>\n        <Badge text={enabled ? 'Enabled' : 'Not enabled'} color={enabled ? 'green' : 'blue'} />\n      </Card.Actions>\n    </Card>\n  );\n}\n","import React, { JSX, useEffect } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport { reportInteraction } from '@grafana/runtime';\nimport { Grid, TextLink } from '@grafana/ui';\nimport { Page } from 'app/core/components/Page/Page';\nimport { StoreState } from 'app/types';\n\nimport ConfigureAuthCTA from './components/ConfigureAuthCTA';\nimport { ProviderCard } from './components/ProviderCard';\nimport { loadSettings } from './state/actions';\n\nimport { getRegisteredAuthProviders } from './index';\n\ninterface OwnProps {}\n\nexport type Props = OwnProps & ConnectedProps<typeof connector>;\n\nfunction mapStateToProps(state: StoreState) {\n  const { isLoading, providerStatuses, providers } = state.authConfig;\n  return {\n    isLoading,\n    providerStatuses,\n    providers,\n  };\n}\n\nconst mapDispatchToProps = {\n  loadSettings,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\nexport const AuthConfigPageUnconnected = ({\n  providerStatuses,\n  isLoading,\n  loadSettings,\n  providers,\n}: Props): JSX.Element => {\n  useEffect(() => {\n    loadSettings();\n  }, [loadSettings]);\n\n  const authProviders = getRegisteredAuthProviders();\n  const availableProviders = authProviders.filter((p) => !providerStatuses[p.id]?.hide);\n  const onProviderCardClick = (providerType: string) => {\n    reportInteraction('authentication_ui_provider_clicked', { provider: providerType });\n  };\n\n  const providerList = availableProviders.length\n    ? [\n        ...availableProviders.map((p) => ({\n          provider: p.id,\n          settings: { ...providerStatuses[p.id], configPath: p.configPath, type: p.type },\n        })),\n        ...providers,\n      ]\n    : providers;\n  return (\n    <Page\n      navId=\"authentication\"\n      subTitle={\n        <>\n          Manage your auth settings and configure single sign-on. Find out more in our{' '}\n          <TextLink href=\"https://grafana.com/docs/grafana/next/setup-grafana/configure-security/configure-authentication\">\n            documentation\n          </TextLink>\n          .\n        </>\n      }\n    >\n      <Page.Contents isLoading={isLoading}>\n        {!providerList.length ? (\n          <ConfigureAuthCTA />\n        ) : (\n          <Grid gap={3} minColumnWidth={34}>\n            {providerList\n              // Temporarily filter providers that don't have the UI implemented\n              .filter(({ provider }) => !['grafana_com', 'generic_oauth'].includes(provider))\n              .map(({ provider, settings }) => (\n                <ProviderCard\n                  key={provider}\n                  authType={settings.type || 'OAuth'}\n                  providerId={provider}\n                  enabled={settings.enabled}\n                  onClick={() => onProviderCardClick(provider)}\n                  //@ts-expect-error Remove legacy types\n                  configPath={settings.configPath}\n                />\n              ))}\n          </Grid>\n        )}\n      </Page.Contents>\n    </Page>\n  );\n};\n\nexport default connector(AuthConfigPageUnconnected);\n","import { css } from '@emotion/css';\nimport history from 'history';\nimport React, { useEffect, useState } from 'react';\nimport { Prompt, Redirect } from 'react-router-dom';\n\nimport { Button, Modal } from '@grafana/ui';\n\nexport interface Props {\n  confirmRedirect?: boolean;\n  onDiscard: () => void;\n  /** Extra check to invoke when location changes.\n   * Could be useful in multistep forms where each step has a separate URL\n   */\n  onLocationChange?: (location: history.Location) => void;\n}\n\n/**\n * Component handling redirects when a form has unsaved changes.\n * Page reloads are handled in useEffect via beforeunload event.\n * URL navigation is handled by react-router's components since it does not trigger beforeunload event.\n */\nexport const FormPrompt = ({ confirmRedirect, onDiscard, onLocationChange }: Props) => {\n  const [modalIsOpen, setModalIsOpen] = useState(false);\n  const [blockedLocation, setBlockedLocation] = useState<history.Location | null>(null);\n  const [changesDiscarded, setChangesDiscarded] = useState(false);\n\n  useEffect(() => {\n    const onBeforeUnload = (e: BeforeUnloadEvent) => {\n      if (confirmRedirect) {\n        e.preventDefault();\n        e.returnValue = '';\n      }\n    };\n    window.addEventListener('beforeunload', onBeforeUnload);\n    return () => {\n      window.removeEventListener('beforeunload', onBeforeUnload);\n    };\n  }, [confirmRedirect]);\n\n  // Returning 'false' from this function will prevent navigation to the next URL\n  const handleRedirect = (location: history.Location) => {\n    // Do not show the unsaved changes modal if only the URL params have changed\n    const currentPath = window.location.pathname;\n    const nextPath = location.pathname;\n    if (currentPath === nextPath) {\n      return true;\n    }\n\n    const locationChangeCheck = onLocationChange?.(location);\n\n    let blockRedirect = confirmRedirect && !changesDiscarded;\n    if (locationChangeCheck !== undefined) {\n      blockRedirect = blockRedirect && locationChangeCheck;\n    }\n\n    if (blockRedirect) {\n      setModalIsOpen(true);\n      setBlockedLocation(location);\n      return false;\n    }\n\n    if (locationChangeCheck) {\n      onDiscard();\n    }\n\n    return true;\n  };\n\n  const onBackToForm = () => {\n    setModalIsOpen(false);\n    setBlockedLocation(null);\n  };\n\n  const onDiscardChanges = () => {\n    setModalIsOpen(false);\n    setChangesDiscarded(true);\n    onDiscard();\n  };\n\n  return (\n    <>\n      <Prompt when={true} message={handleRedirect} />\n      {blockedLocation && changesDiscarded && <Redirect to={blockedLocation} />}\n      <UnsavedChangesModal isOpen={modalIsOpen} onDiscard={onDiscardChanges} onBackToForm={onBackToForm} />\n    </>\n  );\n};\n\ninterface UnsavedChangesModalProps {\n  onDiscard: () => void;\n  onBackToForm: () => void;\n  isOpen: boolean;\n}\n\nconst UnsavedChangesModal = ({ onDiscard, onBackToForm, isOpen }: UnsavedChangesModalProps) => {\n  return (\n    <Modal\n      isOpen={isOpen}\n      title=\"Leave page?\"\n      onDismiss={onBackToForm}\n      icon=\"exclamation-triangle\"\n      className={css({ width: '500px' })}\n    >\n      <h5>Changes that you made may not be saved.</h5>\n      <Modal.ButtonRow>\n        <Button variant=\"secondary\" onClick={onBackToForm} fill=\"outline\">\n          Continue editing\n        </Button>\n        <Button variant=\"destructive\" onClick={onDiscard}>\n          Discard unsaved changes\n        </Button>\n      </Modal.ButtonRow>\n    </Modal>\n  );\n};\n","import { SelectableValue } from '@grafana/data';\n\nexport function isSelectableValue(value: unknown): value is SelectableValue[] {\n  return Array.isArray(value) && value.every((v) => typeof v === 'object' && v !== null && 'value' in v);\n}\n","import { FieldData, SSOProvider } from './types';\nimport { isSelectableValue } from './utils/guards';\n\n/** Map providers to their settings */\nexport const fields: Record<SSOProvider['provider'], Array<keyof SSOProvider['settings']>> = {\n  github: ['clientId', 'clientSecret', 'teamIds', 'allowedOrganizations'],\n  google: ['clientId', 'clientSecret', 'allowedDomains'],\n  gitlab: ['clientId', 'clientSecret', 'allowedOrganizations', 'teamIds'],\n  azuread: ['clientId', 'clientSecret', 'authUrl', 'tokenUrl', 'scopes', 'allowedGroups', 'allowedDomains'],\n  okta: [\n    'clientId',\n    'clientSecret',\n    'authUrl',\n    'tokenUrl',\n    'apiUrl',\n    'roleAttributePath',\n    'allowedGroups',\n    'allowedDomains',\n  ],\n};\n\n/**\n * List all the fields that can be used in the form\n */\nexport const fieldMap: Record<string, FieldData> = {\n  clientId: {\n    label: 'Client Id',\n    type: 'text',\n    validation: {\n      required: true,\n      message: 'This field is required',\n    },\n  },\n  clientSecret: {\n    label: 'Client Secret',\n    type: 'secret',\n  },\n  teamIds: {\n    label: 'Team Ids',\n    type: 'select',\n    multi: true,\n    allowCustomValue: true,\n    options: [],\n    placeholder: 'Enter team IDs and press Enter to add',\n    validation: {\n      validate: (value) => {\n        if (typeof value === 'string') {\n          return isNumeric(value);\n        }\n        if (isSelectableValue(value)) {\n          return value.every((v) => v?.value && isNumeric(v.value));\n        }\n        return true;\n      },\n      message: 'Team ID must be a number.',\n    },\n  },\n  allowedOrganizations: {\n    label: 'Allowed Organizations',\n    type: 'select',\n    multi: true,\n    allowCustomValue: true,\n    options: [],\n    placeholder: 'Enter organizations (my-team, myteam...) and press Enter to add',\n  },\n  allowedDomains: {\n    label: 'Allowed Domains',\n    type: 'select',\n    multi: true,\n    allowCustomValue: true,\n    options: [],\n  },\n  authUrl: {\n    label: 'Auth Url',\n    type: 'text',\n    validation: {\n      required: false,\n    },\n  },\n  tokenUrl: {\n    label: 'Token Url',\n    type: 'text',\n    validation: {\n      required: false,\n    },\n  },\n  scopes: {\n    label: 'Scopes',\n    type: 'select',\n    multi: true,\n    allowCustomValue: true,\n    options: [],\n  },\n  allowedGroups: {\n    label: 'Allowed Groups',\n    type: 'select',\n    multi: true,\n    allowCustomValue: true,\n    options: [],\n  },\n  apiUrl: {\n    label: 'API Url',\n    type: 'text',\n    validation: {\n      required: false,\n    },\n  },\n  roleAttributePath: {\n    label: 'Role Attribute Path',\n    type: 'text',\n    validation: {\n      required: false,\n    },\n  },\n};\n\n// Check if a string contains only numeric values\nfunction isNumeric(value: string) {\n  return /^-?\\d+$/.test(value);\n}\n","import { SelectableValue } from '@grafana/data';\n\nimport { fieldMap } from '../fields';\nimport { FieldData, SSOProvider, SSOProviderDTO } from '../types';\n\nimport { isSelectableValue } from './guards';\n\nexport const emptySettings: SSOProviderDTO = {\n  allowAssignGrafanaAdmin: false,\n  allowSignUp: false,\n  allowedDomains: [],\n  allowedGroups: [],\n  allowedOrganizations: [],\n  apiUrl: '',\n  authStyle: '',\n  authUrl: '',\n  autoLogin: false,\n  clientId: '',\n  clientSecret: '',\n  emailAttributeName: '',\n  emailAttributePath: '',\n  emptyScopes: false,\n  enabled: false,\n  extra: {},\n  groupsAttributePath: '',\n  hostedDomain: '',\n  icon: 'shield',\n  name: '',\n  roleAttributePath: '',\n  roleAttributeStrict: false,\n  scopes: [],\n  signoutRedirectUrl: '',\n  skipOrgRoleSync: false,\n  teamIds: [],\n  teamIdsAttributePath: '',\n  teamsUrl: '',\n  tlsClientCa: '',\n  tlsClientCert: '',\n  tlsClientKey: '',\n  tlsSkipVerify: false,\n  tokenUrl: '',\n  type: '',\n  usePKCE: false,\n  useRefreshToken: false,\n};\n\nconst strToValue = (val: string | string[]): SelectableValue[] => {\n  if (!val?.length) {\n    return [];\n  }\n  if (Array.isArray(val)) {\n    return val.map((v) => ({ label: v, value: v }));\n  }\n  return val.split(/[\\s,]/).map((s) => ({ label: s, value: s }));\n};\n\nexport function dataToDTO(data?: SSOProvider): SSOProviderDTO {\n  if (!data) {\n    return emptySettings;\n  }\n  const arrayFields = getArrayFields(fieldMap);\n  const settings = { ...data.settings };\n  for (const field of arrayFields) {\n    //@ts-expect-error\n    settings[field] = strToValue(settings[field]);\n  }\n  //@ts-expect-error\n  return settings;\n}\n\nconst valuesToString = (values: Array<SelectableValue<string>>) => {\n  return values.map(({ value }) => value).join(',');\n};\n\n// Convert the DTO to the data format used by the API\nexport function dtoToData(dto: SSOProviderDTO) {\n  const arrayFields = getArrayFields(fieldMap);\n  const settings = { ...dto };\n\n  for (const field of arrayFields) {\n    const value = dto[field];\n    if (value && isSelectableValue(value)) {\n      //@ts-expect-error\n      settings[field] = valuesToString(value);\n    }\n  }\n  return settings;\n}\n\nexport function getArrayFields(obj: Record<string, FieldData>): Array<keyof SSOProviderDTO> {\n  return Object.entries(obj)\n    .filter(([_, value]) => value.type === 'select' && value.multi === true)\n    .map(([key]) => key as keyof SSOProviderDTO);\n}\n","import React, { useEffect, useState } from 'react';\nimport { useForm } from 'react-hook-form';\n\nimport { AppEvents } from '@grafana/data';\nimport { getAppEvents, getBackendSrv, isFetchError, locationService } from '@grafana/runtime';\nimport { Button, Field, Input, InputControl, LinkButton, SecretInput, Select, Stack, Switch } from '@grafana/ui';\n\nimport { FormPrompt } from '../../core/components/FormPrompt/FormPrompt';\nimport { Page } from '../../core/components/Page/Page';\n\nimport { fieldMap, fields } from './fields';\nimport { FieldData, SSOProvider, SSOProviderDTO } from './types';\nimport { dataToDTO, dtoToData } from './utils/data';\nimport { isSelectableValue } from './utils/guards';\n\nconst appEvents = getAppEvents();\n\ninterface ProviderConfigProps {\n  config?: SSOProvider;\n  isLoading?: boolean;\n  provider: string;\n}\n\nexport const ProviderConfigForm = ({ config, provider, isLoading }: ProviderConfigProps) => {\n  const {\n    register,\n    handleSubmit,\n    control,\n    reset,\n    watch,\n    setValue,\n    formState: { errors, dirtyFields, isSubmitted },\n  } = useForm({ defaultValues: dataToDTO(config) });\n  const [isSaving, setIsSaving] = useState(false);\n  const [isSecretConfigured, setIsSecretConfigured] = useState(!!config?.settings.clientSecret);\n  const providerFields = fields[provider];\n  const [submitError, setSubmitError] = useState(false);\n  const dataSubmitted = isSubmitted && !submitError;\n\n  useEffect(() => {\n    if (dataSubmitted) {\n      locationService.push(`/admin/authentication`);\n    }\n  }, [dataSubmitted]);\n\n  const onSubmit = async (data: SSOProviderDTO) => {\n    setIsSaving(true);\n    setSubmitError(false);\n    const requestData = dtoToData(data);\n    try {\n      await getBackendSrv().put(`/api/v1/sso-settings/${provider}`, {\n        ...config,\n        settings: { ...config?.settings, ...requestData },\n      });\n\n      appEvents.publish({\n        type: AppEvents.alertSuccess.name,\n        payload: ['Settings saved'],\n      });\n    } catch (error) {\n      let message = '';\n      if (isFetchError(error)) {\n        message = error.data.message;\n      } else if (error instanceof Error) {\n        message = error.message;\n      }\n      appEvents.publish({\n        type: AppEvents.alertError.name,\n        payload: [message],\n      });\n      setSubmitError(true);\n    } finally {\n      setIsSaving(false);\n    }\n  };\n\n  const renderField = (name: keyof SSOProvider['settings'], fieldData: FieldData) => {\n    switch (fieldData.type) {\n      case 'text':\n        return (\n          <Field\n            label={fieldData.label}\n            required={!!fieldData.validation?.required}\n            invalid={!!errors[name]}\n            error={fieldData.validation?.message}\n            key={name}\n          >\n            <Input\n              {...register(name, { required: !!fieldData.validation?.required })}\n              type={fieldData.type}\n              id={name}\n              autoComplete={'off'}\n            />\n          </Field>\n        );\n      case 'secret':\n        return (\n          <Field\n            label={fieldData.label}\n            required={!!fieldData.validation?.required}\n            invalid={!!errors[name]}\n            error={fieldData.validation?.message}\n            key={name}\n            htmlFor={name}\n          >\n            <InputControl\n              name={name}\n              control={control}\n              rules={fieldData.validation}\n              render={({ field: { ref, value, ...field } }) => (\n                <SecretInput\n                  {...field}\n                  autoComplete={'off'}\n                  id={name}\n                  value={typeof value === 'string' ? value : ''}\n                  isConfigured={isSecretConfigured}\n                  onReset={() => {\n                    setIsSecretConfigured(false);\n                    setValue(name, '');\n                  }}\n                />\n              )}\n            />\n          </Field>\n        );\n      case 'select':\n        const watchOptions = watch(name);\n        const options = isSelectableValue(watchOptions) ? watchOptions : [{ label: '', value: '' }];\n        return (\n          <Field\n            label={fieldData.label}\n            htmlFor={name}\n            key={name}\n            invalid={!!errors[name]}\n            error={fieldData.validation?.message}\n          >\n            <InputControl\n              rules={fieldData.validation}\n              name={name}\n              control={control}\n              render={({ field: { ref, onChange, ...fieldProps }, fieldState: { invalid } }) => {\n                return (\n                  <Select\n                    {...fieldProps}\n                    placeholder={fieldData.placeholder}\n                    isMulti={fieldData.multi}\n                    invalid={invalid}\n                    inputId={name}\n                    options={options}\n                    allowCustomValue\n                    onChange={onChange}\n                    onCreateOption={(v) => {\n                      const customValue = { value: v, label: v };\n                      onChange([...options, customValue]);\n                    }}\n                  />\n                );\n              }}\n            />\n          </Field>\n        );\n      default:\n        throw new Error(`Unknown field type: ${fieldData.type}`);\n    }\n  };\n\n  return (\n    <Page.Contents isLoading={isLoading}>\n      <Stack grow={1} direction={'column'}>\n        <form onSubmit={handleSubmit(onSubmit)} style={{ maxWidth: '600px' }}>\n          <>\n            <FormPrompt\n              // TODO Figure out why isDirty is not working\n              confirmRedirect={!!Object.keys(dirtyFields).length && !dataSubmitted}\n              onDiscard={() => {\n                reset();\n              }}\n            />\n            <Field label=\"Enabled\">\n              <Switch {...register('enabled')} id=\"enabled\" label={'Enabled'} />\n            </Field>\n            {providerFields.map((fieldName) => {\n              const field = fieldMap[fieldName];\n              return renderField(fieldName, field);\n            })}\n            <Stack gap={2}>\n              <Field>\n                <Button type={'submit'}>{isSaving ? 'Saving...' : 'Save'}</Button>\n              </Field>\n              <Field>\n                <LinkButton href={'/admin/authentication'} variant={'secondary'}>\n                  Discard\n                </LinkButton>\n              </Field>\n            </Stack>\n          </>\n        </form>\n      </Stack>\n    </Page.Contents>\n  );\n};\n","import React, { useEffect } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport { NavModelItem } from '@grafana/data';\nimport { Page } from 'app/core/components/Page/Page';\nimport { GrafanaRouteComponentProps } from 'app/core/navigation/types';\n\nimport { StoreState } from '../../types';\n\nimport { ProviderConfigForm } from './ProviderConfigForm';\nimport { loadProviders } from './state/actions';\nimport { SSOProvider } from './types';\n\nconst getPageNav = (config?: SSOProvider): NavModelItem => {\n  if (!config) {\n    return {\n      text: 'Authentication',\n      subTitle: 'Configure authentication providers',\n      icon: 'shield',\n      id: 'authentication',\n    };\n  }\n\n  return {\n    text: config.settings.name || '',\n    subTitle: `To configure ${config.settings.name} OAuth2 you must register your application with ${config.settings.name}. ${config.settings.name} will generate a Client ID and Client Secret for you to use.`,\n    icon: config.settings.icon || 'shield',\n    id: config.provider,\n  };\n};\n\ninterface RouteProps extends GrafanaRouteComponentProps<{ provider: string }> {}\n\nfunction mapStateToProps(state: StoreState, props: RouteProps) {\n  const { isLoading, providers } = state.authConfig;\n  const { provider } = props.match.params;\n  const config = providers.find((config) => config.provider === provider);\n  return {\n    config,\n    isLoading,\n    provider,\n  };\n}\n\nconst mapDispatchToProps = {\n  loadProviders,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\nexport type Props = ConnectedProps<typeof connector>;\n\n/**\n * Separate the Page logic from the Content logic for easier testing.\n */\nexport const ProviderConfigPage = ({ config, loadProviders, isLoading, provider }: Props) => {\n  const pageNav = getPageNav(config);\n\n  useEffect(() => {\n    loadProviders(provider);\n  }, [loadProviders, provider]);\n\n  if (!config) {\n    return null;\n  }\n  return (\n    <Page navId=\"authentication\" pageNav={pageNav}>\n      <ProviderConfigForm config={config} isLoading={isLoading} provider={provider} />\n    </Page>\n  );\n};\n\nexport default connector(ProviderConfigPage);\n","import { lastValueFrom } from 'rxjs';\n\nimport { config, getBackendSrv, isFetchError } from '@grafana/runtime';\nimport { contextSrv } from 'app/core/core';\nimport { AccessControlAction, Settings, ThunkResult, UpdateSettingsQuery } from 'app/types';\n\nimport { getAuthProviderStatus, getRegisteredAuthProviders, SSOProvider } from '..';\nimport { AuthProviderStatus, SettingsError } from '../types';\n\nimport {\n  loadingBegin,\n  loadingEnd,\n  providersLoaded,\n  providerStatusesLoaded,\n  resetError,\n  setError,\n  settingsUpdated,\n} from './reducers';\n\nexport function loadSettings(): ThunkResult<Promise<Settings>> {\n  return async (dispatch) => {\n    if (contextSrv.hasPermission(AccessControlAction.SettingsRead)) {\n      dispatch(loadingBegin());\n      dispatch(loadProviders());\n      const result = await getBackendSrv().get('/api/admin/settings');\n      dispatch(settingsUpdated(result));\n      await dispatch(loadProviderStatuses());\n      dispatch(loadingEnd());\n      return result;\n    }\n  };\n}\n\nexport function loadProviders(provider = ''): ThunkResult<Promise<SSOProvider[]>> {\n  return async (dispatch) => {\n    if (!config.featureToggles.ssoSettingsApi) {\n      return [];\n    }\n    const result = await getBackendSrv().get(`/api/v1/sso-settings${provider ? `/${provider}` : ''}`);\n    dispatch(providersLoaded(provider ? [result] : result));\n    return result;\n  };\n}\n\nexport function loadProviderStatuses(): ThunkResult<void> {\n  return async (dispatch) => {\n    const registeredProviders = getRegisteredAuthProviders();\n    const providerStatuses: Record<string, AuthProviderStatus> = {};\n    const getStatusPromises: Array<Promise<AuthProviderStatus>> = [];\n    for (const provider of registeredProviders) {\n      getStatusPromises.push(getAuthProviderStatus(provider.id));\n    }\n    const statuses = await Promise.all(getStatusPromises);\n    for (let i = 0; i < registeredProviders.length; i++) {\n      const provider = registeredProviders[i];\n      providerStatuses[provider.id] = statuses[i];\n    }\n    dispatch(providerStatusesLoaded(providerStatuses));\n  };\n}\n\nexport function saveSettings(data: UpdateSettingsQuery): ThunkResult<Promise<boolean>> {\n  return async (dispatch) => {\n    if (contextSrv.hasPermission(AccessControlAction.SettingsWrite)) {\n      try {\n        await lastValueFrom(\n          getBackendSrv().fetch({\n            url: '/api/admin/settings',\n            method: 'PUT',\n            data,\n            showSuccessAlert: false,\n            showErrorAlert: false,\n          })\n        );\n        dispatch(resetError());\n        return true;\n      } catch (error) {\n        console.log(error);\n        if (isFetchError(error)) {\n          error.isHandled = true;\n          const updateErr: SettingsError = {\n            message: error.data?.message,\n            errors: error.data?.errors,\n          };\n          dispatch(setError(updateErr));\n          return false;\n        }\n      }\n    }\n    return false;\n  };\n}\n"],"names":["ConfigureAuthCTA","styles","getStyles","Stack","Icon","Text","TextLink","theme","BASE_PATH","getProviderUrl","provider","UIMap","ProviderCard","providerId","enabled","configPath","authType","onClick","url","iconName","displayName","Card","Badge","mapStateToProps","state","isLoading","providerStatuses","providers","mapDispatchToProps","connector","AuthConfigPageUnconnected","loadSettings","availableProviders","p","onProviderCardClick","providerType","providerList","Page","Grid","settings","FormPrompt","confirmRedirect","onDiscard","onLocationChange","modalIsOpen","setModalIsOpen","blockedLocation","setBlockedLocation","changesDiscarded","setChangesDiscarded","onBeforeUnload","e","handleRedirect","location","currentPath","nextPath","locationChangeCheck","blockRedirect","onBackToForm","onDiscardChanges","UnsavedChangesModal","isOpen","Modal","Button","isSelectableValue","value","v","fields","fieldMap","isNumeric","emptySettings","strToValue","val","s","dataToDTO","data","arrayFields","getArrayFields","field","valuesToString","values","dtoToData","dto","obj","_","key","ProviderConfigForm","config","register","handleSubmit","control","reset","watch","setValue","errors","dirtyFields","isSubmitted","isSaving","setIsSaving","isSecretConfigured","setIsSecretConfigured","providerFields","submitError","setSubmitError","dataSubmitted","onSubmit","requestData","error","message","renderField","name","fieldData","Field","Input","InputControl","ref","SecretInput","watchOptions","options","onChange","fieldProps","invalid","Select","customValue","Switch","fieldName","getPageNav","props","ProviderConfigPage","loadProviders","pageNav","dispatch","result","loadProviderStatuses","registeredProviders","getStatusPromises","statuses","i","saveSettings","updateErr"],"sourceRoot":""}