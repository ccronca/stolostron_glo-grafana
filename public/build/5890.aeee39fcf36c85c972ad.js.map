{"version":3,"file":"5890.aeee39fcf36c85c972ad.js","mappings":"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","sources":["webpack://grafana/./.yarn/__virtual__/@grafana-experimental-virtual-dc168f64a3/0/cache/@grafana-experimental-npm-1.7.4-f38fe41f94-e62e638239.zip/node_modules/@grafana/experimental/dist/esm/ConfigEditor/AdvancedSettings/AdvancedHttpSettings.js","webpack://grafana/./public/app/core/components/Divider.tsx","webpack://grafana/./public/app/plugins/datasource/loki/components/monaco-query-field/MonacoQueryFieldLazy.tsx","webpack://grafana/./public/app/plugins/datasource/loki/components/monaco-query-field/MonacoQueryFieldWrapper.tsx","webpack://grafana/./public/app/plugins/datasource/loki/components/LokiQueryField.tsx","webpack://grafana/./public/app/plugins/datasource/loki/components/LokiCheatSheet.tsx","webpack://grafana/./public/app/plugins/datasource/loki/components/LokiLabelBrowser.tsx","webpack://grafana/./public/app/plugins/datasource/loki/querybuilder/components/LabelBrowserModal.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/querybuilder/shared/LabelFilterItem.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/querybuilder/shared/LabelFilters.tsx","webpack://grafana/./public/app/plugins/datasource/loki/querybuilder/components/LokiQueryBuilderExplained.tsx","webpack://grafana/./public/app/plugins/datasource/loki/querybuilder/components/NestedQuery.tsx","webpack://grafana/./public/app/plugins/datasource/loki/querybuilder/components/NestedQueryList.tsx","webpack://grafana/./public/app/plugins/datasource/loki/querybuilder/components/LokiQueryBuilder.tsx","webpack://grafana/./public/app/plugins/datasource/loki/querybuilder/components/QueryPreview.tsx","webpack://grafana/./public/app/plugins/datasource/loki/querybuilder/components/LokiQueryBuilderContainer.tsx","webpack://grafana/./public/app/plugins/datasource/loki/querybuilder/components/LokiQueryBuilderOptions.tsx","webpack://grafana/./public/app/plugins/datasource/loki/querybuilder/components/LokiQueryCodeEditor.tsx","webpack://grafana/./public/app/plugins/datasource/loki/querybuilder/components/QueryPattern.tsx","webpack://grafana/./public/app/plugins/datasource/loki/querybuilder/components/QueryPatternsModal.tsx","webpack://grafana/./public/app/plugins/datasource/loki/querybuilder/state.ts","webpack://grafana/./public/app/plugins/datasource/loki/components/stats.ts","webpack://grafana/./public/app/plugins/datasource/loki/components/LokiQueryEditor.tsx","webpack://grafana/./public/app/plugins/datasource/loki/components/LokiQueryEditorForAlerting.tsx","webpack://grafana/./public/app/plugins/datasource/loki/components/LokiQueryEditorByApp.tsx","webpack://grafana/./public/app/plugins/datasource/loki/configuration/AlertingSettings.tsx","webpack://grafana/./public/app/plugins/datasource/loki/configuration/DebugSection.tsx","webpack://grafana/./public/app/plugins/datasource/loki/configuration/DerivedField.tsx","webpack://grafana/./public/app/plugins/datasource/loki/configuration/DerivedFields.tsx","webpack://grafana/./public/app/plugins/datasource/loki/configuration/QuerySettings.tsx","webpack://grafana/./public/app/plugins/datasource/loki/configuration/ConfigEditor.tsx","webpack://grafana/./public/app/plugins/datasource/loki/module.ts"],"sourcesContent":["import React__default from 'react';\nimport { css, cx } from '@emotion/css';\nimport { InlineField, TagsInput, Input } from '@grafana/ui';\nimport { ConfigSubSection } from '../ConfigSection/ConfigSubSection.js';\n\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp.call(b, prop))\n      __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b)) {\n      if (__propIsEnum.call(b, prop))\n        __defNormalProp(a, prop, b[prop]);\n    }\n  return a;\n};\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\nconst AdvancedHttpSettings = ({\n  config,\n  onChange,\n  className\n}) => {\n  const onCookiesChange = (cookies) => {\n    onChange(__spreadProps(__spreadValues({}, config), {\n      jsonData: __spreadProps(__spreadValues({}, config.jsonData), {\n        keepCookies: cookies\n      })\n    }));\n  };\n  const onTimeoutChange = (event) => {\n    onChange(__spreadProps(__spreadValues({}, config), {\n      jsonData: __spreadProps(__spreadValues({}, config.jsonData), {\n        timeout: parseInt(event.currentTarget.value, 10)\n      })\n    }));\n  };\n  const styles = {\n    container: css({\n      maxWidth: 578\n    })\n  };\n  return /* @__PURE__ */ React__default.createElement(ConfigSubSection, { title: \"Advanced HTTP settings\", className: cx(styles.container, className) }, /* @__PURE__ */ React__default.createElement(\n    InlineField,\n    {\n      htmlFor: \"advanced-http-cookies\",\n      label: \"Allowed cookies\",\n      labelWidth: 24,\n      tooltip: \"Grafana proxy deletes forwarded cookies by default. Specify cookies by name that should be forwarded to the data source.\",\n      disabled: config.readOnly,\n      grow: true\n    },\n    /* @__PURE__ */ React__default.createElement(\n      TagsInput,\n      {\n        id: \"advanced-http-cookies\",\n        placeholder: \"New cookie (hit enter to add)\",\n        tags: config.jsonData.keepCookies,\n        onChange: onCookiesChange\n      }\n    )\n  ), /* @__PURE__ */ React__default.createElement(\n    InlineField,\n    {\n      htmlFor: \"advanced-http-timeout\",\n      label: \"Timeout\",\n      labelWidth: 24,\n      tooltip: \"HTTP request timeout in seconds\",\n      disabled: config.readOnly,\n      grow: true\n    },\n    /* @__PURE__ */ React__default.createElement(\n      Input,\n      {\n        id: \"advanced-http-timeout\",\n        type: \"number\",\n        min: 0,\n        placeholder: \"Timeout in seconds\",\n        \"aria-label\": \"Timeout in seconds\",\n        value: config.jsonData.timeout,\n        onChange: onTimeoutChange\n      }\n    )\n  ));\n};\n\nexport { AdvancedHttpSettings };\n//# sourceMappingURL=AdvancedHttpSettings.js.map\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\n\nexport const Divider = ({ hideLine = false }) => {\n  const styles = useStyles2(getStyles);\n\n  if (hideLine) {\n    return <hr className={styles.dividerHideLine} />;\n  }\n\n  return <hr className={styles.divider} />;\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  divider: css({\n    margin: theme.spacing(4, 0),\n  }),\n  dividerHideLine: css({\n    border: 'none',\n    margin: theme.spacing(3, 0),\n  }),\n});\n","import React, { Suspense } from 'react';\n\nimport { Props } from './MonacoQueryFieldProps';\n\nconst Field = React.lazy(() => import(/* webpackChunkName: \"loki-query-field\" */ './MonacoQueryField'));\n\nexport const MonacoQueryFieldLazy = (props: Props) => {\n  return (\n    <Suspense fallback={null}>\n      <Field {...props} />\n    </Suspense>\n  );\n};\n","import React, { useRef } from 'react';\n\nimport { MonacoQueryFieldLazy } from './MonacoQueryFieldLazy';\nimport { Props as MonacoProps } from './MonacoQueryFieldProps';\n\nexport type Props = Omit<MonacoProps, 'onRunQuery' | 'onBlur'> & {\n  onChange: (query: string) => void;\n  onRunQuery: () => void;\n  onQueryType?: (query: string) => void;\n};\n\nexport const MonacoQueryFieldWrapper = (props: Props) => {\n  const lastRunValueRef = useRef<string | null>(null);\n  const { onRunQuery, onChange, ...rest } = props;\n\n  const handleRunQuery = (value: string) => {\n    lastRunValueRef.current = value;\n    onChange(value);\n    onRunQuery();\n  };\n\n  const handleBlur = (value: string) => {\n    onChange(value);\n  };\n\n  return <MonacoQueryFieldLazy onRunQuery={handleRunQuery} onBlur={handleBlur} onChange={onChange} {...rest} />;\n};\n","import React, { ReactNode } from 'react';\n\nimport { QueryEditorProps } from '@grafana/data';\n\nimport { LokiDatasource } from '../datasource';\nimport { shouldRefreshLabels } from '../languageUtils';\nimport { LokiQuery, LokiOptions } from '../types';\n\nimport { MonacoQueryFieldWrapper } from './monaco-query-field/MonacoQueryFieldWrapper';\n\nexport interface LokiQueryFieldProps extends QueryEditorProps<LokiDatasource, LokiQuery, LokiOptions> {\n  ExtraFieldElement?: ReactNode;\n  placeholder?: string;\n  'data-testid'?: string;\n}\n\ninterface LokiQueryFieldState {\n  labelsLoaded: boolean;\n}\n\nexport class LokiQueryField extends React.PureComponent<LokiQueryFieldProps, LokiQueryFieldState> {\n  _isMounted = false;\n\n  constructor(props: LokiQueryFieldProps) {\n    super(props);\n\n    this.state = { labelsLoaded: false };\n  }\n\n  async componentDidMount() {\n    this._isMounted = true;\n    await this.props.datasource.languageProvider.start(this.props.range);\n    if (this._isMounted) {\n      this.setState({ labelsLoaded: true });\n    }\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false;\n  }\n\n  componentDidUpdate(prevProps: LokiQueryFieldProps) {\n    const {\n      range,\n      datasource: { languageProvider },\n    } = this.props;\n    const refreshLabels = shouldRefreshLabels(range, prevProps.range);\n    // We want to refresh labels when range changes (we round up intervals to a minute)\n    if (refreshLabels) {\n      languageProvider.fetchLabels({ timeRange: range });\n    }\n  }\n\n  onChangeQuery = (value: string, override?: boolean) => {\n    // Send text change to parent\n    const { query, onChange, onRunQuery } = this.props;\n    if (onChange) {\n      const nextQuery = { ...query, expr: value };\n      onChange(nextQuery);\n\n      if (override && onRunQuery) {\n        onRunQuery();\n      }\n    }\n  };\n\n  render() {\n    const { ExtraFieldElement, query, datasource, history, onRunQuery, range } = this.props;\n    const placeholder = this.props.placeholder ?? 'Enter a Loki query (run with Shift+Enter)';\n\n    return (\n      <>\n        <div\n          className=\"gf-form-inline gf-form-inline--xs-view-flex-column flex-grow-1\"\n          data-testid={this.props['data-testid']}\n        >\n          <div className=\"gf-form--grow flex-shrink-1 min-width-15\">\n            <MonacoQueryFieldWrapper\n              datasource={datasource}\n              history={history ?? []}\n              onChange={this.onChangeQuery}\n              onRunQuery={onRunQuery}\n              initialValue={query.expr ?? ''}\n              placeholder={placeholder}\n              timeRange={range}\n            />\n          </div>\n        </div>\n        {ExtraFieldElement}\n      </>\n    );\n  }\n}\n","import { shuffle } from 'lodash';\nimport React, { PureComponent } from 'react';\n\nimport { QueryEditorHelpProps } from '@grafana/data';\nimport { reportInteraction } from '@grafana/runtime';\n\nimport LokiLanguageProvider from '../LanguageProvider';\nimport { escapeLabelValueInExactSelector } from '../languageUtils';\nimport { LokiQuery } from '../types';\n\nconst DEFAULT_EXAMPLES = ['{job=\"default/prometheus\"}'];\nconst PREFERRED_LABELS = ['job', 'app', 'k8s_app'];\nconst EXAMPLES_LIMIT = 5;\n\nconst LOGQL_EXAMPLES = [\n  {\n    title: 'Log pipeline',\n    expression: '{job=\"mysql\"} |= \"metrics\" | logfmt | duration > 10s',\n    label:\n      'This query targets the MySQL job, keeps logs that contain the substring \"metrics\", and then parses and filters the logs further.',\n  },\n  {\n    title: 'Count over time',\n    expression: 'count_over_time({job=\"mysql\"}[5m])',\n    label: 'This query counts all the log lines within the last five minutes for the MySQL job.',\n  },\n  {\n    title: 'Rate',\n    expression: 'rate(({job=\"mysql\"} |= \"error\" != \"timeout\")[10s])',\n    label:\n      'This query gets the per-second rate of all non-timeout errors within the last ten seconds for the MySQL job.',\n  },\n  {\n    title: 'Aggregate, count, and group',\n    expression: 'sum(count_over_time({job=\"mysql\"}[5m])) by (level)',\n    label: 'Get the count of logs during the last five minutes, grouping by level.',\n  },\n];\n\nexport default class LokiCheatSheet extends PureComponent<QueryEditorHelpProps<LokiQuery>, { userExamples: string[] }> {\n  declare userLabelTimer: ReturnType<typeof setTimeout>;\n  state = {\n    userExamples: [],\n  };\n\n  componentDidMount() {\n    this.scheduleUserLabelChecking();\n    reportInteraction('grafana_loki_cheatsheet_opened', {});\n  }\n\n  componentWillUnmount() {\n    clearTimeout(this.userLabelTimer);\n  }\n\n  scheduleUserLabelChecking() {\n    this.userLabelTimer = setTimeout(this.checkUserLabels, 1000);\n  }\n\n  checkUserLabels = async () => {\n    // Set example from user labels\n    const provider: LokiLanguageProvider = this.props.datasource?.languageProvider;\n    if (provider.started) {\n      const labels = provider.getLabelKeys() || [];\n      const preferredLabel = PREFERRED_LABELS.find((l) => labels.includes(l));\n      if (preferredLabel) {\n        const values = await provider.fetchLabelValues(preferredLabel);\n        const userExamples = shuffle(values)\n          .slice(0, EXAMPLES_LIMIT)\n          .map((value) => `{${preferredLabel}=\"${escapeLabelValueInExactSelector(value)}\"}`);\n        this.setState({ userExamples });\n      }\n    } else {\n      this.scheduleUserLabelChecking();\n    }\n  };\n\n  renderExpression(expr: string) {\n    const { onClickExample } = this.props;\n    const onClick = (query: LokiQuery) => {\n      onClickExample(query);\n      reportInteraction('grafana_loki_cheatsheet_example_clicked', {});\n    };\n\n    return (\n      <button\n        type=\"button\"\n        className=\"cheat-sheet-item__example\"\n        key={expr}\n        onClick={() => onClick({ refId: 'A', expr })}\n      >\n        <code>{expr}</code>\n      </button>\n    );\n  }\n\n  render() {\n    const { userExamples } = this.state;\n    const hasUserExamples = userExamples.length > 0;\n\n    return (\n      <div>\n        <h2>Loki Cheat Sheet</h2>\n        <div className=\"cheat-sheet-item\">\n          <div className=\"cheat-sheet-item__title\">See your logs</div>\n          <div className=\"cheat-sheet-item__label\">\n            Start by selecting a log stream from the Label browser, or alternatively you can write a stream selector\n            into the query field.\n          </div>\n          {hasUserExamples ? (\n            <div>\n              <div className=\"cheat-sheet-item__label\">Here are some example streams from your logs:</div>\n              {userExamples.map((example) => this.renderExpression(example))}\n            </div>\n          ) : (\n            <div>\n              <div className=\"cheat-sheet-item__label\">Here is an example of a log stream:</div>\n              {this.renderExpression(DEFAULT_EXAMPLES[0])}\n            </div>\n          )}\n        </div>\n        <div className=\"cheat-sheet-item\">\n          <div className=\"cheat-sheet-item__title\">Combine stream selectors</div>\n          {this.renderExpression('{app=\"cassandra\",namespace=\"prod\"}')}\n          <div className=\"cheat-sheet-item__label\">Returns all log lines from streams that have both labels.</div>\n        </div>\n\n        <div className=\"cheat-sheet-item\">\n          <div className=\"cheat-sheet-item__title\">Filtering for search terms.</div>\n          {this.renderExpression('{app=\"cassandra\"} |~ \"(duration|latency)s*(=|is|of)s*[d.]+\"')}\n          {this.renderExpression('{app=\"cassandra\"} |= \"exact match\"')}\n          {this.renderExpression('{app=\"cassandra\"} != \"do not match\"')}\n          <div className=\"cheat-sheet-item__label\">\n            <a href=\"https://grafana.com/docs/loki/latest/logql/#log-pipeline\" target=\"logql\">\n              LogQL\n            </a>{' '}\n            supports exact and regular expression filters.\n          </div>\n        </div>\n        {LOGQL_EXAMPLES.map((item) => (\n          <div className=\"cheat-sheet-item\" key={item.expression}>\n            <div className=\"cheat-sheet-item__title\">{item.title}</div>\n            {this.renderExpression(item.expression)}\n            <div className=\"cheat-sheet-item__label\">{item.label}</div>\n          </div>\n        ))}\n      </div>\n    );\n  }\n}\n","import { css, cx } from '@emotion/css';\nimport { sortBy } from 'lodash';\nimport React, { ChangeEvent } from 'react';\nimport { FixedSizeList } from 'react-window';\n\nimport { CoreApp, GrafanaTheme2, TimeRange } from '@grafana/data';\nimport { reportInteraction } from '@grafana/runtime';\nimport {\n  Button,\n  HighlightPart,\n  HorizontalGroup,\n  Input,\n  Label,\n  LoadingPlaceholder,\n  withTheme2,\n  BrowserLabel as LokiLabel,\n  fuzzyMatch,\n} from '@grafana/ui';\n\nimport LokiLanguageProvider from '../LanguageProvider';\nimport { escapeLabelValueInExactSelector, escapeLabelValueInRegexSelector } from '../languageUtils';\n\n// Hard limit on labels to render\nconst MAX_LABEL_COUNT = 1000;\nconst MAX_VALUE_COUNT = 10000;\nconst MAX_AUTO_SELECT = 4;\nconst EMPTY_SELECTOR = '{}';\n\nexport interface BrowserProps {\n  languageProvider: LokiLanguageProvider;\n  onChange: (selector: string) => void;\n  theme: GrafanaTheme2;\n  app?: CoreApp;\n  autoSelect?: number;\n  timeRange?: TimeRange;\n  hide?: () => void;\n  lastUsedLabels: string[];\n  storeLastUsedLabels: (labels: string[]) => void;\n  deleteLastUsedLabels: () => void;\n}\n\ninterface BrowserState {\n  labels: SelectableLabel[];\n  searchTerm: string;\n  status: string;\n  error: string;\n  validationStatus: string;\n}\n\ninterface FacettableValue {\n  name: string;\n  selected?: boolean;\n  highlightParts?: HighlightPart[];\n  order?: number;\n}\n\nexport interface SelectableLabel {\n  name: string;\n  selected?: boolean;\n  loading?: boolean;\n  values?: FacettableValue[];\n  hidden?: boolean;\n  facets?: number;\n}\n\nexport function buildSelector(labels: SelectableLabel[]): string {\n  const selectedLabels = [];\n  for (const label of labels) {\n    if (label.selected && label.values && label.values.length > 0) {\n      const selectedValues = label.values.filter((value) => value.selected).map((value) => value.name);\n      if (selectedValues.length > 1) {\n        selectedLabels.push(`${label.name}=~\"${selectedValues.map(escapeLabelValueInRegexSelector).join('|')}\"`);\n      } else if (selectedValues.length === 1) {\n        selectedLabels.push(`${label.name}=\"${escapeLabelValueInExactSelector(selectedValues[0])}\"`);\n      }\n    }\n  }\n  return ['{', selectedLabels.join(','), '}'].join('');\n}\n\nexport function facetLabels(\n  labels: SelectableLabel[],\n  possibleLabels: Record<string, string[]>,\n  lastFacetted?: string\n): SelectableLabel[] {\n  return labels.map((label) => {\n    const possibleValues = possibleLabels[label.name];\n    if (possibleValues) {\n      let existingValues: FacettableValue[];\n      if (label.name === lastFacetted && label.values) {\n        // Facetting this label, show all values\n        existingValues = label.values;\n      } else {\n        // Keep selection in other facets\n        const selectedValues: Set<string> = new Set(\n          label.values?.filter((value) => value.selected).map((value) => value.name) || []\n        );\n        // Values for this label have not been requested yet, let's use the facetted ones as the initial values\n        existingValues = possibleValues.map((value) => ({ name: value, selected: selectedValues.has(value) }));\n      }\n      return { ...label, loading: false, values: existingValues, facets: existingValues.length };\n    }\n\n    // Label is facetted out, hide all values\n    return { ...label, loading: false, hidden: !possibleValues, values: undefined, facets: 0 };\n  });\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  wrapper: css`\n    background-color: ${theme.colors.background.secondary};\n    width: 100%;\n  `,\n  wrapperPadding: css`\n    padding: ${theme.spacing(2)};\n  `,\n  list: css`\n    margin-top: ${theme.spacing(1)};\n    display: flex;\n    flex-wrap: wrap;\n    max-height: 200px;\n    overflow: auto;\n  `,\n  section: css`\n    & + & {\n      margin: ${theme.spacing(2, 0)};\n    }\n\n    position: relative;\n  `,\n  footerSectionStyles: css`\n    padding: ${theme.spacing(1)};\n    background-color: ${theme.colors.background.primary};\n    position: sticky;\n    bottom: -${theme.spacing(3)}; /* offset the padding on modal */\n    left: 0;\n  `,\n  selector: css`\n    font-family: ${theme.typography.fontFamilyMonospace};\n    margin-bottom: ${theme.spacing(1)};\n    width: 100%;\n  `,\n  status: css`\n    margin-bottom: ${theme.spacing(1)};\n    color: ${theme.colors.text.secondary};\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    transition: opacity 100ms linear;\n    opacity: 0;\n    font-size: ${theme.typography.bodySmall.fontSize};\n    height: calc(${theme.typography.bodySmall.fontSize} + 10px);\n  `,\n  statusShowing: css`\n    opacity: 1;\n  `,\n  error: css`\n    color: ${theme.colors.error.main};\n  `,\n  valueList: css`\n    margin-right: ${theme.spacing(1)};\n    resize: horizontal;\n  `,\n  valueListWrapper: css`\n    border-left: 1px solid ${theme.colors.border.medium};\n    margin: ${theme.spacing(1, 0)};\n    padding: ${theme.spacing(1, 0, 1, 1)};\n  `,\n  valueListArea: css`\n    display: flex;\n    flex-wrap: wrap;\n    margin-top: ${theme.spacing(1)};\n  `,\n  valueTitle: css`\n    margin-left: -${theme.spacing(0.5)};\n    margin-bottom: ${theme.spacing(1)};\n  `,\n  validationStatus: css`\n    padding: ${theme.spacing(0.5)};\n    margin-bottom: ${theme.spacing(1)};\n    color: ${theme.colors.text.maxContrast};\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n  `,\n});\n\nexport class UnthemedLokiLabelBrowser extends React.Component<BrowserProps, BrowserState> {\n  state: BrowserState = {\n    labels: [],\n    searchTerm: '',\n    status: 'Ready',\n    error: '',\n    validationStatus: '',\n  };\n\n  onChangeSearch = (event: ChangeEvent<HTMLInputElement>) => {\n    this.setState({ searchTerm: event.target.value });\n  };\n\n  onClickRunLogsQuery = () => {\n    reportInteraction('grafana_loki_label_browser_closed', {\n      app: this.props.app,\n      closeType: 'showLogsButton',\n    });\n    const selector = buildSelector(this.state.labels);\n    this.props.onChange(selector);\n  };\n\n  onClickRunMetricsQuery = () => {\n    reportInteraction('grafana_loki_label_browser_closed', {\n      app: this.props.app,\n      closeType: 'showLogsRateButton',\n    });\n    const selector = buildSelector(this.state.labels);\n    const query = `rate(${selector}[$__auto])`;\n    this.props.onChange(query);\n  };\n\n  onClickClear = () => {\n    this.setState((state) => {\n      const labels: SelectableLabel[] = state.labels.map((label) => ({\n        ...label,\n        values: undefined,\n        selected: false,\n        loading: false,\n        hidden: false,\n        facets: undefined,\n      }));\n      return { labels, searchTerm: '', status: '', error: '', validationStatus: '' };\n    });\n    this.props.deleteLastUsedLabels();\n  };\n\n  onClickLabel = (name: string, value: string | undefined, event: React.MouseEvent<HTMLElement>) => {\n    const label = this.state.labels.find((l) => l.name === name);\n    if (!label) {\n      return;\n    }\n    // Toggle selected state\n    const selected = !label.selected;\n    let nextValue: Partial<SelectableLabel> = { selected };\n    if (label.values && !selected) {\n      // Deselect all values if label was deselected\n      const values = label.values.map((value) => ({ ...value, selected: false }));\n      nextValue = { ...nextValue, facets: 0, values };\n    }\n    // Resetting search to prevent empty results\n    this.setState({ searchTerm: '' });\n    this.updateLabelState(name, nextValue, '', () => this.doFacettingForLabel(name));\n  };\n\n  onClickValue = (name: string, value: string | undefined, event: React.MouseEvent<HTMLElement>) => {\n    const label = this.state.labels.find((l) => l.name === name);\n    if (!label || !label.values) {\n      return;\n    }\n    // Resetting search to prevent empty results\n    this.setState({ searchTerm: '' });\n    // Toggling value for selected label, leaving other values intact\n    const values = label.values.map((v) => ({ ...v, selected: v.name === value ? !v.selected : v.selected }));\n    this.updateLabelState(name, { values }, '', () => this.doFacetting(name));\n  };\n\n  onClickValidate = () => {\n    const selector = buildSelector(this.state.labels);\n    this.validateSelector(selector);\n  };\n\n  updateLabelState(name: string, updatedFields: Partial<SelectableLabel>, status = '', cb?: () => void) {\n    this.setState((state) => {\n      const labels: SelectableLabel[] = state.labels.map((label) => {\n        if (label.name === name) {\n          return { ...label, ...updatedFields };\n        }\n        return label;\n      });\n      // New status overrides errors\n      const error = status ? '' : state.error;\n      return { labels, status, error, validationStatus: '' };\n    }, cb);\n  }\n\n  componentDidMount() {\n    const { languageProvider, autoSelect = MAX_AUTO_SELECT, lastUsedLabels, timeRange } = this.props;\n    if (languageProvider) {\n      const selectedLabels: string[] = lastUsedLabels;\n      languageProvider.start(timeRange).then(() => {\n        let rawLabels: string[] = languageProvider.getLabelKeys();\n        if (rawLabels.length > MAX_LABEL_COUNT) {\n          const error = `Too many labels found (showing only ${MAX_LABEL_COUNT} of ${rawLabels.length})`;\n          rawLabels = rawLabels.slice(0, MAX_LABEL_COUNT);\n          this.setState({ error });\n        }\n        // Auto-select all labels if label list is small enough\n        const labels: SelectableLabel[] = rawLabels.map((label, i, arr) => ({\n          name: label,\n          selected: (arr.length <= autoSelect && selectedLabels.length === 0) || selectedLabels.includes(label),\n          loading: false,\n        }));\n        // Pre-fetch values for selected labels\n        this.setState({ labels }, () => {\n          this.state.labels.forEach((label) => {\n            if (label.selected) {\n              this.fetchValues(label.name, EMPTY_SELECTOR);\n            }\n          });\n        });\n      });\n    }\n  }\n\n  doFacettingForLabel(name: string) {\n    const label = this.state.labels.find((l) => l.name === name);\n    if (!label) {\n      return;\n    }\n    const selectedLabels = this.state.labels.filter((label) => label.selected).map((label) => label.name);\n    this.props.storeLastUsedLabels(selectedLabels);\n    if (label.selected) {\n      // Refetch values for newly selected label...\n      if (!label.values) {\n        this.fetchValues(name, buildSelector(this.state.labels));\n      }\n    } else {\n      // Only need to facet when deselecting labels\n      this.doFacetting();\n    }\n  }\n\n  doFacetting = (lastFacetted?: string) => {\n    const selector = buildSelector(this.state.labels);\n    if (selector === EMPTY_SELECTOR) {\n      // Clear up facetting\n      const labels: SelectableLabel[] = this.state.labels.map((label) => {\n        return { ...label, facets: 0, values: undefined, hidden: false };\n      });\n      this.setState({ labels }, () => {\n        // Get fresh set of values\n        this.state.labels.forEach((label) => label.selected && this.fetchValues(label.name, selector));\n      });\n    } else {\n      // Do facetting\n      this.fetchSeries(selector, lastFacetted);\n    }\n  };\n\n  async fetchValues(name: string, selector: string) {\n    const { languageProvider, timeRange } = this.props;\n    this.updateLabelState(name, { loading: true }, `Fetching values for ${name}`);\n    try {\n      let rawValues = await languageProvider.fetchLabelValues(name, { timeRange });\n      // If selector changed, clear loading state and discard result by returning early\n      if (selector !== buildSelector(this.state.labels)) {\n        this.updateLabelState(name, { loading: false }, '');\n        return;\n      }\n      if (rawValues.length > MAX_VALUE_COUNT) {\n        const error = `Too many values for ${name} (showing only ${MAX_VALUE_COUNT} of ${rawValues.length})`;\n        rawValues = rawValues.slice(0, MAX_VALUE_COUNT);\n        this.setState({ error });\n      }\n      const values: FacettableValue[] = rawValues.map((value) => ({ name: value }));\n      this.updateLabelState(name, { values, loading: false });\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  async fetchSeries(selector: string, lastFacetted?: string) {\n    const { languageProvider, timeRange } = this.props;\n    if (lastFacetted) {\n      this.updateLabelState(lastFacetted, { loading: true }, `Loading labels for ${selector}`);\n    }\n    try {\n      const possibleLabels = await languageProvider.fetchSeriesLabels(selector, { timeRange });\n      // If selector changed, clear loading state and discard result by returning early\n      if (selector !== buildSelector(this.state.labels)) {\n        if (lastFacetted) {\n          this.updateLabelState(lastFacetted, { loading: false });\n        }\n        return;\n      }\n      if (Object.keys(possibleLabels).length === 0) {\n        this.setState({ error: `Empty results, no matching label for ${selector}` });\n        return;\n      }\n      const labels: SelectableLabel[] = facetLabels(this.state.labels, possibleLabels, lastFacetted);\n      this.setState({ labels, error: '' });\n      if (lastFacetted) {\n        this.updateLabelState(lastFacetted, { loading: false });\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  async validateSelector(selector: string) {\n    const { languageProvider, timeRange } = this.props;\n    this.setState({ validationStatus: `Validating selector ${selector}`, error: '' });\n    const streams = await languageProvider.fetchSeries(selector, { timeRange });\n    this.setState({ validationStatus: `Selector is valid (${streams.length} streams found)` });\n  }\n\n  render() {\n    const { theme } = this.props;\n    const { labels, searchTerm, status, error, validationStatus } = this.state;\n    if (labels.length === 0) {\n      return <LoadingPlaceholder text=\"Loading labels...\" />;\n    }\n    const styles = getStyles(theme);\n    const selector = buildSelector(this.state.labels);\n    const empty = selector === EMPTY_SELECTOR;\n\n    let selectedLabels = labels.filter((label) => label.selected && label.values);\n    if (searchTerm) {\n      selectedLabels = selectedLabels.map((label) => {\n        const searchResults = label.values!.filter((value) => {\n          // Always return selected values\n          if (value.selected) {\n            value.highlightParts = undefined;\n            return true;\n          }\n          const fuzzyMatchResult = fuzzyMatch(value.name.toLowerCase(), searchTerm.toLowerCase());\n          if (fuzzyMatchResult.found) {\n            value.highlightParts = fuzzyMatchResult.ranges;\n            value.order = fuzzyMatchResult.distance;\n            return true;\n          } else {\n            return false;\n          }\n        });\n        return {\n          ...label,\n          values: sortBy(searchResults, (value) => (value.selected ? -Infinity : value.order)),\n        };\n      });\n    } else {\n      // Clear highlight parts when searchTerm is cleared\n      selectedLabels = this.state.labels\n        .filter((label) => label.selected && label.values)\n        .map((label) => ({\n          ...label,\n          values: label?.values ? label.values.map((value) => ({ ...value, highlightParts: undefined })) : [],\n        }));\n    }\n\n    return (\n      <>\n        <div className={styles.wrapper}>\n          <div className={cx(styles.section, styles.wrapperPadding)}>\n            <Label description=\"Which labels would you like to consider for your search?\">\n              1. Select labels to search in\n            </Label>\n            <div className={styles.list}>\n              {labels.map((label) => (\n                <LokiLabel\n                  key={label.name}\n                  name={label.name}\n                  loading={label.loading}\n                  active={label.selected}\n                  hidden={label.hidden}\n                  facets={label.facets}\n                  onClick={this.onClickLabel}\n                />\n              ))}\n            </div>\n          </div>\n          <div className={cx(styles.section, styles.wrapperPadding)}>\n            <Label description=\"Choose the label values that you would like to use for the query. Use the search field to find values across selected labels.\">\n              2. Find values for the selected labels\n            </Label>\n            <div>\n              <Input\n                onChange={this.onChangeSearch}\n                aria-label=\"Filter expression for values\"\n                value={searchTerm}\n                placeholder={'Enter a label value'}\n              />\n            </div>\n            <div className={styles.valueListArea}>\n              {selectedLabels.map((label) => (\n                <div role=\"list\" key={label.name} className={styles.valueListWrapper}>\n                  <div className={styles.valueTitle} aria-label={`Values for ${label.name}`}>\n                    <LokiLabel\n                      name={label.name}\n                      loading={label.loading}\n                      active={label.selected}\n                      hidden={label.hidden}\n                      //If no facets, we want to show number of all label values\n                      facets={label.facets || label.values?.length}\n                      onClick={this.onClickLabel}\n                    />\n                  </div>\n                  <FixedSizeList\n                    height={200}\n                    itemCount={label.values?.length || 0}\n                    itemSize={28}\n                    itemKey={(i) => label.values?.[i].name ?? i}\n                    width={200}\n                    className={styles.valueList}\n                  >\n                    {({ index, style }) => {\n                      const value = label.values?.[index];\n                      if (!value) {\n                        return null;\n                      }\n                      return (\n                        <div style={style}>\n                          <LokiLabel\n                            name={label.name}\n                            value={value?.name}\n                            active={value?.selected}\n                            highlightParts={value?.highlightParts}\n                            onClick={this.onClickValue}\n                            searchTerm={searchTerm}\n                          />\n                        </div>\n                      );\n                    }}\n                  </FixedSizeList>\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n        <div className={styles.footerSectionStyles}>\n          <Label>3. Resulting selector</Label>\n          <pre aria-label=\"selector\" className={styles.selector}>\n            {selector}\n          </pre>\n          {validationStatus && <div className={styles.validationStatus}>{validationStatus}</div>}\n          <div className={cx(styles.status, (status || error) && styles.statusShowing)}>\n            <span className={error ? styles.error : ''}>{error || status}</span>\n          </div>\n          <HorizontalGroup>\n            <Button aria-label=\"Use selector as logs button\" disabled={empty} onClick={this.onClickRunLogsQuery}>\n              Show logs\n            </Button>\n            <Button\n              aria-label=\"Use selector as metrics button\"\n              variant=\"secondary\"\n              disabled={empty}\n              onClick={this.onClickRunMetricsQuery}\n            >\n              Show logs rate\n            </Button>\n            <Button\n              aria-label=\"Validate submit button\"\n              variant=\"secondary\"\n              disabled={empty}\n              onClick={this.onClickValidate}\n            >\n              Validate selector\n            </Button>\n            <Button aria-label=\"Selector clear button\" variant=\"secondary\" onClick={this.onClickClear}>\n              Clear\n            </Button>\n          </HorizontalGroup>\n        </div>\n      </>\n    );\n  }\n}\n\nexport const LokiLabelBrowser = withTheme2(UnthemedLokiLabelBrowser);\n","import { css } from '@emotion/css';\nimport React, { useState, useEffect } from 'react';\n\nimport { CoreApp, GrafanaTheme2, TimeRange } from '@grafana/data';\nimport { reportInteraction } from '@grafana/runtime';\nimport { LoadingPlaceholder, Modal, useStyles2 } from '@grafana/ui';\nimport { LocalStorageValueProvider } from 'app/core/components/LocalStorageValueProvider';\n\nimport { LokiLabelBrowser } from '../../components/LokiLabelBrowser';\nimport { LokiDatasource } from '../../datasource';\nimport { LokiQuery } from '../../types';\n\nexport interface Props {\n  isOpen: boolean;\n  datasource: LokiDatasource;\n  query: LokiQuery;\n  app?: CoreApp;\n  timeRange?: TimeRange;\n  onClose: () => void;\n  onChange: (query: LokiQuery) => void;\n  onRunQuery: () => void;\n}\n\nexport const LabelBrowserModal = (props: Props) => {\n  const { isOpen, onClose, datasource, app, timeRange } = props;\n  const [labelsLoaded, setLabelsLoaded] = useState(false);\n  const [hasLogLabels, setHasLogLabels] = useState(false);\n  const LAST_USED_LABELS_KEY = 'grafana.datasources.loki.browser.labels';\n\n  const styles = useStyles2(getStyles);\n\n  useEffect(() => {\n    if (!isOpen) {\n      return;\n    }\n\n    datasource.languageProvider.fetchLabels({ timeRange }).then((labels) => {\n      setLabelsLoaded(true);\n      setHasLogLabels(labels.length > 0);\n    });\n  }, [datasource, isOpen, timeRange]);\n\n  const changeQuery = (value: string) => {\n    const { query, onChange, onRunQuery } = props;\n    const nextQuery = { ...query, expr: value };\n    onChange(nextQuery);\n    onRunQuery();\n  };\n\n  const onChange = (selector: string) => {\n    changeQuery(selector);\n    onClose();\n  };\n\n  const reportInteractionAndClose = () => {\n    reportInteraction('grafana_loki_label_browser_closed', {\n      app,\n      closeType: 'modalClose',\n    });\n    onClose();\n  };\n\n  return (\n    <Modal isOpen={isOpen} title=\"Label browser\" onDismiss={reportInteractionAndClose} className={styles.modal}>\n      {!labelsLoaded && <LoadingPlaceholder text=\"Loading labels...\" />}\n      {labelsLoaded && !hasLogLabels && <p>No labels found.</p>}\n      {labelsLoaded && hasLogLabels && (\n        <LocalStorageValueProvider<string[]> storageKey={LAST_USED_LABELS_KEY} defaultValue={[]}>\n          {(lastUsedLabels, onLastUsedLabelsSave, onLastUsedLabelsDelete) => {\n            return (\n              <LokiLabelBrowser\n                languageProvider={datasource.languageProvider}\n                onChange={onChange}\n                lastUsedLabels={lastUsedLabels}\n                storeLastUsedLabels={onLastUsedLabelsSave}\n                deleteLastUsedLabels={onLastUsedLabelsDelete}\n                app={app}\n                timeRange={timeRange}\n              />\n            );\n          }}\n        </LocalStorageValueProvider>\n      )}\n    </Modal>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    modal: css`\n      width: 85vw;\n      ${theme.breakpoints.down('md')} {\n        width: 100%;\n      }\n    `,\n  };\n};\n","import { uniqBy } from 'lodash';\nimport React, { useState } from 'react';\n\nimport { SelectableValue, toOption } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { AccessoryButton, InputGroup } from '@grafana/experimental';\nimport { InlineField, Select } from '@grafana/ui';\nimport { lokiOperators } from 'app/plugins/datasource/loki/querybuilder/types';\n\nimport { isConflictingSelector } from '../operationUtils';\n\nimport { QueryBuilderLabelFilter } from './types';\n\nexport interface Props {\n  defaultOp: string;\n  item: Partial<QueryBuilderLabelFilter>;\n  items: Array<Partial<QueryBuilderLabelFilter>>;\n  onChange: (value: QueryBuilderLabelFilter) => void;\n  onGetLabelNames: (forLabel: Partial<QueryBuilderLabelFilter>) => Promise<SelectableValue[]>;\n  onGetLabelValues: (forLabel: Partial<QueryBuilderLabelFilter>) => Promise<SelectableValue[]>;\n  onDelete: () => void;\n  invalidLabel?: boolean;\n  invalidValue?: boolean;\n}\n\nexport function LabelFilterItem({\n  item,\n  items,\n  defaultOp,\n  onChange,\n  onDelete,\n  onGetLabelNames,\n  onGetLabelValues,\n  invalidLabel,\n  invalidValue,\n}: Props) {\n  const [state, setState] = useState<{\n    labelNames?: SelectableValue[];\n    labelValues?: SelectableValue[];\n    isLoadingLabelNames?: boolean;\n    isLoadingLabelValues?: boolean;\n  }>({});\n  // there's a bug in react-select where the menu doesn't recalculate its position when the options are loaded asynchronously\n  // see https://github.com/grafana/grafana/issues/63558\n  // instead, we explicitly control the menu visibility and prevent showing it until the options have fully loaded\n  const [labelNamesMenuOpen, setLabelNamesMenuOpen] = useState(false);\n  const [labelValuesMenuOpen, setLabelValuesMenuOpen] = useState(false);\n  const CONFLICTING_LABEL_FILTER_ERROR_MESSAGE = 'You have conflicting label filters';\n\n  const isMultiSelect = (operator = item.op) => {\n    return operators.find((op) => op.label === operator)?.isMultiValue;\n  };\n\n  const getSelectOptionsFromString = (item?: string): string[] => {\n    if (item) {\n      if (item.indexOf('|') > 0) {\n        return item.split('|');\n      }\n      return [item];\n    }\n    return [];\n  };\n\n  const getOptions = (): SelectableValue[] => {\n    const labelValues = state.labelValues ? [...state.labelValues] : [];\n    const selectedOptions = getSelectOptionsFromString(item?.value).map(toOption);\n\n    // Remove possible duplicated values\n    return uniqBy([...selectedOptions, ...labelValues], 'value');\n  };\n\n  const isConflicting = isConflictingSelector(item, items);\n\n  return (\n    <div data-testid=\"prometheus-dimensions-filter-item\">\n      <InlineField error={CONFLICTING_LABEL_FILTER_ERROR_MESSAGE} invalid={isConflicting ? true : undefined}>\n        <InputGroup>\n          <Select\n            placeholder=\"Select label\"\n            data-testid={selectors.components.QueryBuilder.labelSelect}\n            inputId=\"prometheus-dimensions-filter-item-key\"\n            width=\"auto\"\n            value={item.label ? toOption(item.label) : null}\n            allowCustomValue\n            onOpenMenu={async () => {\n              setState({ isLoadingLabelNames: true });\n              const labelNames = await onGetLabelNames(item);\n              setLabelNamesMenuOpen(true);\n              setState({ labelNames, isLoadingLabelNames: undefined });\n            }}\n            onCloseMenu={() => {\n              setLabelNamesMenuOpen(false);\n            }}\n            isOpen={labelNamesMenuOpen}\n            isLoading={state.isLoadingLabelNames}\n            options={state.labelNames}\n            onChange={(change) => {\n              if (change.label) {\n                onChange({\n                  ...item,\n                  op: item.op ?? defaultOp,\n                  label: change.label,\n                } as unknown as QueryBuilderLabelFilter);\n              }\n            }}\n            invalid={isConflicting || invalidLabel}\n          />\n\n          <Select\n            data-testid={selectors.components.QueryBuilder.matchOperatorSelect}\n            value={toOption(item.op ?? defaultOp)}\n            options={operators}\n            width=\"auto\"\n            onChange={(change) => {\n              if (change.value != null) {\n                onChange({\n                  ...item,\n                  op: change.value,\n                  value: isMultiSelect(change.value) ? item.value : getSelectOptionsFromString(item?.value)[0],\n                } as unknown as QueryBuilderLabelFilter);\n              }\n            }}\n            invalid={isConflicting}\n          />\n\n          <Select\n            placeholder=\"Select value\"\n            data-testid={selectors.components.QueryBuilder.valueSelect}\n            inputId=\"prometheus-dimensions-filter-item-value\"\n            width=\"auto\"\n            value={\n              isMultiSelect()\n                ? getSelectOptionsFromString(item?.value).map(toOption)\n                : getSelectOptionsFromString(item?.value).map(toOption)[0]\n            }\n            allowCustomValue\n            onOpenMenu={async () => {\n              setState({ isLoadingLabelValues: true });\n              const labelValues = await onGetLabelValues(item);\n              setState({\n                ...state,\n                labelValues,\n                isLoadingLabelValues: undefined,\n              });\n              setLabelValuesMenuOpen(true);\n            }}\n            onCloseMenu={() => {\n              setLabelValuesMenuOpen(false);\n            }}\n            isOpen={labelValuesMenuOpen}\n            isMulti={isMultiSelect()}\n            isLoading={state.isLoadingLabelValues}\n            options={getOptions()}\n            onChange={(change) => {\n              if (change.value) {\n                onChange({\n                  ...item,\n                  value: change.value,\n                  op: item.op ?? defaultOp,\n                } as unknown as QueryBuilderLabelFilter);\n              } else {\n                const changes = change\n                  .map((change: any) => {\n                    return change.label;\n                  })\n                  .join('|');\n                onChange({ ...item, value: changes, op: item.op ?? defaultOp } as unknown as QueryBuilderLabelFilter);\n              }\n            }}\n            invalid={isConflicting || invalidValue}\n          />\n          <AccessoryButton aria-label=\"remove\" icon=\"times\" variant=\"secondary\" onClick={onDelete} />\n        </InputGroup>\n      </InlineField>\n    </div>\n  );\n}\n\nconst operators = [\n  lokiOperators.equals,\n  lokiOperators.doesNotEqual,\n  lokiOperators.matchesRegex,\n  lokiOperators.doesNotMatchRegex,\n];\n","import { isEqual } from 'lodash';\nimport React, { useEffect, useState } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { EditorFieldGroup, EditorField, EditorList } from '@grafana/experimental';\n\nimport { QueryBuilderLabelFilter } from '../shared/types';\n\nimport { LabelFilterItem } from './LabelFilterItem';\n\nexport const MISSING_LABEL_FILTER_ERROR_MESSAGE = 'Select at least 1 label filter (label and value)';\n\nexport interface Props {\n  labelsFilters: QueryBuilderLabelFilter[];\n  onChange: (labelFilters: QueryBuilderLabelFilter[]) => void;\n  onGetLabelNames: (forLabel: Partial<QueryBuilderLabelFilter>) => Promise<SelectableValue[]>;\n  onGetLabelValues: (forLabel: Partial<QueryBuilderLabelFilter>) => Promise<SelectableValue[]>;\n  /** If set to true, component will show error message until at least 1 filter is selected */\n  labelFilterRequired?: boolean;\n}\n\nexport function LabelFilters({\n  labelsFilters,\n  onChange,\n  onGetLabelNames,\n  onGetLabelValues,\n  labelFilterRequired,\n}: Props) {\n  const defaultOp = '=';\n  const [items, setItems] = useState<Array<Partial<QueryBuilderLabelFilter>>>([{ op: defaultOp }]);\n\n  useEffect(() => {\n    if (labelsFilters.length > 0) {\n      setItems(labelsFilters);\n    } else {\n      setItems([{ op: defaultOp }]);\n    }\n  }, [labelsFilters]);\n\n  const onLabelsChange = (newItems: Array<Partial<QueryBuilderLabelFilter>>) => {\n    setItems(newItems);\n\n    // Extract full label filters with both label & value\n    const newLabels = newItems.filter((x) => x.label != null && x.value != null);\n    if (!isEqual(newLabels, labelsFilters)) {\n      onChange(newLabels as QueryBuilderLabelFilter[]);\n    }\n  };\n\n  const hasLabelFilter = items.some((item) => item.label && item.value);\n\n  return (\n    <EditorFieldGroup>\n      <EditorField\n        label=\"Label filters\"\n        error={MISSING_LABEL_FILTER_ERROR_MESSAGE}\n        invalid={labelFilterRequired && !hasLabelFilter}\n      >\n        <EditorList\n          items={items}\n          onChange={onLabelsChange}\n          renderItem={(item: Partial<QueryBuilderLabelFilter>, onChangeItem, onDelete) => (\n            <LabelFilterItem\n              item={item}\n              items={items}\n              defaultOp={defaultOp}\n              onChange={onChangeItem}\n              onDelete={onDelete}\n              onGetLabelNames={onGetLabelNames}\n              onGetLabelValues={onGetLabelValues}\n              invalidLabel={labelFilterRequired && !item.label}\n              invalidValue={labelFilterRequired && !item.value}\n            />\n          )}\n        />\n      </EditorField>\n    </EditorFieldGroup>\n  );\n}\n","import React from 'react';\n\nimport { Stack } from '@grafana/ui';\nimport { OperationExplainedBox } from 'app/plugins/datasource/prometheus/querybuilder/shared/OperationExplainedBox';\nimport { OperationListExplained } from 'app/plugins/datasource/prometheus/querybuilder/shared/OperationListExplained';\nimport { RawQuery } from 'app/plugins/datasource/prometheus/querybuilder/shared/RawQuery';\n\nimport { lokiGrammar } from '../../syntax';\nimport { lokiQueryModeller } from '../LokiQueryModeller';\nimport { buildVisualQueryFromString } from '../parsing';\nimport { LokiVisualQuery } from '../types';\n\nexport const EXPLAIN_LABEL_FILTER_CONTENT = 'Fetch all log lines matching label filters.';\n\nexport interface Props {\n  query: string;\n}\n\nexport const LokiQueryBuilderExplained = React.memo<Props>(({ query }) => {\n  const visQuery = buildVisualQueryFromString(query || '').query;\n  const lang = { grammar: lokiGrammar, name: 'lokiql' };\n\n  return (\n    <Stack gap={0} direction=\"column\">\n      <OperationExplainedBox\n        stepNumber={1}\n        title={<RawQuery query={`${lokiQueryModeller.renderLabels(visQuery.labels)}`} lang={lang} />}\n      >\n        {EXPLAIN_LABEL_FILTER_CONTENT}\n      </OperationExplainedBox>\n      <OperationListExplained<LokiVisualQuery>\n        stepNumber={2}\n        queryModeller={lokiQueryModeller}\n        query={visQuery}\n        lang={lang}\n      />\n    </Stack>\n  );\n});\n\nLokiQueryBuilderExplained.displayName = 'LokiQueryBuilderExplained';\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2, toOption } from '@grafana/data';\nimport { EditorRows, FlexItem } from '@grafana/experimental';\nimport { AutoSizeInput, IconButton, Select, useStyles2 } from '@grafana/ui';\n\nimport { LokiDatasource } from '../../datasource';\nimport { binaryScalarDefs } from '../binaryScalarOperations';\nimport { LokiVisualQueryBinary } from '../types';\n\nimport { LokiQueryBuilder } from './LokiQueryBuilder';\n\nexport interface Props {\n  nestedQuery: LokiVisualQueryBinary;\n  datasource: LokiDatasource;\n  index: number;\n  showExplain: boolean;\n  onChange: (index: number, update: LokiVisualQueryBinary) => void;\n  onRemove: (index: number) => void;\n  onRunQuery: () => void;\n}\n\nexport const NestedQuery = React.memo<Props>(\n  ({ nestedQuery, index, datasource, onChange, onRemove, onRunQuery, showExplain }) => {\n    const styles = useStyles2(getStyles);\n\n    return (\n      <div className={styles.card}>\n        <div className={styles.header}>\n          <div className={styles.name}>Operator</div>\n          <Select\n            aria-label=\"Select operator\"\n            width=\"auto\"\n            options={operators}\n            value={toOption(nestedQuery.operator)}\n            onChange={(value) => {\n              onChange(index, {\n                ...nestedQuery,\n                operator: value.value!,\n              });\n            }}\n          />\n          <div className={styles.name}>Vector matches</div>\n          <div className={styles.vectorMatchWrapper}>\n            <Select<LokiVisualQueryBinary['vectorMatchesType']>\n              width=\"auto\"\n              value={nestedQuery.vectorMatchesType || 'on'}\n              allowCustomValue\n              options={[\n                { value: 'on', label: 'on' },\n                { value: 'ignoring', label: 'ignoring' },\n              ]}\n              onChange={(val) => {\n                onChange(index, {\n                  ...nestedQuery,\n                  vectorMatchesType: val.value,\n                });\n              }}\n            />\n            <AutoSizeInput\n              className={styles.vectorMatchInput}\n              minWidth={20}\n              defaultValue={nestedQuery.vectorMatches}\n              onCommitChange={(evt) => {\n                onChange(index, {\n                  ...nestedQuery,\n                  vectorMatches: evt.currentTarget.value,\n                  vectorMatchesType: nestedQuery.vectorMatchesType || 'on',\n                });\n              }}\n            />\n          </div>\n          <FlexItem grow={1} />\n          <IconButton name=\"times\" size=\"sm\" onClick={() => onRemove(index)} tooltip=\"Remove nested query\" />\n        </div>\n        <div className={styles.body}>\n          <EditorRows>\n            <LokiQueryBuilder\n              showExplain={showExplain}\n              query={nestedQuery.query}\n              datasource={datasource}\n              onRunQuery={onRunQuery}\n              onChange={(update) => {\n                onChange(index, { ...nestedQuery, query: update });\n              }}\n            />\n          </EditorRows>\n        </div>\n      </div>\n    );\n  }\n);\n\nconst operators = binaryScalarDefs.map((def) => ({ label: def.sign, value: def.sign }));\n\nNestedQuery.displayName = 'NestedQuery';\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    card: css({\n      label: 'card',\n      display: 'flex',\n      flexDirection: 'column',\n      gap: theme.spacing(0.5),\n    }),\n    header: css({\n      label: 'header',\n      padding: theme.spacing(0.5, 0.5, 0.5, 1),\n      gap: theme.spacing(1),\n      display: 'flex',\n      alignItems: 'center',\n    }),\n    name: css({\n      label: 'name',\n      whiteSpace: 'nowrap',\n    }),\n    body: css({\n      label: 'body',\n      paddingLeft: theme.spacing(2),\n    }),\n    vectorMatchInput: css({\n      label: 'vectorMatchInput',\n      marginLeft: -1,\n    }),\n    vectorMatchWrapper: css({\n      label: 'vectorMatchWrapper',\n      display: 'flex',\n    }),\n  };\n};\n","import React from 'react';\n\nimport { Stack } from '@grafana/ui';\n\nimport { LokiDatasource } from '../../datasource';\nimport { LokiVisualQuery, LokiVisualQueryBinary } from '../types';\n\nimport { NestedQuery } from './NestedQuery';\n\nexport interface Props {\n  query: LokiVisualQuery;\n  datasource: LokiDatasource;\n  showExplain: boolean;\n  onChange: (query: LokiVisualQuery) => void;\n  onRunQuery: () => void;\n}\n\nexport function NestedQueryList({ query, datasource, onChange, onRunQuery, showExplain }: Props) {\n  const nestedQueries = query.binaryQueries ?? [];\n\n  const onNestedQueryUpdate = (index: number, update: LokiVisualQueryBinary) => {\n    const updatedList = [...nestedQueries];\n    updatedList.splice(index, 1, update);\n    onChange({ ...query, binaryQueries: updatedList });\n  };\n\n  const onRemove = (index: number) => {\n    const updatedList = [...nestedQueries.slice(0, index), ...nestedQueries.slice(index + 1)];\n    onChange({ ...query, binaryQueries: updatedList });\n  };\n\n  return (\n    <Stack direction=\"column\" gap={1}>\n      {nestedQueries.map((nestedQuery, index) => (\n        <NestedQuery\n          key={index.toString()}\n          nestedQuery={nestedQuery}\n          index={index}\n          onChange={onNestedQueryUpdate}\n          datasource={datasource}\n          onRemove={onRemove}\n          onRunQuery={onRunQuery}\n          showExplain={showExplain}\n        />\n      ))}\n    </Stack>\n  );\n}\n","import React, { useEffect, useMemo, useState } from 'react';\n\nimport { DataSourceApi, getDefaultTimeRange, LoadingState, PanelData, SelectableValue, TimeRange } from '@grafana/data';\nimport { EditorRow } from '@grafana/experimental';\nimport { config } from '@grafana/runtime';\nimport { LabelFilters } from 'app/plugins/datasource/prometheus/querybuilder/shared/LabelFilters';\nimport { OperationExplainedBox } from 'app/plugins/datasource/prometheus/querybuilder/shared/OperationExplainedBox';\nimport { OperationList } from 'app/plugins/datasource/prometheus/querybuilder/shared/OperationList';\nimport { OperationListExplained } from 'app/plugins/datasource/prometheus/querybuilder/shared/OperationListExplained';\nimport { OperationsEditorRow } from 'app/plugins/datasource/prometheus/querybuilder/shared/OperationsEditorRow';\nimport { QueryBuilderHints } from 'app/plugins/datasource/prometheus/querybuilder/shared/QueryBuilderHints';\nimport { RawQuery } from 'app/plugins/datasource/prometheus/querybuilder/shared/RawQuery';\nimport {\n  QueryBuilderLabelFilter,\n  QueryBuilderOperation,\n} from 'app/plugins/datasource/prometheus/querybuilder/shared/types';\n\nimport { testIds } from '../../components/LokiQueryEditor';\nimport { LokiDatasource } from '../../datasource';\nimport { escapeLabelValueInSelector } from '../../languageUtils';\nimport logqlGrammar from '../../syntax';\nimport { lokiQueryModeller } from '../LokiQueryModeller';\nimport { buildVisualQueryFromString } from '../parsing';\nimport { LokiOperationId, LokiVisualQuery } from '../types';\n\nimport { EXPLAIN_LABEL_FILTER_CONTENT } from './LokiQueryBuilderExplained';\nimport { NestedQueryList } from './NestedQueryList';\n\nexport interface Props {\n  query: LokiVisualQuery;\n  datasource: LokiDatasource;\n  showExplain: boolean;\n  timeRange?: TimeRange;\n  onChange: (update: LokiVisualQuery) => void;\n  onRunQuery: () => void;\n}\nexport const LokiQueryBuilder = React.memo<Props>(\n  ({ datasource, query, onChange, onRunQuery, showExplain, timeRange }) => {\n    const [sampleData, setSampleData] = useState<PanelData>();\n    const [highlightedOp, setHighlightedOp] = useState<QueryBuilderOperation | undefined>(undefined);\n\n    const onChangeLabels = (labels: QueryBuilderLabelFilter[]) => {\n      onChange({ ...query, labels });\n    };\n\n    const withTemplateVariableOptions = async (optionsPromise: Promise<string[]>): Promise<SelectableValue[]> => {\n      const options = await optionsPromise;\n      return [...datasource.getVariables(), ...options].map((value) => ({ label: value, value }));\n    };\n\n    const onGetLabelNames = async (forLabel: Partial<QueryBuilderLabelFilter>): Promise<string[]> => {\n      const labelsToConsider = query.labels.filter((x) => x !== forLabel);\n\n      if (labelsToConsider.length === 0) {\n        return await datasource.languageProvider.fetchLabels({ timeRange });\n      }\n\n      const expr = lokiQueryModeller.renderLabels(labelsToConsider);\n      const series = await datasource.languageProvider.fetchSeriesLabels(expr, { timeRange });\n      const labelsNamesToConsider = labelsToConsider.map((l) => l.label);\n\n      const labelNames = Object.keys(series)\n        // Filter out label names that are already selected\n        .filter((name) => !labelsNamesToConsider.includes(name))\n        .sort();\n\n      return labelNames;\n    };\n\n    const onGetLabelValues = async (forLabel: Partial<QueryBuilderLabelFilter>) => {\n      if (!forLabel.label) {\n        return [];\n      }\n\n      let values;\n      const labelsToConsider = query.labels.filter((x) => x !== forLabel);\n      if (labelsToConsider.length === 0) {\n        values = await datasource.languageProvider.fetchLabelValues(forLabel.label, { timeRange });\n      } else {\n        const expr = lokiQueryModeller.renderLabels(labelsToConsider);\n        const result = await datasource.languageProvider.fetchSeriesLabels(expr);\n        values = result[datasource.interpolateString(forLabel.label)];\n      }\n\n      return values ? values.map((v) => escapeLabelValueInSelector(v, forLabel.op)) : []; // Escape values in return\n    };\n\n    const labelFilterRequired: boolean = useMemo(() => {\n      const { labels, operations: op } = query;\n      if (!labels.length && op.length) {\n        // Filter is required when operations are present (empty line contains operation is exception)\n        if (op.length === 1 && op[0].id === LokiOperationId.LineContains && op[0].params[0] === '') {\n          return false;\n        }\n        return true;\n      }\n      return false;\n    }, [query]);\n\n    useEffect(() => {\n      const onGetSampleData = async () => {\n        const lokiQuery = { expr: lokiQueryModeller.renderQuery(query), refId: 'data-samples' };\n        const range = timeRange ?? getDefaultTimeRange();\n        const series = await datasource.getDataSamples(lokiQuery, range);\n        const sampleData = { series, state: LoadingState.Done, timeRange: range };\n        setSampleData(sampleData);\n      };\n\n      if (config.featureToggles.lokiQueryHints) {\n        onGetSampleData().catch(console.error);\n      }\n    }, [datasource, query, timeRange]);\n\n    const lang = { grammar: logqlGrammar, name: 'logql' };\n    return (\n      <div data-testid={testIds.editor}>\n        <EditorRow>\n          <LabelFilters\n            onGetLabelNames={(forLabel: Partial<QueryBuilderLabelFilter>) =>\n              withTemplateVariableOptions(onGetLabelNames(forLabel))\n            }\n            onGetLabelValues={(forLabel: Partial<QueryBuilderLabelFilter>) =>\n              withTemplateVariableOptions(onGetLabelValues(forLabel))\n            }\n            labelsFilters={query.labels}\n            onChange={onChangeLabels}\n            labelFilterRequired={labelFilterRequired}\n          />\n        </EditorRow>\n        {showExplain && (\n          <OperationExplainedBox\n            stepNumber={1}\n            title={<RawQuery query={`${lokiQueryModeller.renderLabels(query.labels)}`} lang={lang} />}\n          >\n            {EXPLAIN_LABEL_FILTER_CONTENT}\n          </OperationExplainedBox>\n        )}\n        <OperationsEditorRow>\n          <OperationList\n            queryModeller={lokiQueryModeller}\n            query={query}\n            onChange={onChange}\n            onRunQuery={onRunQuery}\n            datasource={datasource as DataSourceApi}\n            highlightedOp={highlightedOp}\n          />\n          <QueryBuilderHints<LokiVisualQuery>\n            datasource={datasource}\n            query={query}\n            onChange={onChange}\n            data={sampleData}\n            queryModeller={lokiQueryModeller}\n            buildVisualQueryFromString={buildVisualQueryFromString}\n          />\n        </OperationsEditorRow>\n        {showExplain && (\n          <OperationListExplained<LokiVisualQuery>\n            stepNumber={2}\n            queryModeller={lokiQueryModeller}\n            query={query}\n            lang={lang}\n            onMouseEnter={(op) => {\n              setHighlightedOp(op);\n            }}\n            onMouseLeave={() => {\n              setHighlightedOp(undefined);\n            }}\n          />\n        )}\n        {query.binaryQueries && query.binaryQueries.length > 0 && (\n          <NestedQueryList\n            query={query}\n            datasource={datasource}\n            onChange={onChange}\n            onRunQuery={onRunQuery}\n            showExplain={showExplain}\n          />\n        )}\n      </div>\n    );\n  }\n);\n\nLokiQueryBuilder.displayName = 'LokiQueryBuilder';\n","import React from 'react';\n\nimport { EditorRow, EditorFieldGroup } from '@grafana/experimental';\n\nimport { RawQuery } from '../../../prometheus/querybuilder/shared/RawQuery';\nimport { lokiGrammar } from '../../syntax';\n\nexport interface Props {\n  query: string;\n}\n\nexport function QueryPreview({ query }: Props) {\n  return (\n    <EditorRow>\n      <EditorFieldGroup>\n        <RawQuery query={query} lang={{ grammar: lokiGrammar, name: 'lokiql' }} />\n      </EditorFieldGroup>\n    </EditorRow>\n  );\n}\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport React, { useEffect, useReducer } from 'react';\n\nimport { TimeRange } from '@grafana/data';\n\nimport { testIds } from '../../components/LokiQueryEditor';\nimport { LokiDatasource } from '../../datasource';\nimport { LokiQuery } from '../../types';\nimport { lokiQueryModeller } from '../LokiQueryModeller';\nimport { buildVisualQueryFromString } from '../parsing';\nimport { LokiVisualQuery } from '../types';\n\nimport { LokiQueryBuilder } from './LokiQueryBuilder';\nimport { QueryPreview } from './QueryPreview';\n\nexport interface Props {\n  query: LokiQuery;\n  datasource: LokiDatasource;\n  onChange: (update: LokiQuery) => void;\n  onRunQuery: () => void;\n  showExplain: boolean;\n  timeRange?: TimeRange;\n}\n\nexport interface State {\n  visQuery?: LokiVisualQuery;\n  expr: string;\n}\n\n/**\n * This component is here just to contain the translation logic between string query and the visual query builder model.\n */\nexport function LokiQueryBuilderContainer(props: Props) {\n  const { query, onChange, onRunQuery, datasource, showExplain, timeRange } = props;\n  const [state, dispatch] = useReducer(stateSlice.reducer, {\n    expr: query.expr,\n    // Use initial visual query only if query.expr is empty string\n    visQuery:\n      query.expr === ''\n        ? {\n            labels: [],\n            operations: [{ id: '__line_contains', params: [''] }],\n          }\n        : undefined,\n  });\n\n  // Only rebuild visual query if expr changes from outside\n  useEffect(() => {\n    dispatch(exprChanged(query.expr));\n  }, [query.expr]);\n\n  const onVisQueryChange = (visQuery: LokiVisualQuery) => {\n    const expr = lokiQueryModeller.renderQuery(visQuery);\n    dispatch(visualQueryChange({ visQuery, expr }));\n    onChange({ ...props.query, expr: expr });\n  };\n\n  if (!state.visQuery) {\n    return null;\n  }\n\n  return (\n    <>\n      <LokiQueryBuilder\n        query={state.visQuery}\n        datasource={datasource}\n        onChange={onVisQueryChange}\n        onRunQuery={onRunQuery}\n        showExplain={showExplain}\n        data-testid={testIds.editor}\n        timeRange={timeRange}\n      />\n      {query.expr !== '' && <QueryPreview query={query.expr} />}\n    </>\n  );\n}\n\nconst initialState: State = { expr: '' };\n\nconst stateSlice = createSlice({\n  name: 'loki-builder-container',\n  initialState,\n  reducers: {\n    visualQueryChange: (state, action: PayloadAction<{ visQuery: LokiVisualQuery; expr: string }>) => {\n      state.expr = action.payload.expr;\n      state.visQuery = action.payload.visQuery;\n    },\n    exprChanged: (state, action: PayloadAction<string>) => {\n      if (!state.visQuery || state.expr !== action.payload) {\n        state.expr = action.payload;\n        const parseResult = buildVisualQueryFromString(action.payload);\n        state.visQuery = parseResult.query;\n      }\n    },\n  },\n});\n\nconst { visualQueryChange, exprChanged } = stateSlice.actions;\n","import { trim } from 'lodash';\nimport React, { useMemo, useState } from 'react';\n\nimport { CoreApp, isValidDuration, isValidGrafanaDuration, SelectableValue } from '@grafana/data';\nimport { EditorField, EditorRow } from '@grafana/experimental';\nimport { config, reportInteraction } from '@grafana/runtime';\nimport { Alert, AutoSizeInput, RadioButtonGroup, Select } from '@grafana/ui';\nimport { QueryOptionGroup } from 'app/plugins/datasource/prometheus/querybuilder/shared/QueryOptionGroup';\n\nimport { preprocessMaxLines, queryTypeOptions, RESOLUTION_OPTIONS } from '../../components/LokiOptionFields';\nimport { getLokiQueryType, isLogsQuery } from '../../queryUtils';\nimport { LokiQuery, LokiQueryType, QueryStats } from '../../types';\n\nexport interface Props {\n  query: LokiQuery;\n  onChange: (update: LokiQuery) => void;\n  onRunQuery: () => void;\n  maxLines: number;\n  app?: CoreApp;\n  queryStats: QueryStats | null;\n}\n\nexport const LokiQueryBuilderOptions = React.memo<Props>(\n  ({ app, query, onChange, onRunQuery, maxLines, queryStats }) => {\n    const [splitDurationValid, setSplitDurationValid] = useState(true);\n\n    const onQueryTypeChange = (value: LokiQueryType) => {\n      onChange({ ...query, queryType: value });\n      onRunQuery();\n    };\n\n    const onResolutionChange = (option: SelectableValue<number>) => {\n      reportInteraction('grafana_loki_resolution_clicked', {\n        app,\n        resolution: option.value,\n      });\n      onChange({ ...query, resolution: option.value });\n      onRunQuery();\n    };\n\n    const onChunkRangeChange = (evt: React.FormEvent<HTMLInputElement>) => {\n      const value = evt.currentTarget.value;\n      if (!isValidDuration(value)) {\n        setSplitDurationValid(false);\n        return;\n      }\n      setSplitDurationValid(true);\n      onChange({ ...query, splitDuration: value });\n      onRunQuery();\n    };\n\n    const onLegendFormatChanged = (evt: React.FormEvent<HTMLInputElement>) => {\n      onChange({ ...query, legendFormat: evt.currentTarget.value });\n      onRunQuery();\n    };\n\n    function onMaxLinesChange(e: React.SyntheticEvent<HTMLInputElement>) {\n      const newMaxLines = preprocessMaxLines(e.currentTarget.value);\n      if (query.maxLines !== newMaxLines) {\n        onChange({ ...query, maxLines: newMaxLines });\n        onRunQuery();\n      }\n    }\n\n    function onStepChange(e: React.SyntheticEvent<HTMLInputElement>) {\n      onChange({ ...query, step: trim(e.currentTarget.value) });\n      onRunQuery();\n    }\n\n    const queryType = getLokiQueryType(query);\n    const isLogQuery = isLogsQuery(query.expr);\n\n    const isValidStep = useMemo(() => {\n      if (!query.step || isValidGrafanaDuration(query.step) || !isNaN(Number(query.step))) {\n        return true;\n      }\n      return false;\n    }, [query.step]);\n\n    return (\n      <EditorRow>\n        <QueryOptionGroup\n          title=\"Options\"\n          collapsedInfo={getCollapsedInfo(query, queryType, maxLines, isLogQuery, isValidStep)}\n          queryStats={queryStats}\n        >\n          <EditorField\n            label=\"Legend\"\n            tooltip=\"Series name override or template. Ex. {{hostname}} will be replaced with label value for hostname.\"\n          >\n            <AutoSizeInput\n              placeholder=\"{{label}}\"\n              type=\"string\"\n              minWidth={14}\n              defaultValue={query.legendFormat}\n              onCommitChange={onLegendFormatChanged}\n            />\n          </EditorField>\n          <EditorField label=\"Type\">\n            <RadioButtonGroup options={queryTypeOptions} value={queryType} onChange={onQueryTypeChange} />\n          </EditorField>\n          {isLogQuery && (\n            <EditorField label=\"Line limit\" tooltip=\"Upper limit for number of log lines returned by query.\">\n              <AutoSizeInput\n                className=\"width-4\"\n                placeholder={maxLines.toString()}\n                type=\"number\"\n                min={0}\n                defaultValue={query.maxLines?.toString() ?? ''}\n                onCommitChange={onMaxLinesChange}\n              />\n            </EditorField>\n          )}\n          {!isLogQuery && (\n            <>\n              <EditorField\n                label=\"Step\"\n                tooltip=\"Use the step parameter when making metric queries to Loki. If not filled, Grafana's calculated interval will be used. Example valid values: 1s, 5m, 10h, 1d.\"\n                invalid={!isValidStep}\n                error={'Invalid step. Example valid values: 1s, 5m, 10h, 1d.'}\n              >\n                <AutoSizeInput\n                  className=\"width-6\"\n                  placeholder={'auto'}\n                  type=\"string\"\n                  defaultValue={query.step ?? ''}\n                  onCommitChange={onStepChange}\n                />\n              </EditorField>\n              {query.resolution !== undefined && query.resolution > 1 && (\n                <>\n                  <EditorField\n                    label=\"Resolution\"\n                    tooltip=\"Changes the step parameter of Loki metrics range queries. With a resolution of 1/1, each pixel corresponds to one data point. 1/10 retrieves one data point per 10 pixels. Lower resolutions perform better.\"\n                  >\n                    <Select\n                      isSearchable={false}\n                      onChange={onResolutionChange}\n                      options={RESOLUTION_OPTIONS}\n                      value={query.resolution || 1}\n                      aria-label=\"Select resolution\"\n                    />\n                  </EditorField>\n                  <Alert\n                    severity=\"warning\"\n                    title=\"The 'Resolution' is deprecated. Use 'Step' editor instead to change step parameter.\"\n                  />\n                </>\n              )}\n            </>\n          )}\n          {config.featureToggles.lokiQuerySplittingConfig && config.featureToggles.lokiQuerySplitting && (\n            <EditorField\n              label=\"Split Duration\"\n              tooltip=\"Defines the duration of a single query when query splitting is enabled.\"\n            >\n              <AutoSizeInput\n                minWidth={14}\n                type=\"string\"\n                min={0}\n                defaultValue={query.splitDuration ?? '1d'}\n                onCommitChange={onChunkRangeChange}\n                invalid={!splitDurationValid}\n              />\n            </EditorField>\n          )}\n        </QueryOptionGroup>\n      </EditorRow>\n    );\n  }\n);\n\nfunction getCollapsedInfo(\n  query: LokiQuery,\n  queryType: LokiQueryType,\n  maxLines: number,\n  isLogQuery: boolean,\n  isValidStep: boolean\n): string[] {\n  const queryTypeLabel = queryTypeOptions.find((x) => x.value === queryType);\n  const resolutionLabel = RESOLUTION_OPTIONS.find((x) => x.value === (query.resolution ?? 1));\n\n  const items: string[] = [];\n\n  if (query.legendFormat) {\n    items.push(`Legend: ${query.legendFormat}`);\n  }\n\n  items.push(`Type: ${queryTypeLabel?.label}`);\n\n  if (isLogQuery) {\n    items.push(`Line limit: ${query.maxLines ?? maxLines}`);\n  }\n\n  if (!isLogQuery) {\n    if (query.step) {\n      items.push(`Step: ${isValidStep ? query.step : 'Invalid value'}`);\n    }\n\n    if (query.resolution) {\n      items.push(`Resolution: ${resolutionLabel?.label}`);\n    }\n  }\n\n  return items;\n}\n\nLokiQueryBuilderOptions.displayName = 'LokiQueryBuilderOptions';\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport { useStyles2, HorizontalGroup, IconButton, Tooltip, Icon } from '@grafana/ui';\nimport { getModKey } from 'app/core/utils/browser';\n\nimport { testIds } from '../../components/LokiQueryEditor';\nimport { LokiQueryField } from '../../components/LokiQueryField';\nimport { LokiQueryEditorProps } from '../../components/types';\nimport { formatLogqlQuery } from '../../queryUtils';\n\nimport { LokiQueryBuilderExplained } from './LokiQueryBuilderExplained';\n\ntype Props = LokiQueryEditorProps & {\n  showExplain: boolean;\n};\n\nexport function LokiQueryCodeEditor({\n  query,\n  datasource,\n  range,\n  onRunQuery,\n  onChange,\n  data,\n  app,\n  showExplain,\n  history,\n}: Props) {\n  const styles = useStyles2(getStyles);\n\n  const lokiFormatQuery = config.featureToggles.lokiFormatQuery;\n  const onClickFormatQueryButton = async () => onChange({ ...query, expr: formatLogqlQuery(query.expr, datasource) });\n\n  return (\n    <div className={styles.wrapper}>\n      <LokiQueryField\n        datasource={datasource}\n        query={query}\n        range={range}\n        onRunQuery={onRunQuery}\n        onChange={onChange}\n        history={history}\n        data={data}\n        app={app}\n        data-testid={testIds.editor}\n        ExtraFieldElement={\n          <>\n            {lokiFormatQuery && (\n              <div className={styles.buttonGroup}>\n                <div>\n                  <HorizontalGroup spacing=\"sm\">\n                    <IconButton\n                      onClick={onClickFormatQueryButton}\n                      name=\"brackets-curly\"\n                      size=\"xs\"\n                      tooltip=\"Format query\"\n                    />\n                    <Tooltip content={`Use ${getModKey()}+z to undo`}>\n                      <Icon className={styles.hint} name=\"keyboard\" />\n                    </Tooltip>\n                  </HorizontalGroup>\n                </div>\n              </div>\n            )}\n          </>\n        }\n      />\n      {showExplain && <LokiQueryBuilderExplained query={query.expr} />}\n    </div>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    wrapper: css`\n      max-width: 100%;\n      .gf-form {\n        margin-bottom: 0.5;\n      }\n    `,\n    buttonGroup: css`\n      border: 1px solid ${theme.colors.border.medium};\n      border-top: none;\n      padding: ${theme.spacing(0.5, 0.5, 0.5, 0.5)};\n      margin-bottom: ${theme.spacing(0.5)};\n      display: flex;\n      flex-grow: 1;\n      justify-content: end;\n      font-size: ${theme.typography.bodySmall.fontSize};\n    `,\n    hint: css`\n      color: ${theme.colors.text.disabled};\n      white-space: nowrap;\n      cursor: help;\n    `,\n  };\n};\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Button, Card, useStyles2 } from '@grafana/ui';\nimport { RawQuery } from 'app/plugins/datasource/prometheus/querybuilder/shared/RawQuery';\n\nimport logqlGrammar from '../../syntax';\nimport { lokiQueryModeller } from '../LokiQueryModeller';\nimport { LokiQueryPattern } from '../types';\n\ntype Props = {\n  pattern: LokiQueryPattern;\n  hasNewQueryOption: boolean;\n  hasPreviousQuery: boolean;\n  selectedPatternName: string | null;\n  setSelectedPatternName: (name: string | null) => void;\n  onPatternSelect: (pattern: LokiQueryPattern, selectAsNewQuery?: boolean) => void;\n};\n\nexport const QueryPattern = (props: Props) => {\n  const { pattern, onPatternSelect, hasNewQueryOption, hasPreviousQuery, selectedPatternName, setSelectedPatternName } =\n    props;\n\n  const styles = useStyles2(getStyles);\n  const lang = { grammar: logqlGrammar, name: 'logql' };\n\n  return (\n    <Card className={styles.card}>\n      <Card.Heading>{pattern.name}</Card.Heading>\n      <div className={styles.rawQueryContainer}>\n        <RawQuery\n          query={lokiQueryModeller.renderQuery({ labels: [], operations: pattern.operations })}\n          lang={lang}\n          className={styles.rawQuery}\n        />\n      </div>\n      <Card.Actions>\n        {selectedPatternName !== pattern.name ? (\n          <Button\n            size=\"sm\"\n            onClick={() => {\n              if (hasPreviousQuery) {\n                // If user has previous query, we need to confirm that they want to replace it\n                setSelectedPatternName(pattern.name);\n              } else {\n                onPatternSelect(pattern);\n              }\n            }}\n          >\n            Use this query\n          </Button>\n        ) : (\n          <>\n            <div className={styles.spacing}>\n              {`If you would like to use this query, ${\n                hasNewQueryOption\n                  ? 'you can either replace your current query or create a new query'\n                  : 'your current query will be replaced'\n              }.`}\n            </div>\n            <Button size=\"sm\" fill=\"outline\" onClick={() => setSelectedPatternName(null)}>\n              Back\n            </Button>\n            <Button\n              size=\"sm\"\n              onClick={() => {\n                onPatternSelect(pattern);\n              }}\n            >\n              Replace query\n            </Button>\n            {hasNewQueryOption && (\n              <Button\n                size=\"sm\"\n                onClick={() => {\n                  onPatternSelect(pattern, true);\n                }}\n              >\n                Create new query\n              </Button>\n            )}\n          </>\n        )}\n      </Card.Actions>\n    </Card>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    card: css`\n      width: 49.5%;\n      display: flex;\n      flex-direction: column;\n    `,\n    rawQueryContainer: css`\n      flex-grow: 1;\n    `,\n    rawQuery: css`\n      background-color: ${theme.colors.background.primary};\n      padding: ${theme.spacing(1)};\n      margin-top: ${theme.spacing(1)};\n    `,\n    spacing: css`\n      margin-bottom: ${theme.spacing(1)};\n    `,\n  };\n};\n","import { css } from '@emotion/css';\nimport { capitalize } from 'lodash';\nimport React, { useMemo, useState } from 'react';\n\nimport { CoreApp, DataQuery, GrafanaTheme2 } from '@grafana/data';\nimport { reportInteraction } from '@grafana/runtime';\nimport { Button, Collapse, Modal, useStyles2 } from '@grafana/ui';\nimport { getNextRefIdChar } from 'app/core/utils/query';\n\nimport { LokiQuery } from '../../types';\nimport { lokiQueryModeller } from '../LokiQueryModeller';\nimport { buildVisualQueryFromString } from '../parsing';\nimport { LokiQueryPattern, LokiQueryPatternType } from '../types';\n\nimport { QueryPattern } from './QueryPattern';\n\ntype Props = {\n  isOpen: boolean;\n  query: LokiQuery;\n  queries: DataQuery[] | undefined;\n  app?: CoreApp;\n  onClose: () => void;\n  onChange: (query: LokiQuery) => void;\n  onAddQuery?: (query: LokiQuery) => void;\n};\n\nexport const QueryPatternsModal = (props: Props) => {\n  const { isOpen, onClose, onChange, onAddQuery, query, queries, app } = props;\n  const [openTabs, setOpenTabs] = useState<string[]>([]);\n  const [selectedPatternName, setSelectedPatternName] = useState<string | null>(null);\n\n  const styles = useStyles2(getStyles);\n  const hasNewQueryOption = !!onAddQuery;\n  const hasPreviousQuery = useMemo(\n    () => buildVisualQueryFromString(query.expr).query.operations.length > 0,\n    [query.expr]\n  );\n\n  const onPatternSelect = (pattern: LokiQueryPattern, selectAsNewQuery = false) => {\n    const visualQuery = buildVisualQueryFromString(selectAsNewQuery ? '' : query.expr);\n    reportInteraction('grafana_loki_query_patterns_selected', {\n      version: 'v2',\n      app: app ?? '',\n      editorMode: query.editorMode,\n      selectedPattern: pattern.name,\n      preSelectedOperationsCount: visualQuery.query.operations.length,\n      preSelectedLabelsCount: visualQuery.query.labels.length,\n      createNewQuery: hasNewQueryOption && selectAsNewQuery,\n    });\n\n    visualQuery.query.operations = pattern.operations;\n    if (hasNewQueryOption && selectAsNewQuery) {\n      onAddQuery({\n        ...query,\n        refId: getNextRefIdChar(queries ?? [query]),\n        expr: lokiQueryModeller.renderQuery(visualQuery.query),\n      });\n    } else {\n      onChange({\n        ...query,\n        expr: lokiQueryModeller.renderQuery(visualQuery.query),\n      });\n    }\n    setSelectedPatternName(null);\n    onClose();\n  };\n\n  return (\n    <Modal isOpen={isOpen} title=\"Kick start your query\" onDismiss={onClose} className={styles.modal}>\n      <div className={styles.spacing}>\n        Kick start your query by selecting one of these queries. You can then continue to complete your query.\n      </div>\n      {Object.values(LokiQueryPatternType).map((patternType) => {\n        return (\n          <Collapse\n            key={patternType}\n            label={`${capitalize(patternType)} query starters`}\n            isOpen={openTabs.includes(patternType)}\n            collapsible={true}\n            onToggle={() =>\n              setOpenTabs((tabs) =>\n                // close tab if it's already open, otherwise open it\n                tabs.includes(patternType) ? tabs.filter((t) => t !== patternType) : [...tabs, patternType]\n              )\n            }\n          >\n            <div className={styles.cardsContainer}>\n              {lokiQueryModeller\n                .getQueryPatterns()\n                .filter((pattern) => pattern.type === patternType)\n                .map((pattern) => (\n                  <QueryPattern\n                    key={pattern.name}\n                    pattern={pattern}\n                    hasNewQueryOption={hasNewQueryOption}\n                    hasPreviousQuery={hasPreviousQuery}\n                    onPatternSelect={onPatternSelect}\n                    selectedPatternName={selectedPatternName}\n                    setSelectedPatternName={setSelectedPatternName}\n                  />\n                ))}\n            </div>\n          </Collapse>\n        );\n      })}\n      <Button variant=\"secondary\" onClick={onClose}>\n        Close\n      </Button>\n    </Modal>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    cardsContainer: css`\n      display: flex;\n      flex-direction: row;\n      flex-wrap: wrap;\n      justify-content: space-between;\n    `,\n    spacing: css`\n      margin-bottom: ${theme.spacing(1)};\n    `,\n    modal: css`\n      width: 85vw;\n      ${theme.breakpoints.down('md')} {\n        width: 100%;\n      }\n    `,\n  };\n};\n","import { QueryEditorMode } from '../../prometheus/querybuilder/shared/types';\nimport { LokiQuery, LokiQueryType } from '../types';\n\nconst queryEditorModeDefaultLocalStorageKey = 'LokiQueryEditorModeDefault';\n\nexport function changeEditorMode(query: LokiQuery, editorMode: QueryEditorMode, onChange: (query: LokiQuery) => void) {\n  // If empty query store new mode as default\n  if (query.expr === '') {\n    window.localStorage.setItem(queryEditorModeDefaultLocalStorageKey, editorMode);\n  }\n\n  onChange({ ...query, editorMode });\n}\n\nexport function getDefaultEditorMode(expr: string) {\n  // If we already have an expression default to code view\n  if (expr != null && expr !== '') {\n    return QueryEditorMode.Code;\n  }\n\n  const value: string | null = window.localStorage.getItem(queryEditorModeDefaultLocalStorageKey);\n  switch (value) {\n    case 'code':\n      return QueryEditorMode.Code;\n\n    case 'builder':\n    default:\n      return QueryEditorMode.Builder;\n  }\n}\n\n/**\n * Returns query with defaults, and boolean true/false depending on change was required\n */\nexport function getQueryWithDefaults(query: LokiQuery): LokiQuery {\n  // If no expr (ie new query) then default to builder\n  let result = query;\n\n  if (!query.editorMode) {\n    result = { ...query, editorMode: getDefaultEditorMode(query.expr) };\n  }\n\n  if (query.expr == null) {\n    result = { ...result, expr: '' };\n  }\n\n  if (query.queryType == null) {\n    // Default to range query\n    result = { ...result, queryType: LokiQueryType.Range };\n  }\n\n  return result;\n}\n","import { DateTime, isDateTime, TimeRange } from '@grafana/data';\n\nimport { LokiQueryType } from '../types';\n\n/**\n * This function compares two time values. If the first is absolute, it compares them using `DateTime.isSame`.\n *\n * @param {(DateTime | string)} time1\n * @param {(DateTime | string | undefined)} time2\n */\nfunction compareTime(time1: DateTime | string | undefined, time2: DateTime | string | undefined) {\n  if (!time1 || !time2) {\n    return false;\n  }\n\n  const isAbsolute = isDateTime(time1);\n\n  if (isAbsolute) {\n    return time1.isSame(time2);\n  }\n\n  return time1 === time2;\n}\n\nexport function shouldUpdateStats(\n  query: string,\n  prevQuery: string | undefined,\n  timeRange: TimeRange | undefined,\n  prevTimeRange: TimeRange | undefined,\n  queryType: LokiQueryType | undefined,\n  prevQueryType: LokiQueryType | undefined\n): boolean {\n  if (prevQuery === undefined || query.trim() !== prevQuery.trim() || queryType !== prevQueryType) {\n    return true;\n  }\n\n  if (\n    compareTime(timeRange?.raw.from, prevTimeRange?.raw.from) &&\n    compareTime(timeRange?.raw.to, prevTimeRange?.raw.to)\n  ) {\n    return false;\n  }\n\n  return true;\n}\n","import { isEqual } from 'lodash';\nimport React, { SyntheticEvent, useCallback, useEffect, useId, useState } from 'react';\nimport { usePrevious } from 'react-use';\n\nimport { CoreApp, LoadingState } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { EditorHeader, EditorRows, FlexItem, Space, Stack } from '@grafana/experimental';\nimport { config, reportInteraction } from '@grafana/runtime';\nimport { Button, ConfirmModal } from '@grafana/ui';\nimport { QueryEditorModeToggle } from 'app/plugins/datasource/prometheus/querybuilder/shared/QueryEditorModeToggle';\nimport { QueryHeaderSwitch } from 'app/plugins/datasource/prometheus/querybuilder/shared/QueryHeaderSwitch';\nimport { QueryEditorMode } from 'app/plugins/datasource/prometheus/querybuilder/shared/types';\n\nimport { lokiQueryEditorExplainKey, useFlag } from '../../prometheus/querybuilder/shared/hooks/useFlag';\nimport { LabelBrowserModal } from '../querybuilder/components/LabelBrowserModal';\nimport { LokiQueryBuilderContainer } from '../querybuilder/components/LokiQueryBuilderContainer';\nimport { LokiQueryBuilderOptions } from '../querybuilder/components/LokiQueryBuilderOptions';\nimport { LokiQueryCodeEditor } from '../querybuilder/components/LokiQueryCodeEditor';\nimport { QueryPatternsModal } from '../querybuilder/components/QueryPatternsModal';\nimport { buildVisualQueryFromString } from '../querybuilder/parsing';\nimport { changeEditorMode, getQueryWithDefaults } from '../querybuilder/state';\nimport { LokiQuery, QueryStats } from '../types';\n\nimport { shouldUpdateStats } from './stats';\nimport { LokiQueryEditorProps } from './types';\n\nexport const testIds = {\n  editor: 'loki-editor',\n};\n\nexport const LokiQueryEditor = React.memo<LokiQueryEditorProps>((props) => {\n  const id = useId();\n  const { onChange, onRunQuery, onAddQuery, data, app, queries, datasource, range: timeRange } = props;\n  const [parseModalOpen, setParseModalOpen] = useState(false);\n  const [queryPatternsModalOpen, setQueryPatternsModalOpen] = useState(false);\n  const [dataIsStale, setDataIsStale] = useState(false);\n  const [labelBrowserVisible, setLabelBrowserVisible] = useState(false);\n  const [queryStats, setQueryStats] = useState<QueryStats | null>(null);\n  const { flag: explain, setFlag: setExplain } = useFlag(lokiQueryEditorExplainKey);\n\n  const predefinedOperations = datasource.predefinedOperations;\n  const previousTimeRange = usePrevious(timeRange);\n\n  const query = getQueryWithDefaults(props.query);\n  if (config.featureToggles.lokiPredefinedOperations && !query.expr && predefinedOperations) {\n    query.expr = `{} ${predefinedOperations}`;\n  }\n  const previousQueryExpr = usePrevious(query.expr);\n  const previousQueryType = usePrevious(query.queryType);\n\n  // This should be filled in from the defaults by now.\n  const editorMode = query.editorMode!;\n\n  const onExplainChange = (event: SyntheticEvent<HTMLInputElement>) => {\n    setExplain(event.currentTarget.checked);\n  };\n\n  const onEditorModeChange = useCallback(\n    (newEditorMode: QueryEditorMode) => {\n      reportInteraction('grafana_loki_editor_mode_clicked', {\n        newEditor: newEditorMode,\n        previousEditor: query.editorMode ?? '',\n        newQuery: !query.expr,\n        app: app ?? '',\n      });\n\n      if (newEditorMode === QueryEditorMode.Builder) {\n        const result = buildVisualQueryFromString(query.expr || '');\n        // If there are errors, give user a chance to decide if they want to go to builder as that can lose some data.\n        if (result.errors.length) {\n          setParseModalOpen(true);\n          return;\n        }\n      }\n      changeEditorMode(query, newEditorMode, onChange);\n    },\n    [onChange, query, app]\n  );\n\n  useEffect(() => {\n    setDataIsStale(false);\n  }, [data]);\n\n  const onChangeInternal = (query: LokiQuery) => {\n    if (!isEqual(query, props.query)) {\n      setDataIsStale(true);\n    }\n    onChange(query);\n  };\n\n  const onClickLabelBrowserButton = () => {\n    reportInteraction('grafana_loki_label_browser_opened', {\n      app: app,\n    });\n\n    setLabelBrowserVisible((visible) => !visible);\n  };\n\n  useEffect(() => {\n    const shouldUpdate = shouldUpdateStats(\n      query.expr,\n      previousQueryExpr,\n      timeRange,\n      previousTimeRange,\n      query.queryType,\n      previousQueryType\n    );\n    if (shouldUpdate && timeRange) {\n      const makeAsyncRequest = async () => {\n        // overwriting the refId that is later used to cancel inflight queries with the same ID.\n        const stats = await datasource.getStats({ ...query, refId: `${id}_${query.refId}` }, timeRange);\n        setQueryStats(stats);\n      };\n      makeAsyncRequest();\n    }\n  }, [datasource, timeRange, previousTimeRange, query, previousQueryExpr, previousQueryType, setQueryStats, id]);\n\n  return (\n    <>\n      <ConfirmModal\n        isOpen={parseModalOpen}\n        title=\"Query parsing\"\n        body=\"There were errors while trying to parse the query. Continuing to visual builder may lose some parts of the query.\"\n        confirmText=\"Continue\"\n        onConfirm={() => {\n          onChange({ ...query, editorMode: QueryEditorMode.Builder });\n          setParseModalOpen(false);\n        }}\n        onDismiss={() => setParseModalOpen(false)}\n      />\n      <QueryPatternsModal\n        isOpen={queryPatternsModalOpen}\n        onClose={() => setQueryPatternsModalOpen(false)}\n        query={query}\n        queries={queries}\n        app={app}\n        onChange={onChange}\n        onAddQuery={onAddQuery}\n      />\n      <LabelBrowserModal\n        isOpen={labelBrowserVisible}\n        datasource={datasource}\n        query={query}\n        app={app}\n        onClose={() => setLabelBrowserVisible(false)}\n        onChange={onChangeInternal}\n        onRunQuery={onRunQuery}\n        timeRange={timeRange}\n      />\n      <EditorHeader>\n        <Stack gap={1}>\n          <Button\n            data-testid={selectors.components.QueryBuilder.queryPatterns}\n            variant=\"secondary\"\n            size=\"sm\"\n            onClick={() => {\n              setQueryPatternsModalOpen((prevValue) => !prevValue);\n\n              const visualQuery = buildVisualQueryFromString(query.expr || '');\n              reportInteraction('grafana_loki_query_patterns_opened', {\n                version: 'v2',\n                app: app ?? '',\n                editorMode: query.editorMode,\n                preSelectedOperationsCount: visualQuery.query.operations.length,\n                preSelectedLabelsCount: visualQuery.query.labels.length,\n              });\n            }}\n          >\n            Kick start your query\n          </Button>\n          <Button variant=\"secondary\" size=\"sm\" onClick={onClickLabelBrowserButton} data-testid=\"label-browser-button\">\n            Label browser\n          </Button>\n        </Stack>\n        <QueryHeaderSwitch label=\"Explain query\" value={explain} onChange={onExplainChange} />\n        <FlexItem grow={1} />\n        {app !== CoreApp.Explore && app !== CoreApp.Correlations && (\n          <Button\n            variant={dataIsStale ? 'primary' : 'secondary'}\n            size=\"sm\"\n            onClick={onRunQuery}\n            icon={data?.state === LoadingState.Loading ? 'spinner' : undefined}\n            disabled={data?.state === LoadingState.Loading}\n          >\n            {queries && queries.length > 1 ? `Run queries` : `Run query`}\n          </Button>\n        )}\n        <QueryEditorModeToggle mode={editorMode!} onChange={onEditorModeChange} />\n      </EditorHeader>\n      <Space v={0.5} />\n      <EditorRows>\n        {editorMode === QueryEditorMode.Code && (\n          <LokiQueryCodeEditor {...props} query={query} onChange={onChangeInternal} showExplain={explain} />\n        )}\n        {editorMode === QueryEditorMode.Builder && (\n          <LokiQueryBuilderContainer\n            datasource={props.datasource}\n            query={query}\n            onChange={onChangeInternal}\n            onRunQuery={props.onRunQuery}\n            showExplain={explain}\n            timeRange={timeRange}\n          />\n        )}\n        <LokiQueryBuilderOptions\n          query={query}\n          onChange={onChange}\n          onRunQuery={onRunQuery}\n          app={app}\n          maxLines={datasource.maxLines}\n          queryStats={queryStats}\n        />\n      </EditorRows>\n    </>\n  );\n});\n\nLokiQueryEditor.displayName = 'LokiQueryEditor';\n","import React from 'react';\n\nimport { LokiQueryField } from './LokiQueryField';\nimport { LokiQueryEditorProps } from './types';\n\nexport function LokiQueryEditorForAlerting(props: LokiQueryEditorProps) {\n  const { query, data, datasource, onChange, onRunQuery, history } = props;\n\n  return (\n    <LokiQueryField\n      datasource={datasource}\n      query={query}\n      onChange={onChange}\n      onRunQuery={onRunQuery}\n      history={history}\n      data={data}\n      placeholder=\"Enter a Loki query\"\n      data-testid={testIds.editor}\n    />\n  );\n}\n\nexport const testIds = {\n  editor: 'loki-editor-cloud-alerting',\n};\n","import React, { memo } from 'react';\n\nimport { CoreApp } from '@grafana/data';\n\nimport { LokiQueryEditor } from './LokiQueryEditor';\nimport { LokiQueryEditorForAlerting } from './LokiQueryEditorForAlerting';\nimport { LokiQueryEditorProps } from './types';\n\nexport function LokiQueryEditorByApp(props: LokiQueryEditorProps) {\n  const { app } = props;\n\n  switch (app) {\n    case CoreApp.CloudAlerting:\n      return <LokiQueryEditorForAlerting {...props} />;\n    default:\n      return <LokiQueryEditor {...props} />;\n  }\n}\n\nexport default memo(LokiQueryEditorByApp);\n\nexport const testIds = {\n  editor: 'loki-editor',\n};\n","import React from 'react';\n\nimport { DataSourcePluginOptionsEditorProps } from '@grafana/data';\nimport { ConfigSubSection } from '@grafana/experimental';\nimport { InlineField, InlineSwitch } from '@grafana/ui';\nimport { ConfigDescriptionLink } from 'app/core/components/ConfigDescriptionLink';\n\nexport function AlertingSettings({\n  options,\n  onOptionsChange,\n}: Pick<DataSourcePluginOptionsEditorProps, 'options' | 'onOptionsChange'>) {\n  return (\n    <ConfigSubSection\n      title=\"Alerting\"\n      description={\n        <ConfigDescriptionLink\n          description=\"Manage alert rules for the Loki data source.\"\n          suffix=\"loki/configure-loki-data-source/#alerting\"\n          feature=\"alerting\"\n        />\n      }\n    >\n      <InlineField\n        labelWidth={29}\n        label=\"Manage alert rules in Alerting UI\"\n        disabled={options.readOnly}\n        tooltip=\"Manage alert rules for this data source. To manage other alerting resources, add an Alertmanager data source.\"\n      >\n        <InlineSwitch\n          value={options.jsonData.manageAlerts !== false}\n          onChange={(event) =>\n            onOptionsChange({\n              ...options,\n              jsonData: { ...options.jsonData, manageAlerts: event!.currentTarget.checked },\n            })\n          }\n        />\n      </InlineField>\n    </ConfigSubSection>\n  );\n}\n","import React, { ReactNode, useState } from 'react';\n\nimport { Field, FieldType, LinkModel } from '@grafana/data';\nimport { InlineField, TextArea } from '@grafana/ui';\n\nimport { getFieldLinksForExplore } from '../../../../features/explore/utils/links';\nimport { DerivedFieldConfig } from '../types';\n\ntype Props = {\n  derivedFields?: DerivedFieldConfig[];\n  className?: string;\n};\nexport const DebugSection = (props: Props) => {\n  const { derivedFields, className } = props;\n  const [debugText, setDebugText] = useState('');\n\n  let debugFields: DebugField[] = [];\n  if (debugText && derivedFields) {\n    debugFields = makeDebugFields(derivedFields, debugText);\n  }\n\n  return (\n    <div className={className}>\n      <InlineField label=\"Debug log message\" labelWidth={24} grow>\n        <TextArea\n          type=\"text\"\n          aria-label=\"Prometheus Query\"\n          placeholder=\"Paste an example log line here to test the regular expressions of your derived fields\"\n          value={debugText}\n          onChange={(event) => setDebugText(event.currentTarget.value)}\n        />\n      </InlineField>\n      {!!debugFields.length && <DebugFields fields={debugFields} />}\n    </div>\n  );\n};\n\ntype DebugFieldItemProps = {\n  fields: DebugField[];\n};\nconst DebugFields = ({ fields }: DebugFieldItemProps) => {\n  return (\n    <table className={'filter-table'}>\n      <thead>\n        <tr>\n          <th>Name</th>\n          <th>Value</th>\n          <th>Url</th>\n        </tr>\n      </thead>\n      <tbody>\n        {fields.map((field) => {\n          let value: ReactNode = field.value;\n          if (field.error && field.error instanceof Error) {\n            value = field.error.message;\n          } else if (field.href) {\n            value = <a href={field.href}>{value}</a>;\n          }\n          return (\n            <tr key={`${field.name}=${field.value}`}>\n              <td>{field.name}</td>\n              <td>{value}</td>\n              <td>{field.href ? <a href={field.href}>{field.href}</a> : ''}</td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n};\n\ntype DebugField = {\n  name: string;\n  error?: unknown;\n  value?: string;\n  href?: string;\n};\n\nfunction makeDebugFields(derivedFields: DerivedFieldConfig[], debugText: string): DebugField[] {\n  return derivedFields\n    .filter((field) => field.name && field.matcherRegex)\n    .map((field) => {\n      try {\n        const testMatch = debugText.match(field.matcherRegex);\n        const value = testMatch && testMatch[1];\n        let link: LinkModel<Field> | null = null;\n\n        if (field.url && value) {\n          link = getFieldLinksForExplore({\n            field: {\n              name: '',\n              type: FieldType.string,\n              values: [value],\n              config: {\n                links: [{ title: '', url: field.url }],\n              },\n            },\n            rowIndex: 0,\n            range: {} as any,\n          })[0];\n        }\n\n        const result: DebugField = {\n          name: field.name,\n          value: value || '<no match>',\n          href: link ? link.href : undefined,\n        };\n        return result;\n      } catch (error) {\n        const result: DebugField = {\n          name: field.name,\n          error,\n        };\n        return result;\n      }\n    });\n}\n","import { css } from '@emotion/css';\nimport React, { ChangeEvent, useEffect, useState } from 'react';\nimport { usePrevious } from 'react-use';\n\nimport { GrafanaTheme2, DataSourceInstanceSettings, VariableSuggestion } from '@grafana/data';\nimport { Button, DataLinkInput, Field, Icon, Input, Label, Tooltip, useStyles2, Select, Switch } from '@grafana/ui';\nimport { DataSourcePicker } from 'app/features/datasources/components/picker/DataSourcePicker';\n\nimport { DerivedFieldConfig } from '../types';\n\ntype MatcherType = 'label' | 'regex';\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  row: css`\n    display: flex;\n    align-items: baseline;\n  `,\n  nameField: css`\n    flex: 2;\n    margin-right: ${theme.spacing(0.5)};\n  `,\n  regexField: css`\n    flex: 3;\n    margin-right: ${theme.spacing(0.5)};\n  `,\n  urlField: css`\n    flex: 1;\n    margin-right: ${theme.spacing(0.5)};\n  `,\n  urlDisplayLabelField: css`\n    flex: 1;\n  `,\n  internalLink: css`\n    margin-right: ${theme.spacing(1)};\n  `,\n  dataSource: css``,\n  nameMatcherField: css({\n    width: theme.spacing(20),\n    marginRight: theme.spacing(0.5),\n  }),\n});\n\ntype Props = {\n  value: DerivedFieldConfig;\n  onChange: (value: DerivedFieldConfig) => void;\n  onDelete: () => void;\n  suggestions: VariableSuggestion[];\n  className?: string;\n  validateName: (name: string) => boolean;\n};\nexport const DerivedField = (props: Props) => {\n  const { value, onChange, onDelete, suggestions, className, validateName } = props;\n  const styles = useStyles2(getStyles);\n  const [showInternalLink, setShowInternalLink] = useState(!!value.datasourceUid);\n  const previousUid = usePrevious(value.datasourceUid);\n  const [fieldType, setFieldType] = useState<MatcherType>(value.matcherType ?? 'regex');\n\n  // Force internal link visibility change if uid changed outside of this component.\n  useEffect(() => {\n    if (!previousUid && value.datasourceUid && !showInternalLink) {\n      setShowInternalLink(true);\n    }\n    if (previousUid && !value.datasourceUid && showInternalLink) {\n      setShowInternalLink(false);\n    }\n  }, [previousUid, value.datasourceUid, showInternalLink]);\n\n  const handleChange = (field: keyof typeof value) => (event: React.ChangeEvent<HTMLInputElement>) => {\n    onChange({\n      ...value,\n      [field]: event.currentTarget.value,\n    });\n  };\n\n  const invalidName = !validateName(value.name);\n\n  return (\n    <div className={className} data-testid=\"derived-field\">\n      <div className=\"gf-form\">\n        <Field className={styles.nameField} label=\"Name\" invalid={invalidName} error=\"The name is already in use\">\n          <Input value={value.name} onChange={handleChange('name')} placeholder=\"Field name\" invalid={invalidName} />\n        </Field>\n        <Field\n          className={styles.nameMatcherField}\n          label={\n            <TooltipLabel\n              label=\"Type\"\n              content=\"Derived fields can be created from labels or by applying a regular expression to the log message.\"\n            />\n          }\n        >\n          <Select\n            options={[\n              { label: 'Regex in log line', value: 'regex' },\n              { label: 'Label', value: 'label' },\n            ]}\n            value={fieldType}\n            onChange={(type) => {\n              // make sure this is a valid MatcherType\n              if (type.value === 'label' || type.value === 'regex') {\n                setFieldType(type.value);\n                onChange({\n                  ...value,\n                  matcherType: type.value,\n                });\n              }\n            }}\n          />\n        </Field>\n        <Field\n          className={styles.regexField}\n          label={\n            <>\n              {fieldType === 'regex' && (\n                <TooltipLabel\n                  label=\"Regex\"\n                  content=\"Use to parse and capture some part of the log message. You can use the captured groups in the template.\"\n                />\n              )}\n\n              {fieldType === 'label' && <TooltipLabel label=\"Label\" content=\"Use to derive the field from a label.\" />}\n            </>\n          }\n        >\n          <Input value={value.matcherRegex} onChange={handleChange('matcherRegex')} />\n        </Field>\n        <Field label=\"\">\n          <Button\n            variant=\"destructive\"\n            title=\"Remove field\"\n            icon=\"times\"\n            onClick={(event) => {\n              event.preventDefault();\n              onDelete();\n            }}\n          />\n        </Field>\n      </div>\n\n      <div className=\"gf-form\">\n        <Field label={showInternalLink ? 'Query' : 'URL'} className={styles.urlField}>\n          <DataLinkInput\n            placeholder={showInternalLink ? '${__value.raw}' : 'http://example.com/${__value.raw}'}\n            value={value.url || ''}\n            onChange={(newValue) =>\n              onChange({\n                ...value,\n                url: newValue,\n              })\n            }\n            suggestions={suggestions}\n          />\n        </Field>\n        <Field\n          className={styles.urlDisplayLabelField}\n          label={\n            <TooltipLabel\n              label=\"URL Label\"\n              content=\"Use to override the button label when this derived field is found in a log.\"\n            />\n          }\n        >\n          <Input value={value.urlDisplayLabel} onChange={handleChange('urlDisplayLabel')} />\n        </Field>\n      </div>\n\n      <div className=\"gf-form\">\n        <Field label=\"Internal link\" className={styles.internalLink}>\n          <Switch\n            value={showInternalLink}\n            onChange={(e: ChangeEvent<HTMLInputElement>) => {\n              const { checked } = e.currentTarget;\n              if (!checked) {\n                onChange({\n                  ...value,\n                  datasourceUid: undefined,\n                });\n              }\n              setShowInternalLink(checked);\n            }}\n          />\n        </Field>\n\n        {showInternalLink && (\n          <Field label=\"\" className={styles.dataSource}>\n            <DataSourcePicker\n              tracing={true}\n              onChange={(ds: DataSourceInstanceSettings) =>\n                onChange({\n                  ...value,\n                  datasourceUid: ds.uid,\n                })\n              }\n              current={value.datasourceUid}\n              noDefault\n            />\n          </Field>\n        )}\n      </div>\n    </div>\n  );\n};\n\nconst TooltipLabel = ({ content, label }: { content: string; label: string }) => (\n  <Label>\n    {label}\n    <Tooltip placement=\"top\" content={content} theme=\"info\">\n      <Icon tabIndex={0} name=\"info-circle\" size=\"sm\" style={{ marginLeft: '10px' }} />\n    </Tooltip>\n  </Label>\n);\n","import { css } from '@emotion/css';\nimport React, { useCallback, useState } from 'react';\n\nimport { GrafanaTheme2, VariableOrigin, DataLinkBuiltInVars } from '@grafana/data';\nimport { ConfigSubSection } from '@grafana/experimental';\nimport { Button, useTheme2 } from '@grafana/ui';\nimport { ConfigDescriptionLink } from 'app/core/components/ConfigDescriptionLink';\n\nimport { DerivedFieldConfig } from '../types';\n\nimport { DebugSection } from './DebugSection';\nimport { DerivedField } from './DerivedField';\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  addButton: css`\n    margin-right: 10px;\n  `,\n  derivedField: css`\n    margin-bottom: ${theme.spacing(1)};\n  `,\n  container: css`\n    margin-bottom: ${theme.spacing(4)};\n  `,\n  debugSection: css`\n    margin-top: ${theme.spacing(4)};\n  `,\n});\n\ntype Props = {\n  fields?: DerivedFieldConfig[];\n  onChange: (value: DerivedFieldConfig[]) => void;\n};\n\nexport const DerivedFields = ({ fields = [], onChange }: Props) => {\n  const theme = useTheme2();\n  const styles = getStyles(theme);\n\n  const [showDebug, setShowDebug] = useState(false);\n\n  const validateName = useCallback(\n    (name: string) => {\n      return fields.filter((field) => field.name && field.name === name).length <= 1;\n    },\n    [fields]\n  );\n\n  return (\n    <ConfigSubSection\n      title=\"Derived fields\"\n      description={\n        <ConfigDescriptionLink\n          description=\"Derived fields can be used to extract new fields from a log message and create a link from its value.\"\n          suffix=\"loki/configure-loki-data-source/#derived-fields\"\n          feature=\"derived fields\"\n        />\n      }\n    >\n      <div className={styles.container}>\n        {fields.map((field, index) => {\n          return (\n            <DerivedField\n              className={styles.derivedField}\n              key={index}\n              value={field}\n              onChange={(newField) => {\n                const newDerivedFields = [...fields];\n                newDerivedFields.splice(index, 1, newField);\n                onChange(newDerivedFields);\n              }}\n              onDelete={() => {\n                const newDerivedFields = [...fields];\n                newDerivedFields.splice(index, 1);\n                onChange(newDerivedFields);\n              }}\n              validateName={validateName}\n              suggestions={[\n                {\n                  value: DataLinkBuiltInVars.valueRaw,\n                  label: 'Raw value',\n                  documentation: 'Exact string captured by the regular expression',\n                  origin: VariableOrigin.Value,\n                },\n              ]}\n            />\n          );\n        })}\n        <div>\n          <Button\n            variant=\"secondary\"\n            className={styles.addButton}\n            icon=\"plus\"\n            onClick={(event) => {\n              event.preventDefault();\n              const emptyConfig: DerivedFieldConfig = {\n                name: '',\n                matcherRegex: '',\n                urlDisplayLabel: '',\n                url: '',\n                matcherType: 'regex',\n              };\n              const newDerivedFields = [...fields, emptyConfig];\n              onChange(newDerivedFields);\n            }}\n          >\n            Add\n          </Button>\n\n          {fields.length > 0 && (\n            <Button variant=\"secondary\" type=\"button\" onClick={() => setShowDebug(!showDebug)}>\n              {showDebug ? 'Hide example log message' : 'Show example log message'}\n            </Button>\n          )}\n        </div>\n\n        {showDebug && (\n          <div className={styles.debugSection}>\n            <DebugSection\n              className={css`\n                margin-bottom: 10px;\n              `}\n              derivedFields={fields}\n            />\n          </div>\n        )}\n      </div>\n    </ConfigSubSection>\n  );\n};\n","import React from 'react';\n\nimport { ConfigSubSection } from '@grafana/experimental';\nimport { config } from '@grafana/runtime';\nimport { Badge, InlineField, InlineFieldRow, Input } from '@grafana/ui';\nimport { ConfigDescriptionLink } from 'app/core/components/ConfigDescriptionLink';\n\ntype Props = {\n  maxLines: string;\n  onMaxLinedChange: (value: string) => void;\n  predefinedOperations: string;\n  onPredefinedOperationsChange: (value: string) => void;\n};\n\nexport const QuerySettings = (props: Props) => {\n  const { maxLines, onMaxLinedChange, predefinedOperations, onPredefinedOperationsChange } = props;\n  return (\n    <ConfigSubSection\n      title=\"Queries\"\n      description={\n        <ConfigDescriptionLink\n          description=\"Additional options to customize your querying experience.\"\n          suffix=\"loki/configure-loki-data-source/#queries\"\n          feature=\"query settings\"\n        />\n      }\n    >\n      <InlineField\n        label=\"Maximum lines\"\n        htmlFor=\"loki_config_maxLines\"\n        labelWidth={22}\n        tooltip={\n          <>\n            Loki queries must contain a limit of the maximum number of lines returned (default: 1000). Increase this\n            limit to have a bigger result set for ad-hoc analysis. Decrease this limit if your browser becomes sluggish\n            when displaying the log results.\n          </>\n        }\n      >\n        <Input\n          type=\"number\"\n          id=\"loki_config_maxLines\"\n          value={maxLines}\n          onChange={(event: React.FormEvent<HTMLInputElement>) => onMaxLinedChange(event.currentTarget.value)}\n          width={16}\n          placeholder=\"1000\"\n          spellCheck={false}\n        />\n      </InlineField>\n\n      {config.featureToggles.lokiPredefinedOperations && (\n        <InlineFieldRow>\n          <InlineField\n            label=\"Predefined operations\"\n            htmlFor=\"loki_config_predefinedOperations\"\n            labelWidth={22}\n            tooltip={\n              <>\n                {\n                  'Predefined operations are used as an initial state for your queries. They are useful, if you want to unpack, parse or format all log lines. Currently we support only log operations starting with |. For example: | unpack | line_format \"{{.message}}\".'\n                }\n              </>\n            }\n          >\n            <Input\n              type=\"string\"\n              id=\"loki_config_predefinedOperations\"\n              value={predefinedOperations}\n              onChange={(event: React.FormEvent<HTMLInputElement>) =>\n                onPredefinedOperationsChange(event.currentTarget.value)\n              }\n              width={40}\n              placeholder=\"| unpack | line_format\"\n              spellCheck={false}\n            />\n          </InlineField>\n          <InlineField>\n            <Badge\n              text=\"Experimental\"\n              color=\"orange\"\n              icon=\"exclamation-triangle\"\n              tooltip=\"Predefined operations is an experimental feature that may change in the future.\"\n            />\n          </InlineField>\n        </InlineFieldRow>\n      )}\n    </ConfigSubSection>\n  );\n};\n","import React, { useCallback } from 'react';\n\nimport { DataSourcePluginOptionsEditorProps, DataSourceSettings } from '@grafana/data';\nimport {\n  ConfigSection,\n  DataSourceDescription,\n  ConnectionSettings,\n  Auth,\n  convertLegacyAuthProps,\n  AdvancedHttpSettings,\n} from '@grafana/experimental';\nimport { config, reportInteraction } from '@grafana/runtime';\nimport { SecureSocksProxySettings } from '@grafana/ui';\nimport { Divider } from 'app/core/components/Divider';\n\nimport { LokiOptions } from '../types';\n\nimport { AlertingSettings } from './AlertingSettings';\nimport { DerivedFields } from './DerivedFields';\nimport { QuerySettings } from './QuerySettings';\n\nexport type Props = DataSourcePluginOptionsEditorProps<LokiOptions>;\n\nconst makeJsonUpdater =\n  <T extends any>(field: keyof LokiOptions) =>\n  (options: DataSourceSettings<LokiOptions>, value: T): DataSourceSettings<LokiOptions> => {\n    return {\n      ...options,\n      jsonData: {\n        ...options.jsonData,\n        [field]: value,\n      },\n    };\n  };\n\nconst setMaxLines = makeJsonUpdater('maxLines');\nconst setPredefinedOperations = makeJsonUpdater('predefinedOperations');\nconst setDerivedFields = makeJsonUpdater('derivedFields');\n\nexport const ConfigEditor = (props: Props) => {\n  const { options, onOptionsChange } = props;\n\n  const updatePredefinedOperations = useCallback(\n    (value: string) => {\n      reportInteraction('grafana_loki_predefined_operations_changed', { value });\n      onOptionsChange(setPredefinedOperations(options, value));\n    },\n    [options, onOptionsChange]\n  );\n\n  return (\n    <>\n      <DataSourceDescription\n        dataSourceName=\"Loki\"\n        docsLink=\"https://grafana.com/docs/grafana/latest/datasources/loki/configure-loki-data-source/\"\n        hasRequiredFields={false}\n      />\n      <Divider />\n      <ConnectionSettings config={options} onChange={onOptionsChange} urlPlaceholder=\"http://localhost:3100\" />\n      <Divider />\n      <Auth\n        {...convertLegacyAuthProps({\n          config: options,\n          onChange: onOptionsChange,\n        })}\n      />\n      <Divider />\n      <ConfigSection\n        title=\"Additional settings\"\n        description=\"Additional settings are optional settings that can be configured for more control over your data source.\"\n        isCollapsible={true}\n        isInitiallyOpen\n      >\n        <AdvancedHttpSettings config={options} onChange={onOptionsChange} />\n        <Divider hideLine />\n        {config.secureSocksDSProxyEnabled && (\n          <SecureSocksProxySettings options={options} onOptionsChange={onOptionsChange} />\n        )}\n        <AlertingSettings options={options} onOptionsChange={onOptionsChange} />\n        <Divider hideLine />\n        <QuerySettings\n          maxLines={options.jsonData.maxLines || ''}\n          onMaxLinedChange={(value) => onOptionsChange(setMaxLines(options, value))}\n          predefinedOperations={options.jsonData.predefinedOperations || ''}\n          onPredefinedOperationsChange={updatePredefinedOperations}\n        />\n        <Divider hideLine />\n        <DerivedFields\n          fields={options.jsonData.derivedFields}\n          onChange={(value) => onOptionsChange(setDerivedFields(options, value))}\n        />\n      </ConfigSection>\n    </>\n  );\n};\n","import { DashboardLoadedEvent, DataSourcePlugin } from '@grafana/data';\nimport { getAppEvents } from '@grafana/runtime';\n\nimport LokiCheatSheet from './components/LokiCheatSheet';\nimport LokiQueryEditorByApp from './components/LokiQueryEditorByApp';\nimport { ConfigEditor } from './configuration/ConfigEditor';\nimport { LokiDatasource } from './datasource';\nimport { onDashboardLoadedHandler } from './tracking';\nimport { LokiQuery } from './types';\n\nexport const plugin = new DataSourcePlugin(LokiDatasource)\n  .setQueryEditor(LokiQueryEditorByApp)\n  .setConfigEditor(ConfigEditor)\n  .setQueryEditorHelp(LokiCheatSheet);\n\n// Subscribe to on dashboard loaded event so that we can track plugin adoption\ngetAppEvents().subscribe<DashboardLoadedEvent<LokiQuery>>(DashboardLoadedEvent, onDashboardLoadedHandler);\n"],"names":["__defProp","__defProps","__getOwnPropDescs","__getOwnPropSymbols","__hasOwnProp","__propIsEnum","__defNormalProp","obj","key","value","__spreadValues","a","b","prop","__spreadProps","AdvancedHttpSettings","config","onChange","className","onCookiesChange","cookies","onTimeoutChange","event","styles","Divider","hideLine","getStyles","theme","Field","MonacoQueryFieldLazy","props","MonacoQueryFieldWrapper","lastRunValueRef","onRunQuery","rest","handleRunQuery","handleBlur","LokiQueryField","override","query","nextQuery","prevProps","range","languageProvider","ExtraFieldElement","datasource","history","placeholder","DEFAULT_EXAMPLES","PREFERRED_LABELS","EXAMPLES_LIMIT","LOGQL_EXAMPLES","LokiCheatSheet","provider","labels","preferredLabel","l","values","userExamples","expr","onClickExample","onClick","hasUserExamples","example","item","MAX_LABEL_COUNT","MAX_VALUE_COUNT","MAX_AUTO_SELECT","EMPTY_SELECTOR","buildSelector","selectedLabels","label","selectedValues","facetLabels","possibleLabels","lastFacetted","possibleValues","existingValues","UnthemedLokiLabelBrowser","selector","state","name","selected","nextValue","v","updatedFields","status","cb","error","autoSelect","lastUsedLabels","timeRange","rawLabels","i","arr","rawValues","streams","searchTerm","validationStatus","LoadingPlaceholder","empty","searchResults","fuzzyMatchResult","fuzzy","Label","Input","index","style","Button","LokiLabelBrowser","LabelBrowserModal","isOpen","onClose","app","labelsLoaded","setLabelsLoaded","hasLogLabels","setHasLogLabels","LAST_USED_LABELS_KEY","changeQuery","reportInteractionAndClose","Modal","LocalStorageValueProvider","onLastUsedLabelsSave","onLastUsedLabelsDelete","LabelFilterItem","items","defaultOp","onDelete","onGetLabelNames","onGetLabelValues","invalidLabel","invalidValue","setState","labelNamesMenuOpen","setLabelNamesMenuOpen","labelValuesMenuOpen","setLabelValuesMenuOpen","CONFLICTING_LABEL_FILTER_ERROR_MESSAGE","isMultiSelect","operator","operators","op","getSelectOptionsFromString","getOptions","labelValues","selectedOptions","isConflicting","InlineField","InputGroup","Select","selectors","labelNames","change","changes","AccessoryButton","MISSING_LABEL_FILTER_ERROR_MESSAGE","LabelFilters","labelsFilters","labelFilterRequired","setItems","onLabelsChange","newItems","newLabels","x","hasLabelFilter","EditorFieldGroup","EditorField","EditorList","onChangeItem","EXPLAIN_LABEL_FILTER_CONTENT","LokiQueryBuilderExplained","visQuery","lang","OperationExplainedBox","RawQuery","OperationListExplained","NestedQuery","nestedQuery","onRemove","showExplain","val","AutoSizeInput","evt","FlexItem","IconButton","EditorRows","LokiQueryBuilder","update","def","NestedQueryList","nestedQueries","onNestedQueryUpdate","updatedList","sampleData","setSampleData","highlightedOp","setHighlightedOp","onChangeLabels","withTemplateVariableOptions","optionsPromise","options","forLabel","labelsToConsider","series","labelsNamesToConsider","onGetSampleData","lokiQuery","testIds","EditorRow","OperationsEditorRow","OperationList","QueryBuilderHints","QueryPreview","LokiQueryBuilderContainer","dispatch","stateSlice","exprChanged","onVisQueryChange","visualQueryChange","initialState","action","parseResult","LokiQueryBuilderOptions","maxLines","queryStats","splitDurationValid","setSplitDurationValid","onQueryTypeChange","onResolutionChange","option","onChunkRangeChange","onLegendFormatChanged","onMaxLinesChange","e","newMaxLines","onStepChange","queryType","isLogQuery","isValidStep","QueryOptionGroup","getCollapsedInfo","RadioButtonGroup","Alert","queryTypeLabel","resolutionLabel","LokiQueryCodeEditor","data","lokiFormatQuery","onClickFormatQueryButton","Tooltip","Icon","QueryPattern","pattern","onPatternSelect","hasNewQueryOption","hasPreviousQuery","selectedPatternName","setSelectedPatternName","Card","QueryPatternsModal","onAddQuery","queries","openTabs","setOpenTabs","selectAsNewQuery","visualQuery","patternType","Collapse","tabs","t","queryEditorModeDefaultLocalStorageKey","changeEditorMode","editorMode","getDefaultEditorMode","getQueryWithDefaults","result","compareTime","time1","time2","shouldUpdateStats","prevQuery","prevTimeRange","prevQueryType","LokiQueryEditor","id","parseModalOpen","setParseModalOpen","queryPatternsModalOpen","setQueryPatternsModalOpen","dataIsStale","setDataIsStale","labelBrowserVisible","setLabelBrowserVisible","setQueryStats","explain","setExplain","useFlag","predefinedOperations","previousTimeRange","usePrevious","previousQueryExpr","previousQueryType","onExplainChange","onEditorModeChange","newEditorMode","onChangeInternal","onClickLabelBrowserButton","visible","stats","ConfirmModal","EditorHeader","Stack","prevValue","QueryHeaderSwitch","QueryEditorModeToggle","Space","LokiQueryEditorForAlerting","LokiQueryEditorByApp","AlertingSettings","onOptionsChange","ConfigSubSection","ConfigDescriptionLink","DebugSection","derivedFields","debugText","setDebugText","debugFields","makeDebugFields","TextArea","DebugFields","fields","field","testMatch","link","DerivedField","suggestions","validateName","showInternalLink","setShowInternalLink","previousUid","fieldType","setFieldType","handleChange","invalidName","TooltipLabel","type","DataLinkInput","newValue","Switch","checked","DataSourcePicker","ds","content","DerivedFields","showDebug","setShowDebug","newField","newDerivedFields","emptyConfig","QuerySettings","onMaxLinedChange","onPredefinedOperationsChange","InlineFieldRow","Badge","makeJsonUpdater","setMaxLines","setPredefinedOperations","setDerivedFields","ConfigEditor","updatePredefinedOperations","DataSourceDescription","ConnectionSettings","Auth","ConfigSection","SecureSocksProxySettings"],"sourceRoot":""}