{"version":3,"file":"9207.6a5552e5f5bd5b7d248f.js","mappings":"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","sources":["webpack://grafana/./public/app/plugins/datasource/loki/querybuilder/operationUtils.ts","webpack://grafana/./public/app/plugins/datasource/loki/querybuilder/types.ts"],"sourcesContent":["import { capitalize } from 'lodash';\nimport pluralize from 'pluralize';\n\nimport { LabelParamEditor } from '../../prometheus/querybuilder/components/LabelParamEditor';\nimport {\n  QueryBuilderOperation,\n  QueryBuilderOperationDef,\n  QueryBuilderOperationParamDef,\n  QueryBuilderOperationParamValue,\n  QueryWithOperations,\n  VisualQueryModeller,\n} from '../../prometheus/querybuilder/shared/types';\nimport { escapeLabelValueInExactSelector } from '../languageUtils';\nimport { FUNCTIONS } from '../syntax';\n\nimport { LokiOperationId, LokiOperationOrder, LokiVisualQuery, LokiVisualQueryOperationCategory } from './types';\n\nexport function createRangeOperation(name: string, isRangeOperationWithGrouping?: boolean): QueryBuilderOperationDef {\n  const params = [getRangeVectorParamDef()];\n  const defaultParams = ['$__auto'];\n  let paramChangedHandler = undefined;\n\n  if (name === LokiOperationId.QuantileOverTime) {\n    defaultParams.push('0.95');\n    params.push({\n      name: 'Quantile',\n      type: 'number',\n    });\n  }\n\n  if (isRangeOperationWithGrouping) {\n    params.push({\n      name: 'By label',\n      type: 'string',\n      restParam: true,\n      optional: true,\n    });\n\n    paramChangedHandler = getOnLabelAddedHandler(`__${name}_by`);\n  }\n\n  return {\n    id: name,\n    name: getLokiOperationDisplayName(name),\n    params: params,\n    defaultParams,\n    alternativesKey: 'range function',\n    category: LokiVisualQueryOperationCategory.RangeFunctions,\n    orderRank: LokiOperationOrder.RangeVectorFunction,\n    renderer: operationWithRangeVectorRenderer,\n    addOperationHandler: addLokiOperation,\n    paramChangedHandler,\n    explainHandler: (op, def) => {\n      let opDocs = FUNCTIONS.find((x) => x.insertText === op.id)?.documentation ?? '';\n\n      if (op.params[0] === '$__auto') {\n        return `${opDocs} \\`$__auto\\` is a variable that will be replaced with the [value of step](https://grafana.com/docs/grafana/next/datasources/loki/query-editor/#options) for range queries and with the value of the selected time range (calculated to - from) for instant queries.`;\n      } else {\n        return `${opDocs} The [range vector](https://grafana.com/docs/loki/latest/logql/metric_queries/#range-vector-aggregation) is set to \\`${op.params[0]}\\`.`;\n      }\n    },\n  };\n}\n\nexport function createRangeOperationWithGrouping(name: string): QueryBuilderOperationDef[] {\n  const rangeOperation = createRangeOperation(name, true);\n  // Copy range operation params without the last param\n  const params = rangeOperation.params.slice(0, -1);\n  const operations: QueryBuilderOperationDef[] = [\n    rangeOperation,\n    {\n      id: `__${name}_by`,\n      name: `${getLokiOperationDisplayName(name)} by`,\n      params: [\n        ...params,\n        {\n          name: 'Label',\n          type: 'string',\n          restParam: true,\n          optional: true,\n          editor: LabelParamEditor,\n        },\n      ],\n      defaultParams: [...rangeOperation.defaultParams, ''],\n      alternativesKey: 'range function with grouping',\n      category: LokiVisualQueryOperationCategory.RangeFunctions,\n      renderer: getRangeAggregationWithGroupingRenderer(name, 'by'),\n      paramChangedHandler: getLastLabelRemovedHandler(name),\n      explainHandler: getAggregationExplainer(name, 'by'),\n      addOperationHandler: addLokiOperation,\n      hideFromList: true,\n    },\n    {\n      id: `__${name}_without`,\n      name: `${getLokiOperationDisplayName(name)} without`,\n      params: [\n        ...params,\n        {\n          name: 'Label',\n          type: 'string',\n          restParam: true,\n          optional: true,\n          editor: LabelParamEditor,\n        },\n      ],\n      defaultParams: [...rangeOperation.defaultParams, ''],\n      alternativesKey: 'range function with grouping',\n      category: LokiVisualQueryOperationCategory.RangeFunctions,\n      renderer: getRangeAggregationWithGroupingRenderer(name, 'without'),\n      paramChangedHandler: getLastLabelRemovedHandler(name),\n      explainHandler: getAggregationExplainer(name, 'without'),\n      addOperationHandler: addLokiOperation,\n      hideFromList: true,\n    },\n  ];\n\n  return operations;\n}\n\nexport function getRangeAggregationWithGroupingRenderer(aggregation: string, grouping: 'by' | 'without') {\n  return function aggregationRenderer(model: QueryBuilderOperation, def: QueryBuilderOperationDef, innerExpr: string) {\n    const restParamIndex = def.params.findIndex((param) => param.restParam);\n    const params = model.params.slice(0, restParamIndex);\n    const restParams = model.params.slice(restParamIndex);\n\n    if (params.length === 2 && aggregation === LokiOperationId.QuantileOverTime) {\n      return `${aggregation}(${params[1]}, ${innerExpr} [${params[0]}]) ${grouping} (${restParams.join(', ')})`;\n    }\n\n    return `${aggregation}(${innerExpr} [${params[0]}]) ${grouping} (${restParams.join(', ')})`;\n  };\n}\n\nfunction operationWithRangeVectorRenderer(\n  model: QueryBuilderOperation,\n  def: QueryBuilderOperationDef,\n  innerExpr: string\n) {\n  const params = model.params ?? [];\n  const rangeVector = params[0] ?? '$__auto';\n  // QuantileOverTime is only range vector with more than one param\n  if (params.length === 2 && model.id === LokiOperationId.QuantileOverTime) {\n    const quantile = params[1];\n    return `${model.id}(${quantile}, ${innerExpr} [${rangeVector}])`;\n  }\n\n  return `${model.id}(${innerExpr} [${params[0] ?? '$__auto'}])`;\n}\n\nexport function labelFilterRenderer(model: QueryBuilderOperation, def: QueryBuilderOperationDef, innerExpr: string) {\n  const integerOperators = ['<', '<=', '>', '>='];\n\n  if (integerOperators.includes(String(model.params[1]))) {\n    return `${innerExpr} | ${model.params[0]} ${model.params[1]} ${model.params[2]}`;\n  }\n\n  return `${innerExpr} | ${model.params[0]} ${model.params[1]} \\`${model.params[2]}\\``;\n}\n\nexport function isConflictingFilter(\n  operation: QueryBuilderOperation,\n  queryOperations: QueryBuilderOperation[]\n): boolean {\n  const operationIsNegative = operation.params[1].toString().startsWith('!');\n\n  const candidates = queryOperations.filter(\n    (queryOperation) =>\n      queryOperation.id === LokiOperationId.LabelFilter &&\n      queryOperation.params[0] === operation.params[0] &&\n      queryOperation.params[2] === operation.params[2]\n  );\n\n  const conflict = candidates.some((candidate) => {\n    if (operationIsNegative && candidate.params[1].toString().startsWith('!') === false) {\n      return true;\n    }\n    if (operationIsNegative === false && candidate.params[1].toString().startsWith('!')) {\n      return true;\n    }\n    return false;\n  });\n\n  return conflict;\n}\n\nexport function pipelineRenderer(model: QueryBuilderOperation, def: QueryBuilderOperationDef, innerExpr: string) {\n  switch (model.id) {\n    case LokiOperationId.Logfmt:\n      const [strict = false, keepEmpty = false, ...labels] = model.params;\n      return `${innerExpr} | logfmt${strict ? ' --strict' : ''}${keepEmpty ? ' --keep-empty' : ''} ${labels\n        .filter((label) => label)\n        .join(', ')}`.trim();\n    case LokiOperationId.Json:\n      return `${innerExpr} | json ${model.params.filter((param) => param).join(', ')}`.trim();\n    case LokiOperationId.Drop:\n      return `${innerExpr} | drop ${model.params.filter((param) => param).join(', ')}`.trim();\n    case LokiOperationId.Keep:\n      return `${innerExpr} | keep ${model.params.filter((param) => param).join(', ')}`.trim();\n    default:\n      return `${innerExpr} | ${model.id}`;\n  }\n}\n\nfunction isRangeVectorFunction(def: QueryBuilderOperationDef) {\n  return def.category === LokiVisualQueryOperationCategory.RangeFunctions;\n}\n\nfunction getIndexOfOrLast(\n  operations: QueryBuilderOperation[],\n  queryModeller: VisualQueryModeller,\n  condition: (def: QueryBuilderOperationDef) => boolean\n) {\n  const index = operations.findIndex((x) => {\n    const opDef = queryModeller.getOperationDef(x.id);\n    if (!opDef) {\n      return false;\n    }\n    return condition(opDef);\n  });\n\n  return index === -1 ? operations.length : index;\n}\n\nexport function addLokiOperation(\n  def: QueryBuilderOperationDef,\n  query: LokiVisualQuery,\n  modeller: VisualQueryModeller\n): LokiVisualQuery {\n  const newOperation: QueryBuilderOperation = {\n    id: def.id,\n    params: def.defaultParams,\n  };\n\n  const operations = [...query.operations];\n\n  const existingRangeVectorFunction = operations.find((x) => {\n    const opDef = modeller.getOperationDef(x.id);\n    if (!opDef) {\n      return false;\n    }\n    return isRangeVectorFunction(opDef);\n  });\n\n  switch (def.category) {\n    case LokiVisualQueryOperationCategory.Aggregations:\n    case LokiVisualQueryOperationCategory.Functions:\n      // If we are adding a function but we have not range vector function yet add one\n      if (!existingRangeVectorFunction) {\n        const placeToInsert = getIndexOfOrLast(\n          operations,\n          modeller,\n          (def) => def.category === LokiVisualQueryOperationCategory.Functions\n        );\n        operations.splice(placeToInsert, 0, { id: LokiOperationId.Rate, params: ['$__auto'] });\n      }\n      operations.push(newOperation);\n      break;\n    case LokiVisualQueryOperationCategory.RangeFunctions:\n      // If adding a range function and range function is already added replace it\n      if (existingRangeVectorFunction) {\n        const index = operations.indexOf(existingRangeVectorFunction);\n        operations[index] = newOperation;\n        break;\n      }\n\n    // Add range functions after any formats, line filters and label filters\n    default:\n      const placeToInsert = getIndexOfOrLast(\n        operations,\n        modeller,\n        (x) => (def.orderRank ?? 100) < (x.orderRank ?? 100)\n      );\n      operations.splice(placeToInsert, 0, newOperation);\n      break;\n  }\n\n  return {\n    ...query,\n    operations,\n  };\n}\n\nexport function addNestedQueryHandler(def: QueryBuilderOperationDef, query: LokiVisualQuery): LokiVisualQuery {\n  return {\n    ...query,\n    binaryQueries: [\n      ...(query.binaryQueries ?? []),\n      {\n        operator: '/',\n        query,\n      },\n    ],\n  };\n}\n\nexport function getLineFilterRenderer(operation: string, caseInsensitive?: boolean) {\n  return function lineFilterRenderer(model: QueryBuilderOperation, def: QueryBuilderOperationDef, innerExpr: string) {\n    const hasBackticks = model.params.some((param) => typeof param === 'string' && param.includes('`'));\n    const delimiter = hasBackticks ? '\"' : '`';\n    let params;\n    if (hasBackticks) {\n      params = model.params.map((param) =>\n        typeof param === 'string' ? escapeLabelValueInExactSelector(param) : param\n      );\n    } else {\n      params = model.params;\n    }\n    if (caseInsensitive) {\n      return `${innerExpr} ${operation} ${delimiter}(?i)${params.join(`${delimiter} or ${delimiter}(?i)`)}${delimiter}`;\n    }\n    return `${innerExpr} ${operation} ${delimiter}${params.join(`${delimiter} or ${delimiter}`)}${delimiter}`;\n  };\n}\nfunction getRangeVectorParamDef(): QueryBuilderOperationParamDef {\n  return {\n    name: 'Range',\n    type: 'string',\n    options: ['$__auto', '1m', '5m', '10m', '1h', '24h'],\n  };\n}\n\nexport function getOperationParamId(operationId: string, paramIndex: number) {\n  return `operations.${operationId}.param.${paramIndex}`;\n}\n\nexport function getOnLabelAddedHandler(changeToOperationId: string) {\n  return function onParamChanged(index: number, op: QueryBuilderOperation, def: QueryBuilderOperationDef) {\n    // Check if we actually have the label param. As it's optional the aggregation can have one less, which is the\n    // case of just simple aggregation without label. When user adds the label it now has the same number of params\n    // as its definition, and now we can change it to its `_by` variant.\n    if (op.params.length === def.params.length) {\n      return {\n        ...op,\n        id: changeToOperationId,\n      };\n    }\n    return op;\n  };\n}\n\n/**\n * Very simple poc implementation, needs to be modified to support all aggregation operators\n */\nexport function getAggregationExplainer(aggregationName: string, mode: 'by' | 'without' | '') {\n  return function aggregationExplainer(model: QueryBuilderOperation) {\n    const labels = model.params.map((label) => `\\`${label}\\``).join(' and ');\n    const labelWord = pluralize('label', model.params.length);\n\n    switch (mode) {\n      case 'by':\n        return `Calculates ${aggregationName} over dimensions while preserving ${labelWord} ${labels}.`;\n      case 'without':\n        return `Calculates ${aggregationName} over the dimensions ${labels}. All other labels are preserved.`;\n      default:\n        return `Calculates ${aggregationName} over the dimensions.`;\n    }\n  };\n}\n\n/**\n * This function will transform operations without labels to their plan aggregation operation\n */\nexport function getLastLabelRemovedHandler(changeToOperationId: string) {\n  return function onParamChanged(index: number, op: QueryBuilderOperation, def: QueryBuilderOperationDef) {\n    // If definition has more params then is defined there are no optional rest params anymore.\n    // We then transform this operation into a different one\n    if (op.params.length < def.params.length) {\n      return {\n        ...op,\n        id: changeToOperationId,\n      };\n    }\n\n    return op;\n  };\n}\n\nexport function getLokiOperationDisplayName(funcName: string) {\n  return capitalize(funcName.replace(/_/g, ' '));\n}\n\nexport function defaultAddOperationHandler<T extends QueryWithOperations>(def: QueryBuilderOperationDef, query: T) {\n  const newOperation: QueryBuilderOperation = {\n    id: def.id,\n    params: def.defaultParams,\n  };\n\n  return {\n    ...query,\n    operations: [...query.operations, newOperation],\n  };\n}\n\nexport function createAggregationOperation(\n  name: string,\n  overrides: Partial<QueryBuilderOperationDef> = {}\n): QueryBuilderOperationDef[] {\n  const operations: QueryBuilderOperationDef[] = [\n    {\n      id: name,\n      name: getLokiOperationDisplayName(name),\n      params: [\n        {\n          name: 'By label',\n          type: 'string',\n          restParam: true,\n          optional: true,\n        },\n      ],\n      defaultParams: [],\n      alternativesKey: 'plain aggregations',\n      category: LokiVisualQueryOperationCategory.Aggregations,\n      renderer: functionRendererLeft,\n      paramChangedHandler: getOnLabelAddedHandler(`__${name}_by`),\n      explainHandler: getAggregationExplainer(name, ''),\n      addOperationHandler: defaultAddOperationHandler,\n      ...overrides,\n    },\n    {\n      id: `__${name}_by`,\n      name: `${getLokiOperationDisplayName(name)} by`,\n      params: [\n        {\n          name: 'Label',\n          type: 'string',\n          restParam: true,\n          optional: true,\n          editor: LabelParamEditor,\n        },\n      ],\n      defaultParams: [''],\n      alternativesKey: 'aggregations by',\n      category: LokiVisualQueryOperationCategory.Aggregations,\n      renderer: getAggregationByRenderer(name),\n      paramChangedHandler: getLastLabelRemovedHandler(name),\n      explainHandler: getAggregationExplainer(name, 'by'),\n      addOperationHandler: defaultAddOperationHandler,\n      hideFromList: true,\n      ...overrides,\n    },\n    {\n      id: `__${name}_without`,\n      name: `${getLokiOperationDisplayName(name)} without`,\n      params: [\n        {\n          name: 'Label',\n          type: 'string',\n          restParam: true,\n          optional: true,\n          editor: LabelParamEditor,\n        },\n      ],\n      defaultParams: [''],\n      alternativesKey: 'aggregations by',\n      category: LokiVisualQueryOperationCategory.Aggregations,\n      renderer: getAggregationWithoutRenderer(name),\n      paramChangedHandler: getLastLabelRemovedHandler(name),\n      explainHandler: getAggregationExplainer(name, 'without'),\n      addOperationHandler: defaultAddOperationHandler,\n      hideFromList: true,\n      ...overrides,\n    },\n  ];\n\n  return operations;\n}\n\nfunction getAggregationWithoutRenderer(aggregation: string) {\n  return function aggregationRenderer(model: QueryBuilderOperation, def: QueryBuilderOperationDef, innerExpr: string) {\n    return `${aggregation} without(${model.params.join(', ')}) (${innerExpr})`;\n  };\n}\n\nexport function functionRendererLeft(model: QueryBuilderOperation, def: QueryBuilderOperationDef, innerExpr: string) {\n  const params = renderParams(model, def, innerExpr);\n  const str = model.id + '(';\n\n  if (innerExpr) {\n    params.push(innerExpr);\n  }\n\n  return str + params.join(', ') + ')';\n}\n\nfunction renderParams(model: QueryBuilderOperation, def: QueryBuilderOperationDef, innerExpr: string) {\n  return (model.params ?? []).map((value, index) => {\n    const paramDef = def.params[index];\n    if (paramDef.type === 'string') {\n      return '\"' + value + '\"';\n    }\n\n    return value;\n  });\n}\n\nfunction getAggregationByRenderer(aggregation: string) {\n  return function aggregationRenderer(model: QueryBuilderOperation, def: QueryBuilderOperationDef, innerExpr: string) {\n    return `${aggregation} by(${model.params.join(', ')}) (${innerExpr})`;\n  };\n}\n\nexport function createAggregationOperationWithParam(\n  name: string,\n  paramsDef: { params: QueryBuilderOperationParamDef[]; defaultParams: QueryBuilderOperationParamValue[] },\n  overrides: Partial<QueryBuilderOperationDef> = {}\n): QueryBuilderOperationDef[] {\n  const operations = createAggregationOperation(name, overrides);\n  operations[0].params.unshift(...paramsDef.params);\n  operations[1].params.unshift(...paramsDef.params);\n  operations[2].params.unshift(...paramsDef.params);\n  operations[0].defaultParams = paramsDef.defaultParams;\n  operations[1].defaultParams = [...paramsDef.defaultParams, ''];\n  operations[2].defaultParams = [...paramsDef.defaultParams, ''];\n  operations[1].renderer = getAggregationByRendererWithParameter(name);\n  operations[2].renderer = getAggregationByRendererWithParameter(name);\n  return operations;\n}\n\nfunction getAggregationByRendererWithParameter(aggregation: string) {\n  return function aggregationRenderer(model: QueryBuilderOperation, def: QueryBuilderOperationDef, innerExpr: string) {\n    const restParamIndex = def.params.findIndex((param) => param.restParam);\n    const params = model.params.slice(0, restParamIndex);\n    const restParams = model.params.slice(restParamIndex);\n\n    return `${aggregation} by(${restParams.join(', ')}) (${params\n      .map((param, idx) => (def.params[idx].type === 'string' ? `\\\"${param}\\\"` : param))\n      .join(', ')}, ${innerExpr})`;\n  };\n}\n","import { VisualQueryBinary } from '../../prometheus/querybuilder/shared/LokiAndPromQueryModellerBase';\nimport { QueryBuilderLabelFilter, QueryBuilderOperation } from '../../prometheus/querybuilder/shared/types';\n\n/**\n * Visual query model\n */\nexport interface LokiVisualQuery {\n  labels: QueryBuilderLabelFilter[];\n  operations: QueryBuilderOperation[];\n  binaryQueries?: LokiVisualQueryBinary[];\n}\n\nexport type LokiVisualQueryBinary = VisualQueryBinary<LokiVisualQuery>;\nexport enum LokiQueryPatternType {\n  Log = 'log',\n  Metric = 'metric',\n}\n\nexport interface LokiQueryPattern {\n  name: string;\n  operations: QueryBuilderOperation[];\n  type: LokiQueryPatternType;\n}\n\nexport enum LokiVisualQueryOperationCategory {\n  Aggregations = 'Aggregations',\n  RangeFunctions = 'Range functions',\n  Functions = 'Functions',\n  Formats = 'Formats',\n  LineFilters = 'Line filters',\n  LabelFilters = 'Label filters',\n  BinaryOps = 'Binary operations',\n}\n\nexport enum LokiOperationId {\n  Json = 'json',\n  Logfmt = 'logfmt',\n  Regexp = 'regexp',\n  Pattern = 'pattern',\n  Unpack = 'unpack',\n  LineFormat = 'line_format',\n  LabelFormat = 'label_format',\n  Decolorize = 'decolorize',\n  Drop = 'drop',\n  Keep = 'keep',\n  Rate = 'rate',\n  RateCounter = 'rate_counter',\n  CountOverTime = 'count_over_time',\n  SumOverTime = 'sum_over_time',\n  AvgOverTime = 'avg_over_time',\n  MaxOverTime = 'max_over_time',\n  MinOverTime = 'min_over_time',\n  FirstOverTime = 'first_over_time',\n  LastOverTime = 'last_over_time',\n  StdvarOverTime = 'stdvar_over_time',\n  StddevOverTime = 'stddev_over_time',\n  QuantileOverTime = 'quantile_over_time',\n  BytesRate = 'bytes_rate',\n  BytesOverTime = 'bytes_over_time',\n  AbsentOverTime = 'absent_over_time',\n  Sum = 'sum',\n  Avg = 'avg',\n  Min = 'min',\n  Max = 'max',\n  Stddev = 'stddev',\n  Stdvar = 'stdvar',\n  Count = 'count',\n  TopK = 'topk',\n  BottomK = 'bottomk',\n  LineContains = '__line_contains',\n  LineContainsNot = '__line_contains_not',\n  LineContainsCaseInsensitive = '__line_contains_case_insensitive',\n  LineContainsNotCaseInsensitive = '__line_contains_not_case_insensitive',\n  LineMatchesRegex = '__line_matches_regex',\n  LineMatchesRegexNot = '__line_matches_regex_not',\n  LineFilterIpMatches = '__line_filter_ip_matches',\n  LabelFilter = '__label_filter',\n  LabelFilterNoErrors = '__label_filter_no_errors',\n  LabelFilterIpMatches = '__label_filter_ip_marches',\n  Unwrap = 'unwrap',\n  SumBy = '__sum_by',\n  SumWithout = '__sum_without',\n  // Binary ops\n  Addition = '__addition',\n  Subtraction = '__subtraction',\n  MultiplyBy = '__multiply_by',\n  DivideBy = '__divide_by',\n  Modulo = '__modulo',\n  Exponent = '__exponent',\n  NestedQuery = '__nested_query',\n  EqualTo = '__equal_to',\n  NotEqualTo = '__not_equal_to',\n  GreaterThan = '__greater_than',\n  LessThan = '__less_than',\n  GreaterOrEqual = '__greater_or_equal',\n  LessOrEqual = '__less_or_equal',\n}\n\nexport enum LokiOperationOrder {\n  LineFilters = 1,\n  Parsers = 2,\n  PipeOperations = 3,\n  // Unwrap is a special case, as it is usually the last operation, so the order is after pipeOperations\n  Unwrap = 4,\n  NoErrors = 5,\n  RangeVectorFunction = 5,\n  Last = 6,\n}\n\nexport const lokiOperators = {\n  equals: { label: '=', value: '=', description: 'Equals', isMultiValue: false },\n  doesNotEqual: { label: '!=', value: '!=', description: 'Does not equal', isMultiValue: false },\n  matchesRegex: { label: '=~', value: '=~', description: 'Matches regex', isMultiValue: true },\n  doesNotMatchRegex: { label: '!~', value: '!~', description: 'Does not match regex', isMultiValue: true },\n  greaterThan: { label: '>', value: '>', description: 'Greater than', isMultiValue: false },\n  greaterThanOrEqual: { label: '>=', value: '>=', description: 'Greater than or equal to', isMultiValue: false },\n  lessThan: { label: '<', value: '<', description: 'Less than', isMultiValue: false },\n  lessThanOrEqual: { label: '<=', value: '<=', description: 'Less than or equal to', isMultiValue: false },\n  contains: { label: '|=', value: '|=', description: 'Contains', isMultiValue: false },\n  doesNotContain: { label: '!=', value: '!=', description: 'Does not contain', isMultiValue: false },\n};\n"],"names":["createRangeOperation","name","isRangeOperationWithGrouping","params","getRangeVectorParamDef","defaultParams","paramChangedHandler","getOnLabelAddedHandler","getLokiOperationDisplayName","operationWithRangeVectorRenderer","addLokiOperation","op","def","opDocs","x","createRangeOperationWithGrouping","rangeOperation","getRangeAggregationWithGroupingRenderer","getLastLabelRemovedHandler","getAggregationExplainer","aggregation","grouping","model","innerExpr","restParamIndex","param","restParams","rangeVector","quantile","labelFilterRenderer","isConflictingFilter","operation","queryOperations","operationIsNegative","queryOperation","candidate","pipelineRenderer","strict","keepEmpty","labels","label","isRangeVectorFunction","getIndexOfOrLast","operations","queryModeller","condition","index","opDef","query","modeller","newOperation","existingRangeVectorFunction","placeToInsert","addNestedQueryHandler","getLineFilterRenderer","caseInsensitive","hasBackticks","delimiter","getOperationParamId","operationId","paramIndex","changeToOperationId","aggregationName","mode","labelWord","funcName","defaultAddOperationHandler","createAggregationOperation","overrides","functionRendererLeft","getAggregationByRenderer","getAggregationWithoutRenderer","renderParams","str","value","createAggregationOperationWithParam","paramsDef","getAggregationByRendererWithParameter","idx","LokiQueryPatternType","LokiVisualQueryOperationCategory","LokiOperationId","LokiOperationOrder","lokiOperators"],"sourceRoot":""}