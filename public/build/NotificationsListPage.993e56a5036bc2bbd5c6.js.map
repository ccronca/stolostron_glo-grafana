{"version":3,"file":"NotificationsListPage.993e56a5036bc2bbd5c6.js","mappings":"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","sources":["webpack://grafana/./public/app/features/alerting/unified/Receivers.tsx","webpack://grafana/./public/app/features/alerting/components/CollapsibleAlert.tsx","webpack://grafana/./public/app/features/alerting/components/UAPreviewNotice.tsx","webpack://grafana/./public/app/features/alerting/unified/components/AlertManagerPicker.tsx","webpack://grafana/./public/app/features/alerting/unified/components/NoAlertManagerWarning.tsx","webpack://grafana/./public/app/features/alerting/unified/components/AlertingPageWrapper.tsx"],"sourcesContent":["import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\n\nimport { withErrorBoundary } from '@grafana/ui';\nconst ContactPointsV2 = SafeDynamicImport(() => import('./components/contact-points/ContactPoints'));\nconst EditContactPoint = SafeDynamicImport(() => import('./components/contact-points/EditContactPoint'));\nconst NewContactPoint = SafeDynamicImport(() => import('./components/contact-points/NewContactPoint'));\nconst EditMessageTemplate = SafeDynamicImport(() => import('./components/contact-points/EditMessageTemplate'));\nconst NewMessageTemplate = SafeDynamicImport(() => import('./components/contact-points/NewMessageTemplate'));\nconst GlobalConfig = SafeDynamicImport(() => import('./components/contact-points/components/GlobalConfig'));\nconst DuplicateMessageTemplate = SafeDynamicImport(\n  () => import('./components/contact-points/DuplicateMessageTemplate')\n);\nimport { SafeDynamicImport } from 'app/core/components/DynamicImports/SafeDynamicImport';\nimport { GrafanaRouteComponentProps } from 'app/core/navigation/types';\n\nimport { AlertmanagerPageWrapper } from './components/AlertingPageWrapper';\n\nconst ContactPoints = (_props: GrafanaRouteComponentProps): JSX.Element => (\n  <AlertmanagerPageWrapper navId=\"receivers\" accessType=\"notification\">\n    <Switch>\n      <Route exact={true} path=\"/alerting/notifications\" component={ContactPointsV2} />\n      <Route exact={true} path=\"/alerting/notifications/receivers/new\" component={NewContactPoint} />\n      <Route exact={true} path=\"/alerting/notifications/receivers/:name/edit\" component={EditContactPoint} />\n      <Route exact={true} path=\"/alerting/notifications/templates/:name/edit\" component={EditMessageTemplate} />\n      <Route exact={true} path=\"/alerting/notifications/templates/new\" component={NewMessageTemplate} />\n      <Route\n        exact={true}\n        path=\"/alerting/notifications/templates/:name/duplicate\"\n        component={DuplicateMessageTemplate}\n      />\n      <Route exact={true} path=\"/alerting/notifications/global-config\" component={GlobalConfig} />\n    </Switch>\n  </AlertmanagerPageWrapper>\n);\n\nexport default withErrorBoundary(ContactPoints, { style: 'page' });\n","import { css } from '@emotion/css';\nimport React, { HTMLAttributes } from 'react';\nimport { useLocalStorage } from 'react-use';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Alert, AlertVariant, Button, HorizontalGroup, Tooltip, useTheme2 } from '@grafana/ui';\nimport { getIconFromSeverity } from '@grafana/ui/src/components/Alert/Alert';\n\ntype Justify = 'flex-start' | 'flex-end' | 'space-between' | 'center';\n\ninterface CollapsibleAlertProps extends HTMLAttributes<HTMLDivElement> {\n  localStoreKey: string;\n  startClosed?: boolean;\n  severity?: AlertVariant;\n  collapseText?: string;\n  collapseTooltip: string;\n  collapseJustify?: Justify;\n  alertTitle: string;\n  children?: React.ReactNode;\n}\n\nexport const CollapsibleAlert = ({\n  localStoreKey,\n  startClosed = false,\n  severity = 'error',\n  collapseText,\n  collapseTooltip,\n  collapseJustify = 'flex-end',\n  alertTitle,\n  children,\n}: CollapsibleAlertProps) => {\n  const theme = useTheme2();\n  const styles = getStyles(theme, severity);\n  const [closed, setClosed] = useLocalStorage(localStoreKey, startClosed);\n\n  return (\n    <>\n      {closed && (\n        <HorizontalGroup justify={collapseJustify}>\n          <Tooltip content={collapseTooltip} placement=\"bottom\">\n            <Button\n              fill=\"text\"\n              variant=\"secondary\"\n              icon={getIconFromSeverity(severity)}\n              className={styles.warningButton}\n              onClick={() => setClosed(false)}\n            >\n              {collapseText}\n            </Button>\n          </Tooltip>\n        </HorizontalGroup>\n      )}\n      {!closed && (\n        <Alert severity={severity} title={alertTitle} onRemove={() => setClosed(true)}>\n          {children}\n        </Alert>\n      )}\n    </>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2, severity: AlertVariant) => {\n  const color = theme.colors[severity];\n  return {\n    warningButton: css({\n      color: color.text,\n\n      '&:hover': {\n        background: color.transparent,\n      },\n    }),\n  };\n};\n","import React from 'react';\n\nimport { config } from '@grafana/runtime';\nimport { TextLink } from '@grafana/ui';\n\nimport { CollapsibleAlert } from './CollapsibleAlert';\n\nconst LOCAL_STORAGE_KEY = 'grafana.unifiedalerting.upgrade.previewNotice';\n\nexport const UAPreviewNotice = () => {\n  if (config.unifiedAlertingEnabled || !config.featureToggles.alertingPreviewUpgrade) {\n    return null;\n  }\n\n  return (\n    <CollapsibleAlert\n      localStoreKey={LOCAL_STORAGE_KEY}\n      alertTitle={'This is a preview of the upgraded Grafana Alerting'}\n      collapseText={'Grafana Alerting Preview'}\n      collapseTooltip={'Show preview warning'}\n      severity={'warning'}\n    >\n      <p>\n        No rules are being evaluated and legacy alerting is still running.\n        <br />\n        Please contact your administrator to upgrade permanently.\n      </p>\n      <TextLink external href={'https://grafana.com/docs/grafana/latest/alerting/set-up/migrating-alerts/'}>\n        Read about upgrading\n      </TextLink>\n    </CollapsibleAlert>\n  );\n};\n","import { css } from '@emotion/css';\nimport React, { useMemo } from 'react';\n\nimport { GrafanaTheme2, SelectableValue } from '@grafana/data';\nimport { InlineField, Select, useStyles2 } from '@grafana/ui';\n\nimport { useAlertmanager } from '../state/AlertmanagerContext';\nimport { AlertManagerDataSource, GRAFANA_RULES_SOURCE_NAME } from '../utils/datasource';\n\ninterface Props {\n  disabled?: boolean;\n}\n\nfunction getAlertManagerLabel(alertManager: AlertManagerDataSource) {\n  return alertManager.name === GRAFANA_RULES_SOURCE_NAME ? 'Grafana' : alertManager.name.slice(0, 37);\n}\n\nexport const AlertManagerPicker = ({ disabled = false }: Props) => {\n  const styles = useStyles2(getStyles);\n\n  const { selectedAlertmanager, availableAlertManagers, setSelectedAlertmanager } = useAlertmanager();\n\n  const options: Array<SelectableValue<string>> = useMemo(() => {\n    return availableAlertManagers.map((ds) => ({\n      label: getAlertManagerLabel(ds),\n      value: ds.name,\n      imgUrl: ds.imgUrl,\n      meta: ds.meta,\n    }));\n  }, [availableAlertManagers]);\n\n  return (\n    <InlineField\n      className={styles.field}\n      label={disabled ? 'Alertmanager' : 'Choose Alertmanager'}\n      disabled={disabled || options.length === 1}\n      data-testid=\"alertmanager-picker\"\n    >\n      <Select\n        aria-label={disabled ? 'Alertmanager' : 'Choose Alertmanager'}\n        width={29}\n        className=\"ds-picker select-container\"\n        backspaceRemovesValue={false}\n        onChange={(value) => {\n          if (value?.value) {\n            setSelectedAlertmanager(value.value);\n          }\n        }}\n        options={options}\n        maxMenuHeight={500}\n        noOptionsMessage=\"No datasources found\"\n        value={selectedAlertmanager}\n        getOptionLabel={(o) => o.label}\n      />\n    </InlineField>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  field: css`\n    margin: 0;\n  `,\n});\n","import React from 'react';\n\nimport { Alert } from '@grafana/ui';\n\nimport { AlertManagerDataSource } from '../utils/datasource';\n\ninterface Props {\n  availableAlertManagers: AlertManagerDataSource[];\n}\n\nconst NoAlertManagersAvailable = () => (\n  <Alert title=\"No Alertmanager found\" severity=\"warning\">\n    We could not find any external Alertmanagers and you may not have access to the built-in Grafana Alertmanager.\n  </Alert>\n);\n\nconst OtherAlertManagersAvailable = () => (\n  <Alert title=\"Selected Alertmanager not found.\" severity=\"warning\">\n    The selected Alertmanager no longer exists or you may not have permission to access it. You can select a different\n    Alertmanager from the dropdown.\n  </Alert>\n);\n\nexport const NoAlertManagerWarning = ({ availableAlertManagers }: Props) => {\n  const hasOtherAMs = availableAlertManagers.length > 0;\n\n  return <div>{hasOtherAMs ? <OtherAlertManagersAvailable /> : <NoAlertManagersAvailable />}</div>;\n};\n","import React, { PropsWithChildren } from 'react';\nimport { useLocation } from 'react-use';\n\nimport { Page } from 'app/core/components/Page/Page';\nimport { PageProps } from 'app/core/components/Page/types';\n\nimport { UAPreviewNotice } from '../../components/UAPreviewNotice';\nimport { AlertmanagerProvider, useAlertmanager } from '../state/AlertmanagerContext';\n\nimport { AlertManagerPicker } from './AlertManagerPicker';\nimport { NoAlertManagerWarning } from './NoAlertManagerWarning';\n\n/**\n * This is the main alerting page wrapper, used by the alertmanager page wrapper and the alert rules list view\n */\ninterface AlertingPageWrapperProps extends PageProps {\n  isLoading?: boolean;\n}\n\nexport const AlertingPageWrapper = ({ children, isLoading, ...rest }: AlertingPageWrapperProps) => (\n  <Page {...rest}>\n    <Page.Contents isLoading={isLoading}>\n      <div>\n        <UAPreviewNotice />\n        {children}\n      </div>\n    </Page.Contents>\n  </Page>\n);\n\n/**\n * This wrapper is for pages that use the Alertmanager API\n */\ninterface AlertmanagerPageWrapperProps extends AlertingPageWrapperProps {\n  accessType: 'instance' | 'notification';\n}\nexport const AlertmanagerPageWrapper = ({ children, accessType, ...props }: AlertmanagerPageWrapperProps) => {\n  const disableAlertmanager = useIsDisabledAlertmanagerSelection();\n\n  return (\n    <AlertmanagerProvider accessType={accessType}>\n      <AlertingPageWrapper {...props} actions={<AlertManagerPicker disabled={disableAlertmanager} />}>\n        <AlertManagerPagePermissionsCheck>{children}</AlertManagerPagePermissionsCheck>\n      </AlertingPageWrapper>\n    </AlertmanagerProvider>\n  );\n};\n\n/**\n * This function tells us when we want to disable the alertmanager picker\n * It's not great...\n */\nfunction useIsDisabledAlertmanagerSelection() {\n  const location = useLocation();\n  const disabledPathSegment = ['/edit', '/new'];\n\n  return disabledPathSegment.some((match) => location?.pathname?.includes(match));\n}\n\n/**\n * This component will render an error message if the user doesn't have sufficient permissions or if the requested\n * alertmanager doesn't exist\n */\nconst AlertManagerPagePermissionsCheck = ({ children }: PropsWithChildren) => {\n  const { availableAlertManagers, selectedAlertmanager } = useAlertmanager();\n\n  if (!selectedAlertmanager) {\n    return <NoAlertManagerWarning availableAlertManagers={availableAlertManagers} />;\n  }\n\n  return <>{children}</>;\n};\n"],"names":["ContactPointsV2","EditContactPoint","NewContactPoint","EditMessageTemplate","NewMessageTemplate","GlobalConfig","DuplicateMessageTemplate","ContactPoints","_props","CollapsibleAlert","localStoreKey","startClosed","severity","collapseText","collapseTooltip","collapseJustify","alertTitle","children","theme","styles","getStyles","closed","setClosed","useLocalStorage","Tooltip","Button","Alert","color","LOCAL_STORAGE_KEY","UAPreviewNotice","config","TextLink","getAlertManagerLabel","alertManager","AlertManagerPicker","disabled","selectedAlertmanager","availableAlertManagers","setSelectedAlertmanager","options","ds","InlineField","Select","value","NoAlertManagersAvailable","OtherAlertManagersAvailable","NoAlertManagerWarning","hasOtherAMs","AlertingPageWrapper","isLoading","rest","Page","AlertmanagerPageWrapper","accessType","props","disableAlertmanager","useIsDisabledAlertmanagerSelection","AlertManagerPagePermissionsCheck","location","useLocation","match"],"sourceRoot":""}