{"version":3,"file":"AlertGroups.b7a21b51511e58d4f9ca.js","mappings":"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","sources":["webpack://grafana/./public/app/features/alerting/unified/components/alert-groups/AlertStateFilter.tsx","webpack://grafana/./public/app/features/alerting/unified/components/alert-groups/GroupBy.tsx","webpack://grafana/./public/app/features/alerting/unified/components/alert-groups/AlertGroupFilter.tsx","webpack://grafana/./public/app/features/alerting/unified/hooks/useFilteredAmGroups.ts","webpack://grafana/./public/app/features/alerting/unified/hooks/useGroupedAlerts.ts","webpack://grafana/./public/app/features/alerting/unified/AlertGroups.tsx","webpack://grafana/./public/app/features/alerting/components/CollapsibleAlert.tsx","webpack://grafana/./public/app/features/alerting/components/UAPreviewNotice.tsx","webpack://grafana/./public/app/features/alerting/unified/components/AlertManagerPicker.tsx","webpack://grafana/./public/app/features/alerting/unified/components/NoAlertManagerWarning.tsx","webpack://grafana/./public/app/features/alerting/unified/components/AlertingPageWrapper.tsx","webpack://grafana/./public/app/features/alerting/unified/components/Authorize.tsx","webpack://grafana/./public/app/features/alerting/unified/components/DynamicTableWithGuidelines.tsx","webpack://grafana/./public/app/features/alerting/unified/components/MetaText.tsx","webpack://grafana/./public/app/features/alerting/unified/components/Strong.tsx","webpack://grafana/./public/app/features/alerting/unified/components/alert-groups/AlertDetails.tsx","webpack://grafana/./public/app/features/alerting/unified/components/alert-groups/AlertGroupAlertsTable.tsx","webpack://grafana/./public/app/features/alerting/unified/components/alert-groups/AlertGroup.tsx","webpack://grafana/./public/app/features/alerting/unified/components/silences/AmAlertStateTag.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2, SelectableValue } from '@grafana/data';\nimport { RadioButtonGroup, Label, useStyles2 } from '@grafana/ui';\nimport { AlertState } from 'app/plugins/datasource/alertmanager/types';\n\ninterface Props {\n  stateFilter?: AlertState;\n  onStateFilterChange: (value: AlertState) => void;\n}\n\nexport const AlertStateFilter = ({ onStateFilterChange, stateFilter }: Props) => {\n  const styles = useStyles2(getStyles);\n  const alertStateOptions: SelectableValue[] = Object.entries(AlertState)\n    .sort(([labelA], [labelB]) => (labelA < labelB ? -1 : 1))\n    .map(([label, state]) => ({\n      label,\n      value: state,\n    }));\n\n  return (\n    <div className={styles.wrapper}>\n      <Label>State</Label>\n      <RadioButtonGroup options={alertStateOptions} value={stateFilter} onChange={onStateFilterChange} />\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  wrapper: css`\n    margin-left: ${theme.spacing(1)};\n  `,\n});\n","import { uniq } from 'lodash';\nimport React from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { Icon, Label, MultiSelect } from '@grafana/ui';\nimport { AlertmanagerGroup } from 'app/plugins/datasource/alertmanager/types';\n\ninterface Props {\n  className?: string;\n  groups: AlertmanagerGroup[];\n  groupBy: string[];\n  onGroupingChange: (keys: string[]) => void;\n}\n\nexport const GroupBy = ({ className, groups, groupBy, onGroupingChange }: Props) => {\n  const labelKeyOptions = uniq(groups.flatMap((group) => group.alerts).flatMap(({ labels }) => Object.keys(labels)))\n    .filter((label) => !(label.startsWith('__') && label.endsWith('__'))) // Filter out private labels\n    .map<SelectableValue>((key) => ({\n      label: key,\n      value: key,\n    }));\n\n  return (\n    <div data-testid={'group-by-container'} className={className}>\n      <Label>Custom group by</Label>\n      <MultiSelect\n        aria-label={'group by label keys'}\n        value={groupBy}\n        placeholder=\"Group by\"\n        prefix={<Icon name={'tag-alt'} />}\n        onChange={(items) => {\n          onGroupingChange(items.map(({ value }) => value as string));\n        }}\n        options={labelKeyOptions}\n      />\n    </div>\n  );\n};\n","import { css } from '@emotion/css';\nimport React, { useState } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Button, useStyles2 } from '@grafana/ui';\nimport { useQueryParams } from 'app/core/hooks/useQueryParams';\nimport { AlertmanagerGroup, AlertState } from 'app/plugins/datasource/alertmanager/types';\n\nimport { getFiltersFromUrlParams } from '../../utils/misc';\n\nimport { AlertStateFilter } from './AlertStateFilter';\nimport { GroupBy } from './GroupBy';\nimport { MatcherFilter } from './MatcherFilter';\n\ninterface Props {\n  groups: AlertmanagerGroup[];\n}\n\nexport const AlertGroupFilter = ({ groups }: Props) => {\n  const [filterKey, setFilterKey] = useState<number>(Math.floor(Math.random() * 100));\n  const [queryParams, setQueryParams] = useQueryParams();\n  const { groupBy = [], queryString, alertState } = getFiltersFromUrlParams(queryParams);\n  const matcherFilterKey = `matcher-${filterKey}`;\n\n  const styles = useStyles2(getStyles);\n\n  const clearFilters = () => {\n    setQueryParams({\n      groupBy: null,\n      queryString: null,\n      alertState: null,\n    });\n    setTimeout(() => setFilterKey(filterKey + 1), 100);\n  };\n\n  const showClearButton = !!(groupBy.length > 0 || queryString || alertState);\n\n  return (\n    <div className={styles.wrapper}>\n      <div className={styles.filterSection}>\n        <MatcherFilter\n          className={styles.filterInput}\n          key={matcherFilterKey}\n          defaultQueryString={queryString}\n          onFilterChange={(value) => setQueryParams({ queryString: value ? value : null })}\n        />\n        <GroupBy\n          className={styles.filterInput}\n          groups={groups}\n          groupBy={groupBy}\n          onGroupingChange={(keys) => setQueryParams({ groupBy: keys.length ? keys.join(',') : null })}\n        />\n        <AlertStateFilter\n          stateFilter={alertState as AlertState}\n          onStateFilterChange={(value) => setQueryParams({ alertState: value ? value : null })}\n        />\n        {showClearButton && (\n          <Button className={styles.clearButton} variant={'secondary'} icon=\"times\" onClick={clearFilters}>\n            Clear filters\n          </Button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  wrapper: css`\n    border-bottom: 1px solid ${theme.colors.border.medium};\n    margin-bottom: ${theme.spacing(3)};\n  `,\n  filterSection: css`\n    display: flex;\n    flex-direction: row;\n    margin-bottom: ${theme.spacing(3)};\n  `,\n  filterInput: css`\n    width: 340px;\n    & + & {\n      margin-left: ${theme.spacing(1)};\n    }\n  `,\n  clearButton: css`\n    margin-left: ${theme.spacing(1)};\n    margin-top: 19px;\n  `,\n});\n","import { useMemo } from 'react';\n\nimport { useQueryParams } from 'app/core/hooks/useQueryParams';\nimport { AlertmanagerGroup } from 'app/plugins/datasource/alertmanager/types';\n\nimport { labelsMatchMatchers, parseMatchers } from '../utils/alertmanager';\nimport { getFiltersFromUrlParams } from '../utils/misc';\n\nexport const useFilteredAmGroups = (groups: AlertmanagerGroup[]) => {\n  const [queryParams] = useQueryParams();\n  const filters = getFiltersFromUrlParams(queryParams);\n  const matchers = parseMatchers(filters.queryString || '');\n\n  return useMemo(() => {\n    return groups.reduce((filteredGroup: AlertmanagerGroup[], group) => {\n      const alerts = group.alerts.filter(({ labels, status }) => {\n        const labelsMatch = labelsMatchMatchers(labels, matchers);\n        const filtersMatch = filters.alertState ? status.state === filters.alertState : true;\n        return labelsMatch && filtersMatch;\n      });\n      if (alerts.length > 0) {\n        // The ungrouped alerts should be first in the results\n        if (Object.keys(group.labels).length === 0) {\n          filteredGroup.unshift({ ...group, alerts });\n        } else {\n          filteredGroup.push({ ...group, alerts });\n        }\n      }\n      return filteredGroup;\n    }, []);\n  }, [groups, filters, matchers]);\n};\n","import { uniqBy } from 'lodash';\nimport { useMemo } from 'react';\n\nimport { Labels } from '@grafana/data';\nimport { AlertmanagerGroup } from 'app/plugins/datasource/alertmanager/types';\n\nexport const useGroupedAlerts = (groups: AlertmanagerGroup[], groupBy: string[]): AlertmanagerGroup[] => {\n  return useMemo(() => {\n    if (groupBy.length === 0) {\n      const emptyGroupings = groups.filter((group) => Object.keys(group.labels).length === 0);\n      if (emptyGroupings.length > 1) {\n        // Merges multiple ungrouped grouping\n        return groups.reduce<AlertmanagerGroup[]>((combinedGroups, group) => {\n          if (Object.keys(group.labels).length === 0) {\n            const noGroupingGroup = combinedGroups.find(({ labels }) => Object.keys(labels));\n            if (!noGroupingGroup) {\n              combinedGroups.push({ alerts: group.alerts, labels: {}, receiver: { name: 'NONE' } });\n            } else {\n              noGroupingGroup.alerts = uniqBy([...noGroupingGroup.alerts, ...group.alerts], 'labels');\n            }\n          } else {\n            combinedGroups.push(group);\n          }\n          return combinedGroups;\n        }, []);\n      } else {\n        return groups;\n      }\n    }\n    const alerts = groups.flatMap(({ alerts }) => alerts);\n    return alerts.reduce<AlertmanagerGroup[]>((groupings, alert) => {\n      const alertContainsGroupings = groupBy.every((groupByLabel) => Object.keys(alert.labels).includes(groupByLabel));\n\n      if (alertContainsGroupings) {\n        const existingGrouping = groupings.find((group) => {\n          return groupBy.every((groupKey) => {\n            return group.labels[groupKey] === alert.labels[groupKey];\n          });\n        });\n        if (!existingGrouping) {\n          const labels = groupBy.reduce<Labels>((acc, key) => {\n            acc = { ...acc, [key]: alert.labels[key] };\n            return acc;\n          }, {});\n          groupings.push({\n            alerts: [alert],\n            labels,\n            receiver: {\n              name: 'NONE',\n            },\n          });\n        } else {\n          existingGrouping.alerts.push(alert);\n        }\n      } else {\n        const noGroupingGroup = groupings.find((group) => Object.keys(group.labels).length === 0);\n        if (!noGroupingGroup) {\n          groupings.push({ alerts: [alert], labels: {}, receiver: { name: 'NONE' } });\n        } else {\n          noGroupingGroup.alerts.push(alert);\n        }\n      }\n\n      return groupings;\n    }, []);\n  }, [groups, groupBy]);\n};\n","import { css } from '@emotion/css';\nimport React, { useEffect } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Alert, LoadingPlaceholder, useStyles2 } from '@grafana/ui';\nimport { useQueryParams } from 'app/core/hooks/useQueryParams';\nimport { useDispatch } from 'app/types';\n\nimport { AlertmanagerChoice } from '../../../plugins/datasource/alertmanager/types';\n\nimport { alertmanagerApi } from './api/alertmanagerApi';\nimport { AlertmanagerPageWrapper } from './components/AlertingPageWrapper';\nimport { AlertGroup } from './components/alert-groups/AlertGroup';\nimport { AlertGroupFilter } from './components/alert-groups/AlertGroupFilter';\nimport { useFilteredAmGroups } from './hooks/useFilteredAmGroups';\nimport { useGroupedAlerts } from './hooks/useGroupedAlerts';\nimport { useUnifiedAlertingSelector } from './hooks/useUnifiedAlertingSelector';\nimport { useAlertmanager } from './state/AlertmanagerContext';\nimport { fetchAlertGroupsAction } from './state/actions';\nimport { NOTIFICATIONS_POLL_INTERVAL_MS } from './utils/constants';\nimport { GRAFANA_RULES_SOURCE_NAME } from './utils/datasource';\nimport { getFiltersFromUrlParams } from './utils/misc';\nimport { initialAsyncRequestState } from './utils/redux';\n\nconst AlertGroups = () => {\n  const { useGetAlertmanagerChoiceStatusQuery } = alertmanagerApi;\n\n  const { selectedAlertmanager } = useAlertmanager();\n  const dispatch = useDispatch();\n  const [queryParams] = useQueryParams();\n  const { groupBy = [] } = getFiltersFromUrlParams(queryParams);\n  const styles = useStyles2(getStyles);\n\n  const { currentData: amConfigStatus } = useGetAlertmanagerChoiceStatusQuery();\n\n  const alertGroups = useUnifiedAlertingSelector((state) => state.amAlertGroups);\n  const { loading, error, result: results = [] } = alertGroups[selectedAlertmanager || ''] ?? initialAsyncRequestState;\n\n  const groupedAlerts = useGroupedAlerts(results, groupBy);\n  const filteredAlertGroups = useFilteredAmGroups(groupedAlerts);\n\n  const grafanaAmDeliveryDisabled =\n    selectedAlertmanager === GRAFANA_RULES_SOURCE_NAME &&\n    amConfigStatus?.alertmanagersChoice === AlertmanagerChoice.External;\n\n  useEffect(() => {\n    function fetchNotifications() {\n      if (selectedAlertmanager) {\n        dispatch(fetchAlertGroupsAction(selectedAlertmanager));\n      }\n    }\n    fetchNotifications();\n    const interval = setInterval(fetchNotifications, NOTIFICATIONS_POLL_INTERVAL_MS);\n    return () => {\n      clearInterval(interval);\n    };\n  }, [dispatch, selectedAlertmanager]);\n\n  return (\n    <>\n      <AlertGroupFilter groups={results} />\n      {loading && <LoadingPlaceholder text=\"Loading notifications\" />}\n      {error && !loading && (\n        <Alert title={'Error loading notifications'} severity={'error'}>\n          {error.message || 'Unknown error'}\n        </Alert>\n      )}\n\n      {grafanaAmDeliveryDisabled && (\n        <Alert title=\"Grafana alerts are not delivered to Grafana Alertmanager\">\n          Grafana is configured to send alerts to external alertmanagers only. No alerts are expected to be available\n          here for the selected Alertmanager.\n        </Alert>\n      )}\n\n      {results &&\n        filteredAlertGroups.map((group, index) => {\n          return (\n            <React.Fragment key={`${JSON.stringify(group.labels)}-group-${index}`}>\n              {((index === 1 && Object.keys(filteredAlertGroups[0].labels).length === 0) ||\n                (index === 0 && Object.keys(group.labels).length > 0)) && (\n                <p className={styles.groupingBanner}>Grouped by: {Object.keys(group.labels).join(', ')}</p>\n              )}\n              <AlertGroup alertManagerSourceName={selectedAlertmanager || ''} group={group} />\n            </React.Fragment>\n          );\n        })}\n      {results && !filteredAlertGroups.length && <p>No results.</p>}\n    </>\n  );\n};\n\nconst AlertGroupsPage = () => (\n  <AlertmanagerPageWrapper navId=\"groups\" accessType=\"instance\">\n    <AlertGroups />\n  </AlertmanagerPageWrapper>\n);\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  groupingBanner: css`\n    margin: ${theme.spacing(2, 0)};\n  `,\n});\n\nexport default AlertGroupsPage;\n","import { css } from '@emotion/css';\nimport React, { HTMLAttributes } from 'react';\nimport { useLocalStorage } from 'react-use';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Alert, AlertVariant, Button, HorizontalGroup, Tooltip, useTheme2 } from '@grafana/ui';\nimport { getIconFromSeverity } from '@grafana/ui/src/components/Alert/Alert';\n\ntype Justify = 'flex-start' | 'flex-end' | 'space-between' | 'center';\n\ninterface CollapsibleAlertProps extends HTMLAttributes<HTMLDivElement> {\n  localStoreKey: string;\n  startClosed?: boolean;\n  severity?: AlertVariant;\n  collapseText?: string;\n  collapseTooltip: string;\n  collapseJustify?: Justify;\n  alertTitle: string;\n  children?: React.ReactNode;\n}\n\nexport const CollapsibleAlert = ({\n  localStoreKey,\n  startClosed = false,\n  severity = 'error',\n  collapseText,\n  collapseTooltip,\n  collapseJustify = 'flex-end',\n  alertTitle,\n  children,\n}: CollapsibleAlertProps) => {\n  const theme = useTheme2();\n  const styles = getStyles(theme, severity);\n  const [closed, setClosed] = useLocalStorage(localStoreKey, startClosed);\n\n  return (\n    <>\n      {closed && (\n        <HorizontalGroup justify={collapseJustify}>\n          <Tooltip content={collapseTooltip} placement=\"bottom\">\n            <Button\n              fill=\"text\"\n              variant=\"secondary\"\n              icon={getIconFromSeverity(severity)}\n              className={styles.warningButton}\n              onClick={() => setClosed(false)}\n            >\n              {collapseText}\n            </Button>\n          </Tooltip>\n        </HorizontalGroup>\n      )}\n      {!closed && (\n        <Alert severity={severity} title={alertTitle} onRemove={() => setClosed(true)}>\n          {children}\n        </Alert>\n      )}\n    </>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2, severity: AlertVariant) => {\n  const color = theme.colors[severity];\n  return {\n    warningButton: css({\n      color: color.text,\n\n      '&:hover': {\n        background: color.transparent,\n      },\n    }),\n  };\n};\n","import React from 'react';\n\nimport { config } from '@grafana/runtime';\nimport { TextLink } from '@grafana/ui';\n\nimport { CollapsibleAlert } from './CollapsibleAlert';\n\nconst LOCAL_STORAGE_KEY = 'grafana.unifiedalerting.upgrade.previewNotice';\n\nexport const UAPreviewNotice = () => {\n  if (config.unifiedAlertingEnabled || !config.featureToggles.alertingPreviewUpgrade) {\n    return null;\n  }\n\n  return (\n    <CollapsibleAlert\n      localStoreKey={LOCAL_STORAGE_KEY}\n      alertTitle={'This is a preview of the upgraded Grafana Alerting'}\n      collapseText={'Grafana Alerting Preview'}\n      collapseTooltip={'Show preview warning'}\n      severity={'warning'}\n    >\n      <p>\n        No rules are being evaluated and legacy alerting is still running.\n        <br />\n        Please contact your administrator to upgrade permanently.\n      </p>\n      <TextLink external href={'https://grafana.com/docs/grafana/latest/alerting/set-up/migrating-alerts/'}>\n        Read about upgrading\n      </TextLink>\n    </CollapsibleAlert>\n  );\n};\n","import { css } from '@emotion/css';\nimport React, { useMemo } from 'react';\n\nimport { GrafanaTheme2, SelectableValue } from '@grafana/data';\nimport { InlineField, Select, useStyles2 } from '@grafana/ui';\n\nimport { useAlertmanager } from '../state/AlertmanagerContext';\nimport { AlertManagerDataSource, GRAFANA_RULES_SOURCE_NAME } from '../utils/datasource';\n\ninterface Props {\n  disabled?: boolean;\n}\n\nfunction getAlertManagerLabel(alertManager: AlertManagerDataSource) {\n  return alertManager.name === GRAFANA_RULES_SOURCE_NAME ? 'Grafana' : alertManager.name.slice(0, 37);\n}\n\nexport const AlertManagerPicker = ({ disabled = false }: Props) => {\n  const styles = useStyles2(getStyles);\n\n  const { selectedAlertmanager, availableAlertManagers, setSelectedAlertmanager } = useAlertmanager();\n\n  const options: Array<SelectableValue<string>> = useMemo(() => {\n    return availableAlertManagers.map((ds) => ({\n      label: getAlertManagerLabel(ds),\n      value: ds.name,\n      imgUrl: ds.imgUrl,\n      meta: ds.meta,\n    }));\n  }, [availableAlertManagers]);\n\n  return (\n    <InlineField\n      className={styles.field}\n      label={disabled ? 'Alertmanager' : 'Choose Alertmanager'}\n      disabled={disabled || options.length === 1}\n      data-testid=\"alertmanager-picker\"\n    >\n      <Select\n        aria-label={disabled ? 'Alertmanager' : 'Choose Alertmanager'}\n        width={29}\n        className=\"ds-picker select-container\"\n        backspaceRemovesValue={false}\n        onChange={(value) => {\n          if (value?.value) {\n            setSelectedAlertmanager(value.value);\n          }\n        }}\n        options={options}\n        maxMenuHeight={500}\n        noOptionsMessage=\"No datasources found\"\n        value={selectedAlertmanager}\n        getOptionLabel={(o) => o.label}\n      />\n    </InlineField>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  field: css`\n    margin: 0;\n  `,\n});\n","import React from 'react';\n\nimport { Alert } from '@grafana/ui';\n\nimport { AlertManagerDataSource } from '../utils/datasource';\n\ninterface Props {\n  availableAlertManagers: AlertManagerDataSource[];\n}\n\nconst NoAlertManagersAvailable = () => (\n  <Alert title=\"No Alertmanager found\" severity=\"warning\">\n    We could not find any external Alertmanagers and you may not have access to the built-in Grafana Alertmanager.\n  </Alert>\n);\n\nconst OtherAlertManagersAvailable = () => (\n  <Alert title=\"Selected Alertmanager not found.\" severity=\"warning\">\n    The selected Alertmanager no longer exists or you may not have permission to access it. You can select a different\n    Alertmanager from the dropdown.\n  </Alert>\n);\n\nexport const NoAlertManagerWarning = ({ availableAlertManagers }: Props) => {\n  const hasOtherAMs = availableAlertManagers.length > 0;\n\n  return <div>{hasOtherAMs ? <OtherAlertManagersAvailable /> : <NoAlertManagersAvailable />}</div>;\n};\n","import React, { PropsWithChildren } from 'react';\nimport { useLocation } from 'react-use';\n\nimport { Page } from 'app/core/components/Page/Page';\nimport { PageProps } from 'app/core/components/Page/types';\n\nimport { UAPreviewNotice } from '../../components/UAPreviewNotice';\nimport { AlertmanagerProvider, useAlertmanager } from '../state/AlertmanagerContext';\n\nimport { AlertManagerPicker } from './AlertManagerPicker';\nimport { NoAlertManagerWarning } from './NoAlertManagerWarning';\n\n/**\n * This is the main alerting page wrapper, used by the alertmanager page wrapper and the alert rules list view\n */\ninterface AlertingPageWrapperProps extends PageProps {\n  isLoading?: boolean;\n}\n\nexport const AlertingPageWrapper = ({ children, isLoading, ...rest }: AlertingPageWrapperProps) => (\n  <Page {...rest}>\n    <Page.Contents isLoading={isLoading}>\n      <div>\n        <UAPreviewNotice />\n        {children}\n      </div>\n    </Page.Contents>\n  </Page>\n);\n\n/**\n * This wrapper is for pages that use the Alertmanager API\n */\ninterface AlertmanagerPageWrapperProps extends AlertingPageWrapperProps {\n  accessType: 'instance' | 'notification';\n}\nexport const AlertmanagerPageWrapper = ({ children, accessType, ...props }: AlertmanagerPageWrapperProps) => {\n  const disableAlertmanager = useIsDisabledAlertmanagerSelection();\n\n  return (\n    <AlertmanagerProvider accessType={accessType}>\n      <AlertingPageWrapper {...props} actions={<AlertManagerPicker disabled={disableAlertmanager} />}>\n        <AlertManagerPagePermissionsCheck>{children}</AlertManagerPagePermissionsCheck>\n      </AlertingPageWrapper>\n    </AlertmanagerProvider>\n  );\n};\n\n/**\n * This function tells us when we want to disable the alertmanager picker\n * It's not great...\n */\nfunction useIsDisabledAlertmanagerSelection() {\n  const location = useLocation();\n  const disabledPathSegment = ['/edit', '/new'];\n\n  return disabledPathSegment.some((match) => location?.pathname?.includes(match));\n}\n\n/**\n * This component will render an error message if the user doesn't have sufficient permissions or if the requested\n * alertmanager doesn't exist\n */\nconst AlertManagerPagePermissionsCheck = ({ children }: PropsWithChildren) => {\n  const { availableAlertManagers, selectedAlertmanager } = useAlertmanager();\n\n  if (!selectedAlertmanager) {\n    return <NoAlertManagerWarning availableAlertManagers={availableAlertManagers} />;\n  }\n\n  return <>{children}</>;\n};\n","import { chain, filter } from 'lodash';\nimport React, { PropsWithChildren } from 'react';\n\nimport {\n  Abilities,\n  Action,\n  AlertingAction,\n  AlertmanagerAction,\n  useAlertingAbilities,\n  useAllAlertmanagerAbilities,\n} from '../hooks/useAbilities';\n\ninterface AuthorizeProps extends PropsWithChildren {\n  actions: AlertmanagerAction[] | AlertingAction[];\n}\n\nexport const Authorize = ({ actions, children }: AuthorizeProps) => {\n  const alertmanagerActions = filter(actions, isAlertmanagerAction) as AlertmanagerAction[];\n  const alertSourceActions = filter(actions, isAlertingAction) as AlertingAction[];\n\n  if (alertmanagerActions.length) {\n    return <AuthorizeAlertmanager actions={alertmanagerActions}>{children}</AuthorizeAlertmanager>;\n  }\n\n  if (alertSourceActions.length) {\n    return <AuthorizeAlertsource actions={alertSourceActions}>{children}</AuthorizeAlertsource>;\n  }\n\n  return null;\n};\n\ninterface ActionsProps<T extends Action> extends PropsWithChildren {\n  actions: T[];\n}\n\nconst AuthorizeAlertmanager = ({ actions, children }: ActionsProps<AlertmanagerAction>) => {\n  const alertmanagerAbilties = useAllAlertmanagerAbilities();\n  const allowed = actionsAllowed(alertmanagerAbilties, actions);\n\n  if (allowed) {\n    return <>{children}</>;\n  } else {\n    return null;\n  }\n};\n\nconst AuthorizeAlertsource = ({ actions, children }: ActionsProps<AlertingAction>) => {\n  const alertSourceAbilities = useAlertingAbilities();\n  const allowed = actionsAllowed(alertSourceAbilities, actions);\n\n  if (allowed) {\n    return <>{children}</>;\n  } else {\n    return null;\n  }\n};\n\n// TODO add some authorize helper components for alert source and individual alert rules\n\n// check if some action is allowed from the abilities\nfunction actionsAllowed<T extends Action>(abilities: Abilities<T>, actions: T[]) {\n  return chain(abilities)\n    .pick(actions)\n    .values()\n    .value()\n    .some(([_supported, allowed]) => allowed === true);\n}\n\nfunction isAlertmanagerAction(action: AlertmanagerAction) {\n  return Object.values(AlertmanagerAction).includes(action);\n}\n\nfunction isAlertingAction(action: AlertingAction) {\n  return Object.values(AlertingAction).includes(action);\n}\n","import { css, cx } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\n\nimport { DynamicTable, DynamicTableProps } from './DynamicTable';\n\nexport type DynamicTableWithGuidelinesProps<T> = Omit<DynamicTableProps<T>, 'renderPrefixHeader, renderPrefixCell'>;\n\n// DynamicTable, but renders visual guidelines on the left, for larger screen widths\nexport const DynamicTableWithGuidelines = <T extends object>({\n  renderExpandedContent,\n  ...props\n}: DynamicTableWithGuidelinesProps<T>) => {\n  const styles = useStyles2(getStyles);\n  return (\n    <DynamicTable\n      renderExpandedContent={\n        renderExpandedContent\n          ? (item, index, items) => (\n              <>\n                {!(index === items.length - 1) && <div className={cx(styles.contentGuideline, styles.guideline)} />}\n                {renderExpandedContent(item, index, items)}\n              </>\n            )\n          : undefined\n      }\n      renderPrefixHeader={() => (\n        <div className={styles.relative}>\n          <div className={cx(styles.headerGuideline, styles.guideline)} />\n        </div>\n      )}\n      renderPrefixCell={(_, index, items) => (\n        <div className={styles.relative}>\n          <div className={cx(styles.topGuideline, styles.guideline)} />\n          {!(index === items.length - 1) && <div className={cx(styles.bottomGuideline, styles.guideline)} />}\n        </div>\n      )}\n      {...props}\n    />\n  );\n};\n\nexport const getStyles = (theme: GrafanaTheme2) => ({\n  relative: css`\n    position: relative;\n    height: 100%;\n  `,\n  guideline: css`\n    left: -19px;\n    border-left: 1px solid ${theme.colors.border.weak};\n    position: absolute;\n\n    ${theme.breakpoints.down('md')} {\n      display: none;\n    }\n  `,\n  topGuideline: css`\n    width: 18px;\n    border-bottom: 1px solid ${theme.colors.border.medium};\n    top: 0;\n    bottom: 50%;\n  `,\n  bottomGuideline: css`\n    top: 50%;\n    bottom: 0;\n  `,\n  contentGuideline: css`\n    top: 0;\n    bottom: 0;\n    left: -49px !important;\n  `,\n  headerGuideline: css`\n    top: -17px;\n    bottom: 0;\n  `,\n});\n","import { css, cx } from '@emotion/css';\nimport React, { ComponentProps, HTMLAttributes } from 'react';\n\nimport { Icon, IconName, useStyles2, Text, Stack } from '@grafana/ui';\n\ninterface Props extends HTMLAttributes<HTMLDivElement> {\n  icon?: IconName;\n  direction?: 'row' | 'column';\n  color?: ComponentProps<typeof Text>['color'];\n}\n\nconst MetaText = ({ children, icon, color = 'secondary', direction = 'row', ...rest }: Props) => {\n  const styles = useStyles2(getStyles);\n  const interactive = typeof rest.onClick === 'function';\n\n  const rowDirection = direction === 'row';\n  const alignItems = rowDirection ? 'center' : 'flex-start';\n  const gap = rowDirection ? 0.5 : 0;\n\n  return (\n    <div\n      className={cx({\n        [styles.interactive]: interactive,\n      })}\n      // allow passing ARIA and data- attributes\n      {...rest}\n    >\n      <Text variant=\"bodySmall\" color={color}>\n        <Stack direction={direction} alignItems={alignItems} gap={gap} wrap={'wrap'}>\n          {icon && <Icon size=\"sm\" name={icon} />}\n          {children}\n        </Stack>\n      </Text>\n    </div>\n  );\n};\n\nconst getStyles = () => ({\n  interactive: css`\n    cursor: pointer;\n  `,\n});\n\nexport { MetaText };\n","import React from 'react';\n\nimport { useTheme2 } from '@grafana/ui';\n\ninterface Props {}\n\nconst Strong = ({ children }: React.PropsWithChildren<Props>) => {\n  const theme = useTheme2();\n  return <strong style={{ color: theme.colors.text.primary }}>{children}</strong>;\n};\n\nexport { Strong };\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { LinkButton, useStyles2 } from '@grafana/ui';\nimport { contextSrv } from 'app/core/services/context_srv';\nimport { AlertmanagerAlert, AlertState } from 'app/plugins/datasource/alertmanager/types';\nimport { AccessControlAction } from 'app/types';\n\nimport { AlertmanagerAction } from '../../hooks/useAbilities';\nimport { isGrafanaRulesSource } from '../../utils/datasource';\nimport { makeAMLink, makeLabelBasedSilenceLink } from '../../utils/misc';\nimport { AnnotationDetailsField } from '../AnnotationDetailsField';\nimport { Authorize } from '../Authorize';\n\ninterface AmNotificationsAlertDetailsProps {\n  alertManagerSourceName: string;\n  alert: AlertmanagerAlert;\n}\n\nexport const AlertDetails = ({ alert, alertManagerSourceName }: AmNotificationsAlertDetailsProps) => {\n  const styles = useStyles2(getStyles);\n\n  // For Grafana Managed alerts the Generator URL redirects to the alert rule edit page, so update permission is required\n  // For external alert manager the Generator URL redirects to an external service which we don't control\n  const isGrafanaSource = isGrafanaRulesSource(alertManagerSourceName);\n  const isSeeSourceButtonEnabled = isGrafanaSource\n    ? contextSrv.hasPermission(AccessControlAction.AlertingRuleRead)\n    : true;\n\n  return (\n    <>\n      <div className={styles.actionsRow}>\n        {alert.status.state === AlertState.Suppressed && (\n          <Authorize actions={[AlertmanagerAction.CreateSilence, AlertmanagerAction.UpdateSilence]}>\n            <LinkButton\n              href={`${makeAMLink(\n                '/alerting/silences',\n                alertManagerSourceName\n              )}&silenceIds=${alert.status.silencedBy.join(',')}`}\n              className={styles.button}\n              icon={'bell'}\n              size={'sm'}\n            >\n              Manage silences\n            </LinkButton>\n          </Authorize>\n        )}\n        {alert.status.state === AlertState.Active && (\n          <Authorize actions={[AlertmanagerAction.CreateSilence]}>\n            <LinkButton\n              href={makeLabelBasedSilenceLink(alertManagerSourceName, alert.labels)}\n              className={styles.button}\n              icon={'bell-slash'}\n              size={'sm'}\n            >\n              Silence\n            </LinkButton>\n          </Authorize>\n        )}\n        {isSeeSourceButtonEnabled && alert.generatorURL && (\n          <LinkButton className={styles.button} href={alert.generatorURL} icon={'chart-line'} size={'sm'}>\n            See source\n          </LinkButton>\n        )}\n      </div>\n      {Object.entries(alert.annotations).map(([annotationKey, annotationValue]) => (\n        <AnnotationDetailsField key={annotationKey} annotationKey={annotationKey} value={annotationValue} />\n      ))}\n      <div className={styles.receivers}>\n        Receivers:{' '}\n        {alert.receivers\n          .map(({ name }) => name)\n          .filter((name) => !!name)\n          .join(', ')}\n      </div>\n    </>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  button: css`\n    & + & {\n      margin-left: ${theme.spacing(1)};\n    }\n  `,\n  actionsRow: css`\n    padding: ${theme.spacing(2, 0)} !important;\n    border-bottom: 1px solid ${theme.colors.border.medium};\n  `,\n  receivers: css`\n    padding: ${theme.spacing(1, 0)};\n  `,\n});\n","import { css } from '@emotion/css';\nimport React, { useMemo } from 'react';\n\nimport { GrafanaTheme2, intervalToAbbreviatedDurationString } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\nimport { AlertmanagerAlert } from 'app/plugins/datasource/alertmanager/types';\n\nimport { AlertLabels } from '../AlertLabels';\nimport { DynamicTableColumnProps, DynamicTableItemProps } from '../DynamicTable';\nimport { DynamicTableWithGuidelines } from '../DynamicTableWithGuidelines';\nimport { AmAlertStateTag } from '../silences/AmAlertStateTag';\n\nimport { AlertDetails } from './AlertDetails';\n\ninterface Props {\n  alerts: AlertmanagerAlert[];\n  alertManagerSourceName: string;\n}\n\ntype AlertGroupAlertsTableColumnProps = DynamicTableColumnProps<AlertmanagerAlert>;\ntype AlertGroupAlertsTableItemProps = DynamicTableItemProps<AlertmanagerAlert>;\n\nexport const AlertGroupAlertsTable = ({ alerts, alertManagerSourceName }: Props) => {\n  const styles = useStyles2(getStyles);\n\n  const columns = useMemo(\n    (): AlertGroupAlertsTableColumnProps[] => [\n      {\n        id: 'state',\n        label: 'State',\n        // eslint-disable-next-line react/display-name\n        renderCell: ({ data: alert }) => (\n          <>\n            <AmAlertStateTag state={alert.status.state} />\n            <span className={styles.duration}>\n              for{' '}\n              {intervalToAbbreviatedDurationString({\n                start: new Date(alert.startsAt),\n                end: new Date(alert.endsAt),\n              })}\n            </span>\n          </>\n        ),\n        size: '220px',\n      },\n      {\n        id: 'labels',\n        label: 'Labels',\n        // eslint-disable-next-line react/display-name\n        renderCell: ({ data: { labels } }) => <AlertLabels labels={labels} size=\"sm\" />,\n        size: 1,\n      },\n    ],\n    [styles]\n  );\n\n  const items = useMemo(\n    (): AlertGroupAlertsTableItemProps[] =>\n      alerts.map((alert) => ({\n        id: alert.fingerprint,\n        data: alert,\n      })),\n    [alerts]\n  );\n\n  return (\n    <div className={styles.tableWrapper} data-testid=\"alert-group-table\">\n      <DynamicTableWithGuidelines\n        cols={columns}\n        items={items}\n        isExpandable={true}\n        renderExpandedContent={({ data: alert }) => (\n          <AlertDetails alert={alert} alertManagerSourceName={alertManagerSourceName} />\n        )}\n      />\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  tableWrapper: css`\n    margin-top: ${theme.spacing(3)};\n    ${theme.breakpoints.up('md')} {\n      margin-left: ${theme.spacing(4.5)};\n    }\n  `,\n  duration: css`\n    margin-left: ${theme.spacing(1)};\n    font-size: ${theme.typography.bodySmall.fontSize};\n  `,\n});\n","import { css } from '@emotion/css';\nimport React, { useState } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2, Stack } from '@grafana/ui';\nimport { AlertmanagerGroup, AlertState } from 'app/plugins/datasource/alertmanager/types';\n\nimport { AlertLabels } from '../AlertLabels';\nimport { CollapseToggle } from '../CollapseToggle';\nimport { MetaText } from '../MetaText';\nimport { Strong } from '../Strong';\n\nimport { AlertGroupAlertsTable } from './AlertGroupAlertsTable';\nimport { AlertGroupHeader } from './AlertGroupHeader';\n\ninterface Props {\n  group: AlertmanagerGroup;\n  alertManagerSourceName: string;\n}\n\nexport const AlertGroup = ({ alertManagerSourceName, group }: Props) => {\n  const [isCollapsed, setIsCollapsed] = useState<boolean>(true);\n  const styles = useStyles2(getStyles);\n  // When group is grouped, receiver.name is 'NONE' as it can contain multiple receivers\n  const receiverInGroup = group.receiver.name !== 'NONE';\n  return (\n    <div className={styles.wrapper}>\n      <div className={styles.header}>\n        <div className={styles.group} data-testid=\"alert-group\">\n          <CollapseToggle\n            size=\"sm\"\n            isCollapsed={isCollapsed}\n            onToggle={() => setIsCollapsed(!isCollapsed)}\n            data-testid=\"alert-group-collapse-toggle\"\n          />\n          {Object.keys(group.labels).length ? (\n            <Stack direction=\"row\" alignItems=\"center\">\n              <AlertLabels labels={group.labels} size=\"sm\" />\n              {receiverInGroup && (\n                <MetaText icon=\"at\">\n                  Delivered to <Strong>{group.receiver.name}</Strong>\n                </MetaText>\n              )}\n            </Stack>\n          ) : (\n            <span>No grouping</span>\n          )}\n        </div>\n        <AlertGroupHeader group={group} />\n      </div>\n      {!isCollapsed && <AlertGroupAlertsTable alertManagerSourceName={alertManagerSourceName} alerts={group.alerts} />}\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  wrapper: css({\n    '& + &': {\n      marginTop: theme.spacing(2),\n    },\n  }),\n  header: css({\n    display: 'flex',\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    padding: `${theme.spacing(1)} ${theme.spacing(1)} ${theme.spacing(1)} 0`,\n    backgroundColor: theme.colors.background.secondary,\n    width: '100%',\n  }),\n  group: css({\n    display: 'flex',\n    flexDirection: 'row',\n    alignItems: 'center',\n  }),\n  summary: css({}),\n  [AlertState.Active]: css({\n    color: theme.colors.error.main,\n  }),\n  [AlertState.Suppressed]: css({\n    color: theme.colors.primary.main,\n  }),\n  [AlertState.Unprocessed]: css({\n    color: theme.colors.secondary.main,\n  }),\n});\n","import React from 'react';\n\nimport { AlertState } from 'app/plugins/datasource/alertmanager/types';\n\nimport { State, StateTag } from '../StateTag';\n\nconst alertStateToState: Record<AlertState, State> = {\n  [AlertState.Active]: 'bad',\n  [AlertState.Unprocessed]: 'neutral',\n  [AlertState.Suppressed]: 'info',\n};\n\ninterface Props {\n  state: AlertState;\n}\n\nexport const AmAlertStateTag = ({ state }: Props) => <StateTag state={alertStateToState[state]}>{state}</StateTag>;\n"],"names":["AlertStateFilter","onStateFilterChange","stateFilter","styles","getStyles","alertStateOptions","labelA","labelB","label","state","Label","RadioButtonGroup","theme","GroupBy","className","groups","groupBy","onGroupingChange","labelKeyOptions","group","labels","key","Icon","items","value","AlertGroupFilter","filterKey","setFilterKey","queryParams","setQueryParams","useQueryParams","queryString","alertState","matcherFilterKey","clearFilters","showClearButton","MatcherFilter","keys","Button","useFilteredAmGroups","filters","matchers","filteredGroup","alerts","status","labelsMatch","filtersMatch","useGroupedAlerts","combinedGroups","noGroupingGroup","groupings","alert","groupByLabel","existingGrouping","groupKey","acc","AlertGroups","useGetAlertmanagerChoiceStatusQuery","alertmanagerApi","selectedAlertmanager","dispatch","amConfigStatus","alertGroups","useUnifiedAlertingSelector","loading","error","results","groupedAlerts","filteredAlertGroups","grafanaAmDeliveryDisabled","fetchNotifications","interval","LoadingPlaceholder","Alert","index","AlertGroup","AlertGroupsPage","CollapsibleAlert","localStoreKey","startClosed","severity","collapseText","collapseTooltip","collapseJustify","alertTitle","children","closed","setClosed","useLocalStorage","Tooltip","color","LOCAL_STORAGE_KEY","UAPreviewNotice","config","TextLink","getAlertManagerLabel","alertManager","AlertManagerPicker","disabled","availableAlertManagers","setSelectedAlertmanager","options","ds","InlineField","Select","o","NoAlertManagersAvailable","OtherAlertManagersAvailable","NoAlertManagerWarning","hasOtherAMs","AlertingPageWrapper","isLoading","rest","Page","AlertmanagerPageWrapper","accessType","props","disableAlertmanager","useIsDisabledAlertmanagerSelection","AlertManagerPagePermissionsCheck","location","useLocation","match","Authorize","actions","alertmanagerActions","isAlertmanagerAction","alertSourceActions","isAlertingAction","AuthorizeAlertmanager","AuthorizeAlertsource","alertmanagerAbilties","actionsAllowed","alertSourceAbilities","abilities","_supported","allowed","action","DynamicTableWithGuidelines","renderExpandedContent","item","_","MetaText","icon","direction","interactive","rowDirection","alignItems","gap","Strong","AlertDetails","alertManagerSourceName","isSeeSourceButtonEnabled","annotationKey","annotationValue","AnnotationDetailsField","name","AlertGroupAlertsTable","columns","AmAlertStateTag","AlertLabels","isCollapsed","setIsCollapsed","receiverInGroup","CollapseToggle","Stack","AlertGroupHeader","alertStateToState"],"sourceRoot":""}