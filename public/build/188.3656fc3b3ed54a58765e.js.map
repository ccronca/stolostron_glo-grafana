{"version":3,"file":"188.3656fc3b3ed54a58765e.js","mappings":"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AC,EACA,OAAAC,EACA,QAAAC,EACA,QAAAC,EACA,UAAAC,EACA,aAAAC,EACA,WAAAC,EACA,YAAAC,EACA,QAAAC,EACA,SAAAC,EACA,SAAAC,EACA,WAAAC,EACA,cAAAC,EACA,YAAAC,EACA,aAAAC,EACA,QAAA9I,EACA,gBAAA+I,GACA,KAAAC,EACA,OAAAC,EACA,MAAAC,EACA,KAAAC,EACA,YAAAC,EACA,YAAAC,EACA,aAAAC,EACA,eAAAC,EACA,WAAAC,EACA,UAAAC,EACA,QAAAC,EACA,IAAAC,GACA,GAAGC,EACL,EAAI9B,EACE+B,MAAS,MACbC,EACA7B,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACA9I,EACA+I,GACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAE,EACF,EACMI,GAAUL,GAAW,MAE3B,OACE,gBAACK,GAAA,CAAQ,IAAAhC,EAAU,UAAW8B,GAAO,KAAO,GAAGD,EAAA,EAC5C5B,CACH,CAEJ,CAAC,EAEDH,EAAI,YAAc,MAElB,MAAMmC,EAAoB,CAACC,EAAoBC,IAAyB,CACtE,OAAQD,EAAO,CACb,IAAK,QACL,IAAK,UACL,IAAK,OACL,IAAK,UACH,OAAOC,EAAM,OAAOD,CAAK,EAAE,kBAC7B,QACE,OAAOA,EAAQC,EAAM,OAAO,OAAOD,CAAK,EAAI,MAChD,CACF,EAEME,EAAwB,CAACF,EAAwBC,IAAyB,CAC9E,OAAQD,EAAO,CACb,IAAK,QACL,IAAK,UACL,IAAK,OACL,IAAK,UACH,OAAOC,EAAM,OAAOD,CAAK,EAAE,YAC7B,QACE,OAAOA,EAAQC,EAAM,OAAO,WAAWD,CAAK,EAAI,MACpD,CACF,EAEMH,EAAY,CAChBI,EACAjC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACA9I,EACA+I,EACAC,EACAC,GACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAE,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","sources":["webpack://grafana/./.yarn/__virtual__/@grafana-data-virtual-5bf5e61bca/1/packages/grafana-data/src/dataframe/ArrayDataFrame.ts","webpack://grafana/./.yarn/__virtual__/@grafana-data-virtual-5bf5e61bca/1/packages/grafana-data/src/dataframe/DataFrameJSON.ts","webpack://grafana/./.yarn/__virtual__/@grafana-data-virtual-5bf5e61bca/1/packages/grafana-data/src/field/fieldComparers.ts","webpack://grafana/./.yarn/__virtual__/@grafana-data-virtual-5bf5e61bca/1/packages/grafana-data/src/dataframe/processDataFrame.ts","webpack://grafana/./.yarn/__virtual__/@grafana-data-virtual-5bf5e61bca/1/packages/grafana-data/src/datetime/moment_wrapper.ts","webpack://grafana/./.yarn/__virtual__/@grafana-data-virtual-5bf5e61bca/1/packages/grafana-data/src/types/data.ts","webpack://grafana/./.yarn/__virtual__/@grafana-data-virtual-5bf5e61bca/1/packages/grafana-data/src/types/dataFrame.ts","webpack://grafana/./.yarn/__virtual__/@grafana-data-virtual-5bf5e61bca/1/packages/grafana-data/src/types/variables.ts","webpack://grafana/./.yarn/__virtual__/@grafana-ui-virtual-2a6ff86fdd/1/packages/grafana-ui/src/components/Layout/Box/Box.tsx","webpack://grafana/./.yarn/__virtual__/@grafana-ui-virtual-2a6ff86fdd/1/packages/grafana-ui/src/components/Text/TruncatedText.tsx","webpack://grafana/./.yarn/__virtual__/@grafana-ui-virtual-2a6ff86fdd/1/packages/grafana-ui/src/components/Text/utils.ts","webpack://grafana/./.yarn/__virtual__/@grafana-ui-virtual-2a6ff86fdd/1/packages/grafana-ui/src/components/Text/Text.tsx","webpack://grafana/./.yarn/__virtual__/@grafana-ui-virtual-2a6ff86fdd/1/packages/grafana-ui/src/components/Alert/Alert.tsx","webpack://grafana/./.yarn/__virtual__/@grafana-ui-virtual-2a6ff86fdd/1/packages/grafana-ui/src/components/Layout/Stack/Stack.tsx","webpack://grafana/./.yarn/__virtual__/@grafana-ui-virtual-2a6ff86fdd/1/packages/grafana-ui/src/components/Layout/utils/responsiveness.tsx"],"sourcesContent":["import { QueryResultMeta } from '../types';\nimport { Field, FieldType, DataFrame, TIME_SERIES_VALUE_FIELD_NAME } from '../types/dataFrame';\n\nimport { guessFieldTypeForField } from './processDataFrame';\n\n/**\n * The ArrayDataFrame takes an array of objects and presents it as a DataFrame\n *\n * @deprecated use arrayToDataFrame\n */\nexport class ArrayDataFrame<T = any> implements DataFrame {\n  fields: Field[] = [];\n  length = 0;\n  name?: string;\n  refId?: string;\n  meta?: QueryResultMeta;\n\n  constructor(source: T[], names?: string[]) {\n    return arrayToDataFrame(source, names); // returns a standard DataFrame\n  }\n}\n\n/**\n * arrayToDataFrame will convert any array into a DataFrame\n *\n * @public\n */\nexport function arrayToDataFrame(source: any[], names?: string[]): DataFrame {\n  const df: DataFrame = {\n    fields: [],\n    length: source.length,\n  };\n  if (!source?.length) {\n    return df;\n  }\n\n  if (names) {\n    for (const name of names) {\n      df.fields.push(\n        makeFieldFromValues(\n          name,\n          source.map((v) => v[name])\n        )\n      );\n    }\n    return df;\n  }\n\n  const first = source.find((v) => v != null); // first not null|undefined\n  if (first != null) {\n    if (typeof first === 'object') {\n      df.fields = Object.keys(first).map((name) => {\n        return makeFieldFromValues(\n          name,\n          source.map((v) => v[name])\n        );\n      });\n    } else {\n      df.fields.push(makeFieldFromValues(TIME_SERIES_VALUE_FIELD_NAME, source));\n    }\n  }\n  return df;\n}\n\nfunction makeFieldFromValues(name: string, values: unknown[]): Field {\n  const f = { name, config: {}, values, type: FieldType.other };\n  f.type = guessFieldTypeForField(f) ?? FieldType.other;\n  return f;\n}\n","import { DataFrame, FieldType, FieldConfig, Labels, QueryResultMeta, Field } from '../types';\n\nimport { guessFieldTypeFromNameAndValue } from './processDataFrame';\n\n/**\n * The JSON transfer object for DataFrames.  Values are stored in simple JSON\n *\n * @alpha\n */\nexport interface DataFrameJSON {\n  /**\n   * The schema defines the field type and configuration.\n   */\n  schema?: DataFrameSchema;\n\n  /**\n   * The field data\n   */\n  data?: DataFrameData;\n}\n\ntype FieldValues = unknown[];\n\n/**\n * @alpha\n */\nexport interface DataFrameData {\n  /**\n   * A columnar store that matches fields defined by schema.\n   */\n  values: FieldValues[];\n\n  /**\n   * Since JSON cannot encode NaN, Inf, -Inf, and undefined, these entities\n   * are decoded after JSON.parse() using this struct\n   */\n  entities?: Array<FieldValueEntityLookup | null>;\n\n  /**\n   * Holds value bases per field so we can encode numbers from fixed points\n   * e.g. [1612900958, 1612900959, 1612900960] -> 1612900958 + [0, 1, 2]\n   */\n  bases?: number[];\n\n  /**\n   * Holds value multipliers per field so we can encode large numbers concisely\n   * e.g. [4900000000, 35000000000] -> 1e9 + [4.9, 35]\n   */\n  factors?: number[];\n\n  /**\n   * Holds enums per field so we can encode recurring string values as ints\n   * e.g. [\"foo\", \"foo\", \"baz\", \"foo\"] -> [\"foo\", \"baz\"] + [0,0,1,0]\n   *\n   * NOTE: currently only decoding is implemented\n   */\n  enums?: Array<string[] | null>;\n\n  /**\n   * Holds integers between 0 and 999999, used by time-fields\n   * to store the nanosecond-precision that cannot be represented\n   * by the millisecond-based base value.\n   */\n  nanos?: Array<number[] | null>;\n}\n\n/**\n * The JSON transfer object for DataFrames.  Values are stored in simple JSON\n *\n * @alpha\n */\nexport interface DataFrameSchema {\n  /**\n   * Matches the query target refId\n   */\n  refId?: string;\n\n  /**\n   * Initial response global metadata\n   */\n  meta?: QueryResultMeta;\n\n  /**\n   * Frame name\n   */\n  name?: string;\n\n  /**\n   * Field definition without any metadata\n   */\n  fields: FieldSchema[];\n}\n\n/**\n * Field object passed over JSON\n *\n * @alpha\n */\nexport interface FieldSchema {\n  name: string; // The column name\n  type?: FieldType;\n  config?: FieldConfig;\n  labels?: Labels;\n}\n\n/**\n * Since JSON cannot encode NaN, Inf, -Inf, and undefined, the locations\n * of these entities in field value arrays are stored here for restoration\n * after JSON.parse()\n *\n * @alpha\n */\nexport interface FieldValueEntityLookup {\n  NaN?: number[];\n  Undef?: number[]; // Missing because of absence or join\n  Inf?: number[];\n  NegInf?: number[];\n}\n\nconst ENTITY_MAP: Record<keyof FieldValueEntityLookup, number | undefined> = {\n  Inf: Infinity,\n  NegInf: -Infinity,\n  Undef: undefined,\n  NaN: NaN,\n};\n\n/**\n * @internal use locally\n */\nexport function decodeFieldValueEntities(lookup: FieldValueEntityLookup, values: FieldValues) {\n  for (const key in lookup) {\n    const repl = ENTITY_MAP[key as keyof FieldValueEntityLookup];\n    for (const idx of lookup[key as keyof FieldValueEntityLookup]!) {\n      if (idx < values.length) {\n        values[idx] = repl;\n      }\n    }\n  }\n}\n\n/**\n * @internal use locally\n */\nexport function decodeFieldValueEnums(lookup: string[], values: FieldValues) {\n  for (let i = 0; i < values.length; i++) {\n    values[i] = lookup[Number(values[i])];\n  }\n}\n\nfunction guessFieldType(name: string, values: FieldValues): FieldType {\n  for (const v of values) {\n    if (v != null) {\n      return guessFieldTypeFromNameAndValue(name, v);\n    }\n  }\n  return FieldType.other;\n}\n\n/**\n * NOTE: dto.data.values will be mutated and decoded/inflated using entities,bases,factors,enums\n *\n * @alpha\n */\nexport function dataFrameFromJSON(dto: DataFrameJSON): DataFrame {\n  const { schema, data } = dto;\n\n  if (!schema || !schema.fields) {\n    throw new Error('JSON needs a fields definition');\n  }\n\n  // Find the longest field length\n  const length = data ? data.values.reduce((max, vals) => Math.max(max, vals.length), 0) : 0;\n  const fields = schema.fields.map((f, index) => {\n    let buffer = data ? data.values[index] : [];\n    let origLen = buffer.length;\n    let type = f.type;\n\n    if (origLen !== length) {\n      buffer.length = length;\n      // avoid sparse arrays\n      buffer.fill(undefined, origLen);\n    }\n\n    let entities = data?.entities?.[index];\n\n    if (entities) {\n      decodeFieldValueEntities(entities, buffer);\n    }\n\n    let enums = data?.enums?.[index];\n\n    if (enums) {\n      decodeFieldValueEnums(enums, buffer);\n      type = FieldType.string;\n    }\n\n    const nanos = data?.nanos?.[index];\n\n    // TODO: expand arrays further using bases,factors\n\n    const dataFrameField: Field & { entities: FieldValueEntityLookup } = {\n      ...f,\n      type: type ?? guessFieldType(f.name, buffer),\n      config: f.config ?? {},\n      values: buffer,\n      // the presence of this prop is an optimization signal & lookup for consumers\n      entities: entities ?? {},\n    };\n\n    if (nanos != null) {\n      dataFrameField.nanos = nanos;\n    }\n\n    return dataFrameField;\n  });\n\n  return {\n    ...schema,\n    fields,\n    length,\n  };\n}\n\n/**\n * This converts DataFrame to a json representation with distinct schema+data\n *\n * @alpha\n */\nexport function dataFrameToJSON(frame: DataFrame): DataFrameJSON {\n  const data: DataFrameData = {\n    values: [],\n  };\n\n  const allNanos: Array<number[] | null> = [];\n  let hasNanos = false;\n\n  const schema: DataFrameSchema = {\n    refId: frame.refId,\n    meta: frame.meta,\n    name: frame.name,\n    fields: frame.fields.map((f) => {\n      const { values, nanos, state, display, ...sfield } = f;\n      if ('entities' in sfield) {\n        delete sfield.entities;\n      }\n      data.values.push(values);\n\n      if (nanos != null) {\n        allNanos.push(nanos);\n        hasNanos = true;\n      } else {\n        allNanos.push(null);\n      }\n\n      return sfield;\n    }),\n  };\n\n  if (hasNanos) {\n    data.nanos = allNanos;\n  }\n\n  return {\n    schema,\n    data,\n  };\n}\n","import { isNumber } from 'lodash';\n\nimport { dateTime, isDateTimeInput } from '../datetime';\nimport { Field, FieldType } from '../types/dataFrame';\n\ntype IndexComparer = (a: number, b: number) => number;\n\n/** @public */\nexport const fieldIndexComparer = (field: Field, reverse = false): IndexComparer => {\n  const values = field.values;\n\n  switch (field.type) {\n    case FieldType.number:\n      return numericIndexComparer(values, reverse);\n    case FieldType.string:\n      return stringIndexComparer(values, reverse);\n    case FieldType.boolean:\n      return booleanIndexComparer(values, reverse);\n    case FieldType.time:\n      if (typeof field.values[0] === 'number') {\n        return timestampIndexComparer(values, reverse);\n      }\n      return timeIndexComparer(values, reverse);\n    default:\n      return naturalIndexComparer(reverse);\n  }\n};\n\n/** @public */\nexport const timeComparer = (a: unknown, b: unknown): number => {\n  if (!a || !b) {\n    return falsyComparer(a, b);\n  }\n\n  if (isNumber(a) && isNumber(b)) {\n    return numericComparer(a, b);\n  }\n\n  if (isDateTimeInput(a) && isDateTimeInput(b)) {\n    if (dateTime(a).isBefore(b)) {\n      return -1;\n    }\n\n    if (dateTime(b).isBefore(a)) {\n      return 1;\n    }\n  }\n\n  return 0;\n};\n\n/** @public */\nexport const numericComparer = (a: number, b: number): number => {\n  return a - b;\n};\n\n/** @public */\nexport const stringComparer = (a: string, b: string): number => {\n  if (!a || !b) {\n    return falsyComparer(a, b);\n  }\n  return a.localeCompare(b);\n};\n\nexport const booleanComparer = (a: boolean, b: boolean): number => {\n  return falsyComparer(a, b);\n};\n\nconst falsyComparer = (a: unknown, b: unknown): number => {\n  if (!a && b) {\n    return 1;\n  }\n\n  if (a && !b) {\n    return -1;\n  }\n\n  return 0;\n};\n\nconst timestampIndexComparer = (values: number[], reverse: boolean): IndexComparer => {\n  let mult = reverse ? -1 : 1;\n  return (a: number, b: number): number => mult * (values[a] - values[b]);\n};\n\nconst timeIndexComparer = (values: unknown[], reverse: boolean): IndexComparer => {\n  return (a: number, b: number): number => {\n    const vA = values[a];\n    const vB = values[b];\n    return reverse ? timeComparer(vB, vA) : timeComparer(vA, vB);\n  };\n};\n\nconst booleanIndexComparer = (values: boolean[], reverse: boolean): IndexComparer => {\n  return (a: number, b: number): number => {\n    const vA = values[a];\n    const vB = values[b];\n    return reverse ? booleanComparer(vB, vA) : booleanComparer(vA, vB);\n  };\n};\n\nconst numericIndexComparer = (values: number[], reverse: boolean): IndexComparer => {\n  return (a: number, b: number): number => {\n    const vA = values[a];\n    const vB = values[b];\n    return reverse ? numericComparer(vB, vA) : numericComparer(vA, vB);\n  };\n};\n\nconst stringIndexComparer = (values: string[], reverse: boolean): IndexComparer => {\n  return (a: number, b: number): number => {\n    const vA = values[a];\n    const vB = values[b];\n    return reverse ? stringComparer(vB, vA) : stringComparer(vA, vB);\n  };\n};\n\nconst naturalIndexComparer = (reverse: boolean): IndexComparer => {\n  return (a: number, b: number): number => {\n    return reverse ? numericComparer(b, a) : numericComparer(a, b);\n  };\n};\n","// Libraries\nimport { isArray, isBoolean, isNumber, isString } from 'lodash';\n\n// Types\nimport { isDateTime } from '../datetime/moment_wrapper';\nimport { fieldIndexComparer } from '../field/fieldComparers';\nimport { getFieldDisplayName } from '../field/fieldState';\nimport {\n  DataFrame,\n  Field,\n  FieldConfig,\n  TimeSeries,\n  FieldType,\n  TableData,\n  Column,\n  GraphSeriesXY,\n  TimeSeriesValue,\n  FieldDTO,\n  DataFrameDTO,\n  TIME_SERIES_VALUE_FIELD_NAME,\n  TIME_SERIES_TIME_FIELD_NAME,\n  DataQueryResponseData,\n  PanelData,\n  LoadingState,\n  GraphSeriesValue,\n  DataFrameWithValue,\n} from '../types/index';\n\nimport { arrayToDataFrame } from './ArrayDataFrame';\nimport { dataFrameFromJSON } from './DataFrameJSON';\n\nfunction convertTableToDataFrame(table: TableData): DataFrame {\n  const fields = table.columns.map((c) => {\n    // TODO: should be Column but type does not exists there so not sure whats up here.\n    const { text, type, ...disp } = c as any;\n    const values: unknown[] = [];\n    return {\n      name: text?.length ? text : c, // rename 'text' to the 'name' field\n      config: (disp || {}) as FieldConfig,\n      values,\n      type: type && Object.values(FieldType).includes(type as FieldType) ? (type as FieldType) : FieldType.other,\n    };\n  });\n\n  if (!isArray(table.rows)) {\n    throw new Error(`Expected table rows to be array, got ${typeof table.rows}.`);\n  }\n\n  for (const row of table.rows) {\n    for (let i = 0; i < fields.length; i++) {\n      fields[i].values.push(row[i]);\n    }\n  }\n\n  for (const f of fields) {\n    if (f.type === FieldType.other) {\n      const t = guessFieldTypeForField(f);\n      if (t) {\n        f.type = t;\n      }\n    }\n  }\n\n  return {\n    fields,\n    refId: table.refId,\n    meta: table.meta,\n    name: table.name,\n    length: table.rows.length,\n  };\n}\n\nfunction convertTimeSeriesToDataFrame(timeSeries: TimeSeries): DataFrame {\n  const times: number[] = [];\n  const values: TimeSeriesValue[] = [];\n\n  // Sometimes the points are sent as datapoints\n  const points = timeSeries.datapoints || (timeSeries as any).points;\n  for (const point of points) {\n    values.push(point[0]);\n    times.push(point[1] as number);\n  }\n\n  const fields = [\n    {\n      name: TIME_SERIES_TIME_FIELD_NAME,\n      type: FieldType.time,\n      config: {},\n      values: times,\n    },\n    {\n      name: TIME_SERIES_VALUE_FIELD_NAME,\n      type: FieldType.number,\n      config: {\n        unit: timeSeries.unit,\n      },\n      values: values,\n      labels: timeSeries.tags,\n    },\n  ];\n\n  if (timeSeries.title) {\n    (fields[1].config as FieldConfig).displayNameFromDS = timeSeries.title;\n  }\n\n  return {\n    name: timeSeries.target || (timeSeries as any).name,\n    refId: timeSeries.refId,\n    meta: timeSeries.meta,\n    fields,\n    length: values.length,\n  };\n}\n\n/**\n * This is added temporarily while we convert the LogsModel\n * to DataFrame.  See: https://github.com/grafana/grafana/issues/18528\n */\nfunction convertGraphSeriesToDataFrame(graphSeries: GraphSeriesXY): DataFrame {\n  const x: GraphSeriesValue[] = [];\n  const y: GraphSeriesValue[] = [];\n\n  for (let i = 0; i < graphSeries.data.length; i++) {\n    const row = graphSeries.data[i];\n    x.push(row[1]);\n    y.push(row[0]);\n  }\n\n  return {\n    name: graphSeries.label,\n    fields: [\n      {\n        name: graphSeries.label || TIME_SERIES_VALUE_FIELD_NAME,\n        type: FieldType.number,\n        config: {},\n        values: x,\n      },\n      {\n        name: TIME_SERIES_TIME_FIELD_NAME,\n        type: FieldType.time,\n        config: {\n          unit: 'dateTimeAsIso',\n        },\n        values: y,\n      },\n    ],\n    length: x.length,\n  };\n}\n\nfunction convertJSONDocumentDataToDataFrame(timeSeries: TimeSeries): DataFrame {\n  const fields = [\n    {\n      name: timeSeries.target,\n      type: FieldType.other,\n      labels: timeSeries.tags,\n      config: {\n        unit: timeSeries.unit,\n        filterable: (timeSeries as any).filterable,\n      },\n      values: [] as TimeSeriesValue[][],\n    },\n  ];\n\n  for (const point of timeSeries.datapoints) {\n    fields[0].values.push(point);\n  }\n\n  return {\n    name: timeSeries.target,\n    refId: timeSeries.target,\n    meta: { json: true },\n    fields,\n    length: timeSeries.datapoints.length,\n  };\n}\n\n// PapaParse Dynamic Typing regex:\n// https://github.com/mholt/PapaParse/blob/master/papaparse.js#L998\nconst NUMBER = /^\\s*(-?(\\d*\\.?\\d+|\\d+\\.?\\d*)(e[-+]?\\d+)?|NAN)\\s*$/i;\n\n/**\n * Given a name and value, this will pick a reasonable field type\n */\nexport function guessFieldTypeFromNameAndValue(name: string, v: unknown): FieldType {\n  if (name) {\n    name = name.toLowerCase();\n    if (name === 'date' || name === 'time') {\n      return FieldType.time;\n    }\n  }\n  return guessFieldTypeFromValue(v);\n}\n\n/**\n * Check the field type to see what the contents are\n */\nexport function getFieldTypeFromValue(v: unknown): FieldType {\n  if (v instanceof Date || isDateTime(v)) {\n    return FieldType.time;\n  }\n\n  if (isNumber(v)) {\n    return FieldType.number;\n  }\n\n  if (isString(v)) {\n    return FieldType.string;\n  }\n\n  if (isBoolean(v)) {\n    return FieldType.boolean;\n  }\n\n  return FieldType.other;\n}\n\n/**\n * Given a value this will guess the best column type\n *\n * NOTE: this is will try to see if string values can be mapped to other types (like number)\n */\nexport function guessFieldTypeFromValue(v: unknown): FieldType {\n  if (v instanceof Date || isDateTime(v)) {\n    return FieldType.time;\n  }\n\n  if (isNumber(v)) {\n    return FieldType.number;\n  }\n\n  if (isString(v)) {\n    if (NUMBER.test(v)) {\n      return FieldType.number;\n    }\n\n    if (v === 'true' || v === 'TRUE' || v === 'True' || v === 'false' || v === 'FALSE' || v === 'False') {\n      return FieldType.boolean;\n    }\n\n    return FieldType.string;\n  }\n\n  if (isBoolean(v)) {\n    return FieldType.boolean;\n  }\n\n  return FieldType.other;\n}\n\n/**\n * Looks at the data to guess the column type.  This ignores any existing setting\n */\nexport function guessFieldTypeForField(field: Field): FieldType | undefined {\n  // 1. Use the column name to guess\n  if (field.name) {\n    const name = field.name.toLowerCase();\n    if (name === 'date' || name === 'time') {\n      return FieldType.time;\n    }\n  }\n\n  // 2. Check the first non-null value\n  for (let i = 0; i < field.values.length; i++) {\n    const v = field.values[i];\n    if (v != null) {\n      return guessFieldTypeFromValue(v);\n    }\n  }\n\n  // Could not find anything\n  return undefined;\n}\n\n/**\n * @returns A copy of the series with the best guess for each field type.\n * If the series already has field types defined, they will be used, unless `guessDefined` is true.\n * @param series The DataFrame whose field's types should be guessed\n * @param guessDefined Whether to guess types of fields with already defined types\n */\nexport const guessFieldTypes = (series: DataFrame, guessDefined = false): DataFrame => {\n  for (const field of series.fields) {\n    if (!field.type || field.type === FieldType.other || guessDefined) {\n      // Something is missing a type, return a modified copy\n      return {\n        ...series,\n        fields: series.fields.map((field) => {\n          if (field.type && field.type !== FieldType.other && !guessDefined) {\n            return field;\n          }\n          // Calculate a reasonable schema value\n          return {\n            ...field,\n            type: guessFieldTypeForField(field) || FieldType.other,\n          };\n        }),\n      };\n    }\n  }\n  // No changes necessary\n  return series;\n};\n\nexport const isTableData = (data: unknown): data is DataFrame => Boolean(data && data.hasOwnProperty('columns'));\n\nexport const isDataFrame = (data: unknown): data is DataFrame => Boolean(data && data.hasOwnProperty('fields'));\n\nexport const isDataFrameWithValue = (data: unknown): data is DataFrameWithValue =>\n  Boolean(isDataFrame(data) && data.hasOwnProperty('value'));\n\n/**\n * Inspect any object and return the results as a DataFrame\n */\nexport function toDataFrame(data: any): DataFrame {\n  if ('fields' in data) {\n    // DataFrameDTO does not have length\n    if ('length' in data && data.fields[0]?.values?.get) {\n      return data as DataFrame;\n    }\n\n    // This will convert the array values into Vectors\n    return createDataFrame(data as DataFrameDTO);\n  }\n\n  // Handle legacy docs/json type\n  if (data.hasOwnProperty('type') && data.type === 'docs') {\n    return convertJSONDocumentDataToDataFrame(data);\n  }\n\n  if (data.hasOwnProperty('datapoints') || data.hasOwnProperty('points')) {\n    return convertTimeSeriesToDataFrame(data);\n  }\n\n  if (data.hasOwnProperty('data')) {\n    if (data.hasOwnProperty('schema')) {\n      return dataFrameFromJSON(data);\n    }\n    return convertGraphSeriesToDataFrame(data);\n  }\n\n  if (data.hasOwnProperty('columns')) {\n    return convertTableToDataFrame(data);\n  }\n\n  if (Array.isArray(data)) {\n    return arrayToDataFrame(data);\n  }\n\n  console.warn('Can not convert', data);\n  throw new Error('Unsupported data format');\n}\n\nexport const toLegacyResponseData = (frame: DataFrame): TimeSeries | TableData => {\n  const { fields } = frame;\n\n  const rowCount = frame.length;\n  const rows: unknown[][] = [];\n\n  if (fields.length === 2) {\n    const { timeField, timeIndex } = getTimeField(frame);\n    if (timeField) {\n      const valueIndex = timeIndex === 0 ? 1 : 0;\n      const valueField = fields[valueIndex];\n      const timeField = fields[timeIndex!];\n\n      // Make sure it is [value,time]\n      for (let i = 0; i < rowCount; i++) {\n        rows.push([\n          valueField.values[i], // value\n          timeField.values[i], // time\n        ]);\n      }\n\n      return {\n        alias: frame.name,\n        target: getFieldDisplayName(valueField, frame),\n        datapoints: rows,\n        unit: fields[0].config ? fields[0].config.unit : undefined,\n        refId: frame.refId,\n        meta: frame.meta,\n      } as TimeSeries;\n    }\n  }\n\n  for (let i = 0; i < rowCount; i++) {\n    const row: unknown[] = [];\n    for (let j = 0; j < fields.length; j++) {\n      row.push(fields[j].values[i]);\n    }\n    rows.push(row);\n  }\n\n  if (frame.meta && frame.meta.json) {\n    return {\n      alias: fields[0].name || frame.name,\n      target: fields[0].name || frame.name,\n      datapoints: fields[0].values,\n      filterable: fields[0].config ? fields[0].config.filterable : undefined,\n      type: 'docs',\n    } as TimeSeries;\n  }\n\n  return {\n    columns: fields.map((f) => {\n      const { name, config } = f;\n      if (config) {\n        // keep unit etc\n        const { ...column } = config;\n        (column as Column).text = name;\n        return column as Column;\n      }\n      return { text: name };\n    }),\n    type: 'table',\n    refId: frame.refId,\n    meta: frame.meta,\n    rows,\n  };\n};\n\nexport function sortDataFrame(data: DataFrame, sortIndex?: number, reverse = false): DataFrame {\n  const field = data.fields[sortIndex!];\n  if (!field) {\n    return data;\n  }\n\n  // Natural order\n  const index: number[] = [];\n  for (let i = 0; i < data.length; i++) {\n    index.push(i);\n  }\n\n  const fieldComparer = fieldIndexComparer(field, reverse);\n  index.sort(fieldComparer);\n\n  return {\n    ...data,\n    fields: data.fields.map((f) => {\n      const newF = {\n        ...f,\n        values: f.values.map((v, i) => f.values[index[i]]),\n      };\n\n      // only add .nanos if it exists\n      const { nanos } = f;\n      if (nanos !== undefined) {\n        newF.nanos = nanos.map((n, i) => nanos[index[i]]);\n      }\n      return newF;\n    }),\n  };\n}\n\n/**\n * Returns a copy with all values reversed\n */\nexport function reverseDataFrame(data: DataFrame): DataFrame {\n  return {\n    ...data,\n    fields: data.fields.map((f) => {\n      const values = [...f.values];\n      values.reverse();\n\n      const newF = {\n        ...f,\n        values,\n      };\n\n      // only add .nanos if it exists\n      const { nanos } = f;\n      if (nanos !== undefined) {\n        const revNanos = [...nanos];\n        revNanos.reverse();\n        newF.nanos = revNanos;\n      }\n      return newF;\n    }),\n  };\n}\n\n/**\n * Wrapper to get an array from each field value\n */\nexport function getDataFrameRow(data: DataFrame, row: number): unknown[] {\n  const values: unknown[] = [];\n  for (const field of data.fields) {\n    values.push(field.values[row]);\n  }\n  return values;\n}\n\n/**\n * Returns a copy that does not include functions\n */\nexport function toDataFrameDTO(data: DataFrame): DataFrameDTO {\n  return toFilteredDataFrameDTO(data);\n}\n\nexport function toFilteredDataFrameDTO(data: DataFrame, fieldPredicate?: (f: Field) => boolean): DataFrameDTO {\n  const filteredFields = fieldPredicate ? data.fields.filter(fieldPredicate) : data.fields;\n  const fields: FieldDTO[] = filteredFields.map((f) => {\n    let values = f.values;\n    return {\n      name: f.name,\n      type: f.type,\n      config: f.config,\n      values,\n      labels: f.labels,\n    };\n  });\n\n  return {\n    fields,\n    refId: data.refId,\n    meta: data.meta,\n    name: data.name,\n  };\n}\n\nexport const getTimeField = (series: DataFrame): { timeField?: Field; timeIndex?: number } => {\n  for (let i = 0; i < series.fields.length; i++) {\n    if (series.fields[i].type === FieldType.time) {\n      return {\n        timeField: series.fields[i],\n        timeIndex: i,\n      };\n    }\n  }\n  return {};\n};\n\nfunction getProcessedDataFrame(data: DataQueryResponseData): DataFrame {\n  const dataFrame = guessFieldTypes(toDataFrame(data));\n\n  if (dataFrame.fields && dataFrame.fields.length) {\n    // clear out the cached info\n    for (const field of dataFrame.fields) {\n      field.state = null;\n    }\n  }\n\n  return dataFrame;\n}\n\n/**\n * Given data request results, will return data frames with field types set\n *\n * This is also used by PanelChrome for snapshot support\n */\nexport function getProcessedDataFrames(results?: DataQueryResponseData[]): DataFrame[] {\n  if (!results || !isArray(results)) {\n    return [];\n  }\n\n  return results.map((data) => getProcessedDataFrame(data));\n}\n\n/**\n * Will process the panel data frames and in case of loading state with no data, will return the last result data but with loading state\n * This is to have panels not flicker temporarily with \"no data\" while loading\n */\nexport function preProcessPanelData(data: PanelData, lastResult?: PanelData): PanelData {\n  const { series, annotations } = data;\n\n  //  for loading states with no data, use last result\n  if (data.state === LoadingState.Loading && series.length === 0) {\n    if (!lastResult) {\n      lastResult = data;\n    }\n\n    return {\n      ...lastResult,\n      state: LoadingState.Loading,\n      request: data.request,\n    };\n  }\n\n  // Make sure the data frames are properly formatted\n  const STARTTIME = performance.now();\n  const processedDataFrames = series.map((data) => getProcessedDataFrame(data));\n  const annotationsProcessed = getProcessedDataFrames(annotations);\n  const STOPTIME = performance.now();\n\n  return {\n    ...data,\n    series: processedDataFrames,\n    annotations: annotationsProcessed,\n    timings: { dataProcessingTime: STOPTIME - STARTTIME },\n  };\n}\n\nexport interface PartialDataFrame extends Omit<DataFrame, 'fields' | 'length'> {\n  fields: Array<Partial<Field>>;\n}\n\nexport function createDataFrame(input: PartialDataFrame): DataFrame {\n  let length = 0;\n  const fields = input.fields.map((p, idx) => {\n    const { state, ...field } = p;\n    if (!field.name) {\n      field.name = `Field ${idx + 1}`;\n    }\n    if (!field.config) {\n      field.config = {};\n    }\n    if (!field.values) {\n      field.values = new Array(length);\n    } else if (field.values.length > length) {\n      length = field.values.length;\n    }\n    if (!field.type) {\n      field.type = guessFieldTypeForField(field as Field) ?? FieldType.other;\n    }\n    return field as Field;\n  });\n\n  return {\n    ...input,\n    fields,\n    length,\n  };\n}\n","import moment, { Moment, MomentInput, DurationInputArg1, DurationInputArg2 } from 'moment';\n\nimport { TimeZone } from '../types/time';\n/* eslint-disable id-blacklist, no-restricted-imports, @typescript-eslint/ban-types */\nexport interface DateTimeBuiltinFormat {\n  __momentBuiltinFormatBrand: any;\n}\nexport const ISO_8601: DateTimeBuiltinFormat = moment.ISO_8601;\nexport type DateTimeInput = Date | string | number | Array<string | number> | DateTime | null; // | undefined;\nexport type FormatInput = string | DateTimeBuiltinFormat | undefined;\nexport type DurationInput = string | number | DateTimeDuration;\nexport type DurationUnit =\n  | 'year'\n  | 'years'\n  | 'y'\n  | 'month'\n  | 'months'\n  | 'M'\n  | 'week'\n  | 'weeks'\n  | 'isoWeek'\n  | 'w'\n  | 'day'\n  | 'days'\n  | 'd'\n  | 'hour'\n  | 'hours'\n  | 'h'\n  | 'minute'\n  | 'minutes'\n  | 'm'\n  | 'second'\n  | 'seconds'\n  | 's'\n  | 'millisecond'\n  | 'milliseconds'\n  | 'ms'\n  | 'quarter'\n  | 'quarters'\n  | 'Q';\n\nexport interface DateTimeLocale {\n  firstDayOfWeek: () => number;\n}\n\nexport interface DateTimeDuration {\n  asHours: () => number;\n  hours: () => number;\n  minutes: () => number;\n  seconds: () => number;\n  asSeconds: () => number;\n}\n\nexport interface DateTime extends Object {\n  add: (amount?: DateTimeInput, unit?: DurationUnit) => DateTime;\n  set: (unit: DurationUnit, amount: DateTimeInput) => void;\n  diff: (amount: DateTimeInput, unit?: DurationUnit, truncate?: boolean) => number;\n  endOf: (unitOfTime: DurationUnit) => DateTime;\n  format: (formatInput?: FormatInput) => string;\n  fromNow: (withoutSuffix?: boolean) => string;\n  from: (formaInput: DateTimeInput) => string;\n  isSame: (input?: DateTimeInput, granularity?: DurationUnit) => boolean;\n  isBefore: (input?: DateTimeInput) => boolean;\n  isValid: () => boolean;\n  local: () => DateTime;\n  locale: (locale: string) => DateTime;\n  startOf: (unitOfTime: DurationUnit) => DateTime;\n  subtract: (amount?: DateTimeInput, unit?: DurationUnit) => DateTime;\n  toDate: () => Date;\n  toISOString: (keepOffset?: boolean) => string;\n  isoWeekday: (day?: number | string) => number | string;\n  valueOf: () => number;\n  unix: () => number;\n  utc: () => DateTime;\n  utcOffset: () => number;\n  hour?: () => number;\n  minute?: () => number;\n}\n\nexport const setLocale = (language: string) => {\n  moment.locale(language);\n};\n\nexport const getLocale = () => {\n  return moment.locale();\n};\n\nexport const getLocaleData = (): DateTimeLocale => {\n  return moment.localeData();\n};\n\nexport const isDateTimeInput = (value: unknown): value is DateTimeInput => {\n  return (\n    value === null ||\n    typeof value === 'string' ||\n    typeof value === 'number' ||\n    value instanceof Date ||\n    (Array.isArray(value) && value.every((v) => typeof v === 'string' || typeof v === 'number')) ||\n    isDateTime(value)\n  );\n};\n\nexport const isDateTime = (value: unknown): value is DateTime => {\n  return moment.isMoment(value);\n};\n\nexport const toUtc = (input?: DateTimeInput, formatInput?: FormatInput): DateTime => {\n  return moment.utc(input as MomentInput, formatInput) as DateTime;\n};\n\nexport const toDuration = (input?: DurationInput, unit?: DurationUnit): DateTimeDuration => {\n  // moment built-in types are a bit flaky, for example `isoWeek` is not in the type definition but it's present in the js source.\n  return moment.duration(input as DurationInputArg1, unit as DurationInputArg2) as DateTimeDuration;\n};\n\nexport const dateTime = (input?: DateTimeInput, formatInput?: FormatInput): DateTime => {\n  return moment(input as MomentInput, formatInput) as DateTime;\n};\n\nexport const dateTimeAsMoment = (input?: DateTimeInput) => {\n  return dateTime(input) as Moment;\n};\n\nexport const dateTimeForTimeZone = (\n  timezone?: TimeZone,\n  input?: DateTimeInput,\n  formatInput?: FormatInput\n): DateTime => {\n  if (timezone === 'utc') {\n    return toUtc(input, formatInput);\n  }\n\n  if (timezone && timezone !== 'browser') {\n    let result: moment.Moment;\n\n    if (typeof input === 'string' && formatInput) {\n      result = moment.tz(input, formatInput, timezone);\n    } else {\n      result = moment.tz(input, timezone);\n    }\n\n    if (isDateTime(result)) {\n      return result;\n    }\n  }\n\n  return dateTime(input, formatInput);\n};\n\nexport const getWeekdayIndex = (day: string) => {\n  return moment.weekdays().findIndex((wd) => wd.toLowerCase() === day.toLowerCase());\n};\n\nexport const getWeekdayIndexByEnglishName = (day: string) =>\n  ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'].findIndex(\n    (wd) => wd.toLowerCase() === day.toLowerCase()\n  );\n\nexport const setWeekStart = (weekStart?: string) => {\n  const suffix = '-weekStart';\n  const language = getLocale().replace(suffix, '');\n  const dow = weekStart ? getWeekdayIndexByEnglishName(weekStart) : -1;\n  if (dow !== -1) {\n    moment.locale(language + suffix, {\n      parentLocale: language,\n      week: {\n        dow,\n      },\n    });\n  } else {\n    setLocale(language);\n  }\n};\n","import { DataFrameDTO, FieldConfig } from './dataFrame';\nimport { DataFrameType } from './dataFrameTypes';\nimport { ApplyFieldOverrideOptions } from './fieldOverrides';\nimport { DataTopic } from './query';\nimport { DataTransformerConfig } from './transformations';\n\nimport { PanelPluginDataSupport } from '.';\n\nexport type KeyValue<T = any> = Record<string, T>;\n\n/**\n * Represent panel data loading state.\n * @public\n */\nexport enum LoadingState {\n  NotStarted = 'NotStarted',\n  Loading = 'Loading',\n  Streaming = 'Streaming',\n  Done = 'Done',\n  Error = 'Error',\n}\n\n// Should be kept in sync with grafana-plugin-sdk-go/data/frame_meta.go\nexport const preferredVisualizationTypes = [\n  'graph',\n  'table',\n  'logs',\n  'trace',\n  'nodeGraph',\n  'flamegraph',\n  'rawPrometheus',\n] as const;\nexport type PreferredVisualisationType = (typeof preferredVisualizationTypes)[number];\n\n/**\n * @public\n */\nexport interface QueryResultMeta {\n  type?: DataFrameType;\n\n  /**\n   * TypeVersion is the version of the Type property. Versions greater than 0.0 correspond to the dataplane\n   * contract documentation https://github.com/grafana/grafana-plugin-sdk-go/tree/main/data/contract_docs.\n   */\n  typeVersion?: [number, number];\n\n  /** DatasSource Specific Values */\n  custom?: Record<string, any>;\n\n  /** Stats */\n  stats?: QueryResultMetaStat[];\n\n  /** Meta Notices */\n  notices?: QueryResultMetaNotice[];\n\n  /** Used to track transformation ids that where part of the processing */\n  transformations?: string[];\n\n  /** Currently used to show results in Explore only in preferred visualisation option */\n  preferredVisualisationType?: PreferredVisualisationType;\n\n  /** Set the panel plugin id to use to render the data when using Explore. If the plugin cannot be found\n   * will fall back to {@link preferredVisualisationType}.\n   *\n   * @alpha\n   */\n  preferredVisualisationPluginId?: string;\n\n  /** The path for live stream updates for this frame */\n  channel?: string;\n\n  /** Did the query response come from the cache */\n  isCachedResponse?: boolean;\n\n  /**\n   * Optionally identify which topic the frame should be assigned to.\n   * A value specified in the response will override what the request asked for.\n   */\n  dataTopic?: DataTopic;\n\n  /**\n   * This is the raw query sent to the underlying system.  All macros and templating\n   * as been applied.  When metadata contains this value, it will be shown in the query inspector\n   */\n  executedQueryString?: string;\n\n  /**\n   * A browsable path on the datasource\n   */\n  path?: string;\n\n  /**\n   * defaults to '/'\n   */\n  pathSeparator?: string;\n\n  /** A time shift metadata indicating a result of comparison */\n  timeCompare?: {\n    diffMs: number;\n    isTimeShiftQuery: boolean;\n  };\n\n  /**\n   * Legacy data source specific, should be moved to custom\n   * */\n  searchWords?: string[]; // used by log models and loki\n  limit?: number; // used by log models and loki\n  json?: boolean; // used to keep track of old json doc values\n  instant?: boolean;\n}\n\nexport interface QueryResultMetaStat extends FieldConfig {\n  displayName: string;\n  value: number;\n}\n\n/**\n * QueryResultMetaNotice is a structure that provides user notices for query result data\n * @public\n */\nexport interface QueryResultMetaNotice {\n  /**\n   * Specify the notice severity\n   */\n  severity: 'info' | 'warning' | 'error';\n\n  /**\n   * Notice descriptive text\n   */\n  text: string;\n\n  /**\n   * An optional link that may be displayed in the UI.\n   * This value may be an absolute URL or relative to grafana root\n   */\n  link?: string;\n\n  /**\n   * Optionally suggest an appropriate tab for the panel inspector\n   */\n  inspect?: 'meta' | 'error' | 'data' | 'stats';\n}\n\n/**\n * @public\n */\nexport interface QueryResultBase {\n  /**\n   * Matches the query target refId\n   */\n  refId?: string;\n\n  /**\n   * Used by some backend data sources to communicate back info about the execution (generated sql, timing)\n   */\n  meta?: QueryResultMeta;\n}\n\nexport interface Labels {\n  [key: string]: string;\n}\n\n/** @deprecated this is a very old (pre Grafana 7 + DataFrame) representation for tabular data  */\nexport interface Column {\n  text: string; // For a Column, the 'text' is the field name\n  filterable?: boolean;\n  unit?: string;\n  custom?: Record<string, any>;\n}\n\n/** @deprecated this is a very old (pre Grafana 7 + DataFrame) representation for tabular data  */\nexport interface TableData extends QueryResultBase {\n  name?: string;\n  columns: Column[];\n  rows: any[][];\n  type?: string;\n}\n\n/** @deprecated this is a very old (pre Grafana 7 + DataFrame) representation for tabular data  */\nexport type TimeSeriesValue = number | null;\n\n/** @deprecated this is a very old (pre Grafana 7 + DataFrame) representation for tabular data  */\nexport type TimeSeriesPoints = TimeSeriesValue[][];\n\n/** @deprecated this is a very old (pre Grafana 7 + DataFrame) representation for tabular data  */\nexport interface TimeSeries extends QueryResultBase {\n  target: string;\n  /**\n   * If name is manually configured via an alias / legend pattern\n   */\n  title?: string;\n  datapoints: TimeSeriesPoints;\n  unit?: string;\n  tags?: Labels;\n}\n\nexport enum NullValueMode {\n  Null = 'null',\n  Ignore = 'connected',\n  AsZero = 'null as zero',\n}\n\n/**\n * Describes and API for exposing panel specific data configurations.\n */\nexport interface DataConfigSource {\n  configRev?: number;\n  getDataSupport: () => PanelPluginDataSupport;\n  getTransformations: () => DataTransformerConfig[] | undefined;\n  getFieldOverrideOptions: () => ApplyFieldOverrideOptions | undefined;\n  snapshotData?: DataFrameDTO[];\n}\n\ntype Truthy<T> = T extends false | '' | 0 | null | undefined ? never : T;\nexport const isTruthy = <T>(value: T): value is Truthy<T> => Boolean(value);\n\n/**\n * Serves no runtime purpose - only used to make typescript check a value has been correctly\n * narrowed to an object\n */\nfunction identityObject(value: object): object {\n  return value;\n}\n\n/**\n * Utility type predicate to check if a value is typeof object, but excludes \"null\".\n *\n * We normally discourage the use of type predicates in favor of just inline typescript narrowing,\n * but this is a special case to handle null annoyingly being typeof object\n */\nexport function isObject(value: unknown): value is object {\n  if (typeof value === 'object' && value !== null) {\n    identityObject(value);\n\n    return true;\n  }\n\n  return false;\n}\n","import { ScopedVars } from './ScopedVars';\nimport { QueryResultBase, Labels, NullValueMode } from './data';\nimport { DataLink, LinkModel } from './dataLink';\nimport { DecimalCount, DisplayProcessor, DisplayValue, DisplayValueAlignmentFactors } from './displayValue';\nimport { FieldColor } from './fieldColor';\nimport { ThresholdsConfig } from './thresholds';\nimport { ValueMapping } from './valueMapping';\nimport { Vector } from './vector';\n\n/** @public */\nexport enum FieldType {\n  time = 'time', // or date\n  number = 'number',\n  string = 'string',\n  boolean = 'boolean',\n  // Used to detect that the value is some kind of trace data to help with the visualisation and processing.\n  trace = 'trace',\n  geo = 'geo',\n  enum = 'enum',\n  other = 'other', // Object, Array, etc\n  frame = 'frame', // DataFrame\n  nestedFrames = 'nestedFrames', // @alpha Nested DataFrames\n}\n\n/**\n * @public\n * Every property is optional\n *\n * Plugins may extend this with additional properties. Something like series overrides\n */\nexport interface FieldConfig<TOptions = any> {\n  /**\n   * The display value for this field.  This supports template variables blank is auto.\n   * If you are a datasource plugin, do not set this. Use `field.value` and if that\n   * is not enough, use `field.config.displayNameFromDS`.\n   */\n  displayName?: string;\n\n  /**\n   * This can be used by data sources that need to customize how values are named.\n   * When this property is configured, this value is used rather than the default naming strategy.\n   */\n  displayNameFromDS?: string;\n\n  /**\n   * Human readable field metadata\n   */\n  description?: string;\n\n  /**\n   * An explict path to the field in the datasource.  When the frame meta includes a path,\n   * This will default to `${frame.meta.path}/${field.name}\n   *\n   * When defined, this value can be used as an identifier within the datasource scope, and\n   * may be used to update the results\n   */\n  path?: string;\n\n  /**\n   * True if data source can write a value to the path.  Auth/authz are supported separately\n   */\n  writeable?: boolean;\n\n  /**\n   * True if data source field supports ad-hoc filters\n   */\n  filterable?: boolean;\n\n  // Numeric Options\n  unit?: string;\n  unitScale?: boolean;\n  decimals?: DecimalCount; // Significant digits (for display)\n  min?: number | null;\n  max?: number | null;\n\n  // Interval indicates the expected regular step between values in the series.\n  // When an interval exists, consumers can identify \"missing\" values when the expected value is not present.\n  // The grafana timeseries visualization will render disconnected values when missing values are found it the time field.\n  // The interval uses the same units as the values.  For time.Time, this is defined in milliseconds.\n  interval?: number | null;\n\n  // Convert input values into a display string\n  mappings?: ValueMapping[];\n\n  // Map numeric values to states\n  thresholds?: ThresholdsConfig;\n\n  // Map values to a display color\n  color?: FieldColor;\n\n  // Used when reducing field values\n  nullValueMode?: NullValueMode;\n\n  // The behavior when clicking on a result\n  links?: DataLink[];\n\n  // Alternative to empty string\n  noValue?: string;\n\n  // The field type may map to specific config\n  type?: FieldTypeConfig;\n\n  // Panel Specific Values\n  custom?: TOptions;\n\n  // Calculate min max per field\n  fieldMinMax?: boolean;\n}\n\nexport interface FieldTypeConfig {\n  enum?: EnumFieldConfig;\n}\n\nexport interface EnumFieldConfig {\n  text?: string[];\n  color?: string[];\n  icon?: string[];\n  description?: string[];\n}\n\n/** @public */\nexport interface ValueLinkConfig {\n  /**\n   * Result of field reduction\n   */\n  calculatedValue?: DisplayValue;\n  /**\n   * Index of the value row within Field. Should be provided only when value is not a result of a reduction\n   */\n  valueRowIndex?: number;\n}\n\nexport interface Field<T = any, V = Vector<T>> {\n  /**\n   * Name of the field (column)\n   */\n  name: string;\n  /**\n   *  Field value type (string, number, etc)\n   */\n  type: FieldType;\n  /**\n   *  Meta info about how field and how to display it\n   */\n  config: FieldConfig;\n\n  /**\n   * The raw field values\n   * In Grafana 10, this accepts both simple arrays and the Vector interface\n   * In Grafana 11, the Vector interface will be removed\n   */\n  values: V | T[];\n\n  /**\n   * When type === FieldType.Time, this can optionally store\n   * the nanosecond-precison fractions as integers between\n   * 0 and 999999.\n   */\n  nanos?: number[];\n\n  labels?: Labels;\n\n  /**\n   * Cached values with appropriate display and id values\n   */\n  state?: FieldState | null;\n\n  /**\n   * Convert a value for display\n   */\n  display?: DisplayProcessor;\n\n  /**\n   * Get value data links with variables interpolated\n   */\n  getLinks?: (config: ValueLinkConfig) => Array<LinkModel<Field>>;\n}\n\n/** @alpha */\nexport interface FieldState {\n  /**\n   * An appropriate name for the field (does not include frame info)\n   */\n  displayName?: string | null;\n\n  /**\n   * Cache of reduced values\n   */\n  calcs?: FieldCalcs;\n\n  /**\n   * The numeric range for values in this field.  This value will respect the min/max\n   * set in field config, or when set to `auto` this will have the min/max for all data\n   * in the response\n   */\n  range?: NumericRange;\n\n  /**\n   * Appropriate values for templating\n   */\n  scopedVars?: ScopedVars;\n\n  /**\n   * Series index is index for this field in a larger data set that can span multiple DataFrames\n   * Useful for assigning color to series by looking up a color in a palette using this index\n   */\n  seriesIndex?: number;\n\n  /**\n   * Location of this field within the context frames results\n   *\n   * @internal -- we will try to make this unnecessary\n   */\n  origin?: DataFrameFieldIndex;\n\n  /**\n   * Boolean value is true if field is in a larger data set with multiple frames.\n   * This is only related to the cached displayName property above.\n   */\n  multipleFrames?: boolean;\n\n  /**\n   * Boolean value is true if a null filling threshold has been applied\n   * against the frame of the field. This is used to avoid cases in which\n   * this would applied more than one time.\n   */\n  nullThresholdApplied?: boolean;\n\n  /**\n   * Can be used by visualizations to cache max display value lengths to aid alignment.\n   * It's up to each visualization to calculate and set this.\n   */\n  alignmentFactors?: DisplayValueAlignmentFactors;\n}\n\n/** @public */\nexport interface NumericRange {\n  min?: number | null;\n  max?: number | null;\n  delta: number;\n}\n\nexport interface DataFrame extends QueryResultBase {\n  name?: string;\n  fields: Field[]; // All fields of equal length\n\n  // The number of rows\n  length: number;\n}\n\n// Data frame that include aggregate value, for use by timeSeriesTableTransformer / chart cell type\nexport interface DataFrameWithValue extends DataFrame {\n  value: number | null;\n}\n\n/**\n * @public\n * Like a field, but properties are optional and values may be a simple array\n */\nexport interface FieldDTO<T = any> {\n  name: string; // The column name\n  type?: FieldType;\n  config?: FieldConfig;\n  values?: Vector<T> | T[]; // toJSON will always be T[], input could be either\n  labels?: Labels;\n}\n\n/**\n * @public\n * Like a DataFrame, but fields may be a FieldDTO\n */\nexport interface DataFrameDTO extends QueryResultBase {\n  name?: string;\n  fields: Array<FieldDTO | Field>;\n}\n\nexport interface FieldCalcs extends Record<string, any> {}\n\n/** @deprecated check data plane docs: https://grafana.com/developers/dataplane/heatmap **/\nexport const TIME_SERIES_VALUE_FIELD_NAME = 'Value';\nexport const TIME_SERIES_TIME_FIELD_NAME = 'Time';\nexport const TIME_SERIES_METRIC_FIELD_NAME = 'Metric';\n\n/**\n * Describes where a specific data frame field is located within a\n * dataset of type DataFrame[]\n *\n * @internal -- we will try to make this unnecessary\n */\nexport interface DataFrameFieldIndex {\n  frameIndex: number;\n  fieldIndex: number;\n}\n","import { ComponentType } from 'react';\nimport { Observable } from 'rxjs';\n\nimport {\n  DataQueryRequest,\n  DataQueryResponse,\n  DataSourceApi,\n  DataSourceJsonData,\n  DataSourceOptionsType,\n  DataSourceQueryType,\n  QueryEditorProps,\n} from './datasource';\nimport { DataQuery } from './query';\n\n/**\n * Enum with the different variable support types\n */\nexport enum VariableSupportType {\n  Legacy = 'legacy',\n  Standard = 'standard',\n  Custom = 'custom',\n  Datasource = 'datasource',\n}\n\n/**\n * Base class for VariableSupport classes\n */\nexport abstract class VariableSupportBase<\n  DSType extends DataSourceApi<TQuery, TOptions>,\n  TQuery extends DataQuery = DataSourceQueryType<DSType>,\n  TOptions extends DataSourceJsonData = DataSourceOptionsType<DSType>,\n> {\n  abstract getType(): VariableSupportType;\n\n  /**\n   * Define this method in the config if you want to pre-populate the editor with a default query.\n   */\n  getDefaultQuery?(): Partial<TQuery>;\n}\n\n/**\n * Extend this class in a data source plugin to use the standard query editor for Query variables\n */\nexport abstract class StandardVariableSupport<\n  DSType extends DataSourceApi<TQuery, TOptions>,\n  TQuery extends DataQuery = DataSourceQueryType<DSType>,\n  TOptions extends DataSourceJsonData = DataSourceOptionsType<DSType>,\n> extends VariableSupportBase<DSType, TQuery, TOptions> {\n  getType(): VariableSupportType {\n    return VariableSupportType.Standard;\n  }\n\n  abstract toDataQuery(query: StandardVariableQuery): TQuery;\n  query?(request: DataQueryRequest<TQuery>): Observable<DataQueryResponse>;\n}\n\n/**\n * Extend this class in a data source plugin to use a customized query editor for Query variables\n */\nexport abstract class CustomVariableSupport<\n  DSType extends DataSourceApi<TQuery, TOptions>,\n  VariableQuery extends DataQuery = any,\n  TQuery extends DataQuery = DataSourceQueryType<DSType>,\n  TOptions extends DataSourceJsonData = DataSourceOptionsType<DSType>,\n> extends VariableSupportBase<DSType, TQuery, TOptions> {\n  getType(): VariableSupportType {\n    return VariableSupportType.Custom;\n  }\n\n  abstract editor: ComponentType<QueryEditorProps<DSType, TQuery, TOptions, VariableQuery>>;\n\n  /**\n   * This can return data in various formats as DataQueryResponse allows multiple types. In general though the\n   * assumption is that there will be a string Field or value in an Array of objects that will be taken as the possible\n   * variable values. You can also use this type directly MetricFindValue or just use text/value/expendable fields/keys\n   * in the response.\n   * @param request\n   */\n  abstract query(request: DataQueryRequest<VariableQuery>): Observable<DataQueryResponse>;\n}\n\n/**\n * Extend this class in a data source plugin to use the query editor in the data source plugin for Query variables\n */\nexport abstract class DataSourceVariableSupport<\n  DSType extends DataSourceApi<TQuery, TOptions>,\n  TQuery extends DataQuery = DataSourceQueryType<DSType>,\n  TOptions extends DataSourceJsonData = DataSourceOptionsType<DSType>,\n> extends VariableSupportBase<DSType, TQuery, TOptions> {\n  getType(): VariableSupportType {\n    return VariableSupportType.Datasource;\n  }\n}\n\n/**\n * Defines the standard DatQuery used by data source plugins that implement StandardVariableSupport\n */\nexport interface StandardVariableQuery extends DataQuery {\n  query: string;\n}\n","import { css } from '@emotion/css';\nimport React, { ElementType, forwardRef, PropsWithChildren } from 'react';\n\nimport { GrafanaTheme2, ThemeSpacingTokens, ThemeShape, ThemeShadows } from '@grafana/data';\n\nimport { useStyles2 } from '../../../themes';\nimport { AlignItems, FlexProps, JustifyContent } from '../types';\nimport { ResponsiveProp, getResponsiveStyle } from '../utils/responsiveness';\n\ntype Display = 'flex' | 'block' | 'inline' | 'none';\nexport type BackgroundColor = keyof GrafanaTheme2['colors']['background'] | 'error' | 'success' | 'warning' | 'info';\nexport type BorderStyle = 'solid' | 'dashed';\nexport type BorderColor = keyof GrafanaTheme2['colors']['border'] | 'error' | 'success' | 'warning' | 'info';\nexport type BorderRadius = keyof ThemeShape['radius'];\nexport type BoxShadow = keyof ThemeShadows;\n\ninterface BoxProps extends FlexProps, Omit<React.HTMLAttributes<HTMLElement>, 'className' | 'style'> {\n  // Margin props\n  /** Sets the property `margin` */\n  margin?: ResponsiveProp<ThemeSpacingTokens>;\n  /** Sets the properties `margin-top` and `margin-bottom`. Higher priority than margin. */\n  marginX?: ResponsiveProp<ThemeSpacingTokens>;\n  /** Sets the properties `margin-left` and `margin-right`. Higher priority than margin. */\n  marginY?: ResponsiveProp<ThemeSpacingTokens>;\n  /** Sets the property `margin-top`. Higher priority than margin and marginY. */\n  marginTop?: ResponsiveProp<ThemeSpacingTokens>;\n  /** Sets the property `margin-bottom`. Higher priority than margin and marginXY */\n  marginBottom?: ResponsiveProp<ThemeSpacingTokens>;\n  /** Sets the property `margin-left`. Higher priority than margin and marginX. */\n  marginLeft?: ResponsiveProp<ThemeSpacingTokens>;\n  /** Sets the property `margin-right`. Higher priority than margin and marginX. */\n  marginRight?: ResponsiveProp<ThemeSpacingTokens>;\n\n  // Padding props\n  /** Sets the property `padding` */\n  padding?: ResponsiveProp<ThemeSpacingTokens>;\n  /** Sets the properties `padding-top` and `padding-bottom`. Higher priority than padding. */\n  paddingX?: ResponsiveProp<ThemeSpacingTokens>;\n  /** Sets the properties `padding-left` and `padding-right`. Higher priority than padding. */\n  paddingY?: ResponsiveProp<ThemeSpacingTokens>;\n  /** Sets the property `padding-top`. Higher priority than padding and paddingY. */\n  paddingTop?: ResponsiveProp<ThemeSpacingTokens>;\n  /** Sets the property `padding-bottom`. Higher priority than padding and paddingY. */\n  paddingBottom?: ResponsiveProp<ThemeSpacingTokens>;\n  /** Sets the property `padding-left`. Higher priority than padding and paddingX. */\n  paddingLeft?: ResponsiveProp<ThemeSpacingTokens>;\n  /** Sets the property `padding-right`. Higher priority than padding and paddingX. */\n  paddingRight?: ResponsiveProp<ThemeSpacingTokens>;\n\n  // Border Props\n  borderStyle?: ResponsiveProp<BorderStyle>;\n  borderColor?: ResponsiveProp<BorderColor>;\n  borderRadius?: ResponsiveProp<BorderRadius>;\n\n  // Flex Props\n  alignItems?: ResponsiveProp<AlignItems>;\n  justifyContent?: ResponsiveProp<JustifyContent>;\n  gap?: ResponsiveProp<ThemeSpacingTokens>;\n\n  // Other props\n  backgroundColor?: ResponsiveProp<BackgroundColor>;\n  display?: ResponsiveProp<Display>;\n  boxShadow?: ResponsiveProp<BoxShadow>;\n  /** Sets the HTML element that will be rendered as a Box. Defaults to 'div' */\n  element?: ElementType;\n}\n\nexport const Box = forwardRef<HTMLElement, PropsWithChildren<BoxProps>>((props, ref) => {\n  const {\n    children,\n    margin,\n    marginX,\n    marginY,\n    marginTop,\n    marginBottom,\n    marginLeft,\n    marginRight,\n    padding,\n    paddingX,\n    paddingY,\n    paddingTop,\n    paddingBottom,\n    paddingLeft,\n    paddingRight,\n    display,\n    backgroundColor,\n    grow,\n    shrink,\n    basis,\n    flex,\n    borderColor,\n    borderStyle,\n    borderRadius,\n    justifyContent,\n    alignItems,\n    boxShadow,\n    element,\n    gap,\n    ...rest\n  } = props;\n  const styles = useStyles2(\n    getStyles,\n    margin,\n    marginX,\n    marginY,\n    marginTop,\n    marginBottom,\n    marginLeft,\n    marginRight,\n    padding,\n    paddingX,\n    paddingY,\n    paddingTop,\n    paddingBottom,\n    paddingLeft,\n    paddingRight,\n    display,\n    backgroundColor,\n    grow,\n    shrink,\n    basis,\n    flex,\n    borderColor,\n    borderStyle,\n    borderRadius,\n    justifyContent,\n    alignItems,\n    boxShadow,\n    gap\n  );\n  const Element = element ?? 'div';\n\n  return (\n    <Element ref={ref} className={styles.root} {...rest}>\n      {children}\n    </Element>\n  );\n});\n\nBox.displayName = 'Box';\n\nconst customBorderColor = (color: BorderColor, theme: GrafanaTheme2) => {\n  switch (color) {\n    case 'error':\n    case 'success':\n    case 'info':\n    case 'warning':\n      return theme.colors[color].borderTransparent;\n    default:\n      return color ? theme.colors.border[color] : undefined;\n  }\n};\n\nconst customBackgroundColor = (color: BackgroundColor, theme: GrafanaTheme2) => {\n  switch (color) {\n    case 'error':\n    case 'success':\n    case 'info':\n    case 'warning':\n      return theme.colors[color].transparent;\n    default:\n      return color ? theme.colors.background[color] : undefined;\n  }\n};\n\nconst getStyles = (\n  theme: GrafanaTheme2,\n  margin: BoxProps['margin'],\n  marginX: BoxProps['marginX'],\n  marginY: BoxProps['marginY'],\n  marginTop: BoxProps['marginTop'],\n  marginBottom: BoxProps['marginBottom'],\n  marginLeft: BoxProps['marginLeft'],\n  marginRight: BoxProps['marginRight'],\n  padding: BoxProps['padding'],\n  paddingX: BoxProps['paddingX'],\n  paddingY: BoxProps['paddingY'],\n  paddingTop: BoxProps['paddingTop'],\n  paddingBottom: BoxProps['paddingBottom'],\n  paddingLeft: BoxProps['paddingLeft'],\n  paddingRight: BoxProps['paddingRight'],\n  display: BoxProps['display'],\n  backgroundColor: BoxProps['backgroundColor'],\n  grow: BoxProps['grow'],\n  shrink: BoxProps['shrink'],\n  basis: BoxProps['basis'],\n  flex: BoxProps['flex'],\n  borderColor: BoxProps['borderColor'],\n  borderStyle: BoxProps['borderStyle'],\n  borderRadius: BoxProps['borderRadius'],\n  justifyContent: BoxProps['justifyContent'],\n  alignItems: BoxProps['alignItems'],\n  boxShadow: BoxProps['boxShadow'],\n  gap: BoxProps['gap']\n) => {\n  return {\n    root: css([\n      getResponsiveStyle(theme, margin, (val) => ({\n        margin: theme.spacing(val),\n      })),\n      getResponsiveStyle(theme, marginX, (val) => ({\n        marginLeft: theme.spacing(val),\n        marginRight: theme.spacing(val),\n      })),\n      getResponsiveStyle(theme, marginY, (val) => ({\n        marginTop: theme.spacing(val),\n        marginBottom: theme.spacing(val),\n      })),\n      getResponsiveStyle(theme, marginTop, (val) => ({\n        marginTop: theme.spacing(val),\n      })),\n      getResponsiveStyle(theme, marginBottom, (val) => ({\n        marginBottom: theme.spacing(val),\n      })),\n      getResponsiveStyle(theme, marginLeft, (val) => ({\n        marginLeft: theme.spacing(val),\n      })),\n      getResponsiveStyle(theme, marginRight, (val) => ({\n        marginRight: theme.spacing(val),\n      })),\n      getResponsiveStyle(theme, padding, (val) => ({\n        padding: theme.spacing(val),\n      })),\n      getResponsiveStyle(theme, paddingX, (val) => ({\n        paddingLeft: theme.spacing(val),\n        paddingRight: theme.spacing(val),\n      })),\n      getResponsiveStyle(theme, paddingY, (val) => ({\n        paddingTop: theme.spacing(val),\n        paddingBottom: theme.spacing(val),\n      })),\n      getResponsiveStyle(theme, paddingTop, (val) => ({\n        paddingTop: theme.spacing(val),\n      })),\n      getResponsiveStyle(theme, paddingBottom, (val) => ({\n        paddingBottom: theme.spacing(val),\n      })),\n      getResponsiveStyle(theme, paddingLeft, (val) => ({\n        paddingLeft: theme.spacing(val),\n      })),\n      getResponsiveStyle(theme, paddingRight, (val) => ({\n        paddingRight: theme.spacing(val),\n      })),\n      getResponsiveStyle(theme, display, (val) => ({\n        display: val,\n      })),\n      getResponsiveStyle(theme, backgroundColor, (val) => ({\n        backgroundColor: customBackgroundColor(val, theme),\n      })),\n      getResponsiveStyle(theme, grow, (val) => ({\n        flexGrow: val,\n      })),\n      getResponsiveStyle(theme, shrink, (val) => ({\n        flexShrink: val,\n      })),\n      getResponsiveStyle(theme, basis, (val) => ({\n        flexBasis: val,\n      })),\n      getResponsiveStyle(theme, flex, (val) => ({\n        flex: val,\n      })),\n      getResponsiveStyle(theme, borderStyle, (val) => ({\n        borderStyle: val,\n      })),\n      getResponsiveStyle(theme, borderColor, (val) => ({\n        borderColor: customBorderColor(val, theme),\n      })),\n      (borderStyle || borderColor) && {\n        borderWidth: '1px',\n      },\n      getResponsiveStyle(theme, justifyContent, (val) => ({\n        justifyContent: val,\n      })),\n      getResponsiveStyle(theme, alignItems, (val) => ({\n        alignItems: val,\n      })),\n      getResponsiveStyle(theme, borderRadius, (val) => ({\n        borderRadius: theme.shape.radius[val],\n      })),\n      getResponsiveStyle(theme, boxShadow, (val) => ({\n        boxShadow: theme.shadows[val],\n      })),\n      getResponsiveStyle(theme, gap, (val) => ({\n        gap: theme.spacing(val),\n      })),\n    ]),\n  };\n};\n","import React, { useEffect, useImperativeHandle, useMemo, useRef, useState } from 'react';\nimport ReactDOMServer from 'react-dom/server';\n\nimport { Tooltip } from '../Tooltip/Tooltip';\n\ninterface TruncatedTextProps {\n  childElement: (ref: React.ForwardedRef<HTMLElement> | undefined) => React.ReactElement;\n  children: NonNullable<React.ReactNode>;\n}\n\nexport const TruncatedText = React.forwardRef<HTMLElement, TruncatedTextProps>(({ childElement, children }, ref) => {\n  const [isOverflowing, setIsOverflowing] = useState(false);\n  const internalRef = useRef<HTMLElement>(null);\n\n  // Wire up the forwarded ref to the internal ref\n  useImperativeHandle<HTMLElement | null, HTMLElement | null>(ref, () => internalRef.current);\n\n  const resizeObserver = useMemo(\n    () =>\n      new ResizeObserver((entries) => {\n        for (const entry of entries) {\n          if (entry.target.clientWidth && entry.target.scrollWidth) {\n            if (entry.target.scrollWidth > entry.target.clientWidth) {\n              setIsOverflowing(true);\n            }\n            if (entry.target.scrollWidth <= entry.target.clientWidth) {\n              setIsOverflowing(false);\n            }\n          }\n        }\n      }),\n    []\n  );\n\n  useEffect(() => {\n    const { current } = internalRef;\n    if (current) {\n      resizeObserver.observe(current);\n    }\n    return () => {\n      resizeObserver.disconnect();\n    };\n  }, [setIsOverflowing, resizeObserver]);\n\n  const getTooltipText = (children: NonNullable<React.ReactNode>) => {\n    if (typeof children === 'string') {\n      return children;\n    }\n    const html = ReactDOMServer.renderToStaticMarkup(<>{children}</>);\n    return html.replace(/(<([^>]+)>)/gi, '');\n  };\n\n  if (isOverflowing) {\n    return (\n      <Tooltip ref={internalRef} content={getTooltipText(children)}>\n        {childElement(undefined)}\n      </Tooltip>\n    );\n  } else {\n    return childElement(internalRef);\n  }\n});\n\nTruncatedText.displayName = 'TruncatedText';\n","import { GrafanaTheme2, ThemeTypographyVariantTypes } from '@grafana/data';\n\nimport { TextProps } from './Text';\n\nexport const customWeight = (weight: TextProps['weight'], theme: GrafanaTheme2): number => {\n  switch (weight) {\n    case 'bold':\n      return theme.typography.fontWeightBold;\n    case 'medium':\n      return theme.typography.fontWeightMedium;\n    case 'light':\n      return theme.typography.fontWeightLight;\n    case 'regular':\n    case undefined:\n      return theme.typography.fontWeightRegular;\n  }\n};\n\nexport const customColor = (color: TextProps['color'], theme: GrafanaTheme2): string | undefined => {\n  switch (color) {\n    case 'error':\n      return theme.colors.error.text;\n    case 'success':\n      return theme.colors.success.text;\n    case 'info':\n      return theme.colors.info.text;\n    case 'warning':\n      return theme.colors.warning.text;\n    default:\n      return color ? theme.colors.text[color] : undefined;\n  }\n};\n\nexport const customVariant = (\n  theme: GrafanaTheme2,\n  element: TextProps['element'],\n  variant?: keyof ThemeTypographyVariantTypes\n) => {\n  if (variant) {\n    return theme.typography[variant];\n  }\n  switch (element) {\n    //Span elements does not have a default variant to be able to take the parents style\n    case 'span':\n      return;\n    case 'h1':\n      return theme.typography.h1;\n    case 'h2':\n      return theme.typography.h2;\n    case 'h3':\n      return theme.typography.h3;\n    case 'h4':\n      return theme.typography.h4;\n    case 'h5':\n      return theme.typography.h5;\n    case 'h6':\n      return theme.typography.h6;\n    default:\n      return theme.typography.body;\n  }\n};\n","import { css } from '@emotion/css';\nimport React, { createElement, CSSProperties } from 'react';\n\nimport { GrafanaTheme2, ThemeTypographyVariantTypes } from '@grafana/data';\n\nimport { useStyles2 } from '../../themes';\n\nimport { TruncatedText } from './TruncatedText';\nimport { customWeight, customColor, customVariant } from './utils';\n\nexport interface TextProps extends Omit<React.HTMLAttributes<HTMLElement>, 'className' | 'style'> {\n  /** Defines what HTML element is defined underneath. \"span\" by default */\n  element?: 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'span' | 'p';\n  /** What typograpy variant should be used for the component. Only use if default variant for the defined element is not what is needed */\n  variant?: keyof ThemeTypographyVariantTypes;\n  /** Override the default weight for the used variant */\n  weight?: 'light' | 'regular' | 'medium' | 'bold';\n  /** Color to use for text */\n  color?: keyof GrafanaTheme2['colors']['text'] | 'error' | 'success' | 'warning' | 'info';\n  /** Use to cut the text off with ellipsis if there isn't space to show all of it. On hover shows the rest of the text */\n  truncate?: boolean;\n  /** If true, show the text as italic. False by default */\n  italic?: boolean;\n  /** Whether to align the text to left, center or right */\n  textAlignment?: CSSProperties['textAlign'];\n  children: NonNullable<React.ReactNode>;\n}\n\nexport const Text = React.forwardRef<HTMLElement, TextProps>(\n  ({ element = 'span', variant, weight, color, truncate, italic, textAlignment, children, ...restProps }, ref) => {\n    const styles = useStyles2(getTextStyles, element, variant, color, weight, truncate, italic, textAlignment);\n\n    const childElement = (ref: React.ForwardedRef<HTMLElement> | undefined) => {\n      return createElement(\n        element,\n        {\n          ...restProps,\n          style: undefined, // Remove the style prop to avoid overriding the styles\n          className: styles,\n          // When overflowing, the internalRef is passed to the tooltip, which forwards it to the child element\n          ref,\n        },\n        children\n      );\n    };\n\n    // A 'span' is an inline element, so it can't be truncated\n    // and it should be wrapped in a parent element that will show the tooltip\n    if (!truncate || element === 'span') {\n      return childElement(undefined);\n    }\n\n    return (\n      <TruncatedText\n        childElement={childElement}\n        // eslint-disable-next-line react/no-children-prop\n        children={children}\n        ref={ref}\n      />\n    );\n  }\n);\n\nText.displayName = 'Text';\n\nconst getTextStyles = (\n  theme: GrafanaTheme2,\n  element?: TextProps['element'],\n  variant?: keyof ThemeTypographyVariantTypes,\n  color?: TextProps['color'],\n  weight?: TextProps['weight'],\n  truncate?: TextProps['truncate'],\n  italic?: TextProps['italic'],\n  textAlignment?: TextProps['textAlignment']\n) => {\n  return css([\n    {\n      margin: 0,\n      padding: 0,\n      ...customVariant(theme, element, variant),\n    },\n    variant && {\n      ...theme.typography[variant],\n    },\n    color && {\n      color: customColor(color, theme),\n    },\n    weight && {\n      fontWeight: customWeight(weight, theme),\n    },\n    truncate && {\n      overflow: 'hidden',\n      textOverflow: 'ellipsis',\n      whiteSpace: 'nowrap',\n    },\n    italic && {\n      fontStyle: 'italic',\n    },\n    textAlignment && {\n      textAlign: textAlignment,\n    },\n  ]);\n};\n","import { css, cx } from '@emotion/css';\nimport React, { AriaRole, HTMLAttributes, ReactNode } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\n\nimport { useTheme2 } from '../../themes';\nimport { IconName } from '../../types/icon';\nimport { Button } from '../Button/Button';\nimport { Icon } from '../Icon/Icon';\nimport { Box } from '../Layout/Box/Box';\nimport { Text } from '../Text/Text';\n\nexport type AlertVariant = 'success' | 'warning' | 'error' | 'info';\n\nexport interface Props extends HTMLAttributes<HTMLDivElement> {\n  title: string;\n  /** On click handler for alert button, mostly used for dismissing the alert */\n  onRemove?: (event: React.MouseEvent) => void;\n  severity?: AlertVariant;\n  children?: ReactNode;\n  elevated?: boolean;\n  buttonContent?: React.ReactNode | string;\n  bottomSpacing?: number;\n  topSpacing?: number;\n}\n\nexport const Alert = React.forwardRef<HTMLDivElement, Props>(\n  (\n    {\n      title,\n      onRemove,\n      children,\n      buttonContent,\n      elevated,\n      bottomSpacing,\n      topSpacing,\n      className,\n      severity = 'error',\n      ...restProps\n    },\n    ref\n  ) => {\n    const theme = useTheme2();\n    const hasTitle = Boolean(title);\n    const styles = getStyles(theme, severity, hasTitle, elevated, bottomSpacing, topSpacing);\n    const rolesBySeverity: Record<AlertVariant, AriaRole> = {\n      error: 'alert',\n      warning: 'alert',\n      info: 'status',\n      success: 'status',\n    };\n    const role = restProps['role'] || rolesBySeverity[severity];\n    const ariaLabel = restProps['aria-label'] || title;\n\n    return (\n      <div ref={ref} className={cx(styles.wrapper, className)} role={role} aria-label={ariaLabel} {...restProps}>\n        <Box\n          data-testid={selectors.components.Alert.alertV2(severity)}\n          display=\"flex\"\n          backgroundColor={severity}\n          borderRadius=\"default\"\n          paddingY={1}\n          paddingX={2}\n          borderStyle=\"solid\"\n          borderColor={severity}\n          alignItems=\"stretch\"\n          boxShadow={elevated ? 'z3' : undefined}\n        >\n          <Box paddingTop={1} paddingRight={2}>\n            <div className={styles.icon}>\n              <Icon size=\"xl\" name={getIconFromSeverity(severity)} />\n            </div>\n          </Box>\n\n          <Box paddingY={1} grow={1}>\n            <Text weight=\"medium\">{title}</Text>\n            {children && <div className={styles.content}>{children}</div>}\n          </Box>\n          {/* If onRemove is specified, giving preference to onRemove */}\n          {onRemove && !buttonContent && (\n            <div className={styles.close}>\n              <Button\n                aria-label=\"Close alert\"\n                icon=\"times\"\n                onClick={onRemove}\n                type=\"button\"\n                fill=\"text\"\n                variant=\"secondary\"\n              />\n            </div>\n          )}\n\n          {onRemove && buttonContent && (\n            <Box marginLeft={1} display=\"flex\" alignItems=\"center\">\n              <Button aria-label=\"Close alert\" variant=\"secondary\" onClick={onRemove} type=\"button\">\n                {buttonContent}\n              </Button>\n            </Box>\n          )}\n        </Box>\n      </div>\n    );\n  }\n);\n\nAlert.displayName = 'Alert';\n\nexport const getIconFromSeverity = (severity: AlertVariant): IconName => {\n  switch (severity) {\n    case 'error':\n      return 'exclamation-circle';\n    case 'warning':\n      return 'exclamation-triangle';\n    case 'info':\n      return 'info-circle';\n    case 'success':\n      return 'check';\n  }\n};\n\nconst getStyles = (\n  theme: GrafanaTheme2,\n  severity: AlertVariant,\n  hasTitle: boolean,\n  elevated?: boolean,\n  bottomSpacing?: number,\n  topSpacing?: number\n) => {\n  const color = theme.colors[severity];\n\n  return {\n    wrapper: css({\n      flexGrow: 1,\n      marginBottom: theme.spacing(bottomSpacing ?? 2),\n      marginTop: theme.spacing(topSpacing ?? 0),\n      position: 'relative',\n\n      '&:before': {\n        content: '\"\"',\n        position: 'absolute',\n        top: 0,\n        left: 0,\n        bottom: 0,\n        right: 0,\n        background: theme.colors.background.primary,\n        zIndex: -1,\n      },\n    }),\n    icon: css({\n      color: color.text,\n    }),\n    content: css({\n      paddingTop: hasTitle ? theme.spacing(0.5) : 0,\n      maxHeight: '50vh',\n      overflowY: 'auto',\n    }),\n    close: css({\n      position: 'relative',\n      color: theme.colors.text.secondary,\n      background: 'none',\n      display: 'flex',\n      top: '-6px',\n      right: '-14px',\n    }),\n  };\n};\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2, ThemeSpacingTokens } from '@grafana/data';\n\nimport { useStyles2 } from '../../../themes';\nimport { AlignItems, Direction, FlexProps, JustifyContent, Wrap } from '../types';\nimport { ResponsiveProp, getResponsiveStyle } from '../utils/responsiveness';\n\ninterface StackProps extends FlexProps, Omit<React.HTMLAttributes<HTMLElement>, 'className' | 'style'> {\n  gap?: ResponsiveProp<ThemeSpacingTokens>;\n  alignItems?: ResponsiveProp<AlignItems>;\n  justifyContent?: ResponsiveProp<JustifyContent>;\n  direction?: ResponsiveProp<Direction>;\n  wrap?: ResponsiveProp<Wrap>;\n  children?: React.ReactNode;\n}\n\nexport const Stack = React.forwardRef<HTMLDivElement, StackProps>((props, ref) => {\n  const { gap = 1, alignItems, justifyContent, direction, wrap, children, grow, shrink, basis, flex, ...rest } = props;\n  const styles = useStyles2(getStyles, gap, alignItems, justifyContent, direction, wrap, grow, shrink, basis, flex);\n\n  return (\n    <div ref={ref} className={styles.flex} {...rest}>\n      {children}\n    </div>\n  );\n});\n\nStack.displayName = 'Stack';\n\nconst getStyles = (\n  theme: GrafanaTheme2,\n  gap: StackProps['gap'],\n  alignItems: StackProps['alignItems'],\n  justifyContent: StackProps['justifyContent'],\n  direction: StackProps['direction'],\n  wrap: StackProps['wrap'],\n  grow: StackProps['grow'],\n  shrink: StackProps['shrink'],\n  basis: StackProps['basis'],\n  flex: StackProps['flex']\n) => {\n  return {\n    flex: css([\n      {\n        display: 'flex',\n      },\n      getResponsiveStyle(theme, direction, (val) => ({\n        flexDirection: val,\n      })),\n      getResponsiveStyle(theme, wrap, (val) => ({\n        flexWrap: val,\n      })),\n      getResponsiveStyle(theme, alignItems, (val) => ({\n        alignItems: val,\n      })),\n      getResponsiveStyle(theme, justifyContent, (val) => ({\n        justifyContent: val,\n      })),\n      getResponsiveStyle(theme, gap, (val) => ({\n        gap: theme.spacing(val),\n      })),\n      getResponsiveStyle(theme, grow, (val) => ({\n        flexGrow: val,\n      })),\n      getResponsiveStyle(theme, shrink, (val) => ({\n        flexShrink: val,\n      })),\n      getResponsiveStyle(theme, basis, (val) => ({\n        flexBasis: val,\n      })),\n      getResponsiveStyle(theme, flex, (val) => ({\n        flex: val,\n      })),\n    ]),\n  };\n};\n","import { CSSInterpolation } from '@emotion/css';\n\nimport { GrafanaTheme2, ThemeBreakpointsKey } from '@grafana/data';\n\n/**\n * Type that represents a prop that can be responsive.\n *\n * @example To turn a prop like `margin: number` responsive, change it to `margin: ResponsiveProp<number>`.\n */\nexport type ResponsiveProp<T> = T | Responsive<T>;\n\ntype Responsive<T> = {\n  xs: T;\n  sm?: T;\n  md?: T;\n  lg?: T;\n  xl?: T;\n  xxl?: T;\n};\n\nfunction breakpointCSS<T>(\n  theme: GrafanaTheme2,\n  prop: Responsive<T>,\n  getCSS: (val: T) => CSSInterpolation,\n  key: ThemeBreakpointsKey\n) {\n  const value = prop[key];\n  if (value !== undefined && value !== null) {\n    return {\n      [theme.breakpoints.up(key)]: getCSS(value),\n    };\n  }\n  return;\n}\n/**\n * Function that converts a ResponsiveProp object into CSS\n *\n * @param theme Grafana theme object\n * @param prop Prop as it is passed to the component\n * @param getCSS Function that returns the css block for the prop\n * @returns The CSS block repeated for each breakpoint\n *\n * @example To get the responsive css equivalent of `margin && { margin }`, you can write `getResponsiveStyle(theme, margin, (val) => { margin: val })`\n */\nexport function getResponsiveStyle<T>(\n  theme: GrafanaTheme2,\n  prop: ResponsiveProp<T> | undefined,\n  getCSS: (val: T) => CSSInterpolation\n): CSSInterpolation {\n  if (prop === undefined || prop === null) {\n    return null;\n  }\n  if (typeof prop !== 'object' || !('xs' in prop)) {\n    return getCSS(prop);\n  }\n\n  return [\n    breakpointCSS(theme, prop, getCSS, 'xs'),\n    breakpointCSS(theme, prop, getCSS, 'sm'),\n    breakpointCSS(theme, prop, getCSS, 'md'),\n    breakpointCSS(theme, prop, getCSS, 'lg'),\n    breakpointCSS(theme, prop, getCSS, 'xl'),\n    breakpointCSS(theme, prop, getCSS, 'xxl'),\n  ];\n}\n"],"names":["ArrayDataFrame","source","names","arrayToDataFrame","df","name","makeFieldFromValues","v","first","values","f","ENTITY_MAP","decodeFieldValueEntities","lookup","key","repl","idx","decodeFieldValueEnums","i","guessFieldType","dataFrameFromJSON","dto","schema","data","length","max","vals","fields","index","buffer","origLen","type","entities","enums","nanos","dataFrameField","dataFrameToJSON","frame","allNanos","hasNanos","state","display","sfield","fieldIndexComparer","field","reverse","numericIndexComparer","stringIndexComparer","booleanIndexComparer","timestampIndexComparer","timeIndexComparer","naturalIndexComparer","timeComparer","a","b","falsyComparer","numericComparer","stringComparer","booleanComparer","mult","vA","vB","convertTableToDataFrame","table","c","text","disp","row","t","guessFieldTypeForField","convertTimeSeriesToDataFrame","timeSeries","times","points","point","convertGraphSeriesToDataFrame","graphSeries","x","y","convertJSONDocumentDataToDataFrame","NUMBER","guessFieldTypeFromNameAndValue","guessFieldTypeFromValue","getFieldTypeFromValue","guessFieldTypes","series","guessDefined","isTableData","isDataFrame","isDataFrameWithValue","toDataFrame","createDataFrame","toLegacyResponseData","rowCount","rows","timeField","timeIndex","getTimeField","valueField","j","config","column","sortDataFrame","sortIndex","fieldComparer","newF","n","reverseDataFrame","revNanos","getDataFrameRow","toDataFrameDTO","toFilteredDataFrameDTO","fieldPredicate","getProcessedDataFrame","dataFrame","getProcessedDataFrames","results","preProcessPanelData","lastResult","annotations","STARTTIME","processedDataFrames","annotationsProcessed","STOPTIME","input","p","ISO_8601","setLocale","language","getLocale","getLocaleData","isDateTimeInput","value","isDateTime","toUtc","formatInput","toDuration","unit","dateTime","dateTimeAsMoment","dateTimeForTimeZone","timezone","result","getWeekdayIndex","day","wd","getWeekdayIndexByEnglishName","setWeekStart","weekStart","suffix","dow","LoadingState","preferredVisualizationTypes","NullValueMode","isTruthy","identityObject","isObject","FieldType","TIME_SERIES_VALUE_FIELD_NAME","TIME_SERIES_TIME_FIELD_NAME","TIME_SERIES_METRIC_FIELD_NAME","VariableSupportType","VariableSupportBase","StandardVariableSupport","CustomVariableSupport","DataSourceVariableSupport","Box","props","ref","children","margin","marginX","marginY","marginTop","marginBottom","marginLeft","marginRight","padding","paddingX","paddingY","paddingTop","paddingBottom","paddingLeft","paddingRight","backgroundColor","grow","shrink","basis","flex","borderColor","borderStyle","borderRadius","justifyContent","alignItems","boxShadow","element","gap","rest","styles","getStyles","Element","customBorderColor","color","theme","customBackgroundColor","val","TruncatedText","childElement","isOverflowing","setIsOverflowing","internalRef","resizeObserver","entries","entry","current","getTooltipText","Tooltip","customWeight","weight","customColor","customVariant","variant","Text","truncate","italic","textAlignment","restProps","getTextStyles","Alert","title","onRemove","buttonContent","elevated","bottomSpacing","topSpacing","className","severity","rolesBySeverity","role","ariaLabel","selectors","Icon","getIconFromSeverity","Button","hasTitle","Stack","direction","wrap","breakpointCSS","prop","getCSS","getResponsiveStyle"],"sourceRoot":""}