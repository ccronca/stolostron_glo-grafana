{"version":3,"file":"DashboardPage.0862f691f97f8a3b7131.js","mappings":"6NAUe,SAASA,EAAmBC,EAA8D,CACvG,KAAM,CAACC,EAAOC,CAAQ,KAAI,YAAwB,IAAI,EAChD,CAAE,cAAAC,CAAc,EAAIH,EAAM,MAAM,OAChCI,KAAW,eAAY,EA4B7B,SA1BA,aAAU,IAAM,CACd,MAAMC,KAAK,KAAiB,EAAE,oBAAoBF,CAAa,EAC/D,GAAI,CAACE,EAAI,CACPH,EAAS,uBAAuB,EAChC,OAGF,GAAK,SAAO,eAAe,mBAazBE,KAAS,MAAqBD,CAAa,CAAC,MAbC,CAC7C,MAAMG,KAAe,MAAyB,EACxC,CAAE,UAAAC,CAAU,EAAID,EACtBC,EAAU,OAAO,CAAC,EAAI,CACpB,GAAGA,EAAU,OAAO,CAAC,EACrB,WAAY,CACV,IAAKF,EAAG,IACR,KAAMA,EAAG,IACX,CACF,KAEA,MAAoCC,CAAY,EAKlD,KAAgB,QAAQ,gBAAgB,CAC1C,EAAG,CAACH,EAAeC,CAAQ,CAAC,EAExBH,EAEA,gBAAC,IAAI,CAAC,MAAM,cACV,gBAAC,IAAK,SAAL,KACC,gBAAC,WAAI,yBAA4BE,EAAc,cAAiB,CAClE,CACF,EAIG,IACT,C","sources":["webpack://grafana/./public/app/features/dashboard/containers/NewDashboardWithDS.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\n\nimport { config, getDataSourceSrv, locationService } from '@grafana/runtime';\nimport { Page } from 'app/core/components/Page/Page';\nimport { GrafanaRouteComponentProps } from 'app/core/navigation/types';\nimport { useDispatch } from 'app/types';\n\nimport { getNewDashboardModelData, setDashboardToFetchFromLocalStorage } from '../state/initDashboard';\nimport { setInitialDatasource } from '../state/reducers';\n\nexport default function NewDashboardWithDS(props: GrafanaRouteComponentProps<{ datasourceUid: string }>) {\n  const [error, setError] = useState<string | null>(null);\n  const { datasourceUid } = props.match.params;\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    const ds = getDataSourceSrv().getInstanceSettings(datasourceUid);\n    if (!ds) {\n      setError('Data source not found');\n      return;\n    }\n\n    if (!config.featureToggles.emptyDashboardPage) {\n      const newDashboard = getNewDashboardModelData();\n      const { dashboard } = newDashboard;\n      dashboard.panels[0] = {\n        ...dashboard.panels[0],\n        datasource: {\n          uid: ds.uid,\n          type: ds.type,\n        },\n      };\n\n      setDashboardToFetchFromLocalStorage(newDashboard);\n    } else {\n      dispatch(setInitialDatasource(datasourceUid));\n    }\n\n    locationService.replace('/dashboard/new');\n  }, [datasourceUid, dispatch]);\n\n  if (error) {\n    return (\n      <Page navId=\"dashboards\">\n        <Page.Contents>\n          <div>Data source with UID &quot;{datasourceUid}&quot; not found.</div>\n        </Page.Contents>\n      </Page>\n    );\n  }\n\n  return null;\n}\n"],"names":["NewDashboardWithDS","props","error","setError","datasourceUid","dispatch","ds","newDashboard","dashboard"],"sourceRoot":""}