{"version":3,"file":"187.71a85c68550cadc6a7a5.js","mappings":"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","sources":["webpack://grafana/./public/app/features/alerting/unified/components/notification-policies/Matchers.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/notificaton-preview/route.ts","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/notificaton-preview/NotificationPolicyMatchers.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/notificaton-preview/NotificationRouteDetailsModal.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/notificaton-preview/NotificationRoute.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/notificaton-preview/useAlertmanagerNotificationRoutingPreview.ts","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/notificaton-preview/NotificationPreviewByAlertManager.tsx","webpack://grafana/./public/app/features/alerting/unified/createRouteGroupsMatcherWorker.ts","webpack://grafana/./public/app/features/alerting/unified/useRouteGroupsMatcher.ts"],"sourcesContent":["import { css } from '@emotion/css';\nimport { take, takeRight, uniqueId } from 'lodash';\nimport React, { FC } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { getTagColorsFromName, useStyles2, Stack } from '@grafana/ui';\nimport { ObjectMatcher } from 'app/plugins/datasource/alertmanager/types';\n\nimport { HoverCard } from '../HoverCard';\n\ntype MatchersProps = { matchers: ObjectMatcher[] };\n\n// renders the first N number of matchers\nconst Matchers: FC<MatchersProps> = ({ matchers }) => {\n  const styles = useStyles2(getStyles);\n\n  const NUM_MATCHERS = 5;\n\n  const firstFew = take(matchers, NUM_MATCHERS);\n  const rest = takeRight(matchers, matchers.length - NUM_MATCHERS);\n  const hasMoreMatchers = rest.length > 0;\n\n  return (\n    <span data-testid=\"label-matchers\">\n      <Stack direction=\"row\" gap={1} alignItems=\"center\" wrap={'wrap'}>\n        {firstFew.map((matcher) => (\n          <MatcherBadge key={uniqueId()} matcher={matcher} />\n        ))}\n        {/* TODO hover state to show all matchers we're not showing */}\n        {hasMoreMatchers && (\n          <HoverCard\n            arrow\n            placement=\"top\"\n            content={\n              <>\n                {rest.map((matcher) => (\n                  <MatcherBadge key={uniqueId()} matcher={matcher} />\n                ))}\n              </>\n            }\n          >\n            <span>\n              <div className={styles.metadata}>{`and ${rest.length} more`}</div>\n            </span>\n          </HoverCard>\n        )}\n      </Stack>\n    </span>\n  );\n};\n\ninterface MatcherBadgeProps {\n  matcher: ObjectMatcher;\n}\n\nconst MatcherBadge: FC<MatcherBadgeProps> = ({ matcher: [label, operator, value] }) => {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={styles.matcher(label).wrapper}>\n      <Stack direction=\"row\" gap={0} alignItems=\"baseline\">\n        {label} {operator} {value}\n      </Stack>\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  matcher: (label: string) => {\n    const { color, borderColor } = getTagColorsFromName(label);\n\n    return {\n      wrapper: css`\n        color: #fff;\n        background: ${color};\n        padding: ${theme.spacing(0.33)} ${theme.spacing(0.66)};\n        font-size: ${theme.typography.bodySmall.fontSize};\n\n        border: solid 1px ${borderColor};\n        border-radius: ${theme.shape.borderRadius(2)};\n      `,\n    };\n  },\n  metadata: css`\n    color: ${theme.colors.text.secondary};\n\n    font-size: ${theme.typography.bodySmall.fontSize};\n    font-weight: ${theme.typography.bodySmall.fontWeight};\n  `,\n});\n\nexport { Matchers };\n","import { RouteWithID } from '../../../../../../plugins/datasource/alertmanager/types';\n\nexport interface RouteWithPath extends RouteWithID {\n  path: string[]; // path from root route to this route\n}\n\nexport function isDefaultPolicy(route: RouteWithPath) {\n  return route.path?.length === 0;\n}\n\n// we traverse the whole tree and we create a map with <id , RouteWithPath>\nexport function getRoutesByIdMap(rootRoute: RouteWithID): Map<string, RouteWithPath> {\n  const map = new Map<string, RouteWithPath>();\n\n  function addRoutesToMap(route: RouteWithID, path: string[] = []) {\n    map.set(route.id, { ...route, path: path });\n    route.routes?.forEach((r) => addRoutesToMap(r, [...path, route.id]));\n  }\n\n  addRoutesToMap(rootRoute, []);\n  return map;\n}\n\nexport function hasEmptyMatchers(route: RouteWithID) {\n  return route.object_matchers?.length === 0;\n}\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\n\nimport { Matchers } from '../../notification-policies/Matchers';\n\nimport { hasEmptyMatchers, isDefaultPolicy, RouteWithPath } from './route';\n\nexport function NotificationPolicyMatchers({ route }: { route: RouteWithPath }) {\n  const styles = useStyles2(getStyles);\n  if (isDefaultPolicy(route)) {\n    return <div className={styles.defaultPolicy}>Default policy</div>;\n  } else if (hasEmptyMatchers(route)) {\n    return <div className={styles.textMuted}>No matchers</div>;\n  } else {\n    return <Matchers matchers={route.object_matchers ?? []} />;\n  }\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  defaultPolicy: css`\n    padding: ${theme.spacing(0.5)};\n    background: ${theme.colors.background.secondary};\n    width: fit-content;\n  `,\n  textMuted: css`\n    color: ${theme.colors.text.secondary};\n  `,\n});\n","import { css, cx } from '@emotion/css';\nimport { compact } from 'lodash';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Button, Icon, Modal, useStyles2 } from '@grafana/ui';\n\nimport { Receiver } from '../../../../../../plugins/datasource/alertmanager/types';\nimport { Stack } from '../../../../../../plugins/datasource/parca/QueryEditor/Stack';\nimport { AlertmanagerAction } from '../../../hooks/useAbilities';\nimport { AlertmanagerProvider } from '../../../state/AlertmanagerContext';\nimport { GRAFANA_DATASOURCE_NAME } from '../../../utils/datasource';\nimport { makeAMLink } from '../../../utils/misc';\nimport { Authorize } from '../../Authorize';\nimport { Matchers } from '../../notification-policies/Matchers';\n\nimport { hasEmptyMatchers, isDefaultPolicy, RouteWithPath } from './route';\n\nfunction PolicyPath({ route, routesByIdMap }: { routesByIdMap: Map<string, RouteWithPath>; route: RouteWithPath }) {\n  const styles = useStyles2(getStyles);\n  const routePathIds = route.path?.slice(1) ?? [];\n  const routePathObjects = [...compact(routePathIds.map((id) => routesByIdMap.get(id))), route];\n\n  return (\n    <div className={styles.policyPathWrapper}>\n      <div className={styles.defaultPolicy}>Default policy</div>\n      {routePathObjects.map((pathRoute, index) => {\n        return (\n          <div key={pathRoute.id}>\n            <div className={styles.policyInPath(index, index === routePathObjects.length - 1)}>\n              {hasEmptyMatchers(pathRoute) ? (\n                <div className={styles.textMuted}>No matchers</div>\n              ) : (\n                <Matchers matchers={pathRoute.object_matchers ?? []} />\n              )}\n            </div>\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n\ninterface NotificationRouteDetailsModalProps {\n  onClose: () => void;\n  route: RouteWithPath;\n  receiver: Receiver;\n  routesByIdMap: Map<string, RouteWithPath>;\n  alertManagerSourceName: string;\n}\n\nexport function NotificationRouteDetailsModal({\n  onClose,\n  route,\n  receiver,\n  routesByIdMap,\n  alertManagerSourceName,\n}: NotificationRouteDetailsModalProps) {\n  const styles = useStyles2(getStyles);\n  const isDefault = isDefaultPolicy(route);\n\n  return (\n    <AlertmanagerProvider accessType=\"notification\" alertmanagerSourceName={GRAFANA_DATASOURCE_NAME}>\n      <Modal\n        className={styles.detailsModal}\n        isOpen={true}\n        title=\"Routing details\"\n        onDismiss={onClose}\n        onClickBackdrop={onClose}\n      >\n        <Stack gap={0} direction=\"column\">\n          <div className={cx(styles.textMuted, styles.marginBottom(2))}>\n            Your alert instances are routed as follows.\n          </div>\n          <div>Notification policy path</div>\n          {isDefault && <div className={styles.textMuted}>Default policy</div>}\n          <div className={styles.separator(1)} />\n          {!isDefault && (\n            <>\n              <PolicyPath route={route} routesByIdMap={routesByIdMap} />\n            </>\n          )}\n          <div className={styles.separator(4)} />\n          <div className={styles.contactPoint}>\n            <Stack gap={1} direction=\"row\" alignItems=\"center\">\n              Contact point:\n              <span className={styles.textMuted}>{receiver.name}</span>\n            </Stack>\n            <Authorize actions={[AlertmanagerAction.UpdateContactPoint]}>\n              <Stack gap={1} direction=\"row\" alignItems=\"center\">\n                <a\n                  href={makeAMLink(\n                    `/alerting/notifications/receivers/${encodeURIComponent(receiver.name)}/edit`,\n                    alertManagerSourceName\n                  )}\n                  className={styles.link}\n                  target=\"_blank\"\n                  rel=\"noreferrer\"\n                >\n                  See details <Icon name=\"external-link-alt\" />\n                </a>\n              </Stack>\n            </Authorize>\n          </div>\n          <div className={styles.button}>\n            <Button variant=\"primary\" type=\"button\" onClick={onClose}>\n              Close\n            </Button>\n          </div>\n        </Stack>\n      </Modal>\n    </AlertmanagerProvider>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  textMuted: css`\n    color: ${theme.colors.text.secondary};\n  `,\n  link: css`\n    display: block;\n    color: ${theme.colors.text.link};\n  `,\n  button: css`\n    justify-content: flex-end;\n    display: flex;\n  `,\n  detailsModal: css`\n    max-width: 560px;\n  `,\n  defaultPolicy: css`\n    padding: ${theme.spacing(0.5)};\n    background: ${theme.colors.background.secondary};\n    width: fit-content;\n  `,\n  contactPoint: css`\n    display: flex;\n    flex-direction: row;\n    gap: ${theme.spacing(1)};\n    align-items: center;\n    justify-content: space-between;\n    margin-bottom: ${theme.spacing(1)};\n  `,\n  policyPathWrapper: css`\n    display: flex;\n    flex-direction: column;\n    margin-top: ${theme.spacing(1)};\n  `,\n  separator: (units: number) => css`\n    margin-top: ${theme.spacing(units)};\n  `,\n  marginBottom: (units: number) => css`\n    margin-bottom: ${theme.spacing(theme.spacing(units))};\n  `,\n  policyInPath: (index = 0, higlight = false) => css`\n    margin-left: ${30 + index * 30}px;\n    padding: ${theme.spacing(1)};\n    margin-top: ${theme.spacing(1)};\n    border: solid 1px ${theme.colors.border.weak};\n    background: ${theme.colors.background.secondary};\n    width: fit-content;\n    position: relative;\n\n    ${\n      higlight &&\n      css`\n        border: solid 1px ${theme.colors.info.border};\n      `\n    },\n    &:before {\n      content: '';\n      position: absolute;\n      height: calc(100% - 10px);\n      width: ${theme.spacing(1)};\n      border-left: solid 1px ${theme.colors.border.weak};\n      border-bottom: solid 1px ${theme.colors.border.weak};\n      margin-top: ${theme.spacing(-2)};\n      margin-left: -17px;\n    }\n  }  `,\n});\n","import { css, cx } from '@emotion/css';\nimport { uniqueId } from 'lodash';\nimport pluralize from 'pluralize';\nimport React, { useState } from 'react';\nimport { useToggle } from 'react-use';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Button, getTagColorIndexFromName, TagList, useStyles2 } from '@grafana/ui';\n\nimport { Receiver } from '../../../../../../plugins/datasource/alertmanager/types';\nimport { Stack } from '../../../../../../plugins/datasource/parca/QueryEditor/Stack';\nimport { AlertInstanceMatch } from '../../../utils/notification-policies';\nimport { CollapseToggle } from '../../CollapseToggle';\nimport { MetaText } from '../../MetaText';\nimport { Spacer } from '../../Spacer';\n\nimport { NotificationPolicyMatchers } from './NotificationPolicyMatchers';\nimport { NotificationRouteDetailsModal } from './NotificationRouteDetailsModal';\nimport { RouteWithPath } from './route';\n\nfunction NotificationRouteHeader({\n  route,\n  receiver,\n  routesByIdMap,\n  instancesCount,\n  alertManagerSourceName,\n  expandRoute,\n  onExpandRouteClick,\n}: {\n  route: RouteWithPath;\n  receiver: Receiver;\n  routesByIdMap: Map<string, RouteWithPath>;\n  instancesCount: number;\n  alertManagerSourceName: string;\n  expandRoute: boolean;\n  onExpandRouteClick: (expand: boolean) => void;\n}) {\n  const styles = useStyles2(getStyles);\n  const [showDetails, setShowDetails] = useState(false);\n\n  const onClickDetails = () => {\n    setShowDetails(true);\n  };\n\n  // @TODO: re-use component ContactPointsHoverDetails from Policy once we have it for cloud AMs.\n\n  return (\n    <div className={styles.routeHeader}>\n      <CollapseToggle\n        isCollapsed={!expandRoute}\n        onToggle={(isCollapsed) => onExpandRouteClick(!isCollapsed)}\n        aria-label=\"Expand policy route\"\n      />\n\n      <Stack flexGrow={1} gap={1}>\n        {/* TODO: fix keyboard a11y */}\n        {/* eslint-disable-next-line jsx-a11y/click-events-have-key-events, jsx-a11y/no-static-element-interactions */}\n        <div onClick={() => onExpandRouteClick(!expandRoute)} className={styles.expandable}>\n          <Stack gap={1} direction=\"row\" alignItems=\"center\">\n            Notification policy\n            <NotificationPolicyMatchers route={route} />\n          </Stack>\n        </div>\n        <Spacer />\n        <Stack gap={2} direction=\"row\" alignItems=\"center\">\n          <MetaText icon=\"layers-alt\" data-testid=\"matching-instances\">\n            {instancesCount ?? '-'}\n            <span>{pluralize('instance', instancesCount)}</span>\n          </MetaText>\n          <Stack gap={1} direction=\"row\" alignItems=\"center\">\n            <div>\n              <span className={styles.textMuted}>@ Delivered to</span> {receiver.name}\n            </div>\n\n            <div className={styles.verticalBar} />\n\n            <Button type=\"button\" onClick={onClickDetails} variant=\"secondary\" fill=\"outline\" size=\"sm\">\n              See details\n            </Button>\n          </Stack>\n        </Stack>\n      </Stack>\n      {showDetails && (\n        <NotificationRouteDetailsModal\n          onClose={() => setShowDetails(false)}\n          route={route}\n          receiver={receiver}\n          routesByIdMap={routesByIdMap}\n          alertManagerSourceName={alertManagerSourceName}\n        />\n      )}\n    </div>\n  );\n}\n\ninterface NotificationRouteProps {\n  route: RouteWithPath;\n  receiver: Receiver;\n  instanceMatches: AlertInstanceMatch[];\n  routesByIdMap: Map<string, RouteWithPath>;\n  alertManagerSourceName: string;\n}\n\nexport function NotificationRoute({\n  route,\n  instanceMatches,\n  receiver,\n  routesByIdMap,\n  alertManagerSourceName,\n}: NotificationRouteProps) {\n  const styles = useStyles2(getStyles);\n  const [expandRoute, setExpandRoute] = useToggle(false);\n  // @TODO: The color index might be updated at some point in the future.Maybe we should roll our own tag component,\n  // one that supports a custom function to define the color and allow manual color overrides\n  const GREY_COLOR_INDEX = 9;\n\n  return (\n    <div data-testid=\"matching-policy-route\">\n      <NotificationRouteHeader\n        route={route}\n        receiver={receiver}\n        routesByIdMap={routesByIdMap}\n        instancesCount={instanceMatches.length}\n        alertManagerSourceName={alertManagerSourceName}\n        expandRoute={expandRoute}\n        onExpandRouteClick={setExpandRoute}\n      />\n      {expandRoute && (\n        <Stack gap={1} direction=\"column\">\n          <div className={styles.routeInstances} data-testid=\"route-matching-instance\">\n            {instanceMatches.map((instanceMatch) => {\n              const matchArray = Array.from(instanceMatch.labelsMatch);\n              let matchResult = matchArray.map(([label, matchResult]) => ({\n                label: `${label[0]}=${label[1]}`,\n                match: matchResult.match,\n                colorIndex: matchResult.match ? getTagColorIndexFromName(label[0]) : GREY_COLOR_INDEX,\n              }));\n\n              const matchingLabels = matchResult.filter((mr) => mr.match);\n              const nonMatchingLabels = matchResult.filter((mr) => !mr.match);\n\n              return (\n                <div className={styles.tagListCard} key={uniqueId()}>\n                  {matchArray.length > 0 ? (\n                    <>\n                      {matchingLabels.length > 0 ? (\n                        <TagList\n                          tags={matchingLabels.map((mr) => mr.label)}\n                          className={styles.labelList}\n                          getColorIndex={(_, index) => matchingLabels[index].colorIndex}\n                        />\n                      ) : (\n                        <div className={cx(styles.textMuted, styles.textItalic)}>No matching labels</div>\n                      )}\n                      <div className={styles.labelSeparator} />\n                      <TagList\n                        tags={nonMatchingLabels.map((mr) => mr.label)}\n                        className={styles.labelList}\n                        getColorIndex={(_, index) => nonMatchingLabels[index].colorIndex}\n                      />\n                    </>\n                  ) : (\n                    <div className={styles.textMuted}>No labels</div>\n                  )}\n                </div>\n              );\n            })}\n          </div>\n        </Stack>\n      )}\n    </div>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  textMuted: css`\n    color: ${theme.colors.text.secondary};\n  `,\n  textItalic: css`\n    font-style: italic;\n  `,\n  expandable: css`\n    cursor: pointer;\n  `,\n  routeHeader: css`\n    display: flex;\n    flex-direction: row;\n    gap: ${theme.spacing(1)};\n    align-items: center;\n    border-bottom: 1px solid ${theme.colors.border.weak};\n    &:hover {\n      background-color: ${theme.components.table.rowHoverBackground};\n    }\n    padding: ${theme.spacing(0.5, 0.5, 0.5, 0)};\n  `,\n  labelList: css`\n    flex: 0 1 auto;\n    justify-content: flex-start;\n  `,\n  labelSeparator: css`\n    width: 1px;\n    background-color: ${theme.colors.border.weak};\n  `,\n  tagListCard: css`\n    display: flex;\n    flex-direction: row;\n    gap: ${theme.spacing(2)};\n\n    position: relative;\n    background: ${theme.colors.background.secondary};\n    padding: ${theme.spacing(1)};\n\n    border-radius: ${theme.shape.borderRadius(2)};\n    border: solid 1px ${theme.colors.border.weak};\n  `,\n  routeInstances: css`\n    padding: ${theme.spacing(1, 0, 1, 4)};\n    position: relative;\n\n    display: flex;\n    flex-direction: column;\n    gap: ${theme.spacing(1)};\n\n    &:before {\n      content: '';\n      position: absolute;\n      left: ${theme.spacing(2)};\n      height: calc(100% - ${theme.spacing(2)});\n      width: ${theme.spacing(4)};\n      border-left: solid 1px ${theme.colors.border.weak};\n    }\n  `,\n  verticalBar: css`\n    width: 1px;\n    height: 20px;\n    background-color: ${theme.colors.secondary.main};\n    margin-left: ${theme.spacing(1)};\n    margin-right: ${theme.spacing(1)};\n  `,\n});\n","import { useMemo } from 'react';\nimport { useAsync } from 'react-use';\n\nimport { Receiver } from '../../../../../../plugins/datasource/alertmanager/types';\nimport { Labels } from '../../../../../../types/unified-alerting-dto';\nimport { useAlertmanagerConfig } from '../../../hooks/useAlertmanagerConfig';\nimport { useRouteGroupsMatcher } from '../../../useRouteGroupsMatcher';\nimport { addUniqueIdentifierToRoute } from '../../../utils/amroutes';\nimport { AlertInstanceMatch, computeInheritedTree, normalizeRoute } from '../../../utils/notification-policies';\n\nimport { getRoutesByIdMap, RouteWithPath } from './route';\n\nexport const useAlertmanagerNotificationRoutingPreview = (\n  alertManagerSourceName: string,\n  potentialInstances: Labels[]\n) => {\n  const { currentData, isLoading: configLoading, error: configError } = useAlertmanagerConfig(alertManagerSourceName);\n  const config = currentData?.alertmanager_config;\n\n  const { matchInstancesToRoute } = useRouteGroupsMatcher();\n\n  // to create the list of matching contact points we need to first get the rootRoute\n  const { rootRoute, receivers } = useMemo(() => {\n    if (!config) {\n      return {\n        receivers: [],\n        rootRoute: undefined,\n      };\n    }\n\n    return {\n      rootRoute: config.route ? normalizeRoute(addUniqueIdentifierToRoute(config.route)) : undefined,\n      receivers: config.receivers ?? [],\n    };\n  }, [config]);\n\n  // create maps for routes to be get by id, this map also contains the path to the route\n  // ⚠️ don't forget to compute the inherited tree before using this map\n  const routesByIdMap: Map<string, RouteWithPath> = rootRoute\n    ? getRoutesByIdMap(computeInheritedTree(rootRoute))\n    : new Map();\n\n  // create map for receivers to be get by name\n  const receiversByName =\n    receivers.reduce((map, receiver) => {\n      return map.set(receiver.name, receiver);\n    }, new Map<string, Receiver>()) ?? new Map<string, Receiver>();\n\n  // match labels in the tree => map of notification policies and the alert instances (list of labels) in each one\n  const {\n    value: matchingMap = new Map<string, AlertInstanceMatch[]>(),\n    loading: matchingLoading,\n    error: matchingError,\n  } = useAsync(async () => {\n    if (!rootRoute) {\n      return;\n    }\n    return await matchInstancesToRoute(rootRoute, potentialInstances);\n  }, [rootRoute, potentialInstances]);\n\n  return {\n    routesByIdMap,\n    receiversByName,\n    matchingMap,\n    loading: configLoading || matchingLoading,\n    error: configError ?? matchingError,\n  };\n};\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Alert, LoadingPlaceholder, useStyles2, withErrorBoundary } from '@grafana/ui';\n\nimport { Stack } from '../../../../../../plugins/datasource/parca/QueryEditor/Stack';\nimport { Labels } from '../../../../../../types/unified-alerting-dto';\nimport { AlertManagerDataSource } from '../../../utils/datasource';\n\nimport { NotificationRoute } from './NotificationRoute';\nimport { useAlertmanagerNotificationRoutingPreview } from './useAlertmanagerNotificationRoutingPreview';\n\nfunction NotificationPreviewByAlertManager({\n  alertManagerSource,\n  potentialInstances,\n  onlyOneAM,\n}: {\n  alertManagerSource: AlertManagerDataSource;\n  potentialInstances: Labels[];\n  onlyOneAM: boolean;\n}) {\n  const styles = useStyles2(getStyles);\n\n  const { routesByIdMap, receiversByName, matchingMap, loading, error } = useAlertmanagerNotificationRoutingPreview(\n    alertManagerSource.name,\n    potentialInstances\n  );\n\n  if (error) {\n    return (\n      <Alert title=\"Cannot load Alertmanager configuration\" severity=\"error\">\n        {error.message}\n      </Alert>\n    );\n  }\n\n  if (loading) {\n    return <LoadingPlaceholder text=\"Loading routing preview...\" />;\n  }\n\n  const matchingPoliciesFound = matchingMap.size > 0;\n\n  return matchingPoliciesFound ? (\n    <div className={styles.alertManagerRow}>\n      {!onlyOneAM && (\n        <Stack direction=\"row\" alignItems=\"center\">\n          <div className={styles.firstAlertManagerLine}></div>\n          <div className={styles.alertManagerName}>\n            {' '}\n            Alert manager:\n            <img src={alertManagerSource.imgUrl} alt=\"\" className={styles.img} />\n            {alertManagerSource.name}\n          </div>\n          <div className={styles.secondAlertManagerLine}></div>\n        </Stack>\n      )}\n      <Stack gap={1} direction=\"column\">\n        {Array.from(matchingMap.entries()).map(([routeId, instanceMatches]) => {\n          const route = routesByIdMap.get(routeId);\n          const receiver = route?.receiver && receiversByName.get(route.receiver);\n\n          if (!route) {\n            return null;\n          }\n          if (!receiver) {\n            throw new Error('Receiver not found');\n          }\n          return (\n            <NotificationRoute\n              instanceMatches={instanceMatches}\n              route={route}\n              receiver={receiver}\n              key={routeId}\n              routesByIdMap={routesByIdMap}\n              alertManagerSourceName={alertManagerSource.name}\n            />\n          );\n        })}\n      </Stack>\n    </div>\n  ) : null;\n}\n\n// export default because we want to load the component dynamically using React.lazy\n// Due to loading of the web worker we don't want to load this component when not necessary\nexport default withErrorBoundary(NotificationPreviewByAlertManager);\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  alertManagerRow: css`\n    display: flex;\n    flex-direction: column;\n    gap: ${theme.spacing(1)};\n    width: 100%;\n  `,\n  firstAlertManagerLine: css`\n    height: 1px;\n    width: ${theme.spacing(4)};\n    background-color: ${theme.colors.secondary.main};\n  `,\n  alertManagerName: css`\n    width: fit-content;\n  `,\n  secondAlertManagerLine: css`\n    height: 1px;\n    width: 100%;\n    flex: 1;\n    background-color: ${theme.colors.secondary.main};\n  `,\n  img: css`\n    margin-left: ${theme.spacing(2)};\n    width: ${theme.spacing(3)};\n    height: ${theme.spacing(3)};\n    margin-right: ${theme.spacing(1)};\n  `,\n});\n","import { CorsWorker as Worker } from 'app/core/utils/CorsWorker';\n\n// CorsWorker is needed as a workaround for CORS issue caused\n// by static assets served from an url different from origin\nexport const createWorker = () => new Worker(new URL('./routeGroupsMatcher.worker.ts', import.meta.url));\n","import * as comlink from 'comlink';\nimport { useCallback, useEffect } from 'react';\n\nimport { logError } from '@grafana/runtime';\n\nimport { AlertmanagerGroup, RouteWithID } from '../../../plugins/datasource/alertmanager/types';\nimport { Labels } from '../../../types/unified-alerting-dto';\n\nimport { logInfo } from './Analytics';\nimport { createWorker } from './createRouteGroupsMatcherWorker';\nimport type { RouteGroupsMatcher } from './routeGroupsMatcher';\n\nlet routeMatcher: comlink.Remote<RouteGroupsMatcher> | undefined;\n\n// Load worker loads the worker if it's not loaded yet\n// and returns a function to dispose of the worker\n// We do it to enable feature toggling. If the feature is disabled we don't wont to load the worker code at all\n// An alternative way would be to move all this code to the hook below, but it will create and terminate the worker much more often\nfunction loadWorker() {\n  let worker: Worker | undefined;\n\n  if (routeMatcher === undefined) {\n    try {\n      worker = createWorker();\n      routeMatcher = comlink.wrap<RouteGroupsMatcher>(worker);\n    } catch (e: unknown) {\n      if (e instanceof Error) {\n        logError(e);\n      }\n    }\n  }\n\n  const disposeWorker = () => {\n    if (worker && routeMatcher) {\n      routeMatcher[comlink.releaseProxy]();\n      worker.terminate();\n\n      routeMatcher = undefined;\n      worker = undefined;\n    }\n  };\n\n  return { disposeWorker };\n}\n\nfunction validateWorker(matcher: typeof routeMatcher): asserts matcher is comlink.Remote<RouteGroupsMatcher> {\n  if (!routeMatcher) {\n    throw new Error('Route Matcher has not been initialized');\n  }\n}\n\nexport function useRouteGroupsMatcher() {\n  useEffect(() => {\n    const { disposeWorker } = loadWorker();\n    return disposeWorker;\n\n    return () => null;\n  }, []);\n\n  const getRouteGroupsMap = useCallback(async (rootRoute: RouteWithID, alertGroups: AlertmanagerGroup[]) => {\n    validateWorker(routeMatcher);\n\n    const startTime = performance.now();\n\n    const result = await routeMatcher.getRouteGroupsMap(rootRoute, alertGroups);\n\n    const timeSpent = performance.now() - startTime;\n\n    logInfo(`Route Groups Matched in  ${timeSpent} ms`, {\n      matchingTime: timeSpent.toString(),\n      alertGroupsCount: alertGroups.length.toString(),\n      // Counting all nested routes might be too time-consuming, so we only count the first level\n      topLevelRoutesCount: rootRoute.routes?.length.toString() ?? '0',\n    });\n\n    return result;\n  }, []);\n\n  const matchInstancesToRoute = useCallback(async (rootRoute: RouteWithID, instancesToMatch: Labels[]) => {\n    validateWorker(routeMatcher);\n\n    const startTime = performance.now();\n\n    const result = await routeMatcher.matchInstancesToRoute(rootRoute, instancesToMatch);\n\n    const timeSpent = performance.now() - startTime;\n\n    logInfo(`Instances Matched in  ${timeSpent} ms`, {\n      matchingTime: timeSpent.toString(),\n      instancesToMatchCount: instancesToMatch.length.toString(),\n      // Counting all nested routes might be too time-consuming, so we only count the first level\n      topLevelRoutesCount: rootRoute.routes?.length.toString() ?? '0',\n    });\n\n    return result;\n  }, []);\n\n  return { getRouteGroupsMap, matchInstancesToRoute };\n}\n"],"names":["Matchers","matchers","styles","getStyles","NUM_MATCHERS","firstFew","rest","hasMoreMatchers","matcher","MatcherBadge","label","operator","value","theme","color","borderColor","isDefaultPolicy","route","getRoutesByIdMap","rootRoute","map","addRoutesToMap","path","r","hasEmptyMatchers","NotificationPolicyMatchers","PolicyPath","routesByIdMap","routePathIds","routePathObjects","id","pathRoute","index","NotificationRouteDetailsModal","onClose","receiver","alertManagerSourceName","isDefault","Modal","Stack","Authorize","Icon","Button","units","higlight","NotificationRouteHeader","instancesCount","expandRoute","onExpandRouteClick","showDetails","setShowDetails","onClickDetails","CollapseToggle","isCollapsed","Spacer","MetaText","NotificationRoute","instanceMatches","setExpandRoute","useToggle","GREY_COLOR_INDEX","instanceMatch","matchArray","matchResult","matchingLabels","mr","nonMatchingLabels","TagList","_","useAlertmanagerNotificationRoutingPreview","potentialInstances","currentData","configLoading","configError","useAlertmanagerConfig","config","matchInstancesToRoute","useRouteGroupsMatcher","receivers","receiversByName","matchingMap","matchingLoading","matchingError","useAsync","NotificationPreviewByAlertManager","alertManagerSource","onlyOneAM","loading","error","Alert","LoadingPlaceholder","routeId","createWorker","routeMatcher","loadWorker","worker","comlink","e","validateWorker","disposeWorker","getRouteGroupsMap","alertGroups","startTime","result","timeSpent","instancesToMatch"],"sourceRoot":""}