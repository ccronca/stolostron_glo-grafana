{"version":3,"file":"763.50c2b7d539052d12f78b.js","mappings":"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","sources":["webpack://grafana/./public/app/features/alerting/unified/components/expressions/util.ts","webpack://grafana/./public/app/features/alerting/unified/components/expressions/Expression.tsx","webpack://grafana/./public/app/features/alerting/unified/components/expressions/ExpressionStatusIndicator.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/VizWrapper.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/dag.ts","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/util.ts","webpack://grafana/./public/app/features/alerting/unified/hooks/useAlertQueriesStatus.ts","webpack://grafana/./public/app/features/alerting/unified/utils/timeRange.ts","webpack://grafana/./public/app/features/alerting/unified/state/AlertingQueryRunner.ts","webpack://grafana/./public/app/features/expressions/guards.ts"],"sourcesContent":["import { DataFrame, Labels, roundDecimals } from '@grafana/data';\n\n/**\n * ⚠️ `frame.fields` could be an empty array ⚠️\n *\n * TypeScript will NOT complain about it when accessing items via index signatures.\n * Make sure to check for empty array or use optional chaining!\n *\n * see https://github.com/Microsoft/TypeScript/issues/13778\n */\n\nconst getSeriesName = (frame: DataFrame): string | undefined => {\n  const firstField = frame.fields[0];\n\n  const displayNameFromDS = firstField?.config?.displayNameFromDS;\n  return displayNameFromDS ?? frame.name ?? firstField?.labels?.__name__;\n};\n\nconst getSeriesValue = (frame: DataFrame) => {\n  const value = frame.fields[0]?.values[0];\n\n  if (Number.isFinite(value)) {\n    return roundDecimals(value, 5);\n  }\n\n  return value;\n};\n\nconst getSeriesLabels = (frame: DataFrame): Record<string, string> => {\n  const firstField = frame.fields[0];\n  return firstField?.labels ?? {};\n};\n\nconst formatLabels = (labels: Labels): string => {\n  return Object.entries(labels)\n    .map(([key, value]) => key + '=' + value)\n    .join(', ');\n};\n\nconst isEmptySeries = (series: DataFrame[]): boolean => {\n  const isEmpty = series.every((serie) => serie.fields.every((field) => field.values.every((value) => value == null)));\n\n  return isEmpty;\n};\n\nexport { getSeriesName, getSeriesValue, getSeriesLabels, formatLabels, isEmptySeries };\n","import { css, cx } from '@emotion/css';\nimport { uniqueId } from 'lodash';\nimport React, { FC, useCallback, useState } from 'react';\nimport { useFormContext } from 'react-hook-form';\n\nimport { DataFrame, dateTimeFormat, GrafanaTheme2, isTimeSeriesFrames, LoadingState, PanelData } from '@grafana/data';\nimport { AutoSizeInput, Button, clearButtonStyles, IconButton, Stack, useStyles2 } from '@grafana/ui';\nimport { ClassicConditions } from 'app/features/expressions/components/ClassicConditions';\nimport { Math } from 'app/features/expressions/components/Math';\nimport { Reduce } from 'app/features/expressions/components/Reduce';\nimport { Resample } from 'app/features/expressions/components/Resample';\nimport { Threshold } from 'app/features/expressions/components/Threshold';\nimport {\n  ExpressionQuery,\n  ExpressionQueryType,\n  expressionTypes,\n  getExpressionLabel,\n} from 'app/features/expressions/types';\nimport { AlertQuery, PromAlertingRuleState } from 'app/types/unified-alerting-dto';\n\nimport { usePagination } from '../../hooks/usePagination';\nimport { HoverCard } from '../HoverCard';\nimport { Spacer } from '../Spacer';\nimport { AlertStateTag } from '../rules/AlertStateTag';\n\nimport { ExpressionStatusIndicator } from './ExpressionStatusIndicator';\nimport { formatLabels, getSeriesLabels, getSeriesName, getSeriesValue, isEmptySeries } from './util';\n\ninterface ExpressionProps {\n  isAlertCondition?: boolean;\n  data?: PanelData;\n  error?: Error;\n  warning?: Error;\n  queries: AlertQuery[];\n  query: ExpressionQuery;\n  onSetCondition: (refId: string) => void;\n  onUpdateRefId: (oldRefId: string, newRefId: string) => void;\n  onRemoveExpression: (refId: string) => void;\n  onUpdateExpressionType: (refId: string, type: ExpressionQueryType) => void;\n  onChangeQuery: (query: ExpressionQuery) => void;\n}\n\nexport const Expression: FC<ExpressionProps> = ({\n  queries = [],\n  query,\n  data,\n  error,\n  warning,\n  isAlertCondition,\n  onSetCondition,\n  onUpdateRefId,\n  onRemoveExpression,\n  onUpdateExpressionType,\n  onChangeQuery,\n}) => {\n  const styles = useStyles2(getStyles);\n\n  const queryType = query?.type;\n\n  const { setError, clearErrors } = useFormContext();\n\n  const onQueriesValidationError = useCallback(\n    (errorMsg: string | undefined) => {\n      if (errorMsg) {\n        setError('queries', { type: 'custom', message: errorMsg });\n      } else {\n        clearErrors('queries');\n      }\n    },\n    [setError, clearErrors]\n  );\n\n  const isLoading = data && Object.values(data).some((d) => Boolean(d) && d.state === LoadingState.Loading);\n  const hasResults = Array.isArray(data?.series) && !isLoading;\n  const series = data?.series ?? [];\n\n  const alertCondition = isAlertCondition ?? false;\n\n  const { seriesCount, groupedByState } = getGroupedByStateAndSeriesCount(series);\n\n  const renderExpressionType = useCallback(\n    (query: ExpressionQuery) => {\n      // these are the refs we can choose from that don't include the current one\n      const availableRefIds = queries\n        .filter((q) => query.refId !== q.refId)\n        .map((q) => ({ value: q.refId, label: q.refId }));\n\n      switch (query.type) {\n        case ExpressionQueryType.math:\n          return <Math onChange={onChangeQuery} query={query} labelWidth={'auto'} onRunQuery={() => {}} />;\n\n        case ExpressionQueryType.reduce:\n          return <Reduce onChange={onChangeQuery} refIds={availableRefIds} labelWidth={'auto'} query={query} />;\n\n        case ExpressionQueryType.resample:\n          return <Resample onChange={onChangeQuery} query={query} labelWidth={'auto'} refIds={availableRefIds} />;\n\n        case ExpressionQueryType.classic:\n          return <ClassicConditions onChange={onChangeQuery} query={query} refIds={availableRefIds} />;\n\n        case ExpressionQueryType.threshold:\n          return (\n            <Threshold\n              onChange={onChangeQuery}\n              query={query}\n              labelWidth={'auto'}\n              refIds={availableRefIds}\n              onError={onQueriesValidationError}\n              useHysteresis={true}\n            />\n          );\n\n        default:\n          return <>Expression not supported: {query.type}</>;\n      }\n    },\n    [onChangeQuery, queries, onQueriesValidationError]\n  );\n  const selectedExpressionType = expressionTypes.find((o) => o.value === queryType);\n  const selectedExpressionDescription = selectedExpressionType?.description ?? '';\n\n  return (\n    <div\n      className={cx(\n        styles.expression.wrapper,\n        alertCondition && styles.expression.alertCondition,\n        queryType === ExpressionQueryType.classic && styles.expression.classic,\n        queryType !== ExpressionQueryType.classic && styles.expression.nonClassic\n      )}\n    >\n      <div className={styles.expression.stack}>\n        <Header\n          refId={query.refId}\n          queryType={queryType}\n          onRemoveExpression={() => onRemoveExpression(query.refId)}\n          onUpdateRefId={(newRefId) => onUpdateRefId(query.refId, newRefId)}\n          onUpdateExpressionType={(type) => onUpdateExpressionType(query.refId, type)}\n          onSetCondition={onSetCondition}\n          warning={warning}\n          error={error}\n          query={query}\n          alertCondition={alertCondition}\n        />\n        <div className={styles.expression.body}>\n          <div className={styles.expression.description}>{selectedExpressionDescription}</div>\n          {renderExpressionType(query)}\n        </div>\n        {hasResults && (\n          <>\n            <ExpressionResult series={series} isAlertCondition={isAlertCondition} />\n\n            <div className={styles.footer}>\n              <Stack direction=\"row\" alignItems=\"center\">\n                <Spacer />\n\n                <PreviewSummary\n                  isCondition={Boolean(isAlertCondition)}\n                  firing={groupedByState[PromAlertingRuleState.Firing].length}\n                  normal={groupedByState[PromAlertingRuleState.Inactive].length}\n                  seriesCount={seriesCount}\n                />\n              </Stack>\n            </div>\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n\ninterface ExpressionResultProps {\n  series: DataFrame[];\n  isAlertCondition?: boolean;\n}\nexport const PAGE_SIZE = 20;\nexport const ExpressionResult: FC<ExpressionResultProps> = ({ series, isAlertCondition }) => {\n  const { pageItems, previousPage, nextPage, numberOfPages, pageStart, pageEnd } = usePagination(series, 1, PAGE_SIZE);\n  const styles = useStyles2(getStyles);\n\n  // sometimes we receive results where every value is just \"null\" when noData occurs\n  const emptyResults = isEmptySeries(series);\n  const isTimeSeriesResults = !emptyResults && isTimeSeriesFrames(series);\n\n  const shouldShowPagination = numberOfPages > 1;\n\n  return (\n    <div className={styles.expression.results}>\n      {!emptyResults && isTimeSeriesResults && (\n        <div>\n          {pageItems.map((frame, index) => (\n            <TimeseriesRow\n              key={uniqueId()}\n              frame={frame}\n              index={pageStart + index}\n              isAlertCondition={isAlertCondition}\n            />\n          ))}\n        </div>\n      )}\n      {!emptyResults &&\n        !isTimeSeriesResults &&\n        pageItems.map((frame, index) => (\n          // There's no way to uniquely identify a frame that doesn't cause render bugs :/ (Gilles)\n          <FrameRow key={uniqueId()} frame={frame} index={pageStart + index} isAlertCondition={isAlertCondition} />\n        ))}\n      {emptyResults && <div className={cx(styles.expression.noData, styles.mutedText)}>No data</div>}\n      {shouldShowPagination && (\n        <div className={styles.pagination.wrapper} data-testid=\"paginate-expression\">\n          <Stack>\n            <Button\n              variant=\"secondary\"\n              fill=\"outline\"\n              onClick={previousPage}\n              icon=\"angle-left\"\n              size=\"sm\"\n              aria-label=\"previous-page\"\n            />\n            <Spacer />\n            <span className={styles.mutedText}>\n              {pageStart} - {pageEnd} of {series.length}\n            </span>\n            <Spacer />\n            <Button\n              variant=\"secondary\"\n              fill=\"outline\"\n              onClick={nextPage}\n              icon=\"angle-right\"\n              size=\"sm\"\n              aria-label=\"next-page\"\n            />\n          </Stack>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport const PreviewSummary: FC<{ firing: number; normal: number; isCondition: boolean; seriesCount: number }> = ({\n  firing,\n  normal,\n  isCondition,\n  seriesCount,\n}) => {\n  const { mutedText } = useStyles2(getStyles);\n\n  if (seriesCount === 0) {\n    return <span className={mutedText}>No series</span>;\n  }\n\n  if (isCondition) {\n    return <span className={mutedText}>{`${seriesCount} series: ${firing} firing, ${normal} normal`}</span>;\n  }\n\n  return <span className={mutedText}>{`${seriesCount} series`}</span>;\n};\n\nexport function getGroupedByStateAndSeriesCount(series: DataFrame[]) {\n  const noDataSeries = series.filter((serie) => getSeriesValue(serie) === undefined).length;\n  const groupedByState = {\n    // we need to filter out series with no data (undefined) or zero value\n    [PromAlertingRuleState.Firing]: series.filter(\n      (serie) => getSeriesValue(serie) !== undefined && getSeriesValue(serie) !== 0\n    ),\n    [PromAlertingRuleState.Inactive]: series.filter((serie) => getSeriesValue(serie) === 0),\n  };\n\n  const seriesCount = series.length - noDataSeries;\n\n  return { groupedByState, seriesCount };\n}\n\ninterface HeaderProps {\n  refId: string;\n  queryType: ExpressionQueryType;\n  onUpdateRefId: (refId: string) => void;\n  onRemoveExpression: () => void;\n  onUpdateExpressionType: (type: ExpressionQueryType) => void;\n  warning?: Error;\n  error?: Error;\n  onSetCondition: (refId: string) => void;\n  query: ExpressionQuery;\n  alertCondition: boolean;\n}\n\nconst Header: FC<HeaderProps> = ({\n  refId,\n  queryType,\n  onUpdateRefId,\n  onRemoveExpression,\n  warning,\n  onSetCondition,\n  alertCondition,\n  query,\n  error,\n}) => {\n  const styles = useStyles2(getStyles);\n  const clearButton = useStyles2(clearButtonStyles);\n  /**\n   * There are 3 edit modes:\n   *\n   * 1. \"refId\": Editing the refId (ie. A -> B)\n   * 2. \"expressionType\": Editing the type of the expression (ie. Reduce -> Math)\n   * 3. \"false\": This means we're not editing either of those\n   */\n  const [editMode, setEditMode] = useState<'refId' | 'expressionType' | false>(false);\n\n  const editing = editMode !== false;\n  const editingRefId = editing && editMode === 'refId';\n\n  return (\n    <header className={styles.header.wrapper}>\n      <Stack direction=\"row\" gap={0.5} alignItems=\"center\">\n        <Stack direction=\"row\" gap={1} alignItems=\"center\">\n          {!editingRefId && (\n            <button type=\"button\" className={cx(clearButton, styles.editable)} onClick={() => setEditMode('refId')}>\n              <div className={styles.expression.refId}>{refId}</div>\n            </button>\n          )}\n          {editingRefId && (\n            <AutoSizeInput\n              autoFocus\n              defaultValue={refId}\n              minWidth={5}\n              onChange={(event) => {\n                onUpdateRefId(event.currentTarget.value);\n                setEditMode(false);\n              }}\n              onFocus={(event) => event.target.select()}\n              onBlur={(event) => {\n                onUpdateRefId(event.currentTarget.value);\n                setEditMode(false);\n              }}\n            />\n          )}\n          <div>{getExpressionLabel(queryType)}</div>\n        </Stack>\n        <Spacer />\n        <ExpressionStatusIndicator\n          error={error}\n          warning={warning}\n          onSetCondition={() => onSetCondition(query.refId)}\n          isCondition={alertCondition}\n        />\n        <IconButton\n          name=\"trash-alt\"\n          variant=\"secondary\"\n          className={styles.mutedIcon}\n          onClick={onRemoveExpression}\n          tooltip=\"Remove expression\"\n        />\n      </Stack>\n    </header>\n  );\n};\n\ninterface FrameProps extends Pick<ExpressionProps, 'isAlertCondition'> {\n  frame: DataFrame;\n  index: number;\n}\n\nconst FrameRow: FC<FrameProps> = ({ frame, index, isAlertCondition }) => {\n  const styles = useStyles2(getStyles);\n\n  const name = getSeriesName(frame) || 'Series ' + index;\n  const value = getSeriesValue(frame);\n  const labelsRecord = getSeriesLabels(frame);\n  const labels = Object.entries(labelsRecord);\n  const hasLabels = labels.length > 0;\n\n  const showFiring = isAlertCondition && value !== 0;\n  const showNormal = isAlertCondition && value === 0;\n\n  const title = `${hasLabels ? '' : name}${hasLabels ? `{${formatLabels(labelsRecord)}}` : ''}`;\n\n  return (\n    <div className={styles.expression.resultsRow}>\n      <Stack direction=\"row\" gap={1} alignItems=\"center\">\n        <div className={styles.expression.resultLabel} title={title}>\n          <span>{hasLabels ? '' : name}</span>\n          {hasLabels && (\n            <>\n              <span>{'{'}</span>\n              {labels.map(([key, value], index) => (\n                <span key={uniqueId()}>\n                  <span className={styles.expression.labelKey}>{key}</span>\n                  <span>=</span>\n                  <span>&quot;</span>\n                  <span className={styles.expression.labelValue}>{value}</span>\n                  <span>&quot;</span>\n                  {index < labels.length - 1 && <span>, </span>}\n                </span>\n              ))}\n              <span>{'}'}</span>\n            </>\n          )}\n        </div>\n        <div className={styles.expression.resultValue}>{value}</div>\n        {showFiring && <AlertStateTag state={PromAlertingRuleState.Firing} size=\"sm\" />}\n        {showNormal && <AlertStateTag state={PromAlertingRuleState.Inactive} size=\"sm\" />}\n      </Stack>\n    </div>\n  );\n};\n\nconst TimeseriesRow: FC<FrameProps & { index: number }> = ({ frame, index }) => {\n  const styles = useStyles2(getStyles);\n\n  const valueField = frame.fields[1]; // field 0 is \"time\", field 1 is \"value\"\n\n  const hasLabels = valueField.labels;\n  const displayNameFromDS = valueField.config?.displayNameFromDS;\n  const name = displayNameFromDS ?? (hasLabels ? formatLabels(valueField.labels ?? {}) : 'Series ' + index);\n\n  const timestamps = frame.fields[0].values;\n\n  const getTimestampFromIndex = (index: number) => frame.fields[0].values[index];\n  const getValueFromIndex = (index: number) => frame.fields[1].values[index];\n\n  return (\n    <div className={styles.expression.resultsRow}>\n      <Stack direction=\"row\" alignItems=\"center\">\n        <span className={cx(styles.mutedText, styles.expression.resultLabel)} title={name}>\n          {name}\n        </span>\n        <div className={styles.expression.resultValue}>\n          <HoverCard\n            placement=\"right\"\n            wrapperClassName={styles.timeseriesTableWrapper}\n            content={\n              <table className={styles.timeseriesTable}>\n                <thead>\n                  <tr>\n                    <th>Timestamp</th>\n                    <th>Value</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {timestamps.map((_, index) => (\n                    <tr key={index}>\n                      <td className={styles.mutedText}>{dateTimeFormat(getTimestampFromIndex(index))}</td>\n                      <td className={styles.expression.resultValue}>{getValueFromIndex(index)}</td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            }\n          >\n            <span>Time series data</span>\n          </HoverCard>\n        </div>\n      </Stack>\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  expression: {\n    wrapper: css`\n      display: flex;\n      border: solid 1px ${theme.colors.border.medium};\n      flex: 1;\n      flex-basis: 400px;\n      border-radius: ${theme.shape.radius.default};\n    `,\n    stack: css`\n      display: flex;\n      flex-direction: column;\n      flex-wrap: nowrap;\n      gap: 0;\n      width: 100%;\n      min-width: 0; // this one is important to prevent text overflow\n    `,\n    classic: css`\n      max-width: 100%;\n    `,\n    nonClassic: css`\n      max-width: 640px;\n    `,\n    alertCondition: css``,\n    body: css`\n      padding: ${theme.spacing(1)};\n      flex: 1;\n    `,\n    description: css`\n      margin-bottom: ${theme.spacing(1)};\n      font-size: ${theme.typography.size.xs};\n      color: ${theme.colors.text.secondary};\n    `,\n    refId: css`\n      font-weight: ${theme.typography.fontWeightBold};\n      color: ${theme.colors.primary.text};\n    `,\n    results: css`\n      display: flex;\n      flex-direction: column;\n      flex-wrap: nowrap;\n\n      border-top: solid 1px ${theme.colors.border.medium};\n    `,\n    noResults: css`\n      display: flex;\n      align-items: center;\n      justify-content: center;\n    `,\n    resultsRow: css`\n      padding: ${theme.spacing(0.75)} ${theme.spacing(1)};\n\n      &:nth-child(odd) {\n        background-color: ${theme.colors.background.secondary};\n      }\n\n      &:hover {\n        background-color: ${theme.colors.background.canvas};\n      }\n    `,\n    labelKey: css`\n      color: ${theme.isDark ? '#73bf69' : '#56a64b'};\n    `,\n    labelValue: css`\n      color: ${theme.isDark ? '#ce9178' : '#a31515'};\n    `,\n    resultValue: css`\n      text-align: right;\n    `,\n    resultLabel: css`\n      flex: 1;\n      overflow-x: auto;\n\n      display: inline-block;\n      white-space: nowrap;\n    `,\n    noData: css`\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      padding: ${theme.spacing()};\n    `,\n  },\n  mutedText: css`\n    color: ${theme.colors.text.secondary};\n    font-size: 0.9em;\n\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n  `,\n  header: {\n    wrapper: css`\n      background: ${theme.colors.background.secondary};\n      padding: ${theme.spacing(0.5)} ${theme.spacing(1)};\n      border-bottom: solid 1px ${theme.colors.border.weak};\n    `,\n  },\n  footer: css`\n    background: ${theme.colors.background.secondary};\n    padding: ${theme.spacing(1)};\n    border-top: solid 1px ${theme.colors.border.weak};\n  `,\n  draggableIcon: css`\n    cursor: grab;\n  `,\n  mutedIcon: css`\n    color: ${theme.colors.text.secondary};\n  `,\n  editable: css`\n    padding: ${theme.spacing(0.5)} ${theme.spacing(1)};\n    border: solid 1px ${theme.colors.border.weak};\n    border-radius: ${theme.shape.radius.default};\n\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    gap: ${theme.spacing(1)};\n\n    cursor: pointer;\n  `,\n  timeseriesTableWrapper: css`\n    max-height: 500px;\n\n    overflow-y: scroll;\n  `,\n  timeseriesTable: css`\n    table-layout: auto;\n\n    width: 100%;\n    height: 100%;\n\n    td,\n    th {\n      padding: ${theme.spacing(1)};\n    }\n\n    td {\n      background: ${theme.colors.background.primary};\n    }\n\n    th {\n      background: ${theme.colors.background.secondary};\n    }\n\n    tr {\n      border-bottom: 1px solid ${theme.colors.border.medium};\n\n      &:last-of-type {\n        border-bottom: none;\n      }\n    }\n  `,\n  pagination: {\n    wrapper: css`\n      border-top: 1px solid ${theme.colors.border.medium};\n      padding: ${theme.spacing()};\n    `,\n  },\n});\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Badge, clearButtonStyles, useStyles2 } from '@grafana/ui';\n\ninterface AlertConditionProps {\n  warning?: Error;\n  error?: Error;\n  isCondition?: boolean;\n  onSetCondition?: () => void;\n}\n\nexport const ExpressionStatusIndicator = ({ error, warning, isCondition, onSetCondition }: AlertConditionProps) => {\n  const styles = useStyles2(getStyles);\n\n  const elements: JSX.Element[] = [];\n\n  if (error && isCondition) {\n    return <Badge color=\"red\" icon=\"exclamation-circle\" text=\"Alert condition\" tooltip={error.message} />;\n  } else if (error) {\n    elements.push(<Badge key=\"error\" color=\"red\" icon=\"exclamation-circle\" text=\"Error\" tooltip={error.message} />);\n  }\n\n  if (warning && isCondition) {\n    return <Badge color=\"orange\" icon=\"exclamation-triangle\" text=\"Alert condition\" tooltip={warning.message} />;\n  } else if (warning) {\n    elements.push(\n      <Badge key=\"warning\" color=\"orange\" icon=\"exclamation-triangle\" text=\"Warning\" tooltip={warning.message} />\n    );\n  }\n\n  if (isCondition) {\n    elements.unshift(<Badge key=\"condition\" color=\"green\" icon=\"check\" text=\"Alert condition\" />);\n  } else {\n    elements.unshift(\n      <button\n        key=\"make-condition\"\n        type=\"button\"\n        className={styles.actionLink}\n        onClick={() => onSetCondition && onSetCondition()}\n      >\n        Set as alert condition\n      </button>\n    );\n  }\n\n  return <>{elements}</>;\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  const clearButton = clearButtonStyles(theme);\n\n  return {\n    actionLink: css`\n      ${clearButton};\n      color: ${theme.colors.text.link};\n      cursor: pointer;\n\n      &:hover {\n        text-decoration: underline;\n      }\n    `,\n  };\n};\n","import { css } from '@emotion/css';\nimport React from 'react';\nimport AutoSizer from 'react-virtualized-auto-sizer';\n\nimport { GrafanaTheme2, isTimeSeriesFrames, PanelData, ThresholdsConfig } from '@grafana/data';\nimport { GraphTresholdsStyleMode } from '@grafana/schema';\nimport { useStyles2 } from '@grafana/ui';\nimport appEvents from 'app/core/app_events';\nimport { GraphContainer } from 'app/features/explore/Graph/GraphContainer';\n\nimport { ExpressionResult } from '../expressions/Expression';\n\nimport { getStatusMessage } from './util';\n\ninterface Props {\n  data: PanelData;\n  thresholds?: ThresholdsConfig;\n  thresholdsType?: GraphTresholdsStyleMode;\n  onThresholdsChange?: (thresholds: ThresholdsConfig) => void;\n}\n\n/** The VizWrapper is just a simple component that renders either a table or a graph based on the type of data we receive from \"PanelData\" */\nexport const VizWrapper = ({ data, thresholds, thresholdsType }: Props) => {\n  const styles = useStyles2(getStyles);\n  const isTimeSeriesData = isTimeSeriesFrames(data.series);\n  const statusMessage = getStatusMessage(data);\n  const thresholdsStyle = thresholdsType ? { mode: thresholdsType } : undefined;\n  const timeRange = {\n    from: data.timeRange.from.valueOf(),\n    to: data.timeRange.to.valueOf(),\n  };\n\n  return (\n    <div className={styles.wrapper}>\n      <AutoSizer disableHeight>\n        {({ width }) => (\n          <div style={{ width }}>\n            {isTimeSeriesData ? (\n              <GraphContainer\n                statusMessage={statusMessage}\n                data={data.series}\n                eventBus={appEvents}\n                height={300}\n                width={width}\n                absoluteRange={timeRange}\n                timeZone=\"browser\"\n                onChangeTime={() => {}}\n                splitOpenFn={() => {}}\n                loadingState={data.state}\n                thresholdsConfig={thresholds}\n                thresholdsStyle={thresholdsStyle}\n              />\n            ) : (\n              <div className={styles.instantVectorResultWrapper}>\n                <header className={styles.title}>Table</header>\n                <ExpressionResult series={data.series} />\n              </div>\n            )}\n          </div>\n        )}\n      </AutoSizer>\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  wrapper: css`\n    width: 100%;\n    position: relative;\n  `,\n  instantVectorResultWrapper: css`\n    border: solid 1px ${theme.colors.border.medium};\n    border-radius: ${theme.shape.radius.default};\n    padding: 0;\n\n    display: flex;\n    flex-direction: column;\n    flex-wrap: nowrap;\n  `,\n  title: css({\n    label: 'panel-title',\n    padding: theme.spacing(),\n    textOverflow: 'ellipsis',\n    overflow: 'hidden',\n    whiteSpace: 'nowrap',\n    fontSize: theme.typography.h6.fontSize,\n    fontWeight: theme.typography.h6.fontWeight,\n  }),\n});\n","import { compact, memoize, uniq } from 'lodash';\nimport memoizeOne from 'memoize-one';\n\nimport { Edge, Graph, Node } from 'app/core/utils/dag';\nimport { isExpressionQuery } from 'app/features/expressions/guards';\nimport { AlertQuery } from 'app/types/unified-alerting-dto';\n\n// memoized version of _createDagFromQueries to prevent recreating the DAG if no sources or targets are modified\nexport const createDagFromQueries = memoizeOne(\n  _createDagFromQueries,\n  (previous: Parameters<typeof _createDagFromQueries>, next: Parameters<typeof _createDagFromQueries>) => {\n    return fingerPrintQueries(previous[0]) === fingerPrintQueries(next[0]);\n  }\n);\n\n/**\n * Turn the array of alert queries (this means data queries and expressions)\n * in to a DAG, a directed acyclical graph\n */\nexport function _createDagFromQueries(queries: AlertQuery[]): Graph {\n  const graph = new Graph();\n\n  const nodes = queries.map((query) => query.refId);\n  graph.createNodes(nodes);\n\n  queries.forEach((query) => {\n    const source = query.refId;\n    const isMathExpression = isExpressionQuery(query.model) && query.model.type === 'math';\n\n    // some expressions have multiple targets (like the math expression)\n    const targets = isMathExpression\n      ? parseRefsFromMathExpression(query.model.expression ?? '')\n      : [query.model.expression];\n\n    targets.forEach((target) => {\n      const isSelf = source === target;\n\n      if (source && target && !isSelf) {\n        graph.link(target, source);\n      }\n    });\n  });\n\n  return graph;\n}\n\n/**\n * parse an expression like \"$A > $B\" or \"${FOO BAR} > 0\" to an array of refIds\n */\nexport function parseRefsFromMathExpression(input: string): string[] {\n  // we'll use two regular expressions, one for \"${var}\" and one for \"$var\"\n  const r1 = new RegExp(/\\$\\{(?<var>[a-zA-Z0-9_ ]+?)\\}/gm);\n  const r2 = new RegExp(/\\$(?<var>[a-zA-Z0-9_]+)/gm);\n\n  const m1 = Array.from(input.matchAll(r1)).map((m) => m.groups?.var);\n  const m2 = Array.from(input.matchAll(r2)).map((m) => m.groups?.var);\n\n  return compact(uniq([...m1, ...m2]));\n}\n\nexport const getOriginOfRefId = memoize(_getOriginsOfRefId, (refId, graph) => refId + fingerprintGraph(graph));\n\nexport function _getOriginsOfRefId(refId: string, graph: Graph): string[] {\n  const node = graph.getNode(refId);\n\n  let origins: Node[] = [];\n\n  // recurse through \"node > inputEdges > inputNode\"\n  function findChildNode(node: Node) {\n    const inputEdges = node.inputEdges;\n\n    if (inputEdges.length > 0) {\n      inputEdges.forEach((edge) => {\n        if (edge.inputNode) {\n          findChildNode(edge.inputNode);\n        }\n      });\n    } else {\n      origins?.push(node);\n    }\n  }\n\n  findChildNode(node);\n\n  return origins.map((origin) => origin.name);\n}\n\n// create a unique fingerprint of the DAG\nexport function fingerprintGraph(graph: Graph) {\n  return Object.keys(graph.nodes)\n    .map((name) => {\n      const n = graph.nodes[name];\n      let outputEdges = n.outputEdges.map((e: Edge) => e.outputNode?.name).join(', ');\n      let inputEdges = n.inputEdges.map((e: Edge) => e.inputNode?.name).join(', ');\n      return `${n.name}:${outputEdges}:${inputEdges}`;\n    })\n    .join(' ');\n}\n\n// create a unique fingerprint of the array of queries\nexport function fingerPrintQueries(queries: AlertQuery[]) {\n  return queries\n    .map((query) => {\n      const type = isExpressionQuery(query.model) ? query.model.type : query.queryType;\n      return query.refId + (query.model.expression ?? '') + type;\n    })\n    .join();\n}\n","import { xor } from 'lodash';\nimport { ValidateResult } from 'react-hook-form';\n\nimport {\n  DataFrame,\n  isTimeSeriesFrames,\n  LoadingState,\n  PanelData,\n  ThresholdsConfig,\n  ThresholdsMode,\n} from '@grafana/data';\nimport { GraphTresholdsStyleMode } from '@grafana/schema';\nimport { config } from 'app/core/config';\nimport { EvalFunction } from 'app/features/alerting/state/alertDef';\nimport { isExpressionQuery } from 'app/features/expressions/guards';\nimport { ClassicCondition, ExpressionQueryType } from 'app/features/expressions/types';\nimport { AlertQuery } from 'app/types/unified-alerting-dto';\n\nimport { RuleFormType } from '../../types/rule-form';\n\nimport { createDagFromQueries, getOriginOfRefId } from './dag';\n\nexport function queriesWithUpdatedReferences(\n  queries: AlertQuery[],\n  previousRefId: string,\n  newRefId: string\n): AlertQuery[] {\n  return queries.map((query) => {\n    if (previousRefId === newRefId) {\n      return query;\n    }\n\n    if (!isExpressionQuery(query.model)) {\n      return query;\n    }\n\n    const isMathExpression = query.model.type === 'math';\n    const isReduceExpression = query.model.type === 'reduce';\n    const isResampleExpression = query.model.type === 'resample';\n    const isClassicExpression = query.model.type === 'classic_conditions';\n    const isThresholdExpression = query.model.type === 'threshold';\n\n    if (isMathExpression) {\n      return {\n        ...query,\n        model: {\n          ...query.model,\n          expression: updateMathExpressionRefs(query.model.expression ?? '', previousRefId, newRefId),\n        },\n      };\n    }\n\n    if (isResampleExpression || isReduceExpression || isThresholdExpression) {\n      const isReferencing = query.model.expression === previousRefId;\n\n      return {\n        ...query,\n        model: {\n          ...query.model,\n          expression: isReferencing ? newRefId : query.model.expression,\n        },\n      };\n    }\n\n    if (isClassicExpression) {\n      const conditions = query.model.conditions?.map((condition) => ({\n        ...condition,\n        query: {\n          ...condition.query,\n          params: condition.query.params.map((param: string) => (param === previousRefId ? newRefId : param)),\n        },\n      }));\n\n      return { ...query, model: { ...query.model, conditions } };\n    }\n\n    return query;\n  });\n}\n\nexport function updateMathExpressionRefs(expression: string, previousRefId: string, newRefId: string): string {\n  const oldExpression = new RegExp('(\\\\$' + previousRefId + '\\\\b)|(\\\\${' + previousRefId + '})', 'gm');\n  const newExpression = '${' + newRefId + '}';\n\n  return expression.replace(oldExpression, newExpression);\n}\n\nexport function refIdExists(queries: AlertQuery[], refId: string | null): boolean {\n  return queries.find((query) => query.refId === refId) !== undefined;\n}\n\n// some gateways (like Istio) will decode \"/\" and \"\\\" characters – this will cause 404 errors for any API call\n// that includes these values in the URL (ie. /my/path%2fto/resource -> /my/path/to/resource)\n//\n// see https://istio.io/latest/docs/ops/best-practices/security/#customize-your-system-on-path-normalization\nexport function checkForPathSeparator(value: string): ValidateResult {\n  const containsPathSeparator = value.includes('/') || value.includes('\\\\');\n  if (containsPathSeparator) {\n    return 'Cannot contain \"/\" or \"\\\\\" characters';\n  }\n\n  return true;\n}\n\n// this function assumes we've already checked if the data passed in to the function is of the alert condition\nexport function errorFromCurrentCondition(data: PanelData): Error | undefined {\n  if (data.series.length === 0) {\n    return;\n  }\n\n  const isTimeSeriesResults = isTimeSeriesFrames(data.series);\n\n  let error;\n  if (isTimeSeriesResults) {\n    error = new Error('You cannot use time series data as an alert condition, consider adding a reduce expression.');\n  }\n\n  return error;\n}\n\nexport function errorFromPreviewData(data: PanelData): Error | undefined {\n  // give preference to QueryErrors\n  if (data.errors?.length) {\n    return new Error(data.errors[0].message);\n  }\n\n  return;\n}\n\nexport function warningFromSeries(series: DataFrame[]): Error | undefined {\n  const notices = series[0]?.meta?.notices ?? [];\n  const warning = notices.find((notice) => notice.severity === 'warning')?.text;\n\n  return warning ? new Error(warning) : undefined;\n}\n\nexport type ThresholdDefinition = {\n  config: ThresholdsConfig;\n  mode: GraphTresholdsStyleMode;\n};\n\nexport type ThresholdDefinitions = Record<string, ThresholdDefinition>;\n\n/**\n * This function will retrieve threshold definitions for the given array of data and expression queries.\n */\nexport function getThresholdsForQueries(queries: AlertQuery[]) {\n  const thresholds: ThresholdDefinitions = {};\n  const SUPPORTED_EXPRESSION_TYPES = [ExpressionQueryType.threshold, ExpressionQueryType.classic];\n\n  for (const query of queries) {\n    if (!isExpressionQuery(query.model)) {\n      continue;\n    }\n\n    // currently only supporting \"threshold\" & \"classic_condition\" expressions\n    if (!SUPPORTED_EXPRESSION_TYPES.includes(query.model.type)) {\n      continue;\n    }\n\n    if (!Array.isArray(query.model.conditions)) {\n      continue;\n    }\n\n    // if any of the conditions are a \"range\" we switch to an \"area\" threshold view and ignore single threshold values\n    // the time series panel does not support both.\n    const hasRangeThreshold = query.model.conditions.some(isRangeCondition);\n\n    query.model.conditions.forEach((condition) => {\n      const threshold = condition.evaluator.params;\n\n      // \"classic_conditions\" use `condition.query.params[]` and \"threshold\" uses `query.model.expression`\n      const refId = condition.query?.params[0] ?? query.model.expression;\n\n      // if an expression hasn't been linked to a data query yet, it won't have a refId\n      if (!refId) {\n        return;\n      }\n\n      const isRangeThreshold = isRangeCondition(condition);\n\n      try {\n        // create a DAG so we can find the origin of the current expression\n        const graph = createDagFromQueries(queries);\n\n        const originRefIDs = getOriginOfRefId(refId, graph);\n        const originQueries = queries.filter((query) => originRefIDs.includes(query.refId));\n\n        originQueries.forEach((originQuery) => {\n          const originRefID = originQuery.refId;\n\n          // check if the origin is a data query\n          const originIsDataQuery = !isExpressionQuery(originQuery?.model);\n\n          // if yes, add threshold config to the refId of the data Query\n          const hasValidOrigin = Boolean(originIsDataQuery && originRefID);\n\n          // create the initial data structure for this origin refId\n          if (originRefID && !thresholds[originRefID]) {\n            thresholds[originRefID] = {\n              config: {\n                mode: ThresholdsMode.Absolute,\n                steps: [],\n              },\n              mode: GraphTresholdsStyleMode.Line,\n            };\n          }\n\n          if (originRefID && hasValidOrigin && !isRangeThreshold && !hasRangeThreshold) {\n            appendSingleThreshold(originRefID, threshold[0]);\n          } else if (originRefID && hasValidOrigin && isRangeThreshold) {\n            appendRangeThreshold(originRefID, threshold, condition.evaluator.type);\n            thresholds[originRefID].mode = GraphTresholdsStyleMode.LineAndArea;\n          }\n        });\n      } catch (err) {\n        console.error('Failed to parse thresholds', err);\n        return;\n      }\n    });\n  }\n\n  function appendSingleThreshold(refId: string, value: number): void {\n    thresholds[refId].config.steps.push(\n      ...[\n        {\n          value: -Infinity,\n          color: 'transparent',\n        },\n        {\n          value: value,\n          color: config.theme2.colors.error.main,\n        },\n      ]\n    );\n  }\n\n  function appendRangeThreshold(refId: string, values: number[], type: EvalFunction): void {\n    if (type === EvalFunction.IsWithinRange) {\n      thresholds[refId].config.steps.push(\n        ...[\n          {\n            value: -Infinity,\n            color: 'transparent',\n          },\n          {\n            value: values[0],\n            color: config.theme2.colors.error.main,\n          },\n          {\n            value: values[1],\n            color: config.theme2.colors.error.main,\n          },\n          {\n            value: values[1],\n            color: 'transparent',\n          },\n        ]\n      );\n    }\n\n    if (type === EvalFunction.IsOutsideRange) {\n      thresholds[refId].config.steps.push(\n        ...[\n          {\n            value: -Infinity,\n            color: config.theme2.colors.error.main,\n          },\n          // we have to duplicate this value, or the graph will not display the handle in the right color\n          {\n            value: values[0],\n            color: config.theme2.colors.error.main,\n          },\n          {\n            value: values[0],\n            color: 'transparent',\n          },\n          {\n            value: values[1],\n            color: config.theme2.colors.error.main,\n          },\n        ]\n      );\n    }\n\n    // now also sort the threshold values, if we don't then they will look weird in the time series panel\n    // TODO this doesn't work for negative values for now, those need to be sorted inverse\n    thresholds[refId].config.steps.sort((a, b) => a.value - b.value);\n\n    // also make sure we remove any \"undefined\" values from our steps in case the threshold config is incomplete\n    thresholds[refId].config.steps = thresholds[refId].config.steps.filter((step) => step.value !== undefined);\n  }\n\n  return thresholds;\n}\n\nfunction isRangeCondition(condition: ClassicCondition) {\n  return (\n    condition.evaluator.type === EvalFunction.IsWithinRange || condition.evaluator.type === EvalFunction.IsOutsideRange\n  );\n}\n\nexport function getStatusMessage(data: PanelData): string | undefined {\n  const genericErrorMessage = 'Failed to fetch data';\n  if (data.state !== LoadingState.Error) {\n    return;\n  }\n\n  const errors = data.errors;\n  if (errors?.length) {\n    return errors.map((error) => error.message ?? genericErrorMessage).join(', ');\n  }\n\n  return data.error?.message ?? genericErrorMessage;\n}\n\nexport function translateRouteParamToRuleType(param = ''): RuleFormType {\n  if (param === 'recording') {\n    return RuleFormType.cloudRecording;\n  }\n\n  return RuleFormType.grafana;\n}\n\n/**\n * This function finds what refIds have been updated given the previous Array of queries and an Array of updated data queries.\n * All expression queries are discarded from the arrays, since we have separate handlers for those (see \"onUpdateRefId\") of the ExpressionEditor\n *\n * This code assumes not more than 1 query refId has changed per \"onChangeQueries\",\n */\nexport function findRenamedDataQueryReferences(\n  previousQueries: AlertQuery[],\n  updatedQueries: AlertQuery[]\n): [string, string] {\n  const updatedDataQueries = updatedQueries\n    .filter((query) => !isExpressionQuery(query.model))\n    .map((query) => query.refId);\n  const previousDataQueries = previousQueries\n    .filter((query) => !isExpressionQuery(query.model))\n    .map((query) => query.refId);\n\n  // given the following two arrays\n  // ['A', 'B', 'C'] and ['FOO', 'B' 'C']\n  // the \"xor\" function will return ['A', 'FOO'] because those are not in both arrays\n  const [oldRefId, newRefId] = xor(previousDataQueries, updatedDataQueries);\n\n  return [oldRefId, newRefId];\n}\n","import { useMemo } from 'react';\n\nimport { getDataSourceSrv } from '@grafana/runtime';\nimport { isExpressionReference } from '@grafana/runtime/src/utils/DataSourceWithBackend';\nimport { AlertQuery } from 'app/types/unified-alerting-dto';\n\nexport function useAlertQueriesStatus(queries: AlertQuery[]) {\n  const allDataSourcesAvailable = useMemo(\n    () =>\n      queries\n        .filter((query) => !isExpressionReference(query.datasourceUid))\n        .every((query) => {\n          const instanceSettings = getDataSourceSrv().getInstanceSettings(query.datasourceUid);\n          return Boolean(instanceSettings);\n        }),\n    [queries]\n  );\n\n  return { allDataSourcesAvailable };\n}\n","import { RelativeTimeRange } from '@grafana/data';\nimport { AlertQuery } from 'app/types/unified-alerting-dto';\n\nimport { ExpressionQuery, ExpressionQueryType } from '../../../expressions/types';\n\nconst FALL_BACK_TIME_RANGE = { from: 21600, to: 0 };\n\nexport const getTimeRangeForExpression = (query: ExpressionQuery, queries: AlertQuery[]): RelativeTimeRange => {\n  const referencedRefIds: string[] | undefined = getReferencedIds(query, queries);\n\n  if (!referencedRefIds) {\n    return FALL_BACK_TIME_RANGE;\n  }\n\n  const { from, to } = getTimeRanges(referencedRefIds, queries);\n\n  if (!from.length && !to.length) {\n    return FALL_BACK_TIME_RANGE;\n  }\n\n  return {\n    from: Math.max(...from),\n    to: Math.min(...to),\n  };\n};\n\nconst getReferencedIds = (model: ExpressionQuery, queries: AlertQuery[]): string[] | undefined => {\n  switch (model.type) {\n    case ExpressionQueryType.classic:\n      return getReferencedIdsForClassicCondition(model);\n    case ExpressionQueryType.math:\n      return getReferencedIdsForMath(model, queries);\n    case ExpressionQueryType.resample:\n    case ExpressionQueryType.reduce:\n    case ExpressionQueryType.threshold:\n      return getReferencedIdsForReduce(model);\n  }\n};\n\nconst getReferencedIdsForClassicCondition = (model: ExpressionQuery) => {\n  return model.conditions?.map((condition) => {\n    return condition.query.params[0];\n  });\n};\n\nconst getTimeRanges = (referencedRefIds: string[], queries: AlertQuery[]) => {\n  let from: number[] = [];\n  let to = [FALL_BACK_TIME_RANGE.to];\n  for (const referencedRefIdsKey of referencedRefIds) {\n    const query = queries.find((query) => query.refId === referencedRefIdsKey);\n\n    if (!query || !query.relativeTimeRange) {\n      continue;\n    }\n    from.push(query.relativeTimeRange.from);\n    to.push(query.relativeTimeRange.to);\n  }\n\n  return {\n    from,\n    to,\n  };\n};\n\nconst getReferencedIdsForMath = (model: ExpressionQuery, queries: AlertQuery[]) => {\n  return (\n    queries\n      // filter queries of type query and filter expression on if it includes any refIds\n      .filter((q) => q.queryType === 'query' && model.expression?.includes(q.refId))\n      .map((q) => {\n        return q.refId;\n      })\n  );\n};\n\nconst getReferencedIdsForReduce = (model: ExpressionQuery) => {\n  return model.expression ? [model.expression] : undefined;\n};\n","import { reject } from 'lodash';\nimport { Observable, of, OperatorFunction, ReplaySubject, Unsubscribable } from 'rxjs';\nimport { catchError, map, share } from 'rxjs/operators';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport {\n  dataFrameFromJSON,\n  DataFrameJSON,\n  getDefaultTimeRange,\n  LoadingState,\n  PanelData,\n  preProcessPanelData,\n  rangeUtil,\n  TimeRange,\n  withLoadingIndicator,\n} from '@grafana/data';\nimport { DataSourceWithBackend, FetchResponse, getDataSourceSrv, toDataQueryError } from '@grafana/runtime';\nimport { BackendSrv, getBackendSrv } from 'app/core/services/backend_srv';\nimport { isExpressionQuery } from 'app/features/expressions/guards';\nimport { cancelNetworkRequestsOnUnsubscribe } from 'app/features/query/state/processing/canceler';\nimport { setStructureRevision } from 'app/features/query/state/processing/revision';\nimport { AlertQuery } from 'app/types/unified-alerting-dto';\n\nimport { getTimeRangeForExpression } from '../utils/timeRange';\n\nexport interface AlertingQueryResult {\n  error?: string;\n  status?: number; // HTTP status error\n  frames: DataFrameJSON[];\n}\n\nexport interface AlertingQueryResponse {\n  results: Record<string, AlertingQueryResult>;\n}\nexport class AlertingQueryRunner {\n  private subject: ReplaySubject<Record<string, PanelData>>;\n  private subscription?: Unsubscribable;\n  private lastResult: Record<string, PanelData>;\n\n  constructor(\n    private backendSrv = getBackendSrv(),\n    private dataSourceSrv = getDataSourceSrv()\n  ) {\n    this.subject = new ReplaySubject(1);\n    this.lastResult = {};\n  }\n\n  get(): Observable<Record<string, PanelData>> {\n    return this.subject.asObservable();\n  }\n\n  async run(queries: AlertQuery[], condition: string) {\n    const empty = initialState(queries, LoadingState.Done);\n    const queriesToExclude: string[] = [];\n\n    // do not execute if one more of the queries are not runnable,\n    // for example not completely configured\n    for (const query of queries) {\n      const refId = query.model.refId;\n\n      if (isExpressionQuery(query.model)) {\n        continue;\n      }\n\n      const dataSourceInstance = await this.dataSourceSrv.get(query.datasourceUid);\n      const skipRunningQuery =\n        dataSourceInstance instanceof DataSourceWithBackend &&\n        dataSourceInstance.filterQuery &&\n        !dataSourceInstance.filterQuery(query.model);\n\n      if (skipRunningQuery) {\n        queriesToExclude.push(refId);\n      }\n    }\n\n    const queriesToRun = reject(queries, (q) => queriesToExclude.includes(q.model.refId));\n\n    if (queriesToRun.length === 0) {\n      return this.subject.next(empty);\n    }\n\n    this.subscription = runRequest(this.backendSrv, queriesToRun, condition).subscribe({\n      next: (dataPerQuery) => {\n        const nextResult = applyChange(dataPerQuery, (refId, data) => {\n          const previous = this.lastResult[refId];\n          const preProcessed = preProcessPanelData(data, previous);\n          return setStructureRevision(preProcessed, previous);\n        });\n\n        this.lastResult = nextResult;\n        this.subject.next(this.lastResult);\n      },\n\n      error: (error: Error) => {\n        this.lastResult = mapErrorToPanelData(this.lastResult, error);\n        this.subject.next(this.lastResult);\n      },\n    });\n  }\n\n  cancel() {\n    if (!this.subscription) {\n      return;\n    }\n    this.subscription.unsubscribe();\n\n    let requestIsRunning = false;\n\n    const nextResult = applyChange(this.lastResult, (refId, data) => {\n      if (data.state === LoadingState.Loading) {\n        requestIsRunning = true;\n      }\n\n      return {\n        ...data,\n        state: LoadingState.Done,\n      };\n    });\n\n    if (requestIsRunning) {\n      this.subject.next(nextResult);\n    }\n  }\n\n  destroy() {\n    if (this.subject) {\n      this.subject.complete();\n    }\n\n    this.cancel();\n  }\n}\n\nconst runRequest = (\n  backendSrv: BackendSrv,\n  queries: AlertQuery[],\n  condition: string\n): Observable<Record<string, PanelData>> => {\n  const initial = initialState(queries, LoadingState.Loading);\n  const request = {\n    data: { data: queries, condition },\n    url: '/api/v1/eval',\n    method: 'POST',\n    requestId: uuidv4(),\n  };\n\n  return withLoadingIndicator({\n    whileLoading: initial,\n    source: backendSrv.fetch<AlertingQueryResponse>(request).pipe(\n      mapToPanelData(initial),\n      catchError((error) => of(mapErrorToPanelData(initial, error))),\n      cancelNetworkRequestsOnUnsubscribe(backendSrv, request.requestId),\n      share()\n    ),\n  });\n};\n\nconst initialState = (queries: AlertQuery[], state: LoadingState): Record<string, PanelData> => {\n  return queries.reduce((dataByQuery: Record<string, PanelData>, query) => {\n    dataByQuery[query.refId] = {\n      state,\n      series: [],\n      timeRange: getTimeRange(query, queries),\n    };\n\n    return dataByQuery;\n  }, {});\n};\n\nconst getTimeRange = (query: AlertQuery, queries: AlertQuery[]): TimeRange => {\n  if (isExpressionQuery(query.model)) {\n    const relative = getTimeRangeForExpression(query.model, queries);\n    return rangeUtil.relativeToTimeRange(relative);\n  }\n\n  if (!query.relativeTimeRange) {\n    console.warn(`Query with refId: ${query.refId} did not have any relative time range, using default.`);\n    return getDefaultTimeRange();\n  }\n\n  return rangeUtil.relativeToTimeRange(query.relativeTimeRange);\n};\n\nconst mapToPanelData = (\n  dataByQuery: Record<string, PanelData>\n): OperatorFunction<FetchResponse<AlertingQueryResponse>, Record<string, PanelData>> => {\n  return map((response) => {\n    const { data } = response;\n    const results: Record<string, PanelData> = {};\n\n    for (const [refId, result] of Object.entries(data.results)) {\n      const { error, status, frames = [] } = result;\n\n      // extract errors from the /eval results\n      const errors = error ? [{ message: error, refId, status }] : [];\n\n      results[refId] = {\n        errors,\n        timeRange: dataByQuery[refId].timeRange,\n        state: LoadingState.Done,\n        series: frames.map(dataFrameFromJSON),\n      };\n    }\n\n    return results;\n  });\n};\n\nconst mapErrorToPanelData = (lastResult: Record<string, PanelData>, error: Error): Record<string, PanelData> => {\n  const queryError = toDataQueryError(error);\n\n  return applyChange(lastResult, (refId, data) => {\n    return {\n      ...data,\n      state: LoadingState.Error,\n      error: queryError,\n    };\n  });\n};\n\nconst applyChange = (\n  initial: Record<string, PanelData>,\n  change: (refId: string, data: PanelData) => PanelData\n): Record<string, PanelData> => {\n  const nextResult: Record<string, PanelData> = {};\n\n  for (const [refId, data] of Object.entries(initial)) {\n    nextResult[refId] = change(refId, data);\n  }\n\n  return nextResult;\n};\n","import { isExpressionReference } from '@grafana/runtime/src/utils/DataSourceWithBackend';\nimport { DataQuery } from '@grafana/schema';\n\nimport { ExpressionQuery, ExpressionQueryType } from './types';\n\nexport const isExpressionQuery = (dataQuery?: DataQuery): dataQuery is ExpressionQuery => {\n  if (!dataQuery) {\n    return false;\n  }\n\n  if (isExpressionReference(dataQuery.datasource)) {\n    return true;\n  }\n\n  const expression = dataQuery as ExpressionQuery;\n\n  if (typeof expression.type !== 'string') {\n    return false;\n  }\n  return Object.values(ExpressionQueryType).includes(expression.type);\n};\n"],"names":["getSeriesName","frame","firstField","getSeriesValue","value","getSeriesLabels","formatLabels","labels","key","isEmptySeries","series","serie","field","Expression","queries","query","data","error","warning","isAlertCondition","onSetCondition","onUpdateRefId","onRemoveExpression","onUpdateExpressionType","onChangeQuery","styles","getStyles","queryType","setError","clearErrors","onQueriesValidationError","errorMsg","isLoading","d","hasResults","alertCondition","seriesCount","groupedByState","getGroupedByStateAndSeriesCount","renderExpressionType","availableRefIds","q","Reduce","Resample","ClassicConditions","Threshold","selectedExpressionDescription","o","Header","newRefId","type","ExpressionResult","Stack","Spacer","PreviewSummary","PAGE_SIZE","pageItems","previousPage","nextPage","numberOfPages","pageStart","pageEnd","usePagination","emptyResults","isTimeSeriesResults","shouldShowPagination","index","TimeseriesRow","FrameRow","Button","firing","normal","isCondition","mutedText","noDataSeries","refId","clearButton","editMode","setEditMode","editingRefId","AutoSizeInput","event","ExpressionStatusIndicator","IconButton","name","labelsRecord","hasLabels","showFiring","showNormal","title","AlertStateTag","valueField","timestamps","getTimestampFromIndex","getValueFromIndex","HoverCard","_","theme","elements","VizWrapper","thresholds","thresholdsType","isTimeSeriesData","statusMessage","thresholdsStyle","timeRange","width","createDagFromQueries","_createDagFromQueries","previous","next","fingerPrintQueries","graph","nodes","source","parseRefsFromMathExpression","target","input","r1","r2","m1","m","m2","getOriginOfRefId","_getOriginsOfRefId","fingerprintGraph","node","origins","findChildNode","inputEdges","edge","origin","n","outputEdges","e","queriesWithUpdatedReferences","previousRefId","isMathExpression","isReduceExpression","isResampleExpression","isClassicExpression","isThresholdExpression","updateMathExpressionRefs","isReferencing","conditions","condition","param","expression","oldExpression","newExpression","refIdExists","checkForPathSeparator","errorFromCurrentCondition","errorFromPreviewData","warningFromSeries","notice","getThresholdsForQueries","SUPPORTED_EXPRESSION_TYPES","hasRangeThreshold","isRangeCondition","threshold","isRangeThreshold","originRefIDs","originQuery","originRefID","hasValidOrigin","appendSingleThreshold","appendRangeThreshold","err","config","values","a","b","step","getStatusMessage","genericErrorMessage","errors","translateRouteParamToRuleType","findRenamedDataQueryReferences","previousQueries","updatedQueries","updatedDataQueries","previousDataQueries","oldRefId","useAlertQueriesStatus","FALL_BACK_TIME_RANGE","getTimeRangeForExpression","referencedRefIds","getReferencedIds","from","to","getTimeRanges","model","getReferencedIdsForClassicCondition","getReferencedIdsForMath","getReferencedIdsForReduce","referencedRefIdsKey","AlertingQueryRunner","backendSrv","dataSourceSrv","ReplaySubject","empty","initialState","queriesToExclude","dataSourceInstance","DataSourceWithBackend","queriesToRun","runRequest","dataPerQuery","nextResult","applyChange","preProcessed","mapErrorToPanelData","requestIsRunning","initial","request","withLoadingIndicator","mapToPanelData","catchError","of","share","state","dataByQuery","getTimeRange","relative","map","response","results","result","status","frames","lastResult","queryError","toDataQueryError","change","isExpressionQuery","dataQuery"],"sourceRoot":""}