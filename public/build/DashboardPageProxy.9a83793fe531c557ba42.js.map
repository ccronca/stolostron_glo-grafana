{"version":3,"file":"DashboardPageProxy.9a83793fe531c557ba42.js","mappings":"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","sources":["webpack://grafana/./public/app/features/alerting/getAlertingValidationMessage.ts","webpack://grafana/./public/app/features/alerting/unified/components/Provisioning.tsx","webpack://grafana/./public/app/features/dashboard-scene/pages/DashboardScenePage.tsx","webpack://grafana/./public/app/core/navigation/kiosk.ts","webpack://grafana/./public/app/features/plugins/angularDeprecation/AngularDeprecationNotice.tsx","webpack://grafana/./public/app/features/storage/StorageFolderPage.tsx","webpack://grafana/./public/app/features/dashboard/components/AddWidgetModal/AddWidgetModal.tsx","webpack://grafana/./public/app/features/library-panels/components/SaveLibraryPanelModal/SaveLibraryPanelModal.tsx","webpack://grafana/./public/app/features/dashboard/components/PanelEditor/state/actions.ts","webpack://grafana/./public/app/features/dashboard/components/SaveDashboard/UnsavedChangesModal.tsx","webpack://grafana/./public/app/features/dashboard/components/DashboardPrompt/DashboardPrompt.tsx","webpack://grafana/./public/app/features/dashboard/components/HelpWizard/SupportSnapshotService.ts","webpack://grafana/./public/app/features/dashboard/components/HelpWizard/HelpWizard.tsx","webpack://grafana/./public/app/features/dashboard/components/PanelEditor/usePanelLatestData.ts","webpack://grafana/./public/app/features/inspector/InspectMetadataTab.tsx","webpack://grafana/./public/app/features/dashboard/components/Inspector/InspectContent.tsx","webpack://grafana/./public/app/features/dashboard/components/Inspector/PanelInspector.tsx","webpack://grafana/./public/app/features/variables/pickers/PickerRenderer.tsx","webpack://grafana/./public/app/features/dashboard/components/SubMenu/SubMenuItems.tsx","webpack://grafana/./public/app/features/dashboard/components/PanelEditor/state/utils.ts","webpack://grafana/./public/app/features/dashboard/components/PanelEditor/AngularPanelOptions.tsx","webpack://grafana/./public/app/features/dashboard/components/PanelEditor/DynamicConfigValueEditor.tsx","webpack://grafana/./public/app/features/dashboard/components/PanelEditor/OverrideCategoryTitle.tsx","webpack://grafana/./public/app/features/dashboard/components/PanelEditor/getFieldOverrideElements.tsx","webpack://grafana/./public/app/features/library-panels/components/LibraryPanelInfo/LibraryPanelInfo.tsx","webpack://grafana/./public/app/features/dashboard/components/PanelEditor/getLibraryPanelOptions.tsx","webpack://grafana/./public/app/features/dashboard/components/GenAI/GenAIPanelDescriptionButton.tsx","webpack://grafana/./public/app/features/dashboard/components/GenAI/GenAIPanelTitleButton.tsx","webpack://grafana/./public/app/features/dashboard/components/PanelEditor/getPanelFrameOptions.tsx","webpack://grafana/./public/app/features/dashboard/components/PanelEditor/state/OptionSearchEngine.ts","webpack://grafana/./public/app/features/dashboard/components/PanelEditor/state/getRecentOptions.ts","webpack://grafana/./public/app/features/dashboard/components/PanelEditor/OptionsPaneOptions.tsx","webpack://grafana/./public/app/features/dashboard/state/selectors.ts","webpack://grafana/./public/app/features/dashboard/components/PanelEditor/VisualizationButton.tsx","webpack://grafana/./public/app/features/library-panels/components/ChangeLibraryPanelModal/ChangeLibraryPanelModal.tsx","webpack://grafana/./public/app/features/library-panels/components/PanelLibraryOptionsGroup/PanelLibraryOptionsGroup.tsx","webpack://grafana/./public/app/features/panel/state/getAllSuggestions.ts","webpack://grafana/./public/app/features/panel/components/VizTypePicker/VisualizationSuggestionCard.tsx","webpack://grafana/./public/app/features/panel/components/VizTypePicker/VisualizationSuggestions.tsx","webpack://grafana/./public/app/features/dashboard/components/PanelEditor/VisualizationSelectPane.tsx","webpack://grafana/./public/app/features/dashboard/components/PanelEditor/OptionsPane.tsx","webpack://grafana/./public/app/features/dashboard/components/PanelEditor/PanelHeaderCorner.tsx","webpack://grafana/./public/app/features/dashboard/components/PanelEditor/PanelEditorTableView.tsx","webpack://grafana/./public/app/features/dashboard/components/PanelEditor/PanelNotSupported.tsx","webpack://grafana/./public/app/features/alerting/StateHistory.tsx","webpack://grafana/./public/app/features/alerting/TestRuleResult.tsx","webpack://grafana/./public/app/features/alerting/AlertTab.tsx","webpack://grafana/./public/app/features/alerting/unified/components/panel-alerts-tab/NewRuleFromPanelButton.tsx","webpack://grafana/./public/app/features/alerting/unified/hooks/usePanelCombinedRules.ts","webpack://grafana/./public/app/features/alerting/unified/PanelAlertTabContent.tsx","webpack://grafana/./public/app/features/alerting/AlertTabIndex.tsx","webpack://grafana/./public/app/features/alerting/unified/PanelAlertTab.tsx","webpack://grafana/./public/app/features/dashboard/components/TransformationsEditor/TransformationEditor.tsx","webpack://grafana/./public/app/features/dashboard/components/TransformationsEditor/TransformationEditorHelperModal.tsx","webpack://grafana/./public/app/features/dashboard/components/TransformationsEditor/TransformationFilter.tsx","webpack://grafana/./public/app/features/dashboard/components/TransformationsEditor/TransformationOperationRow.tsx","webpack://grafana/./public/app/features/dashboard/components/TransformationsEditor/TransformationOperationRows.tsx","webpack://grafana/./public/app/core/utils/docsLinks.ts","webpack://grafana/./public/app/features/dashboard/components/TransformationsEditor/TransformationPicker.tsx","webpack://grafana/./public/app/features/dashboard/components/TransformationsEditor/TransformationPickerNg.tsx","webpack://grafana/./public/app/features/dashboard/components/TransformationsEditor/TransformationsEditor.tsx","webpack://grafana/./public/app/features/dashboard/components/PanelEditor/PanelEditorQueries.tsx","webpack://grafana/./public/app/features/dashboard/components/PanelEditor/PanelEditorTabs.tsx","webpack://grafana/./public/app/features/dashboard/components/PanelEditor/PanelEditor.tsx","webpack://grafana/./public/app/features/dashboard/components/SubMenu/AnnotationPicker.tsx","webpack://grafana/./public/app/features/dashboard/components/SubMenu/Annotations.tsx","webpack://grafana/./public/app/features/dashboard/components/SubMenu/DashboardLinks.tsx","webpack://grafana/./public/app/features/dashboard/components/SubMenu/SubMenu.tsx","webpack://grafana/./public/app/features/dashboard/containers/DashboardPage.tsx","webpack://grafana/./public/app/features/dashboard/containers/DashboardPageProxy.tsx","webpack://grafana/./public/app/features/storage/storage.ts","webpack://grafana/./public/app/plugins/panel/geomap/editor/FrameSelectionEditor.tsx"],"sourcesContent":["import { DataQuery, DataSourceRef, DataTransformerConfig } from '@grafana/data';\nimport { DataSourceSrv } from '@grafana/runtime';\n\nexport const getDefaultCondition = () => ({\n  type: 'query',\n  query: { params: ['A', '5m', 'now'] },\n  reducer: { type: 'avg', params: [] },\n  evaluator: { type: 'gt', params: [null] },\n  operator: { type: 'and' },\n});\n\nexport const getAlertingValidationMessage = async (\n  transformations: DataTransformerConfig[] | undefined,\n  targets: DataQuery[],\n  datasourceSrv: DataSourceSrv,\n  datasource: DataSourceRef | null\n): Promise<string> => {\n  if (targets.length === 0) {\n    return 'Could not find any metric queries';\n  }\n\n  if (transformations && transformations.length) {\n    return 'Transformations are not supported in alert queries';\n  }\n\n  let alertingNotSupported = 0;\n  let templateVariablesNotSupported = 0;\n\n  for (const target of targets) {\n    const dsRef = target.datasource || datasource;\n    const ds = await datasourceSrv.get(dsRef);\n    if (!ds.meta.alerting) {\n      alertingNotSupported++;\n    } else if (ds.targetContainsTemplate && ds.targetContainsTemplate(target)) {\n      templateVariablesNotSupported++;\n    }\n  }\n\n  if (alertingNotSupported === targets.length) {\n    return 'The datasource does not support alerting queries';\n  }\n\n  if (templateVariablesNotSupported === targets.length) {\n    return 'Template variables are not supported in alert queries';\n  }\n\n  return '';\n};\n","import React from 'react';\n\nimport { Alert, Badge } from '@grafana/ui';\n\nexport enum ProvisionedResource {\n  ContactPoint = 'contact point',\n  Template = 'template',\n  MuteTiming = 'mute timing',\n  AlertRule = 'alert rule',\n  RootNotificationPolicy = 'root notification policy',\n}\n\ninterface ProvisioningAlertProps {\n  resource: ProvisionedResource;\n}\n\nexport const ProvisioningAlert = ({ resource }: ProvisioningAlertProps) => {\n  return (\n    <Alert title={`This ${resource} cannot be edited through the UI`} severity=\"info\">\n      This {resource} has been provisioned, that means it was created by config. Please contact your server admin to\n      update this {resource}.\n    </Alert>\n  );\n};\n\nexport const ProvisioningBadge = () => {\n  return <Badge text={'Provisioned'} color={'purple'} />;\n};\n","// Libraries\nimport React, { useEffect } from 'react';\n\nimport { PageLayoutType } from '@grafana/data';\nimport { Page } from 'app/core/components/Page/Page';\nimport PageLoader from 'app/core/components/PageLoader/PageLoader';\nimport { GrafanaRouteComponentProps } from 'app/core/navigation/types';\nimport { DashboardPageRouteParams } from 'app/features/dashboard/containers/types';\nimport { DashboardRoutes } from 'app/types';\n\nimport { getDashboardScenePageStateManager } from './DashboardScenePageStateManager';\n\nexport interface Props extends GrafanaRouteComponentProps<DashboardPageRouteParams> {}\n\nexport function DashboardScenePage({ match, route }: Props) {\n  const stateManager = getDashboardScenePageStateManager();\n  const { dashboard, isLoading, loadError } = stateManager.useState();\n\n  useEffect(() => {\n    if (route.routeName === DashboardRoutes.Home) {\n      stateManager.loadDashboard(route.routeName);\n    } else {\n      stateManager.loadDashboard(match.params.uid!);\n    }\n\n    return () => {\n      stateManager.clearState();\n    };\n  }, [stateManager, match.params.uid, route.routeName]);\n\n  if (!dashboard) {\n    return (\n      <Page layout={PageLayoutType.Canvas} data-testid={'dashboard-scene-page'}>\n        {isLoading && <PageLoader />}\n        {loadError && <h2>{loadError}</h2>}\n      </Page>\n    );\n  }\n\n  return <dashboard.Component model={dashboard} />;\n}\n\nexport default DashboardScenePage;\n","import { UrlQueryMap } from '@grafana/data';\n\nimport { KioskMode } from '../../types';\n\n// TODO Remove after topnav feature toggle is permanent and old NavBar is removed\nexport function getKioskMode(queryParams: UrlQueryMap): KioskMode | null {\n  switch (queryParams.kiosk) {\n    case 'tv':\n      return KioskMode.TV;\n    //  legacy support\n    case '1':\n    case true:\n      return KioskMode.Full;\n    default:\n      return null;\n  }\n}\n","import React from 'react';\n\nimport { reportInteraction } from '@grafana/runtime';\nimport { Alert } from '@grafana/ui';\nimport { LocalStorageValueProvider } from 'app/core/components/LocalStorageValueProvider';\n\nconst LOCAL_STORAGE_KEY_PREFIX = 'grafana.angularDeprecation.dashboardNotice.isDismissed';\n\nfunction localStorageKey(dashboardUid: string): string {\n  return LOCAL_STORAGE_KEY_PREFIX + '.' + dashboardUid;\n}\n\nexport interface Props {\n  dashboardUid: string;\n}\n\nexport function AngularDeprecationNotice({ dashboardUid }: Props) {\n  return (\n    <LocalStorageValueProvider<boolean> storageKey={localStorageKey(dashboardUid)} defaultValue={false}>\n      {(isDismissed, onDismiss) => {\n        if (isDismissed) {\n          return null;\n        }\n        return (\n          <div>\n            <Alert\n              severity=\"warning\"\n              title=\"This dashboard depends on Angular, which is deprecated and will stop working in future releases of Grafana.\"\n              onRemove={() => {\n                reportInteraction('angular_deprecation_notice_dismissed');\n                onDismiss(true);\n              }}\n            >\n              <div className=\"markdown-html\">\n                <ul>\n                  <li>\n                    <a\n                      href=\"https://grafana.com/docs/grafana/latest/developers/angular_deprecation/\"\n                      className=\"external-link\"\n                      target=\"_blank\"\n                      rel=\"noreferrer\"\n                    >\n                      Read our deprecation notice and migration advice.\n                    </a>\n                  </li>\n                </ul>\n              </div>\n            </Alert>\n          </div>\n        );\n      }}\n    </LocalStorageValueProvider>\n  );\n}\n","import React from 'react';\nimport { useAsync } from 'react-use';\n\nimport { DataFrame, NavModel, NavModelItem } from '@grafana/data';\nimport { Card, Icon, Spinner } from '@grafana/ui';\nimport { Page } from 'app/core/components/Page/Page';\nimport { GrafanaRouteComponentProps } from 'app/core/navigation/types';\n\nimport { getGrafanaStorage } from './storage';\n\nexport interface Props extends GrafanaRouteComponentProps<{ slug: string }> {}\n\nexport function StorageFolderPage(props: Props) {\n  const slug = props.match.params.slug ?? '';\n  const listing = useAsync((): Promise<DataFrame | undefined> => {\n    return getGrafanaStorage().list('content/' + slug);\n  }, [slug]);\n\n  const childRoot = slug.length > 0 ? `g/${slug}/` : 'g/';\n  const pageNav = getPageNavFromSlug(slug);\n\n  const renderListing = () => {\n    if (listing.value) {\n      const names = listing.value.fields[0].values;\n      return names.map((item: string) => {\n        let name = item;\n        const isFolder = name.indexOf('.') < 0;\n        const isDash = !isFolder && name.endsWith('.json');\n        const url = `${childRoot}${name}`;\n\n        return (\n          <Card key={name} href={isFolder || isDash ? url : undefined}>\n            <Card.Heading>{name}</Card.Heading>\n            <Card.Figure>\n              <Icon name={isFolder ? 'folder' : isDash ? 'gf-grid' : 'file-alt'} size=\"sm\" />\n            </Card.Figure>\n          </Card>\n        );\n      });\n    }\n    if (listing.loading) {\n      return <Spinner />;\n    }\n    return <div>?</div>;\n  };\n\n  const navModel = getRootContentNavModel();\n\n  return (\n    <Page navModel={navModel} pageNav={pageNav}>\n      {renderListing()}\n    </Page>\n  );\n}\n\nexport function getPageNavFromSlug(slug: string) {\n  const parts = slug.split('/');\n  let pageNavs: NavModelItem[] = [];\n  let url = 'g';\n  let lastPageNav: NavModelItem | undefined;\n\n  for (let i = 0; i < parts.length; i++) {\n    url += `/${parts[i]}`;\n    pageNavs.push({ text: parts[i], url, parentItem: lastPageNav });\n    lastPageNav = pageNavs[pageNavs.length - 1];\n  }\n\n  return lastPageNav;\n}\n\nexport function getRootContentNavModel(): NavModel {\n  return { main: { text: 'C:' }, node: { text: 'Content', url: '/g' } };\n}\n\nexport default StorageFolderPage;\n","import { css } from '@emotion/css';\nimport React, { useMemo, useState } from 'react';\n\nimport { GrafanaTheme2, PanelPluginMeta } from '@grafana/data';\nimport { locationService } from '@grafana/runtime';\nimport { CustomScrollbar, Icon, Input, Modal, useStyles2 } from '@grafana/ui';\nimport { onCreateNewWidgetPanel } from 'app/features/dashboard/utils/dashboard';\nimport { VizTypePickerPlugin } from 'app/features/panel/components/VizTypePicker/VizTypePickerPlugin';\nimport { filterPluginList, getWidgetPluginMeta } from 'app/features/panel/state/util';\nimport { useSelector } from 'app/types';\n\nexport const AddWidgetModal = () => {\n  const styles = useStyles2(getStyles);\n  const [searchQuery, setSearchQuery] = useState('');\n  const dashboard = useSelector((state) => state.dashboard.getModel());\n\n  const widgetsList: PanelPluginMeta[] = useMemo(() => {\n    return getWidgetPluginMeta();\n  }, []);\n\n  const filteredWidgetsTypes = useMemo((): PanelPluginMeta[] => {\n    return filterPluginList(widgetsList, searchQuery);\n  }, [widgetsList, searchQuery]);\n\n  const onDismiss = () => {\n    locationService.partial({ addWidget: null });\n  };\n\n  return (\n    <Modal\n      title=\"Select widget type\"\n      closeOnEscape\n      closeOnBackdropClick\n      isOpen\n      className={styles.modal}\n      onClickBackdrop={onDismiss}\n      onDismiss={onDismiss}\n    >\n      <Input\n        type=\"search\"\n        autoFocus\n        className={styles.searchInput}\n        value={searchQuery}\n        prefix={<Icon name=\"search\" />}\n        placeholder=\"Search widget\"\n        onChange={(e) => {\n          setSearchQuery(e.currentTarget.value);\n        }}\n      />\n      <CustomScrollbar>\n        <div className={styles.grid}>\n          {filteredWidgetsTypes.map((plugin, index) => (\n            <VizTypePickerPlugin\n              disabled={false}\n              key={plugin.id}\n              isCurrent={false}\n              plugin={plugin}\n              onClick={(e) => {\n                const id = onCreateNewWidgetPanel(dashboard!, plugin.id);\n                locationService.partial({ editPanel: id, addWidget: null });\n              }}\n            />\n          ))}\n        </div>\n      </CustomScrollbar>\n    </Modal>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  modal: css`\n    width: 65%;\n    max-width: 960px;\n\n    ${theme.breakpoints.down('md')} {\n      width: 100%;\n    }\n  `,\n  searchInput: css`\n    margin-bottom: ${theme.spacing(2)};\n  `,\n  grid: css`\n    display: grid;\n    grid-gap: ${theme.spacing(1)};\n  `,\n});\n","import React, { useCallback, useState } from 'react';\nimport { useAsync, useDebounce } from 'react-use';\n\nimport { Button, Icon, Input, Modal, useStyles2 } from '@grafana/ui';\n\nimport { getConnectedDashboards } from '../../state/api';\nimport { getModalStyles } from '../../styles';\nimport { PanelModelWithLibraryPanel } from '../../types';\nimport { usePanelSave } from '../../utils/usePanelSave';\n\ninterface Props {\n  panel: PanelModelWithLibraryPanel;\n  folderUid: string;\n  isUnsavedPrompt?: boolean;\n  onConfirm: () => void;\n  onDismiss: () => void;\n  onDiscard: () => void;\n}\n\nexport const SaveLibraryPanelModal = ({\n  panel,\n  folderUid,\n  isUnsavedPrompt,\n  onDismiss,\n  onConfirm,\n  onDiscard,\n}: Props) => {\n  const [searchString, setSearchString] = useState('');\n  const dashState = useAsync(async () => {\n    const searchHits = await getConnectedDashboards(panel.libraryPanel.uid);\n    if (searchHits.length > 0) {\n      return searchHits.map((dash) => dash.title);\n    }\n\n    return [];\n  }, [panel.libraryPanel.uid]);\n\n  const [filteredDashboards, setFilteredDashboards] = useState<string[]>([]);\n  useDebounce(\n    () => {\n      if (!dashState.value) {\n        return setFilteredDashboards([]);\n      }\n\n      return setFilteredDashboards(\n        dashState.value.filter((dashName) => dashName.toLowerCase().includes(searchString.toLowerCase()))\n      );\n    },\n    300,\n    [dashState.value, searchString]\n  );\n\n  const { saveLibraryPanel } = usePanelSave();\n  const styles = useStyles2(getModalStyles);\n  const discardAndClose = useCallback(() => {\n    onDiscard();\n  }, [onDiscard]);\n\n  const title = isUnsavedPrompt ? 'Unsaved library panel changes' : 'Save library panel';\n\n  return (\n    <Modal title={title} icon=\"save\" onDismiss={onDismiss} isOpen={true}>\n      <div>\n        <p className={styles.textInfo}>\n          {'This update will affect '}\n          <strong>\n            {panel.libraryPanel.meta?.connectedDashboards}{' '}\n            {panel.libraryPanel.meta?.connectedDashboards === 1 ? 'dashboard' : 'dashboards'}.\n          </strong>\n          The following dashboards using the panel will be affected:\n        </p>\n        <Input\n          className={styles.dashboardSearch}\n          prefix={<Icon name=\"search\" />}\n          placeholder=\"Search affected dashboards\"\n          value={searchString}\n          onChange={(e) => setSearchString(e.currentTarget.value)}\n        />\n        {dashState.loading ? (\n          <p>Loading connected dashboards...</p>\n        ) : (\n          <table className={styles.myTable}>\n            <thead>\n              <tr>\n                <th>Dashboard name</th>\n              </tr>\n            </thead>\n            <tbody>\n              {filteredDashboards.map((dashName, i) => (\n                <tr key={`dashrow-${i}`}>\n                  <td>{dashName}</td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        )}\n        <Modal.ButtonRow>\n          <Button variant=\"secondary\" onClick={onDismiss} fill=\"outline\">\n            Cancel\n          </Button>\n          {isUnsavedPrompt && (\n            <Button variant=\"destructive\" onClick={discardAndClose}>\n              Discard\n            </Button>\n          )}\n          <Button\n            onClick={() => {\n              saveLibraryPanel(panel, folderUid).then(() => {\n                onConfirm();\n              });\n            }}\n          >\n            Update all\n          </Button>\n        </Modal.ButtonRow>\n      </div>\n    </Modal>\n  );\n};\n","import { pick } from 'lodash';\n\nimport store from 'app/core/store';\nimport { removePanel } from 'app/features/dashboard/utils/panel';\nimport { cleanUpPanelState } from 'app/features/panel/state/actions';\nimport { panelModelAndPluginReady } from 'app/features/panel/state/reducers';\nimport { ThunkResult } from 'app/types';\n\nimport { DashboardModel, PanelModel } from '../../../state';\n\nimport {\n  closeEditor,\n  PANEL_EDITOR_UI_STATE_STORAGE_KEY,\n  PanelEditorUIState,\n  setDiscardChanges,\n  setPanelEditorUIState,\n  updateEditorInitState,\n} from './reducers';\n\nexport function initPanelEditor(sourcePanel: PanelModel, dashboard: DashboardModel): ThunkResult<void> {\n  return async (dispatch) => {\n    const panel = dashboard.initEditPanel(sourcePanel);\n\n    dispatch(\n      updateEditorInitState({\n        panel,\n        sourcePanel,\n      })\n    );\n  };\n}\n\nexport function discardPanelChanges(): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const { getPanel } = getStore().panelEditor;\n    getPanel().configRev = 0;\n    dispatch(setDiscardChanges(true));\n  };\n}\n\nexport function updateDuplicateLibraryPanels(\n  modifiedPanel: PanelModel,\n  dashboard: DashboardModel | null\n): ThunkResult<void> {\n  return (dispatch) => {\n    if (modifiedPanel.libraryPanel?.uid === undefined || !dashboard) {\n      return;\n    }\n\n    const modifiedSaveModel = modifiedPanel.getSaveModel();\n    for (const panel of dashboard.panels) {\n      if (skipPanelUpdate(modifiedPanel, panel)) {\n        continue;\n      }\n\n      panel.restoreModel({\n        ...modifiedSaveModel,\n        ...pick(panel, 'gridPos', 'id'),\n      });\n\n      // Loaded plugin is not included in the persisted properties\n      // So is not handled by restoreModel\n      const pluginChanged = panel.plugin?.meta.id !== modifiedPanel.plugin?.meta.id;\n      panel.plugin = modifiedPanel.plugin;\n      panel.configRev++;\n\n      if (pluginChanged) {\n        panel.generateNewKey();\n\n        dispatch(panelModelAndPluginReady({ key: panel.key, plugin: panel.plugin! }));\n      }\n\n      // Resend last query result on source panel query runner\n      // But do this after the panel edit editor exit process has completed\n      setTimeout(() => {\n        panel.getQueryRunner().useLastResultFrom(modifiedPanel.getQueryRunner());\n      }, 20);\n    }\n\n    if (modifiedPanel.repeat) {\n      // We skip any repeated library panels so we need to update them by calling processRepeats\n      // But do this after the panel edit editor exit process has completed\n      setTimeout(() => dashboard.processRepeats(), 20);\n    }\n  };\n}\n\nexport function skipPanelUpdate(modifiedPanel: PanelModel, panelToUpdate: PanelModel): boolean {\n  // don't update library panels that aren't of the same type\n  if (panelToUpdate.libraryPanel?.uid !== modifiedPanel.libraryPanel!.uid) {\n    return true;\n  }\n\n  // don't update the modifiedPanel twice\n  if (panelToUpdate.id && panelToUpdate.id === modifiedPanel.id) {\n    return true;\n  }\n\n  // don't update library panels that are repeated\n  if (panelToUpdate.repeatPanelId) {\n    return true;\n  }\n\n  return false;\n}\n\nexport function exitPanelEditor(): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const dashboard = getStore().dashboard.getModel();\n    const { getPanel, getSourcePanel, shouldDiscardChanges } = getStore().panelEditor;\n    const panel = getPanel();\n\n    if (dashboard) {\n      dashboard.exitPanelEditor();\n    }\n\n    const sourcePanel = getSourcePanel();\n    if (hasPanelChangedInPanelEdit(panel) && !shouldDiscardChanges) {\n      const modifiedSaveModel = panel.getSaveModel();\n      const panelTypeChanged = sourcePanel.type !== panel.type;\n\n      dispatch(updateDuplicateLibraryPanels(panel, dashboard));\n\n      sourcePanel.restoreModel(modifiedSaveModel);\n      sourcePanel.configRev++; // force check the configs\n\n      if (panelTypeChanged) {\n        // Loaded plugin is not included in the persisted properties so is not handled by restoreModel\n        sourcePanel.plugin = panel.plugin;\n        sourcePanel.generateNewKey();\n\n        await dispatch(panelModelAndPluginReady({ key: sourcePanel.key, plugin: panel.plugin! }));\n      }\n\n      // Resend last query result on source panel query runner\n      // But do this after the panel edit editor exit process has completed\n      setTimeout(() => {\n        sourcePanel.getQueryRunner().useLastResultFrom(panel.getQueryRunner());\n        sourcePanel.render();\n\n        // If all changes where saved then reset configRev after applying changes\n        if (panel.hasSavedPanelEditChange && !panel.hasChanged) {\n          sourcePanel.configRev = 0;\n        }\n      }, 20);\n    }\n\n    // A new panel is only new until the first time we exit the panel editor\n    if (sourcePanel.isNew) {\n      if (!shouldDiscardChanges) {\n        delete sourcePanel.isNew;\n      } else {\n        dashboard && removePanel(dashboard, sourcePanel, true);\n      }\n    }\n\n    dispatch(cleanUpPanelState(panel.key));\n    dispatch(closeEditor());\n  };\n}\n\nfunction hasPanelChangedInPanelEdit(panel: PanelModel) {\n  return panel.hasChanged || panel.hasSavedPanelEditChange || panel.isAngularPlugin();\n}\n\nexport function updatePanelEditorUIState(uiState: Partial<PanelEditorUIState>): ThunkResult<void> {\n  return (dispatch, getStore) => {\n    const nextState = { ...getStore().panelEditor.ui, ...uiState };\n    dispatch(setPanelEditorUIState(nextState));\n    try {\n      store.setObject(PANEL_EDITOR_UI_STATE_STORAGE_KEY, nextState);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n}\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { Button, Modal } from '@grafana/ui';\n\nimport { DashboardModel } from '../../state';\n\nimport { SaveDashboardButton } from './SaveDashboardButton';\n\ninterface UnsavedChangesModalProps {\n  dashboard: DashboardModel;\n  onDiscard: () => void;\n  onDismiss: () => void;\n  onSaveSuccess?: () => void;\n}\n\nexport const UnsavedChangesModal = ({ dashboard, onSaveSuccess, onDiscard, onDismiss }: UnsavedChangesModalProps) => {\n  return (\n    <Modal\n      isOpen={true}\n      title=\"Unsaved changes\"\n      onDismiss={onDismiss}\n      icon=\"exclamation-triangle\"\n      className={css`\n        width: 500px;\n      `}\n    >\n      <h5>Do you want to save your changes?</h5>\n      <Modal.ButtonRow>\n        <Button variant=\"secondary\" onClick={onDismiss} fill=\"outline\">\n          Cancel\n        </Button>\n        <Button variant=\"destructive\" onClick={onDiscard}>\n          Discard\n        </Button>\n        <SaveDashboardButton dashboard={dashboard} onSaveSuccess={onSaveSuccess} />\n      </Modal.ButtonRow>\n    </Modal>\n  );\n};\n","import * as H from 'history';\nimport { find } from 'lodash';\nimport React, { useContext, useEffect, useState } from 'react';\nimport { Prompt } from 'react-router-dom';\n\nimport { locationService } from '@grafana/runtime';\nimport { Dashboard } from '@grafana/schema';\nimport { ModalsContext } from '@grafana/ui';\nimport { appEvents } from 'app/core/app_events';\nimport { contextSrv } from 'app/core/services/context_srv';\nimport { SaveLibraryPanelModal } from 'app/features/library-panels/components/SaveLibraryPanelModal/SaveLibraryPanelModal';\nimport { PanelModelWithLibraryPanel } from 'app/features/library-panels/types';\nimport { useDispatch } from 'app/types';\nimport { DashboardSavedEvent } from 'app/types/events';\n\nimport { DashboardModel } from '../../state/DashboardModel';\nimport { discardPanelChanges, exitPanelEditor } from '../PanelEditor/state/actions';\nimport { UnsavedChangesModal } from '../SaveDashboard/UnsavedChangesModal';\n\nexport interface Props {\n  dashboard: DashboardModel;\n}\n\ninterface State {\n  original: object | null;\n  originalPath?: string;\n}\n\nexport const DashboardPrompt = React.memo(({ dashboard }: Props) => {\n  const [state, setState] = useState<State>({ original: null });\n  const dispatch = useDispatch();\n  const { original, originalPath } = state;\n  const { showModal, hideModal } = useContext(ModalsContext);\n\n  useEffect(() => {\n    // This timeout delay is to wait for panels to load and migrate scheme before capturing the original state\n    // This is to minimize unsaved changes warnings due to automatic schema migrations\n    const timeoutId = setTimeout(() => {\n      const originalPath = locationService.getLocation().pathname;\n      const original = dashboard.getSaveModelCloneOld();\n      setState({ originalPath, original });\n    }, 1000);\n\n    const savedEventUnsub = appEvents.subscribe(DashboardSavedEvent, () => {\n      const original = dashboard.getSaveModelCloneOld();\n      setState({ originalPath, original });\n    });\n\n    return () => {\n      clearTimeout(timeoutId);\n      savedEventUnsub.unsubscribe();\n    };\n  }, [dashboard, originalPath]);\n\n  useEffect(() => {\n    const handleUnload = (event: BeforeUnloadEvent) => {\n      if (ignoreChanges(dashboard, original)) {\n        return;\n      }\n      if (hasChanges(dashboard, original)) {\n        event.preventDefault();\n        // No browser actually displays this message anymore.\n        // But Chrome requires it to be defined else the popup won't show.\n        event.returnValue = '';\n      }\n    };\n    window.addEventListener('beforeunload', handleUnload);\n    return () => window.removeEventListener('beforeunload', handleUnload);\n  }, [dashboard, original]);\n\n  const onHistoryBlock = (location: H.Location) => {\n    const panelInEdit = dashboard.panelInEdit;\n    const search = new URLSearchParams(location.search);\n\n    // Are we leaving panel edit & library panel?\n    if (panelInEdit && panelInEdit.libraryPanel && panelInEdit.hasChanged && !search.has('editPanel')) {\n      showModal(SaveLibraryPanelModal, {\n        isUnsavedPrompt: true,\n        panel: dashboard.panelInEdit as PanelModelWithLibraryPanel,\n        folderUid: dashboard.meta.folderUid ?? '',\n        onConfirm: () => {\n          hideModal();\n          moveToBlockedLocationAfterReactStateUpdate(location);\n        },\n        onDiscard: () => {\n          dispatch(discardPanelChanges());\n          moveToBlockedLocationAfterReactStateUpdate(location);\n          hideModal();\n        },\n        onDismiss: hideModal,\n      });\n      return false;\n    }\n\n    // Are we still on the same dashboard?\n    if (originalPath === location.pathname || !original) {\n      // This is here due to timing reasons we want the exit panel editor state changes to happen before router update\n      if (panelInEdit && !search.has('editPanel')) {\n        dispatch(exitPanelEditor());\n      }\n\n      return true;\n    }\n\n    if (ignoreChanges(dashboard, original)) {\n      return true;\n    }\n\n    if (!hasChanges(dashboard, original)) {\n      return true;\n    }\n\n    showModal(UnsavedChangesModal, {\n      dashboard: dashboard,\n      onSaveSuccess: () => {\n        hideModal();\n        moveToBlockedLocationAfterReactStateUpdate(location);\n      },\n      onDiscard: () => {\n        setState({ ...state, original: null });\n        hideModal();\n        moveToBlockedLocationAfterReactStateUpdate(location);\n      },\n      onDismiss: hideModal,\n    });\n\n    return false;\n  };\n\n  return <Prompt when={true} message={onHistoryBlock} />;\n});\n\nDashboardPrompt.displayName = 'DashboardPrompt';\n\nfunction moveToBlockedLocationAfterReactStateUpdate(location?: H.Location | null) {\n  if (location) {\n    setTimeout(() => locationService.push(location), 10);\n  }\n}\n\n/**\n * For some dashboards and users changes should be ignored *\n */\nexport function ignoreChanges(current: DashboardModel | null, original: object | null) {\n  if (!original) {\n    return true;\n  }\n\n  // Ignore changes if original is unsaved\n  if ((original as DashboardModel).version === 0) {\n    return true;\n  }\n\n  // Ignore changes if the user has been signed out\n  if (!contextSrv.isSignedIn) {\n    return true;\n  }\n\n  if (!current) {\n    return true;\n  }\n\n  const { canSave, fromScript, fromFile } = current.meta;\n  if (!contextSrv.isEditor && !canSave) {\n    return true;\n  }\n\n  return !canSave || fromScript || fromFile;\n}\n\n/**\n * Remove stuff that should not count in diff\n */\nfunction cleanDashboardFromIgnoredChanges(dashData: Dashboard) {\n  // need to new up the domain model class to get access to expand / collapse row logic\n  const model = new DashboardModel(dashData);\n\n  // Expand all rows before making comparison. This is required because row expand / collapse\n  // change order of panel array and panel positions.\n  model.expandRows();\n\n  const dash = model.getSaveModelClone();\n\n  // ignore time and refresh\n  delete dash.time;\n  dash.refresh = '';\n  dash.schemaVersion = 0;\n  delete dash.timezone;\n\n  dash.panels = [];\n\n  // ignore template variable values\n  if (dash.templating?.list) {\n    for (const variable of dash.templating.list) {\n      delete variable.current;\n      delete variable.options;\n      // @ts-expect-error\n      delete variable.filters;\n    }\n  }\n\n  return dash;\n}\n\n// TODO: Adapt original to be Dashboard type instead\nexport function hasChanges(current: DashboardModel, original: unknown) {\n  if (current.hasUnsavedChanges()) {\n    return true;\n  }\n\n  // TODO: Make getSaveModelClone return Dashboard type instead\n  const currentClean = cleanDashboardFromIgnoredChanges(current.getSaveModelCloneOld() as unknown as Dashboard);\n  const originalClean = cleanDashboardFromIgnoredChanges(original as Dashboard);\n\n  const currentTimepicker = find((currentClean as any).nav, { type: 'timepicker' });\n  const originalTimepicker = find((originalClean as any).nav, { type: 'timepicker' });\n\n  if (currentTimepicker && originalTimepicker) {\n    currentTimepicker.now = originalTimepicker.now;\n  }\n\n  const currentJson = JSON.stringify(currentClean, null);\n  const originalJson = JSON.stringify(originalClean, null);\n\n  return currentJson !== originalJson;\n}\n","import saveAs from 'file-saver';\n\nimport { dateTimeFormat, formattedValueToString, getValueFormat, SelectableValue } from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport { SceneObject } from '@grafana/scenes';\nimport { StateManagerBase } from 'app/core/services/StateManagerBase';\nimport { createDashboardSceneFromDashboardModel } from 'app/features/dashboard-scene/serialization/transformSaveModelToScene';\n\nimport { getTimeSrv } from '../../services/TimeSrv';\nimport { DashboardModel, PanelModel } from '../../state';\nimport { setDashboardToFetchFromLocalStorage } from '../../state/initDashboard';\n\nimport { Randomize } from './randomizer';\nimport { getDebugDashboard, getGithubMarkdown } from './utils';\n\ninterface SupportSnapshotState {\n  currentTab: SnapshotTab;\n  showMessage: ShowMessage;\n  options: Array<SelectableValue<ShowMessage>>;\n  snapshotText: string;\n  markdownText: string;\n  snapshotSize?: string;\n  randomize: Randomize;\n  loading?: boolean;\n  error?: {\n    title: string;\n    message: string;\n  };\n  panel: PanelModel;\n  panelTitle: string;\n\n  // eslint-disable-next-line\n  snapshot?: any;\n  snapshotUpdate: number;\n  scene?: SceneObject;\n}\n\nexport enum SnapshotTab {\n  Support,\n  Data,\n}\n\nexport enum ShowMessage {\n  PanelSnapshot,\n  GithubComment,\n}\n\nexport class SupportSnapshotService extends StateManagerBase<SupportSnapshotState> {\n  constructor(panel: PanelModel) {\n    super({\n      panel,\n      panelTitle: panel.replaceVariables(panel.title, undefined, 'text') || 'Panel',\n      currentTab: SnapshotTab.Support,\n      showMessage: ShowMessage.GithubComment,\n      snapshotText: '',\n      markdownText: '',\n      randomize: {},\n      snapshotUpdate: 0,\n      options: [\n        {\n          label: 'GitHub comment',\n          description: 'Copy and paste this message into a GitHub issue or comment',\n          value: ShowMessage.GithubComment,\n        },\n        {\n          label: 'Panel support snapshot',\n          description: 'Dashboard JSON used to help troubleshoot visualization issues',\n          value: ShowMessage.PanelSnapshot,\n        },\n      ],\n    });\n  }\n\n  async buildDebugDashboard() {\n    const { panel, randomize, snapshotUpdate } = this.state;\n    const snapshot = await getDebugDashboard(panel, randomize, getTimeSrv().timeRange());\n    const snapshotText = JSON.stringify(snapshot, null, 2);\n    const markdownText = getGithubMarkdown(panel, snapshotText);\n    const snapshotSize = formattedValueToString(getValueFormat('bytes')(snapshotText?.length ?? 0));\n\n    let scene: SceneObject | undefined = undefined;\n\n    if (!panel.isAngularPlugin()) {\n      try {\n        const oldModel = new DashboardModel(snapshot);\n        const dash = createDashboardSceneFromDashboardModel(oldModel);\n        scene = dash.state.body; // skip the wrappers\n      } catch (ex) {\n        console.log('Error creating scene:', ex);\n      }\n    }\n\n    this.setState({ snapshot, snapshotText, markdownText, snapshotSize, snapshotUpdate: snapshotUpdate + 1, scene });\n  }\n\n  onCurrentTabChange = (value: SnapshotTab) => {\n    this.setState({ currentTab: value });\n  };\n\n  onShowMessageChange = (value: SelectableValue<ShowMessage>) => {\n    this.setState({ showMessage: value.value! });\n  };\n\n  onGetMarkdownForClipboard = () => {\n    const { markdownText } = this.state;\n    const maxLen = Math.pow(1024, 2) * 1.5; // 1.5MB\n\n    if (markdownText.length > maxLen) {\n      this.setState({\n        error: {\n          title: 'Copy to clipboard failed',\n          message: 'Snapshot is too large, consider download and attaching a file instead',\n        },\n      });\n\n      return '';\n    }\n\n    return markdownText;\n  };\n\n  onDownloadDashboard = () => {\n    const { snapshotText, panelTitle } = this.state;\n    const blob = new Blob([snapshotText], {\n      type: 'text/plain',\n    });\n    const fileName = `debug-${panelTitle}-${dateTimeFormat(new Date())}.json.txt`;\n    saveAs(blob, fileName);\n  };\n\n  onSetSnapshotText = (snapshotText: string) => {\n    this.setState({ snapshotText });\n  };\n\n  onToggleRandomize = (k: keyof Randomize) => {\n    const { randomize } = this.state;\n    this.setState({ randomize: { ...randomize, [k]: !randomize[k] } });\n  };\n\n  onPreviewDashboard = () => {\n    const { snapshot } = this.state;\n    if (snapshot) {\n      setDashboardToFetchFromLocalStorage({ meta: {}, dashboard: snapshot });\n      global.open(config.appUrl + 'dashboard/new', '_blank');\n    }\n  };\n}\n","import { css } from '@emotion/css';\nimport React, { useMemo, useEffect } from 'react';\nimport AutoSizer from 'react-virtualized-auto-sizer';\n\nimport { PanelPlugin, GrafanaTheme2, FeatureState } from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport {\n  Drawer,\n  Tab,\n  TabsBar,\n  CodeEditor,\n  useStyles2,\n  Field,\n  HorizontalGroup,\n  InlineSwitch,\n  Button,\n  Spinner,\n  Alert,\n  FeatureBadge,\n  Select,\n  ClipboardButton,\n  Icon,\n  Stack,\n} from '@grafana/ui';\nimport { contextSrv } from 'app/core/services/context_srv';\nimport { PanelModel } from 'app/features/dashboard/state';\nimport { AccessControlAction } from 'app/types';\n\nimport { ShowMessage, SnapshotTab, SupportSnapshotService } from './SupportSnapshotService';\n\ninterface Props {\n  panel: PanelModel;\n  plugin?: PanelPlugin | null;\n  onClose: () => void;\n}\n\nexport function HelpWizard({ panel, plugin, onClose }: Props) {\n  const styles = useStyles2(getStyles);\n  const service = useMemo(() => new SupportSnapshotService(panel), [panel]);\n\n  const {\n    currentTab,\n    loading,\n    error,\n    options,\n    showMessage,\n    snapshotSize,\n    markdownText,\n    snapshotText,\n    randomize,\n    panelTitle,\n    scene,\n  } = service.useState();\n\n  useEffect(() => {\n    service.buildDebugDashboard();\n  }, [service, plugin, randomize]);\n\n  if (!plugin) {\n    return null;\n  }\n\n  const tabs = [\n    { label: 'Snapshot', value: SnapshotTab.Support },\n    { label: 'Data', value: SnapshotTab.Data },\n  ];\n\n  const hasSupportBundleAccess =\n    config.supportBundlesEnabled && contextSrv.hasPermission(AccessControlAction.ActionSupportBundlesCreate);\n\n  return (\n    <Drawer\n      title={`Get help with this panel`}\n      size=\"lg\"\n      onClose={onClose}\n      subtitle={\n        <Stack direction=\"column\" gap={1}>\n          <Stack direction=\"row\" gap={1}>\n            <FeatureBadge featureState={FeatureState.beta} />\n            <a\n              href=\"https://grafana.com/docs/grafana/latest/troubleshooting/\"\n              target=\"blank\"\n              className=\"external-link\"\n              rel=\"noopener noreferrer\"\n            >\n              Troubleshooting docs <Icon name=\"external-link-alt\" />\n            </a>\n          </Stack>\n          <span className=\"muted\">\n            To request troubleshooting help, send a snapshot of this panel to Grafana Labs Technical Support. The\n            snapshot contains query response data and panel settings.\n          </span>\n          {hasSupportBundleAccess && (\n            <span className=\"muted\">\n              You can also retrieve a support bundle containing information concerning your Grafana instance and\n              configured datasources in the <a href=\"/support-bundles\">support bundles section</a>.\n            </span>\n          )}\n        </Stack>\n      }\n      tabs={\n        <TabsBar>\n          {tabs.map((t, index) => (\n            <Tab\n              key={`${t.value}-${index}`}\n              label={t.label}\n              active={t.value === currentTab}\n              onChangeTab={() => service.onCurrentTabChange(t.value!)}\n            />\n          ))}\n        </TabsBar>\n      }\n    >\n      {loading && <Spinner />}\n      {error && <Alert title={error.title}>{error.message}</Alert>}\n\n      {currentTab === SnapshotTab.Data && (\n        <div className={styles.code}>\n          <div className={styles.opts}>\n            <Field label=\"Template\" className={styles.field}>\n              <Select options={options} value={showMessage} onChange={service.onShowMessageChange} />\n            </Field>\n\n            {showMessage === ShowMessage.GithubComment ? (\n              <ClipboardButton icon=\"copy\" getText={service.onGetMarkdownForClipboard}>\n                Copy to clipboard\n              </ClipboardButton>\n            ) : (\n              <Button icon=\"download-alt\" onClick={service.onDownloadDashboard}>\n                Download ({snapshotSize})\n              </Button>\n            )}\n          </div>\n          <AutoSizer disableWidth>\n            {({ height }) => (\n              <CodeEditor\n                width=\"100%\"\n                height={height}\n                language={showMessage === ShowMessage.GithubComment ? 'markdown' : 'json'}\n                showLineNumbers={true}\n                showMiniMap={true}\n                value={showMessage === ShowMessage.GithubComment ? markdownText : snapshotText}\n                readOnly={false}\n                onBlur={service.onSetSnapshotText}\n              />\n            )}\n          </AutoSizer>\n        </div>\n      )}\n      {currentTab === SnapshotTab.Support && (\n        <>\n          <Field\n            label=\"Randomize data\"\n            description=\"Modify the original data to hide sensitve information.  Note the lengths will stay the same, and duplicate values will be equal.\"\n          >\n            <HorizontalGroup>\n              <InlineSwitch\n                label=\"Labels\"\n                id=\"randomize-labels\"\n                showLabel={true}\n                value={Boolean(randomize.labels)}\n                onChange={() => service.onToggleRandomize('labels')}\n              />\n              <InlineSwitch\n                label=\"Field names\"\n                id=\"randomize-field-names\"\n                showLabel={true}\n                value={Boolean(randomize.names)}\n                onChange={() => service.onToggleRandomize('names')}\n              />\n              <InlineSwitch\n                label=\"String values\"\n                id=\"randomize-string-values\"\n                showLabel={true}\n                value={Boolean(randomize.values)}\n                onChange={() => service.onToggleRandomize('values')}\n              />\n            </HorizontalGroup>\n          </Field>\n\n          <Field label=\"Support snapshot\" description={`Panel: ${panelTitle}`}>\n            <Stack>\n              <Button icon=\"download-alt\" onClick={service.onDownloadDashboard}>\n                Dashboard ({snapshotSize})\n              </Button>\n              <ClipboardButton\n                icon=\"github\"\n                getText={service.onGetMarkdownForClipboard}\n                title=\"Copy a complete GitHub comment to the clipboard\"\n              >\n                Copy to clipboard\n              </ClipboardButton>\n              <Button\n                onClick={service.onPreviewDashboard}\n                variant=\"secondary\"\n                title=\"Open support snapshot dashboard in a new tab\"\n              >\n                Preview\n              </Button>\n            </Stack>\n          </Field>\n\n          <AutoSizer disableWidth>\n            {({ height }) => (\n              <div style={{ height, overflow: 'auto' }}>{scene && <scene.Component model={scene} />}</div>\n            )}\n          </AutoSizer>\n        </>\n      )}\n    </Drawer>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  code: css`\n    flex-grow: 1;\n    height: 100%;\n    overflow: scroll;\n  `,\n  field: css`\n    width: 100%;\n  `,\n  opts: css`\n    display: flex;\n    display: flex;\n    width: 100%;\n    flex-grow: 0;\n    align-items: center;\n    justify-content: flex-end;\n\n    button {\n      margin-left: 8px;\n    }\n  `,\n});\n","import { useEffect, useRef, useState } from 'react';\nimport { Unsubscribable } from 'rxjs';\n\nimport { LoadingState, PanelData } from '@grafana/data';\n\nimport { GetDataOptions } from '../../../query/state/PanelQueryRunner';\nimport { PanelModel } from '../../state';\n\ninterface UsePanelLatestData {\n  data?: PanelData;\n  hasError: boolean;\n  isLoading: boolean;\n  hasSeries: boolean;\n}\n\n/**\n * Subscribes and returns latest panel data from PanelQueryRunner\n */\nexport const usePanelLatestData = (\n  panel: PanelModel,\n  options: GetDataOptions,\n  checkSchema?: boolean\n): UsePanelLatestData => {\n  const querySubscription = useRef<Unsubscribable>();\n  const [latestData, setLatestData] = useState<PanelData>();\n\n  useEffect(() => {\n    let lastRev = -1;\n    let lastUpdate = 0;\n\n    querySubscription.current = panel\n      .getQueryRunner()\n      // We apply field config later\n      .getData({ withTransforms: options.withTransforms, withFieldConfig: false })\n      .subscribe({\n        next: (data) => {\n          if (checkSchema) {\n            if (lastRev === data.structureRev) {\n              const now = Date.now();\n              const elapsed = now - lastUpdate;\n              if (elapsed < 10000) {\n                return; // avoid updates if the schema has not changed for 10s\n              }\n              lastUpdate = now;\n            }\n            lastRev = data.structureRev ?? -1;\n          }\n          setLatestData(data);\n        },\n      });\n\n    return () => {\n      if (querySubscription.current) {\n        querySubscription.current.unsubscribe();\n      }\n    };\n    /**\n     * Adding separate options to dependencies array to avoid additional hook for comparing previous options with current.\n     * Otherwise, passing different references to the same object might cause troubles.\n     */\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [panel, options.withTransforms]);\n\n  return {\n    data: latestData,\n    isLoading: latestData?.state === LoadingState.Loading,\n    hasSeries: latestData ? !!latestData.series : false,\n    hasError: Boolean(\n      latestData && (latestData.error || latestData?.errors?.length || latestData.state === LoadingState.Error)\n    ),\n  };\n};\n","import React from 'react';\n\nimport { DataSourceApi, PanelData } from '@grafana/data';\nimport { Trans } from 'app/core/internationalization';\n\ninterface InspectMetadataTabProps {\n  data: PanelData;\n  metadataDatasource?: DataSourceApi;\n}\nexport const InspectMetadataTab = ({ data, metadataDatasource }: InspectMetadataTabProps) => {\n  if (!metadataDatasource || !metadataDatasource.components?.MetadataInspector) {\n    return <Trans i18nKey=\"dashboard.inspect-meta.no-inspector\">No Metadata Inspector</Trans>;\n  }\n  return <metadataDatasource.components.MetadataInspector datasource={metadataDatasource} data={data.series} />;\n};\n","import { isEmpty } from 'lodash';\nimport React, { useState } from 'react';\n\nimport {\n  CoreApp,\n  DataSourceApi,\n  formattedValueToString,\n  getValueFormat,\n  PanelData,\n  PanelPlugin,\n  LoadingState,\n  DataQueryError,\n} from '@grafana/data';\nimport { getTemplateSrv } from '@grafana/runtime';\nimport { Drawer, Tab, TabsBar } from '@grafana/ui';\nimport { t, Trans } from 'app/core/internationalization';\nimport { InspectDataTab } from 'app/features/inspector/InspectDataTab';\nimport { InspectErrorTab } from 'app/features/inspector/InspectErrorTab';\nimport { InspectJSONTab } from 'app/features/inspector/InspectJSONTab';\nimport { InspectMetadataTab } from 'app/features/inspector/InspectMetadataTab';\nimport { InspectStatsTab } from 'app/features/inspector/InspectStatsTab';\nimport { QueryInspector } from 'app/features/inspector/QueryInspector';\nimport { InspectTab } from 'app/features/inspector/types';\n\nimport { GetDataOptions } from '../../../query/state/PanelQueryRunner';\nimport { DashboardModel, PanelModel } from '../../state';\n\ninterface Props {\n  dashboard: DashboardModel;\n  panel: PanelModel;\n  plugin?: PanelPlugin | null;\n  defaultTab?: InspectTab;\n  tabs: Array<{ label: string; value: InspectTab }>;\n  // The last raw response\n  data?: PanelData;\n  isDataLoading: boolean;\n  dataOptions: GetDataOptions;\n  // If the datasource supports custom metadata\n  metadataDatasource?: DataSourceApi;\n  onDataOptionsChange: (options: GetDataOptions) => void;\n  onClose: () => void;\n}\n\nexport const InspectContent = ({\n  panel,\n  plugin,\n  dashboard,\n  tabs,\n  data,\n  isDataLoading,\n  dataOptions,\n  metadataDatasource,\n  defaultTab,\n  onDataOptionsChange,\n  onClose,\n}: Props) => {\n  const [currentTab, setCurrentTab] = useState(defaultTab ?? InspectTab.Data);\n\n  if (!plugin) {\n    return null;\n  }\n\n  let errors = getErrors(data);\n\n  // Validate that the active tab is actually valid and allowed\n  let activeTab = currentTab;\n  if (!tabs.find((item) => item.value === currentTab)) {\n    activeTab = InspectTab.JSON;\n  }\n\n  const panelTitle = getTemplateSrv().replace(panel.title, panel.scopedVars, 'text') || 'Panel';\n  const title = t('dashboard.inspect.title', 'Inspect: {{panelTitle}}', { panelTitle });\n\n  return (\n    <Drawer\n      title={title}\n      subtitle={data && formatStats(data)}\n      onClose={onClose}\n      tabs={\n        <TabsBar>\n          {tabs.map((tab, index) => {\n            return (\n              <Tab\n                key={`${tab.value}-${index}`}\n                label={tab.label}\n                active={tab.value === activeTab}\n                onChangeTab={() => setCurrentTab(tab.value || InspectTab.Data)}\n              />\n            );\n          })}\n        </TabsBar>\n      }\n    >\n      {activeTab === InspectTab.Data && (\n        <InspectDataTab\n          dataName={panel.getDisplayTitle()}\n          panelPluginId={panel.type}\n          fieldConfig={panel.fieldConfig}\n          hasTransformations={Boolean(panel.transformations?.length)}\n          data={data && data.series}\n          isLoading={isDataLoading}\n          options={dataOptions}\n          onOptionsChange={onDataOptionsChange}\n          timeZone={dashboard.timezone}\n          app={CoreApp.Dashboard}\n        />\n      )}\n      {data && activeTab === InspectTab.Meta && (\n        <InspectMetadataTab data={data} metadataDatasource={metadataDatasource} />\n      )}\n\n      {activeTab === InspectTab.JSON && (\n        <InspectJSONTab panel={panel} dashboard={dashboard} data={data} onClose={onClose} />\n      )}\n      {activeTab === InspectTab.Error && <InspectErrorTab errors={errors} />}\n      {data && activeTab === InspectTab.Stats && <InspectStatsTab data={data} timeZone={dashboard.getTimezone()} />}\n      {data && activeTab === InspectTab.Query && <QueryInspector data={data} onRefreshQuery={() => panel.refresh()} />}\n    </Drawer>\n  );\n};\n\n// This will combine\nfunction getErrors(data: PanelData | undefined): DataQueryError[] {\n  let errors = data?.errors ?? [];\n  if (data?.error && !errors.includes(data.error)) {\n    errors = [data.error, ...errors];\n  }\n  if (!errors.length && data?.state === LoadingState.Error) {\n    return [\n      {\n        message: 'Error loading data',\n      },\n    ];\n  }\n  return errors;\n}\n\nfunction formatStats(data: PanelData) {\n  const { request } = data;\n\n  if (!request || isEmpty(request)) {\n    return '';\n  }\n\n  const queryCount = request.targets.length;\n  const requestTime = request.endTime ? request.endTime - request.startTime : 0;\n  const formatted = formattedValueToString(getValueFormat('ms')(requestTime));\n\n  return (\n    <Trans i18nKey=\"dashboard.inspect.subtitle\">\n      {{ queryCount }} queries with total query time of {{ formatted }}\n    </Trans>\n  );\n}\n","import React, { useState } from 'react';\nimport { connect, MapStateToProps } from 'react-redux';\nimport { useLocation } from 'react-router-dom';\n\nimport { PanelPlugin } from '@grafana/data';\nimport { locationService } from '@grafana/runtime';\nimport { DashboardModel, PanelModel } from 'app/features/dashboard/state';\nimport { InspectTab } from 'app/features/inspector/types';\nimport { getPanelStateForModel } from 'app/features/panel/state/selectors';\nimport { StoreState } from 'app/types';\n\nimport { GetDataOptions } from '../../../query/state/PanelQueryRunner';\nimport { HelpWizard } from '../HelpWizard/HelpWizard';\nimport { usePanelLatestData } from '../PanelEditor/usePanelLatestData';\n\nimport { InspectContent } from './InspectContent';\nimport { useDatasourceMetadata, useInspectTabs } from './hooks';\n\ninterface OwnProps {\n  dashboard: DashboardModel;\n  panel: PanelModel;\n}\n\nexport interface ConnectedProps {\n  plugin?: PanelPlugin | null;\n}\n\nexport type Props = OwnProps & ConnectedProps;\n\nconst PanelInspectorUnconnected = ({ panel, dashboard, plugin }: Props) => {\n  const location = useLocation();\n  const defaultTab = new URLSearchParams(location.search).get('inspectTab') as InspectTab;\n  const [dataOptions, setDataOptions] = useState<GetDataOptions>({\n    withTransforms: defaultTab === InspectTab.Error,\n    withFieldConfig: true,\n  });\n\n  const { data, isLoading, hasError } = usePanelLatestData(panel, dataOptions, false);\n  const metaDs = useDatasourceMetadata(data);\n  const tabs = useInspectTabs(panel, dashboard, plugin, hasError, metaDs);\n\n  const onClose = () => {\n    locationService.partial({\n      inspect: null,\n      inspectTab: null,\n    });\n  };\n\n  if (!plugin) {\n    return null;\n  }\n\n  if (defaultTab === InspectTab.Help) {\n    return <HelpWizard panel={panel} plugin={plugin} onClose={onClose} />;\n  }\n\n  return (\n    <InspectContent\n      dashboard={dashboard}\n      panel={panel}\n      plugin={plugin}\n      defaultTab={defaultTab}\n      tabs={tabs}\n      data={data}\n      isDataLoading={isLoading}\n      dataOptions={dataOptions}\n      onDataOptionsChange={setDataOptions}\n      metadataDatasource={metaDs}\n      onClose={onClose}\n    />\n  );\n};\n\nconst mapStateToProps: MapStateToProps<ConnectedProps, OwnProps, StoreState> = (state, props) => {\n  const panelState = getPanelStateForModel(state, props.panel);\n  if (!panelState) {\n    return { plugin: null };\n  }\n\n  return {\n    plugin: panelState.plugin,\n  };\n};\n\nexport const PanelInspector = connect(mapStateToProps)(PanelInspectorUnconnected);\n","import React, { PropsWithChildren, ReactElement, useMemo } from 'react';\n\nimport { TypedVariableModel, VariableHide } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { Tooltip } from '@grafana/ui';\n\nimport { variableAdapters } from '../adapters';\nimport { VARIABLE_PREFIX } from '../constants';\n\ninterface Props {\n  variable: TypedVariableModel;\n  readOnly?: boolean;\n}\n\nexport const PickerRenderer = (props: Props) => {\n  const PickerToRender = useMemo(() => variableAdapters.get(props.variable.type).picker, [props.variable]);\n\n  if (!props.variable) {\n    return <div>Couldn&apos;t load variable</div>;\n  }\n\n  return (\n    <div className=\"gf-form\">\n      <PickerLabel variable={props.variable} />\n      {props.variable.hide !== VariableHide.hideVariable && PickerToRender && (\n        <PickerToRender variable={props.variable} readOnly={props.readOnly ?? false} />\n      )}\n    </div>\n  );\n};\n\nfunction PickerLabel({ variable }: PropsWithChildren<Props>): ReactElement | null {\n  const labelOrName = useMemo(() => variable.label || variable.name, [variable]);\n\n  if (variable.hide !== VariableHide.dontHide) {\n    return null;\n  }\n\n  const elementId = VARIABLE_PREFIX + variable.id;\n  if (variable.description) {\n    return (\n      <Tooltip content={variable.description} placement={'bottom'}>\n        <label\n          className=\"gf-form-label gf-form-label--variable\"\n          data-testid={selectors.pages.Dashboard.SubMenu.submenuItemLabels(labelOrName)}\n          htmlFor={elementId}\n        >\n          {labelOrName}\n        </label>\n      </Tooltip>\n    );\n  }\n\n  return (\n    <label\n      className=\"gf-form-label gf-form-label--variable\"\n      data-testid={selectors.pages.Dashboard.SubMenu.submenuItemLabels(labelOrName)}\n      htmlFor={elementId}\n    >\n      {labelOrName}\n    </label>\n  );\n}\n","import React, { useEffect, useState } from 'react';\n\nimport { TypedVariableModel, VariableHide } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\n\nimport { PickerRenderer } from '../../../variables/pickers/PickerRenderer';\n\ninterface Props {\n  variables: TypedVariableModel[];\n  readOnly?: boolean;\n}\n\nexport const SubMenuItems = ({ variables, readOnly }: Props) => {\n  const [visibleVariables, setVisibleVariables] = useState<TypedVariableModel[]>([]);\n\n  useEffect(() => {\n    setVisibleVariables(variables.filter((state) => state.hide !== VariableHide.hideVariable));\n  }, [variables]);\n\n  if (visibleVariables.length === 0) {\n    return null;\n  }\n\n  return (\n    <>\n      {visibleVariables.map((variable) => (\n        <div\n          key={variable.id}\n          className=\"submenu-item gf-form-inline\"\n          data-testid={selectors.pages.Dashboard.SubMenu.submenuItem}\n        >\n          <PickerRenderer variable={variable} readOnly={readOnly} />\n        </div>\n      ))}\n    </>\n  );\n};\n","import store from 'app/core/store';\n\nexport function saveSectionOpenState(id: string, isOpen: boolean) {\n  store.set(`panel-edit-section-${id}`, isOpen ? 'true' : 'false');\n}\n\nexport function getSectionOpenState(id: string, defaultValue: boolean) {\n  return store.getBool(`panel-edit-section-${id}`, defaultValue);\n}\n","import React, { PureComponent } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport { PanelPlugin, PanelPluginMeta } from '@grafana/data';\nimport { AngularComponent, getAngularLoader } from '@grafana/runtime';\nimport { PanelCtrl } from 'app/angular/panel/panel_ctrl';\nimport { changePanelPlugin } from 'app/features/panel/state/actions';\nimport { getPanelStateForModel } from 'app/features/panel/state/selectors';\nimport { StoreState } from 'app/types';\n\nimport { PanelModel, DashboardModel } from '../../state';\n\nimport { getSectionOpenState, saveSectionOpenState } from './state/utils';\n\ninterface OwnProps {\n  panel: PanelModel;\n  dashboard: DashboardModel;\n  plugin: PanelPlugin;\n}\n\nconst mapStateToProps = (state: StoreState, props: OwnProps) => ({\n  angularPanelComponent: getPanelStateForModel(state, props.panel)?.angularComponent,\n});\n\nconst mapDispatchToProps = { changePanelPlugin };\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\ntype Props = ConnectedProps<typeof connector> & OwnProps;\n\nexport class AngularPanelOptionsUnconnected extends PureComponent<Props> {\n  element?: HTMLElement | null;\n  angularOptions?: AngularComponent | null;\n\n  constructor(props: Props) {\n    super(props);\n  }\n\n  componentDidMount() {\n    this.loadAngularOptions();\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (\n      this.props.plugin !== prevProps.plugin ||\n      this.props.angularPanelComponent !== prevProps.angularPanelComponent\n    ) {\n      this.cleanUpAngularOptions();\n    }\n\n    this.loadAngularOptions();\n  }\n\n  componentWillUnmount() {\n    this.cleanUpAngularOptions();\n  }\n\n  cleanUpAngularOptions() {\n    if (this.angularOptions) {\n      this.angularOptions.destroy();\n      this.angularOptions = null;\n    }\n  }\n\n  loadAngularOptions() {\n    const { panel, angularPanelComponent, changePanelPlugin } = this.props;\n\n    if (!this.element || !angularPanelComponent || this.angularOptions) {\n      return;\n    }\n\n    const scope = angularPanelComponent.getScope();\n\n    // When full page reloading in edit mode the angular panel has on fully compiled and instantiated yet\n    if (!scope.$$childHead) {\n      setTimeout(() => {\n        this.forceUpdate();\n      });\n      return;\n    }\n\n    const panelCtrl: PanelCtrl = scope.$$childHead.ctrl;\n    panelCtrl.initEditMode();\n    panelCtrl.onPluginTypeChange = (plugin: PanelPluginMeta) => {\n      changePanelPlugin({ panel, pluginId: plugin.id });\n    };\n\n    let template = '';\n    for (let i = 0; i < panelCtrl.editorTabs.length; i++) {\n      const tab = panelCtrl.editorTabs[i];\n      tab.isOpen = getSectionOpenState(tab.title, i === 0);\n\n      template += `\n      <div class=\"panel-options-group\" ng-cloak>\n        <div class=\"panel-options-group__header\" ng-click=\"toggleOptionGroup(${i})\" aria-label=\"${tab.title} section\">\n          <div class=\"panel-options-group__icon\">\n            <icon name=\"ctrl.editorTabs[${i}].isOpen ? 'angle-down' : 'angle-right'\"></icon>\n          </div>\n          <div class=\"panel-options-group__title\">${tab.title}</div>\n        </div>\n        <div class=\"panel-options-group__body\" ng-if=\"ctrl.editorTabs[${i}].isOpen\">\n          <panel-editor-tab editor-tab=\"ctrl.editorTabs[${i}]\" ctrl=\"ctrl\"></panel-editor-tab>\n        </div>\n      </div>\n      `;\n    }\n\n    const loader = getAngularLoader();\n    const scopeProps = {\n      ctrl: panelCtrl,\n      toggleOptionGroup: (index: number) => {\n        const tab = panelCtrl.editorTabs[index];\n        tab.isOpen = !tab.isOpen;\n        saveSectionOpenState(tab.title, Boolean(tab.isOpen));\n      },\n    };\n\n    this.angularOptions = loader.load(this.element, scopeProps, template);\n    this.angularOptions.digest();\n  }\n\n  render() {\n    return <div ref={(elem) => (this.element = elem)} />;\n  }\n}\n\nexport const AngularPanelOptions = connect(mapStateToProps, mapDispatchToProps)(AngularPanelOptionsUnconnected);\n","import { css, cx } from '@emotion/css';\nimport React, { useId } from 'react';\nimport Highlighter from 'react-highlight-words';\n\nimport {\n  DynamicConfigValue,\n  FieldConfigOptionsRegistry,\n  FieldConfigProperty,\n  FieldOverrideContext,\n  GrafanaTheme2,\n} from '@grafana/data';\nimport { Counter, Field, HorizontalGroup, IconButton, Label, useStyles2 } from '@grafana/ui';\n\nimport { OptionsPaneCategory } from './OptionsPaneCategory';\n\ninterface DynamicConfigValueEditorProps {\n  property: DynamicConfigValue;\n  registry: FieldConfigOptionsRegistry;\n  onChange: (value: DynamicConfigValue) => void;\n  context: FieldOverrideContext;\n  onRemove: () => void;\n  isSystemOverride?: boolean;\n  searchQuery: string;\n}\n\nexport const DynamicConfigValueEditor = ({\n  property,\n  context,\n  registry,\n  onChange,\n  onRemove,\n  isSystemOverride,\n  searchQuery,\n}: DynamicConfigValueEditorProps) => {\n  const styles = useStyles2(getStyles);\n  const item = registry?.getIfExists(property.id);\n\n  const componentId = useId();\n\n  if (!item) {\n    return null;\n  }\n\n  const isCollapsible =\n    Array.isArray(property.value) ||\n    property.id === FieldConfigProperty.Thresholds ||\n    property.id === FieldConfigProperty.Links ||\n    property.id === FieldConfigProperty.Mappings;\n\n  const labelCategory = item.category?.filter((c) => c !== item.name);\n  let editor;\n\n  /* eslint-disable react/display-name */\n  const renderLabel =\n    (includeDescription = true, includeCounter = false) =>\n    (isExpanded = false) => (\n      <HorizontalGroup justify=\"space-between\">\n        <Label\n          category={labelCategory}\n          description={includeDescription ? item.description : undefined}\n          htmlFor={componentId}\n        >\n          <Highlighter\n            textToHighlight={item.name}\n            searchWords={[searchQuery]}\n            highlightClassName={'search-fragment-highlight'}\n          />\n          {!isExpanded && includeCounter && item.getItemsCount && (\n            <Counter value={item.getItemsCount(property.value)} />\n          )}\n        </Label>\n        {!isSystemOverride && (\n          <div>\n            <IconButton name=\"times\" onClick={onRemove} tooltip=\"Remove label\" />\n          </div>\n        )}\n      </HorizontalGroup>\n    );\n  /* eslint-enable react/display-name */\n\n  if (isCollapsible) {\n    editor = (\n      <OptionsPaneCategory\n        id={item.name}\n        renderTitle={renderLabel(false, true)}\n        className={css`\n          padding-left: 0;\n          padding-right: 0;\n        `}\n        isNested\n        isOpenDefault={property.value !== undefined}\n      >\n        <item.override\n          value={property.value}\n          onChange={(value) => {\n            onChange(value);\n          }}\n          item={item}\n          context={context}\n        />\n      </OptionsPaneCategory>\n    );\n  } else {\n    editor = (\n      <div>\n        <Field label={renderLabel()()} description={item.description}>\n          <item.override\n            value={property.value}\n            onChange={(value) => {\n              onChange(value);\n            }}\n            item={item}\n            context={context}\n            id={componentId}\n          />\n        </Field>\n      </div>\n    );\n  }\n\n  return (\n    <div\n      className={cx(\n        isCollapsible && styles.collapsibleOverrideEditor,\n        !isCollapsible && 'dynamicConfigValueEditor--nonCollapsible'\n      )}\n    >\n      {editor}\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    collapsibleOverrideEditor: css`\n      label: collapsibleOverrideEditor;\n      & + .dynamicConfigValueEditor--nonCollapsible {\n        margin-top: ${theme.spacing(1)};\n      }\n    `,\n  };\n};\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { FieldConfigOptionsRegistry, GrafanaTheme2, ConfigOverrideRule } from '@grafana/data';\nimport { HorizontalGroup, Icon, IconButton, useStyles2 } from '@grafana/ui';\nimport { FieldMatcherUIRegistryItem } from '@grafana/ui/src/components/MatchersUI/types';\n\ninterface Props {\n  isExpanded: boolean;\n  registry: FieldConfigOptionsRegistry;\n  matcherUi: FieldMatcherUIRegistryItem<any>;\n  override: ConfigOverrideRule;\n  overrideName: string;\n  onOverrideRemove: () => void;\n}\nexport const OverrideCategoryTitle = ({\n  isExpanded,\n  registry,\n  matcherUi,\n  overrideName,\n  override,\n  onOverrideRemove,\n}: Props) => {\n  const styles = useStyles2(getStyles);\n  const properties = override.properties.map((p) => registry.getIfExists(p.id)).filter((prop) => !!prop);\n  const propertyNames = properties.map((p) => p?.name).join(', ');\n  const matcherOptions = matcherUi.optionsToLabel(override.matcher.options);\n\n  return (\n    <div>\n      <HorizontalGroup justify=\"space-between\">\n        <div>{overrideName}</div>\n        <IconButton name=\"trash-alt\" onClick={onOverrideRemove} tooltip=\"Remove override\" />\n      </HorizontalGroup>\n      {!isExpanded && (\n        <div className={styles.overrideDetails}>\n          <div className={styles.options} title={matcherOptions}>\n            {matcherOptions} <Icon name=\"angle-right\" /> {propertyNames}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nOverrideCategoryTitle.displayName = 'OverrideTitle';\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    matcherUi: css`\n      padding: ${theme.spacing(1)};\n    `,\n    propertyPickerWrapper: css`\n      margin-top: ${theme.spacing(2)};\n    `,\n    overrideDetails: css`\n      font-size: ${theme.typography.bodySmall.fontSize};\n      color: ${theme.colors.text.secondary};\n      font-weight: ${theme.typography.fontWeightRegular};\n    `,\n    options: css`\n      overflow: hidden;\n      padding-right: ${theme.spacing(4)};\n    `,\n    unknownLabel: css`\n      margin-bottom: 0;\n    `,\n  };\n};\n","import { css } from '@emotion/css';\nimport { cloneDeep } from 'lodash';\nimport React from 'react';\n\nimport {\n  FieldConfigOptionsRegistry,\n  SelectableValue,\n  isSystemOverride as isSystemOverrideGuard,\n  VariableSuggestionsScope,\n  DynamicConfigValue,\n  ConfigOverrideRule,\n  GrafanaTheme2,\n  fieldMatchers,\n} from '@grafana/data';\nimport { fieldMatchersUI, useStyles2, ValuePicker } from '@grafana/ui';\nimport { getDataLinksVariableSuggestions } from 'app/features/panel/panellinks/link_srv';\n\nimport { DynamicConfigValueEditor } from './DynamicConfigValueEditor';\nimport { OptionsPaneCategoryDescriptor } from './OptionsPaneCategoryDescriptor';\nimport { OptionsPaneItemDescriptor } from './OptionsPaneItemDescriptor';\nimport { OverrideCategoryTitle } from './OverrideCategoryTitle';\nimport { OptionPaneRenderProps } from './types';\n\nexport function getFieldOverrideCategories(\n  props: OptionPaneRenderProps,\n  searchQuery: string\n): OptionsPaneCategoryDescriptor[] {\n  const categories: OptionsPaneCategoryDescriptor[] = [];\n  const currentFieldConfig = props.panel.fieldConfig;\n  const registry = props.plugin.fieldConfigRegistry;\n  const data = props.data?.series ?? [];\n\n  if (registry.isEmpty()) {\n    return [];\n  }\n\n  const onOverrideChange = (index: number, override: ConfigOverrideRule) => {\n    let overrides = cloneDeep(currentFieldConfig.overrides);\n    overrides[index] = override;\n    props.onFieldConfigsChange({ ...currentFieldConfig, overrides });\n  };\n\n  const onOverrideRemove = (overrideIndex: number) => {\n    let overrides = cloneDeep(currentFieldConfig.overrides);\n    overrides.splice(overrideIndex, 1);\n    props.onFieldConfigsChange({ ...currentFieldConfig, overrides });\n  };\n\n  const onOverrideAdd = (value: SelectableValue<string>) => {\n    const info = fieldMatchers.get(value.value!);\n    if (!info) {\n      return;\n    }\n\n    props.onFieldConfigsChange({\n      ...currentFieldConfig,\n      overrides: [\n        ...currentFieldConfig.overrides,\n        {\n          matcher: {\n            id: info.id,\n            options: info.defaultOptions,\n          },\n          properties: [],\n        },\n      ],\n    });\n  };\n\n  const context = {\n    data,\n    getSuggestions: (scope?: VariableSuggestionsScope) => getDataLinksVariableSuggestions(data, scope),\n    isOverride: true,\n  };\n\n  /**\n   * Main loop through all override rules\n   */\n  for (let idx = 0; idx < currentFieldConfig.overrides.length; idx++) {\n    const override = currentFieldConfig.overrides[idx];\n    const overrideName = `Override ${idx + 1}`;\n    const matcherUi = fieldMatchersUI.get(override.matcher.id);\n    const configPropertiesOptions = getOverrideProperties(registry);\n    const isSystemOverride = isSystemOverrideGuard(override);\n    // A way to force open new override categories\n    const forceOpen = override.properties.length === 0 ? 1 : 0;\n\n    const category = new OptionsPaneCategoryDescriptor({\n      title: overrideName,\n      id: overrideName,\n      forceOpen,\n      renderTitle: function renderOverrideTitle(isExpanded: boolean) {\n        return (\n          <OverrideCategoryTitle\n            override={override}\n            isExpanded={isExpanded}\n            registry={registry}\n            overrideName={overrideName}\n            matcherUi={matcherUi}\n            onOverrideRemove={() => onOverrideRemove(idx)}\n          />\n        );\n      },\n    });\n\n    const onMatcherConfigChange = (options: any) => {\n      override.matcher.options = options;\n      onOverrideChange(idx, override);\n    };\n\n    const onDynamicConfigValueAdd = (o: ConfigOverrideRule, value: SelectableValue<string>) => {\n      const registryItem = registry.get(value.value!);\n      const propertyConfig: DynamicConfigValue = {\n        id: registryItem.id,\n        value: registryItem.defaultValue,\n      };\n\n      if (override.properties) {\n        o.properties.push(propertyConfig);\n      } else {\n        o.properties = [propertyConfig];\n      }\n\n      onOverrideChange(idx, o);\n    };\n\n    /**\n     * Add override matcher UI element\n     */\n    category.addItem(\n      new OptionsPaneItemDescriptor({\n        title: matcherUi.name,\n        render: function renderMatcherUI() {\n          return (\n            <matcherUi.component\n              id={`${matcherUi.matcher.id}-${idx}`}\n              matcher={matcherUi.matcher}\n              data={props.data?.series ?? []}\n              options={override.matcher.options}\n              onChange={onMatcherConfigChange}\n            />\n          );\n        },\n      })\n    );\n\n    /**\n     * Loop through all override properties\n     */\n    for (let propIdx = 0; propIdx < override.properties.length; propIdx++) {\n      const property = override.properties[propIdx];\n      const registryItemForProperty = registry.getIfExists(property.id);\n\n      if (!registryItemForProperty) {\n        continue;\n      }\n\n      const onPropertyChange = (value: DynamicConfigValue) => {\n        override.properties[propIdx].value = value;\n        onOverrideChange(idx, override);\n      };\n\n      const onPropertyRemove = () => {\n        override.properties.splice(propIdx, 1);\n        onOverrideChange(idx, override);\n      };\n\n      /**\n       * Add override property item\n       */\n      category.addItem(\n        new OptionsPaneItemDescriptor({\n          title: registryItemForProperty.name,\n          skipField: true,\n          render: function renderPropertyEditor() {\n            return (\n              <DynamicConfigValueEditor\n                key={`${property.id}/${propIdx}`}\n                isSystemOverride={isSystemOverride}\n                onChange={onPropertyChange}\n                onRemove={onPropertyRemove}\n                property={property}\n                registry={registry}\n                context={context}\n                searchQuery={searchQuery}\n              />\n            );\n          },\n        })\n      );\n    }\n\n    /**\n     * Add button that adds new overrides\n     */\n    if (!isSystemOverride && override.matcher.options) {\n      category.addItem(\n        new OptionsPaneItemDescriptor({\n          title: '----------',\n          skipField: true,\n          render: function renderAddPropertyButton() {\n            return (\n              <ValuePicker\n                key=\"Add override property\"\n                label=\"Add override property\"\n                variant=\"secondary\"\n                isFullWidth={true}\n                icon=\"plus\"\n                menuPlacement=\"auto\"\n                options={configPropertiesOptions}\n                onChange={(v) => onDynamicConfigValueAdd(override, v)}\n              />\n            );\n          },\n        })\n      );\n    }\n\n    categories.push(category);\n  }\n\n  categories.push(\n    new OptionsPaneCategoryDescriptor({\n      title: 'add button',\n      id: 'add button',\n      customRender: function renderAddButton() {\n        return (\n          <AddOverrideButtonContainer key=\"Add override\">\n            <ValuePicker\n              icon=\"plus\"\n              label=\"Add field override\"\n              variant=\"secondary\"\n              menuPlacement=\"auto\"\n              isFullWidth={true}\n              size=\"md\"\n              options={fieldMatchersUI\n                .list()\n                .filter((o) => !o.excludeFromPicker)\n                .map<SelectableValue<string>>((i) => ({ label: i.name, value: i.id, description: i.description }))}\n              onChange={(value) => onOverrideAdd(value)}\n            />\n          </AddOverrideButtonContainer>\n        );\n      },\n    })\n  );\n\n  return categories;\n}\n\nfunction getOverrideProperties(registry: FieldConfigOptionsRegistry) {\n  return registry\n    .list()\n    .filter((o) => !o.hideFromOverrides)\n    .map((item) => {\n      let label = item.name;\n      if (item.category) {\n        label = [...item.category, item.name].join(' > ');\n      }\n      return {\n        label,\n        value: item.id,\n        description: item.description,\n      };\n    });\n}\n\nfunction AddOverrideButtonContainer({ children }: { children: React.ReactNode }) {\n  const styles = useStyles2(getBorderTopStyles);\n  return <div className={styles}>{children}</div>;\n}\n\nfunction getBorderTopStyles(theme: GrafanaTheme2) {\n  return css({\n    borderTop: `1px solid ${theme.colors.border.weak}`,\n    padding: `${theme.spacing(2)}`,\n    display: 'flex',\n  });\n}\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { DateTimeInput, GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\n\nimport { PanelModelWithLibraryPanel } from '../../types';\n\ninterface Props {\n  panel: PanelModelWithLibraryPanel;\n  formatDate?: (dateString: DateTimeInput, format?: string) => string;\n}\n\nexport const LibraryPanelInformation = ({ panel, formatDate }: Props) => {\n  const styles = useStyles2(getStyles);\n\n  const meta = panel.libraryPanel?.meta;\n  if (!meta) {\n    return null;\n  }\n\n  return (\n    <div className={styles.info}>\n      <div className={styles.libraryPanelInfo}>\n        {`Used on ${meta.connectedDashboards} `}\n        {meta.connectedDashboards === 1 ? 'dashboard' : 'dashboards'}\n      </div>\n      <div className={styles.libraryPanelInfo}>\n        Last edited on {formatDate?.(meta.updated, 'L') ?? meta.updated} by\n        {meta.updatedBy.avatarUrl && (\n          <img\n            width=\"22\"\n            height=\"22\"\n            className={styles.userAvatar}\n            src={meta.updatedBy.avatarUrl}\n            alt={`Avatar for ${meta.updatedBy.name}`}\n          />\n        )}\n        {meta.updatedBy.name}\n      </div>\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    info: css`\n      line-height: 1;\n    `,\n    libraryPanelInfo: css`\n      color: ${theme.colors.text.secondary};\n      font-size: ${theme.typography.bodySmall.fontSize};\n    `,\n    userAvatar: css`\n      border-radius: ${theme.shape.radius.circle};\n      box-sizing: content-box;\n      width: 22px;\n      height: 22px;\n      padding-left: ${theme.spacing(1)};\n      padding-right: ${theme.spacing(1)};\n    `,\n  };\n};\n","import React from 'react';\n\nimport { Input } from '@grafana/ui';\nimport { LibraryPanelInformation } from 'app/features/library-panels/components/LibraryPanelInfo/LibraryPanelInfo';\n\nimport { isPanelModelLibraryPanel } from '../../../library-panels/guard';\n\nimport { OptionsPaneCategoryDescriptor } from './OptionsPaneCategoryDescriptor';\nimport { OptionsPaneItemDescriptor } from './OptionsPaneItemDescriptor';\nimport { OptionPaneRenderProps } from './types';\n\nexport function getLibraryPanelOptionsCategory(props: OptionPaneRenderProps): OptionsPaneCategoryDescriptor {\n  const { panel, onPanelConfigChange, dashboard } = props;\n  const descriptor = new OptionsPaneCategoryDescriptor({\n    title: 'Library panel options',\n    id: 'Library panel options',\n    isOpenDefault: true,\n  });\n\n  if (isPanelModelLibraryPanel(panel)) {\n    descriptor\n      .addItem(\n        new OptionsPaneItemDescriptor({\n          title: 'Name',\n          value: panel.libraryPanel.name,\n          popularRank: 1,\n          render: function renderName() {\n            return (\n              <Input\n                id=\"LibraryPanelFrameName\"\n                defaultValue={panel.libraryPanel.name}\n                onBlur={(e) =>\n                  onPanelConfigChange('libraryPanel', { ...panel.libraryPanel, name: e.currentTarget.value })\n                }\n              />\n            );\n          },\n        })\n      )\n      .addItem(\n        new OptionsPaneItemDescriptor({\n          title: 'Information',\n          render: function renderLibraryPanelInformation() {\n            return <LibraryPanelInformation panel={panel} formatDate={dashboard.formatDate} />;\n          },\n        })\n      );\n  }\n\n  return descriptor;\n}\n","import React from 'react';\n\nimport { getDashboardSrv } from '../../services/DashboardSrv';\nimport { PanelModel } from '../../state';\n\nimport { GenAIButton } from './GenAIButton';\nimport { EventTrackingSrc } from './tracking';\nimport { Message, Role, getFilteredPanelString } from './utils';\n\ninterface GenAIPanelDescriptionButtonProps {\n  onGenerate: (description: string) => void;\n  panel: PanelModel;\n}\n\nconst PANEL_DESCRIPTION_CHAR_LIMIT = 200;\n\nconst DESCRIPTION_GENERATION_STANDARD_PROMPT =\n  'You are an expert in creating Grafana Panels.\\n' +\n  'You will be given the title and description of the dashboard the panel is in as well as the JSON for the panel.\\n' +\n  'Your goal is to write a descriptive and concise panel description.\\n' +\n  'The panel description is meant to explain the purpose of the panel, not just its attributes.\\n' +\n  'Do not refer to the panel; simply describe its purpose.\\n' +\n  'There should be no numbers in the description except for thresholds.\\n' +\n  `The description should be, at most, ${PANEL_DESCRIPTION_CHAR_LIMIT} characters.`;\n\nexport const GenAIPanelDescriptionButton = ({ onGenerate, panel }: GenAIPanelDescriptionButtonProps) => {\n  const messages = React.useMemo(() => getMessages(panel), [panel]);\n\n  return (\n    <GenAIButton\n      messages={messages}\n      onGenerate={onGenerate}\n      eventTrackingSrc={EventTrackingSrc.panelDescription}\n      toggleTipTitle={'Improve your panel description'}\n    />\n  );\n};\n\nfunction getMessages(panel: PanelModel): Message[] {\n  const dashboard = getDashboardSrv().getCurrent()!;\n  const panelString = getFilteredPanelString(panel);\n\n  return [\n    {\n      content: DESCRIPTION_GENERATION_STANDARD_PROMPT,\n      role: Role.system,\n    },\n    {\n      content: `The panel is part of a dashboard with the title: ${dashboard.title}`,\n      role: Role.system,\n    },\n    {\n      content: `The panel is part of a dashboard with the description: ${dashboard.description}`,\n      role: Role.system,\n    },\n    {\n      content: `This is the JSON which defines the panel: ${panelString}`,\n      role: Role.user,\n    },\n  ];\n}\n","import React from 'react';\n\nimport { getDashboardSrv } from '../../services/DashboardSrv';\nimport { PanelModel } from '../../state';\n\nimport { GenAIButton } from './GenAIButton';\nimport { EventTrackingSrc } from './tracking';\nimport { Message, Role, getFilteredPanelString } from './utils';\n\ninterface GenAIPanelTitleButtonProps {\n  onGenerate: (title: string) => void;\n  panel: PanelModel;\n}\n\nconst PANEL_TITLE_CHAR_LIMIT = 50;\n\nconst TITLE_GENERATION_STANDARD_PROMPT =\n  'You are an expert in creating Grafana Panels.' +\n  'Your goal is to write short, descriptive, and concise panel title.' +\n  `The title should be shorter than ${PANEL_TITLE_CHAR_LIMIT} characters.`;\n\nexport const GenAIPanelTitleButton = ({ onGenerate, panel }: GenAIPanelTitleButtonProps) => {\n  const messages = React.useMemo(() => getMessages(panel), [panel]);\n\n  return (\n    <GenAIButton\n      messages={messages}\n      onGenerate={onGenerate}\n      eventTrackingSrc={EventTrackingSrc.panelTitle}\n      toggleTipTitle={'Improve your panel title'}\n    />\n  );\n};\n\nfunction getMessages(panel: PanelModel): Message[] {\n  const dashboard = getDashboardSrv().getCurrent()!;\n  const panelString = getFilteredPanelString(panel);\n\n  return [\n    {\n      content: TITLE_GENERATION_STANDARD_PROMPT,\n      role: Role.system,\n    },\n    {\n      content: `The panel is part of a dashboard with the title: ${dashboard.title}`,\n      role: Role.system,\n    },\n    {\n      content: `The panel is part of a dashboard with the description: ${dashboard.description}`,\n      role: Role.system,\n    },\n    {\n      content: `Use this JSON object which defines the panel: ${panelString}`,\n      role: Role.system,\n    },\n  ];\n}\n","import React from 'react';\n\nimport { config } from '@grafana/runtime';\nimport { DataLinksInlineEditor, Input, RadioButtonGroup, Select, Switch, TextArea } from '@grafana/ui';\nimport { getPanelLinksVariableSuggestions } from 'app/features/panel/panellinks/link_srv';\n\nimport { GenAIPanelDescriptionButton } from '../GenAI/GenAIPanelDescriptionButton';\nimport { GenAIPanelTitleButton } from '../GenAI/GenAIPanelTitleButton';\nimport { RepeatRowSelect } from '../RepeatRowSelect/RepeatRowSelect';\n\nimport { OptionsPaneCategoryDescriptor } from './OptionsPaneCategoryDescriptor';\nimport { OptionsPaneItemDescriptor } from './OptionsPaneItemDescriptor';\nimport { OptionPaneRenderProps } from './types';\n\nexport function getPanelFrameCategory(props: OptionPaneRenderProps): OptionsPaneCategoryDescriptor {\n  const { panel, onPanelConfigChange } = props;\n  const descriptor = new OptionsPaneCategoryDescriptor({\n    title: 'Panel options',\n    id: 'Panel options',\n    isOpenDefault: true,\n  });\n\n  const setPanelTitle = (title: string) => {\n    const input = document.getElementById('PanelFrameTitle');\n    if (input instanceof HTMLInputElement) {\n      input.value = title;\n      onPanelConfigChange('title', title);\n    }\n  };\n\n  const setPanelDescription = (description: string) => {\n    const input = document.getElementById('description-text-area');\n    if (input instanceof HTMLTextAreaElement) {\n      input.value = description;\n      onPanelConfigChange('description', description);\n    }\n  };\n\n  return descriptor\n    .addItem(\n      new OptionsPaneItemDescriptor({\n        title: 'Title',\n        value: panel.title,\n        popularRank: 1,\n        render: function renderTitle() {\n          return (\n            <Input\n              id=\"PanelFrameTitle\"\n              defaultValue={panel.title}\n              onBlur={(e) => onPanelConfigChange('title', e.currentTarget.value)}\n            />\n          );\n        },\n        addon: config.featureToggles.dashgpt && <GenAIPanelTitleButton onGenerate={setPanelTitle} panel={panel} />,\n      })\n    )\n    .addItem(\n      new OptionsPaneItemDescriptor({\n        title: 'Description',\n        description: panel.description,\n        value: panel.description,\n        render: function renderDescription() {\n          return (\n            <TextArea\n              id=\"description-text-area\"\n              defaultValue={panel.description}\n              onBlur={(e) => onPanelConfigChange('description', e.currentTarget.value)}\n            />\n          );\n        },\n        addon: config.featureToggles.dashgpt && (\n          <GenAIPanelDescriptionButton onGenerate={setPanelDescription} panel={panel} />\n        ),\n      })\n    )\n    .addItem(\n      new OptionsPaneItemDescriptor({\n        title: 'Transparent background',\n        render: function renderTransparent() {\n          return (\n            <Switch\n              value={panel.transparent}\n              id=\"transparent-background\"\n              onChange={(e) => onPanelConfigChange('transparent', e.currentTarget.checked)}\n            />\n          );\n        },\n      })\n    )\n    .addCategory(\n      new OptionsPaneCategoryDescriptor({\n        title: 'Panel links',\n        id: 'Panel links',\n        isOpenDefault: false,\n        itemsCount: panel.links?.length,\n      }).addItem(\n        new OptionsPaneItemDescriptor({\n          title: 'Panel links',\n          render: function renderLinks() {\n            return (\n              <DataLinksInlineEditor\n                links={panel.links}\n                onChange={(links) => onPanelConfigChange('links', links)}\n                getSuggestions={getPanelLinksVariableSuggestions}\n                data={[]}\n              />\n            );\n          },\n        })\n      )\n    )\n    .addCategory(\n      new OptionsPaneCategoryDescriptor({\n        title: 'Repeat options',\n        id: 'Repeat options',\n        isOpenDefault: false,\n      })\n        .addItem(\n          new OptionsPaneItemDescriptor({\n            title: 'Repeat by variable',\n            description:\n              'Repeat this panel for each value in the selected variable. This is not visible while in edit mode. You need to go back to dashboard and then update the variable or reload the dashboard.',\n            render: function renderRepeatOptions() {\n              return (\n                <RepeatRowSelect\n                  id=\"repeat-by-variable-select\"\n                  repeat={panel.repeat}\n                  onChange={(value?: string | null) => {\n                    onPanelConfigChange('repeat', value);\n                  }}\n                />\n              );\n            },\n          })\n        )\n        .addItem(\n          new OptionsPaneItemDescriptor({\n            title: 'Repeat direction',\n            showIf: () => !!panel.repeat,\n            render: function renderRepeatOptions() {\n              const directionOptions = [\n                { label: 'Horizontal', value: 'h' },\n                { label: 'Vertical', value: 'v' },\n              ];\n\n              return (\n                <RadioButtonGroup\n                  options={directionOptions}\n                  value={panel.repeatDirection || 'h'}\n                  onChange={(value) => onPanelConfigChange('repeatDirection', value)}\n                />\n              );\n            },\n          })\n        )\n        .addItem(\n          new OptionsPaneItemDescriptor({\n            title: 'Max per row',\n            showIf: () => Boolean(panel.repeat && panel.repeatDirection === 'h'),\n            render: function renderOption() {\n              const maxPerRowOptions = [2, 3, 4, 6, 8, 12].map((value) => ({ label: value.toString(), value }));\n              return (\n                <Select\n                  options={maxPerRowOptions}\n                  value={panel.maxPerRow}\n                  onChange={(value) => onPanelConfigChange('maxPerRow', value.value)}\n                />\n              );\n            },\n          })\n        )\n    );\n}\n","import { OptionsPaneCategoryDescriptor } from '../OptionsPaneCategoryDescriptor';\nimport { OptionsPaneItemDescriptor } from '../OptionsPaneItemDescriptor';\n\nexport interface OptionSearchResults {\n  optionHits: OptionsPaneItemDescriptor[];\n  overrideHits: OptionsPaneCategoryDescriptor[];\n  totalCount: number;\n}\n\nexport class OptionSearchEngine {\n  constructor(\n    private categories: OptionsPaneCategoryDescriptor[],\n    private overrides: OptionsPaneCategoryDescriptor[]\n  ) {}\n\n  search(query: string): OptionSearchResults {\n    const searchRegex = new RegExp(query, 'i');\n\n    const optionHits = this.collectHits(this.categories, searchRegex, []);\n    const sortedHits = optionHits.sort(compareHit).map((x) => x.item);\n\n    const overrideHits = this.collectHits(this.overrides, searchRegex, []);\n    const sortedOverridesHits = overrideHits.sort(compareHit).map((x) => x.item);\n\n    return {\n      optionHits: sortedHits,\n      overrideHits: this.buildOverrideHitCategories(sortedOverridesHits),\n      totalCount: this.getAllOptionsCount(this.categories),\n    };\n  }\n\n  private collectHits(categories: OptionsPaneCategoryDescriptor[], searchRegex: RegExp, hits: SearchHit[]) {\n    for (const category of categories) {\n      const categoryNameMatch = searchRegex.test(category.props.title);\n\n      for (const item of category.items) {\n        if (searchRegex.test(item.props.title)) {\n          hits.push({ item: item, rank: 1 });\n          continue;\n        }\n        if (item.props.description && searchRegex.test(item.props.description)) {\n          hits.push({ item: item, rank: 2 });\n          continue;\n        }\n        if (categoryNameMatch) {\n          hits.push({ item: item, rank: 3 });\n        }\n      }\n\n      if (category.categories.length > 0) {\n        this.collectHits(category.categories, searchRegex, hits);\n      }\n    }\n\n    return hits;\n  }\n\n  getAllOptionsCount(categories: OptionsPaneCategoryDescriptor[]) {\n    let total = 0;\n\n    for (const category of categories) {\n      total += category.items.length;\n\n      if (category.categories.length > 0) {\n        total += this.getAllOptionsCount(category.categories);\n      }\n    }\n\n    return total;\n  }\n\n  buildOverrideHitCategories(hits: OptionsPaneItemDescriptor[]): OptionsPaneCategoryDescriptor[] {\n    const categories: Record<string, OptionsPaneCategoryDescriptor> = {};\n\n    for (const hit of hits) {\n      let category = categories[hit.parent.props.title];\n\n      if (!category) {\n        category = categories[hit.parent.props.title] = new OptionsPaneCategoryDescriptor(hit.parent.props);\n        // Add matcher item as that should always be shown\n        category.addItem(hit.parent.items[0]);\n      }\n\n      // Prevent adding matcher twice since it's automatically added for every override\n      if (category.items[0].props.title !== hit.props.title) {\n        category.addItem(hit);\n      }\n    }\n\n    return Object.values(categories);\n  }\n}\n\ninterface SearchHit {\n  item: OptionsPaneItemDescriptor;\n  rank: number;\n}\n\nfunction compareHit(left: SearchHit, right: SearchHit) {\n  return left.rank - right.rank;\n}\n","import { OptionsPaneCategoryDescriptor } from '../OptionsPaneCategoryDescriptor';\nimport { OptionsPaneItemDescriptor } from '../OptionsPaneItemDescriptor';\n\nexport function getRecentOptions(allOptions: OptionsPaneCategoryDescriptor[]) {\n  const popularOptions: OptionsPaneItemDescriptor[] = [];\n\n  for (const category of allOptions) {\n    for (const item of category.items) {\n      if (item.props.title === 'Unit') {\n        item.props.popularRank = 2;\n      }\n      if (item.props.title === 'Min') {\n        item.props.popularRank = 3;\n      }\n      if (item.props.title === 'Max') {\n        item.props.popularRank = 4;\n      }\n      if (item.props.title === 'Display name') {\n        item.props.popularRank = 5;\n      }\n\n      if (item.props.popularRank) {\n        popularOptions.push(item);\n      }\n    }\n  }\n\n  return popularOptions.sort((left, right) => left.props.popularRank! - right.props.popularRank!);\n}\n","import { css } from '@emotion/css';\nimport React, { useMemo, useState } from 'react';\n\nimport { GrafanaTheme2, SelectableValue } from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport { CustomScrollbar, FilterInput, RadioButtonGroup, useStyles2 } from '@grafana/ui';\nimport { AngularDeprecationPluginNotice } from 'app/features/plugins/angularDeprecation/AngularDeprecationPluginNotice';\n\nimport { isPanelModelLibraryPanel } from '../../../library-panels/guard';\n\nimport { AngularPanelOptions } from './AngularPanelOptions';\nimport { OptionsPaneCategory } from './OptionsPaneCategory';\nimport { OptionsPaneCategoryDescriptor } from './OptionsPaneCategoryDescriptor';\nimport { getFieldOverrideCategories } from './getFieldOverrideElements';\nimport { getLibraryPanelOptionsCategory } from './getLibraryPanelOptions';\nimport { getPanelFrameCategory } from './getPanelFrameOptions';\nimport { getVisualizationOptions } from './getVisualizationOptions';\nimport { OptionSearchEngine } from './state/OptionSearchEngine';\nimport { getRecentOptions } from './state/getRecentOptions';\nimport { OptionPaneRenderProps } from './types';\n\nexport const OptionsPaneOptions = (props: OptionPaneRenderProps) => {\n  const { plugin, dashboard, panel } = props;\n  const [searchQuery, setSearchQuery] = useState('');\n  const [listMode, setListMode] = useState(OptionFilter.All);\n  const styles = useStyles2(getStyles);\n\n  const [panelFrameOptions, vizOptions, libraryPanelOptions] = useMemo(\n    () => [getPanelFrameCategory(props), getVisualizationOptions(props), getLibraryPanelOptionsCategory(props)],\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [panel.configRev, props.data, props.instanceState, searchQuery]\n  );\n\n  const justOverrides = useMemo(\n    () => getFieldOverrideCategories(props, searchQuery),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [panel.configRev, props.data, props.instanceState, searchQuery]\n  );\n\n  const mainBoxElements: React.ReactNode[] = [];\n  const isSearching = searchQuery.length > 0;\n  const optionRadioFilters = useMemo(getOptionRadioFilters, []);\n\n  const allOptions = isPanelModelLibraryPanel(panel)\n    ? [libraryPanelOptions, panelFrameOptions, ...vizOptions]\n    : [panelFrameOptions, ...vizOptions];\n\n  if (isSearching) {\n    mainBoxElements.push(renderSearchHits(allOptions, justOverrides, searchQuery));\n\n    // If searching for angular panel, then we need to add notice that results are limited\n    if (props.plugin.angularPanelCtrl) {\n      mainBoxElements.push(\n        <div className={styles.searchNotice} key=\"Search notice\">\n          This is an old visualization type that does not support searching all options.\n        </div>\n      );\n    }\n  } else {\n    switch (listMode) {\n      case OptionFilter.All:\n        if (isPanelModelLibraryPanel(panel)) {\n          // Library Panel options first\n          mainBoxElements.push(libraryPanelOptions.render());\n        }\n        // Panel frame options second\n        mainBoxElements.push(panelFrameOptions.render());\n        // If angular add those options next\n        if (props.plugin.angularPanelCtrl) {\n          mainBoxElements.push(\n            <AngularPanelOptions plugin={plugin} dashboard={dashboard} panel={panel} key=\"AngularOptions\" />\n          );\n        }\n        // Then add all panel and field defaults\n        for (const item of vizOptions) {\n          mainBoxElements.push(item.render());\n        }\n\n        for (const item of justOverrides) {\n          mainBoxElements.push(item.render());\n        }\n        break;\n      case OptionFilter.Overrides:\n        for (const override of justOverrides) {\n          mainBoxElements.push(override.render());\n        }\n        break;\n      case OptionFilter.Recent:\n        mainBoxElements.push(\n          <OptionsPaneCategory id=\"Recent options\" title=\"Recent options\" key=\"Recent options\" forceOpen={1}>\n            {getRecentOptions(allOptions).map((item) => item.render())}\n          </OptionsPaneCategory>\n        );\n        break;\n    }\n  }\n\n  // only show radio buttons if we are searching or if the plugin has field config\n  const showSearchRadioButtons = !isSearching && !plugin.fieldConfigRegistry.isEmpty();\n\n  return (\n    <div className={styles.wrapper}>\n      <div className={styles.formBox}>\n        {panel.isAngularPlugin() && !plugin.meta.angular?.hideDeprecation && (\n          <AngularDeprecationPluginNotice\n            className={styles.angularDeprecationWrapper}\n            showPluginDetailsLink={true}\n            pluginId={plugin.meta.id}\n            pluginType={plugin.meta.type}\n            angularSupportEnabled={config?.angularSupportEnabled}\n            interactionElementId=\"panel-options\"\n          />\n        )}\n        <div className={styles.formRow}>\n          <FilterInput width={0} value={searchQuery} onChange={setSearchQuery} placeholder={'Search options'} />\n        </div>\n        {showSearchRadioButtons && (\n          <div className={styles.formRow}>\n            <RadioButtonGroup options={optionRadioFilters} value={listMode} fullWidth onChange={setListMode} />\n          </div>\n        )}\n      </div>\n      <div className={styles.scrollWrapper}>\n        <CustomScrollbar autoHeightMin=\"100%\">\n          <div className={styles.mainBox}>{mainBoxElements}</div>\n        </CustomScrollbar>\n      </div>\n    </div>\n  );\n};\n\nfunction getOptionRadioFilters(): Array<SelectableValue<OptionFilter>> {\n  return [\n    { label: OptionFilter.All, value: OptionFilter.All },\n    { label: OptionFilter.Overrides, value: OptionFilter.Overrides },\n  ];\n}\n\nexport enum OptionFilter {\n  All = 'All',\n  Overrides = 'Overrides',\n  Recent = 'Recent',\n}\n\nfunction renderSearchHits(\n  allOptions: OptionsPaneCategoryDescriptor[],\n  overrides: OptionsPaneCategoryDescriptor[],\n  searchQuery: string\n) {\n  const engine = new OptionSearchEngine(allOptions, overrides);\n  const { optionHits, totalCount, overrideHits } = engine.search(searchQuery);\n\n  return (\n    <div key=\"search results\">\n      <OptionsPaneCategory\n        id=\"Found options\"\n        title={`Matched ${optionHits.length}/${totalCount} options`}\n        key=\"Normal options\"\n        forceOpen={1}\n      >\n        {optionHits.map((hit) => hit.render(searchQuery))}\n      </OptionsPaneCategory>\n      {overrideHits.map((override) => override.render(searchQuery))}\n    </div>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  wrapper: css`\n    height: 100%;\n    display: flex;\n    flex-direction: column;\n    flex: 1 1 0;\n\n    .search-fragment-highlight {\n      color: ${theme.colors.warning.text};\n      background: transparent;\n    }\n  `,\n  searchBox: css`\n    display: flex;\n    flex-direction: column;\n    min-height: 0;\n  `,\n  formRow: css`\n    margin-bottom: ${theme.spacing(1)};\n  `,\n  formBox: css`\n    padding: ${theme.spacing(1)};\n    background: ${theme.colors.background.primary};\n    border: 1px solid ${theme.components.panel.borderColor};\n    border-top-left-radius: ${theme.shape.borderRadius(1.5)};\n    border-bottom: none;\n  `,\n  closeButton: css`\n    margin-left: ${theme.spacing(1)};\n  `,\n  searchHits: css`\n    padding: ${theme.spacing(1, 1, 0, 1)};\n  `,\n  scrollWrapper: css`\n    flex-grow: 1;\n    min-height: 0;\n  `,\n  searchNotice: css`\n    font-size: ${theme.typography.size.sm};\n    color: ${theme.colors.text.secondary};\n    padding: ${theme.spacing(1)};\n    text-align: center;\n  `,\n  mainBox: css`\n    background: ${theme.colors.background.primary};\n    border: 1px solid ${theme.components.panel.borderColor};\n    border-top: none;\n    flex-grow: 1;\n  `,\n  angularDeprecationWrapper: css`\n    padding: ${theme.spacing(1)};\n  `,\n});\n","import { PanelPlugin } from '@grafana/data';\nimport { StoreState } from 'app/types';\n\nimport { getPanelPluginNotFound } from '../../panel/components/PanelPluginError';\n\nexport const getPanelPluginWithFallback =\n  (panelType: string) =>\n  (state: StoreState): PanelPlugin => {\n    const plugin = state.plugins.panels[panelType];\n    return plugin || getPanelPluginNotFound(`Panel plugin not found (${panelType})`, true);\n  };\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { selectors } from '@grafana/e2e-selectors';\nimport { ToolbarButton, ButtonGroup } from '@grafana/ui';\nimport { useDispatch, useSelector } from 'app/types';\n\nimport { PanelModel } from '../../state';\nimport { getPanelPluginWithFallback } from '../../state/selectors';\n\nimport { updatePanelEditorUIState } from './state/actions';\nimport { toggleVizPicker } from './state/reducers';\n\ntype Props = {\n  panel: PanelModel;\n};\n\nexport const VisualizationButton = ({ panel }: Props) => {\n  const dispatch = useDispatch();\n  const plugin = useSelector(getPanelPluginWithFallback(panel.type));\n  const isPanelOptionsVisible = useSelector((state) => state.panelEditor.ui.isPanelOptionsVisible);\n  const isVizPickerOpen = useSelector((state) => state.panelEditor.isVizPickerOpen);\n\n  const onToggleOpen = () => {\n    dispatch(toggleVizPicker(!isVizPickerOpen));\n  };\n\n  const onToggleOptionsPane = () => {\n    dispatch(updatePanelEditorUIState({ isPanelOptionsVisible: !isPanelOptionsVisible }));\n  };\n\n  if (!plugin) {\n    return null;\n  }\n\n  return (\n    <div className={styles.wrapper}>\n      <ButtonGroup>\n        <ToolbarButton\n          className={styles.vizButton}\n          tooltip=\"Click to change visualization\"\n          imgSrc={plugin.meta.info.logos.small}\n          isOpen={isVizPickerOpen}\n          onClick={onToggleOpen}\n          data-testid={selectors.components.PanelEditor.toggleVizPicker}\n          aria-label=\"Change Visualization\"\n          variant=\"canvas\"\n          fullWidth\n        >\n          {plugin.meta.name}\n        </ToolbarButton>\n        <ToolbarButton\n          tooltip={isPanelOptionsVisible ? 'Close options pane' : 'Show options pane'}\n          icon={isPanelOptionsVisible ? 'angle-right' : 'angle-left'}\n          onClick={onToggleOptionsPane}\n          variant=\"canvas\"\n          data-testid={selectors.components.PanelEditor.toggleVizOptions}\n          aria-label={isPanelOptionsVisible ? 'Close options pane' : 'Show options pane'}\n        />\n      </ButtonGroup>\n    </div>\n  );\n};\n\nVisualizationButton.displayName = 'VisualizationTab';\n\nconst styles = {\n  wrapper: css`\n    display: flex;\n    flex-direction: column;\n  `,\n  vizButton: css`\n    text-align: left;\n  `,\n};\n","import React from 'react';\n\nimport { ConfirmModal } from '@grafana/ui';\n\nimport { PanelModel } from '../../../dashboard/state';\nimport { isPanelModelLibraryPanel } from '../../guard';\n\nexport interface ChangeLibraryPanelModalProps {\n  panel: PanelModel;\n  onConfirm: () => void;\n  onDismiss: () => void;\n}\n\nexport const ChangeLibraryPanelModal = ({ onConfirm, onDismiss, panel }: ChangeLibraryPanelModalProps): JSX.Element => {\n  const isLibraryPanel = isPanelModelLibraryPanel(panel);\n  const title = `${isLibraryPanel ? 'Changing' : 'Replace with'} library panel`;\n  const body = `${\n    isLibraryPanel ? 'Changing' : 'Replacing with a'\n  } library panel will remove any changes since last save.`;\n  return (\n    <ConfirmModal\n      onConfirm={onConfirm}\n      onDismiss={onDismiss}\n      confirmText={isLibraryPanel ? 'Change' : 'Replace'}\n      title={title}\n      body={body}\n      dismissText=\"Cancel\"\n      isOpen={true}\n    />\n  );\n};\n","import { css } from '@emotion/css';\nimport React, { useCallback, useState } from 'react';\n\nimport { PanelPluginMeta } from '@grafana/data';\nimport { Button, VerticalGroup } from '@grafana/ui';\nimport { getDashboardSrv } from 'app/features/dashboard/services/DashboardSrv';\nimport { PanelModel } from 'app/features/dashboard/state';\nimport { changeToLibraryPanel } from 'app/features/panel/state/actions';\nimport { useDispatch } from 'app/types';\n\nimport { PanelTypeFilter } from '../../../../core/components/PanelTypeFilter/PanelTypeFilter';\nimport { LibraryElementDTO } from '../../types';\nimport { AddLibraryPanelModal } from '../AddLibraryPanelModal/AddLibraryPanelModal';\nimport { ChangeLibraryPanelModal } from '../ChangeLibraryPanelModal/ChangeLibraryPanelModal';\nimport { LibraryPanelsView } from '../LibraryPanelsView/LibraryPanelsView';\n\ninterface Props {\n  panel: PanelModel;\n  searchQuery: string;\n  isWidget?: boolean;\n}\n\nexport const PanelLibraryOptionsGroup = ({ panel, searchQuery, isWidget = false }: Props) => {\n  const [showingAddPanelModal, setShowingAddPanelModal] = useState(false);\n  const [changeToPanel, setChangeToPanel] = useState<LibraryElementDTO | undefined>(undefined);\n  const [panelFilter, setPanelFilter] = useState<string[]>([]);\n  const onPanelFilterChange = useCallback(\n    (plugins: PanelPluginMeta[]) => {\n      setPanelFilter(plugins.map((p) => p.id));\n    },\n    [setPanelFilter]\n  );\n  const dashboard = getDashboardSrv().getCurrent();\n  const dispatch = useDispatch();\n\n  const useLibraryPanel = async () => {\n    if (!changeToPanel) {\n      return;\n    }\n\n    setChangeToPanel(undefined);\n    dispatch(changeToLibraryPanel(panel, changeToPanel));\n  };\n\n  const onAddToPanelLibrary = () => setShowingAddPanelModal(true);\n  const onDismissChangeToPanel = () => setChangeToPanel(undefined);\n  return (\n    <VerticalGroup spacing=\"md\">\n      {!panel.libraryPanel && (\n        <VerticalGroup align=\"center\">\n          <Button icon=\"plus\" onClick={onAddToPanelLibrary} variant=\"secondary\" fullWidth>\n            Create new library panel\n          </Button>\n        </VerticalGroup>\n      )}\n\n      <PanelTypeFilter onChange={onPanelFilterChange} isWidget={isWidget} />\n\n      <div className={styles.libraryPanelsView}>\n        <LibraryPanelsView\n          currentPanelId={panel.libraryPanel?.uid}\n          searchString={searchQuery}\n          panelFilter={panelFilter}\n          onClickCard={setChangeToPanel}\n          showSecondaryActions\n          isWidget={isWidget}\n        />\n      </div>\n\n      {showingAddPanelModal && (\n        <AddLibraryPanelModal\n          panel={panel}\n          onDismiss={() => setShowingAddPanelModal(false)}\n          initialFolderUid={dashboard?.meta.folderUid}\n          isOpen={showingAddPanelModal}\n        />\n      )}\n\n      {changeToPanel && (\n        <ChangeLibraryPanelModal panel={panel} onDismiss={onDismissChangeToPanel} onConfirm={useLibraryPanel} />\n      )}\n    </VerticalGroup>\n  );\n};\n\nconst styles = {\n  libraryPanelsView: css`\n    width: 100%;\n  `,\n};\n","import {\n  PanelData,\n  VisualizationSuggestion,\n  VisualizationSuggestionsBuilder,\n  PanelModel,\n  VisualizationSuggestionScore,\n} from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport { importPanelPlugin } from 'app/features/plugins/importPanelPlugin';\n\nexport const panelsToCheckFirst = [\n  'timeseries',\n  'barchart',\n  'gauge',\n  'stat',\n  'piechart',\n  'bargauge',\n  'table',\n  'state-timeline',\n  'status-history',\n  'logs',\n  'candlestick',\n  'flamegraph',\n];\n\nexport async function getAllSuggestions(data?: PanelData, panel?: PanelModel): Promise<VisualizationSuggestion[]> {\n  const builder = new VisualizationSuggestionsBuilder(data, panel);\n\n  for (const pluginId of panelsToCheckFirst) {\n    const plugin = await importPanelPlugin(pluginId);\n    const supplier = plugin.getSuggestionsSupplier();\n\n    if (supplier) {\n      supplier.getSuggestionsForData(builder);\n    }\n  }\n\n  const list = builder.getList();\n\n  if (!config.featureToggles.vizAndWidgetSplit && builder.dataSummary.fieldCount === 0) {\n    for (const plugin of Object.values(config.panels)) {\n      if (!plugin.skipDataQuery || plugin.hideFromList) {\n        continue;\n      }\n\n      list.push({\n        name: plugin.name,\n        pluginId: plugin.id,\n        description: plugin.info.description,\n        cardOptions: {\n          imgSrc: plugin.info.logos.small,\n        },\n      });\n    }\n  }\n\n  return list.sort((a, b) => {\n    if (builder.dataSummary.preferredVisualisationType) {\n      if (a.pluginId === builder.dataSummary.preferredVisualisationType) {\n        return -1;\n      }\n      if (b.pluginId === builder.dataSummary.preferredVisualisationType) {\n        return 1;\n      }\n    }\n    return (b.score ?? VisualizationSuggestionScore.OK) - (a.score ?? VisualizationSuggestionScore.OK);\n  });\n}\n","import { css, cx } from '@emotion/css';\nimport { cloneDeep } from 'lodash';\nimport React, { CSSProperties } from 'react';\n\nimport { GrafanaTheme2, PanelData, VisualizationSuggestion } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { Tooltip, useStyles2 } from '@grafana/ui';\n\nimport { PanelRenderer } from '../PanelRenderer';\n\nimport { VizTypeChangeDetails } from './types';\n\nexport interface Props {\n  data: PanelData;\n  width: number;\n  suggestion: VisualizationSuggestion;\n  onChange: (details: VizTypeChangeDetails) => void;\n}\n\nexport function VisualizationSuggestionCard({ data, suggestion, onChange, width }: Props) {\n  const styles = useStyles2(getStyles);\n  const { innerStyles, outerStyles, renderWidth, renderHeight } = getPreviewDimensionsAndStyles(width);\n  const cardOptions = suggestion.cardOptions ?? {};\n\n  const commonButtonProps = {\n    'aria-label': suggestion.name,\n    className: styles.vizBox,\n    'data-testid': selectors.components.VisualizationPreview.card(suggestion.name),\n    style: outerStyles,\n    onClick: () => {\n      onChange({\n        pluginId: suggestion.pluginId,\n        options: suggestion.options,\n        fieldConfig: suggestion.fieldConfig,\n      });\n    },\n  };\n\n  if (cardOptions.imgSrc) {\n    return (\n      <Tooltip content={suggestion.description ?? suggestion.name}>\n        <button {...commonButtonProps} className={cx(styles.vizBox, styles.imgBox)}>\n          <div className={styles.name}>{suggestion.name}</div>\n          <img className={styles.img} src={cardOptions.imgSrc} alt={suggestion.name} />\n        </button>\n      </Tooltip>\n    );\n  }\n\n  let preview = suggestion;\n  if (suggestion.cardOptions?.previewModifier) {\n    preview = cloneDeep(suggestion);\n    suggestion.cardOptions.previewModifier(preview);\n  }\n\n  return (\n    <button {...commonButtonProps}>\n      <Tooltip content={suggestion.name}>\n        <div style={innerStyles} className={styles.renderContainer}>\n          <PanelRenderer\n            title=\"\"\n            data={data}\n            pluginId={suggestion.pluginId}\n            width={renderWidth}\n            height={renderHeight}\n            options={preview.options}\n            fieldConfig={preview.fieldConfig}\n          />\n          <div className={styles.hoverPane} />\n        </div>\n      </Tooltip>\n    </button>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    hoverPane: css({\n      position: 'absolute',\n      top: 0,\n      right: 0,\n      left: 0,\n      borderRadius: theme.spacing(2),\n      bottom: 0,\n    }),\n    vizBox: css`\n      position: relative;\n      background: none;\n      border-radius: ${theme.shape.radius.default};\n      cursor: pointer;\n      border: 1px solid ${theme.colors.border.medium};\n\n      transition: ${theme.transitions.create(['background'], {\n        duration: theme.transitions.duration.short,\n      })};\n\n      &:hover {\n        background: ${theme.colors.background.secondary};\n      }\n    `,\n    imgBox: css`\n      display: flex;\n      flex-direction: column;\n      height: 100%;\n\n      justify-self: center;\n      color: ${theme.colors.text.primary};\n      width: 100%;\n      display: flex;\n\n      justify-content: center;\n      align-items: center;\n      text-align: center;\n    `,\n    name: css`\n      padding-bottom: ${theme.spacing(0.5)};\n      margin-top: ${theme.spacing(-1)};\n      font-size: ${theme.typography.bodySmall.fontSize};\n      white-space: nowrap;\n      overflow: hidden;\n      color: ${theme.colors.text.secondary};\n      font-weight: ${theme.typography.fontWeightMedium};\n      text-overflow: ellipsis;\n    `,\n    img: css`\n      max-width: ${theme.spacing(8)};\n      max-height: ${theme.spacing(8)};\n    `,\n    renderContainer: css`\n      position: absolute;\n      transform-origin: left top;\n      top: 6px;\n      left: 6px;\n    `,\n  };\n};\n\ninterface PreviewDimensionsAndStyles {\n  renderWidth: number;\n  renderHeight: number;\n  innerStyles: CSSProperties;\n  outerStyles: CSSProperties;\n}\n\nfunction getPreviewDimensionsAndStyles(width: number): PreviewDimensionsAndStyles {\n  const aspectRatio = 16 / 10;\n  const showWidth = width;\n  const showHeight = width * (1 / aspectRatio);\n  const renderWidth = 350;\n  const renderHeight = renderWidth * (1 / aspectRatio);\n\n  const padding = 6;\n  const widthFactor = (showWidth - padding * 2) / renderWidth;\n  const heightFactor = (showHeight - padding * 2) / renderHeight;\n\n  return {\n    renderHeight,\n    renderWidth,\n    outerStyles: { width: showWidth, height: showHeight },\n    innerStyles: {\n      width: renderWidth,\n      height: renderHeight,\n      transform: `scale(${widthFactor}, ${heightFactor})`,\n    },\n  };\n}\n","import { css } from '@emotion/css';\nimport React from 'react';\nimport { useAsync } from 'react-use';\nimport AutoSizer from 'react-virtualized-auto-sizer';\n\nimport { GrafanaTheme2, PanelData, PanelModel, VisualizationSuggestion } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\n\nimport { getAllSuggestions } from '../../state/getAllSuggestions';\n\nimport { VisualizationSuggestionCard } from './VisualizationSuggestionCard';\nimport { VizTypeChangeDetails } from './types';\n\nexport interface Props {\n  searchQuery: string;\n  onChange: (options: VizTypeChangeDetails) => void;\n  data?: PanelData;\n  panel?: PanelModel;\n}\n\nexport function VisualizationSuggestions({ searchQuery, onChange, data, panel }: Props) {\n  const styles = useStyles2(getStyles);\n  const { value: suggestions } = useAsync(() => getAllSuggestions(data, panel), [data, panel]);\n  const filteredSuggestions = filterSuggestionsBySearch(searchQuery, suggestions);\n\n  return (\n    <AutoSizer disableHeight style={{ width: '100%', height: '100%' }}>\n      {({ width }) => {\n        if (!width) {\n          return null;\n        }\n\n        const columnCount = Math.floor(width / 170);\n        const spaceBetween = 8 * (columnCount! - 1);\n        const previewWidth = (width - spaceBetween) / columnCount!;\n\n        return (\n          <div>\n            <div className={styles.filterRow}>\n              <div className={styles.infoText}>Based on current data</div>\n            </div>\n            <div className={styles.grid} style={{ gridTemplateColumns: `repeat(auto-fill, ${previewWidth - 1}px)` }}>\n              {filteredSuggestions.map((suggestion, index) => (\n                <VisualizationSuggestionCard\n                  key={index}\n                  data={data!}\n                  suggestion={suggestion}\n                  onChange={onChange}\n                  width={previewWidth}\n                />\n              ))}\n              {searchQuery && filteredSuggestions.length === 0 && (\n                <div className={styles.infoText}>No results matched your query</div>\n              )}\n            </div>\n          </div>\n        );\n      }}\n    </AutoSizer>\n  );\n}\n\nfunction filterSuggestionsBySearch(\n  searchQuery: string,\n  suggestions?: VisualizationSuggestion[]\n): VisualizationSuggestion[] {\n  if (!searchQuery || !suggestions) {\n    return suggestions || [];\n  }\n\n  const regex = new RegExp(searchQuery, 'i');\n\n  return suggestions.filter((s) => regex.test(s.name) || regex.test(s.pluginId));\n}\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    heading: css({\n      ...theme.typography.h5,\n      margin: theme.spacing(0, 0.5, 1),\n    }),\n    filterRow: css({\n      display: 'flex',\n      flexDirection: 'row',\n      justifyContent: 'space-around',\n      alignItems: 'center',\n      paddingBottom: '8px',\n    }),\n    infoText: css({\n      fontSize: theme.typography.bodySmall.fontSize,\n      color: theme.colors.text.secondary,\n      fontStyle: 'italic',\n    }),\n    grid: css({\n      display: 'grid',\n      gridGap: theme.spacing(1),\n      gridTemplateColumns: 'repeat(auto-fill, 144px)',\n      marginBottom: theme.spacing(1),\n      justifyContent: 'space-evenly',\n    }),\n  };\n};\n","import { css } from '@emotion/css';\nimport React, { useCallback, useRef, useState } from 'react';\nimport { useLocalStorage } from 'react-use';\n\nimport { GrafanaTheme2, PanelData, SelectableValue } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { config } from '@grafana/runtime';\nimport { Button, CustomScrollbar, FilterInput, RadioButtonGroup, useStyles2 } from '@grafana/ui';\nimport { Field } from '@grafana/ui/src/components/Forms/Field';\nimport { LS_VISUALIZATION_SELECT_TAB_KEY, LS_WIDGET_SELECT_TAB_KEY } from 'app/core/constants';\nimport { PanelLibraryOptionsGroup } from 'app/features/library-panels/components/PanelLibraryOptionsGroup/PanelLibraryOptionsGroup';\nimport { VisualizationSuggestions } from 'app/features/panel/components/VizTypePicker/VisualizationSuggestions';\nimport { VizTypeChangeDetails } from 'app/features/panel/components/VizTypePicker/types';\nimport { useDispatch, useSelector } from 'app/types';\n\nimport { VizTypePicker } from '../../../panel/components/VizTypePicker/VizTypePicker';\nimport { changePanelPlugin } from '../../../panel/state/actions';\nimport { PanelModel } from '../../state/PanelModel';\nimport { getPanelPluginWithFallback } from '../../state/selectors';\n\nimport { toggleVizPicker } from './state/reducers';\nimport { VisualizationSelectPaneTab } from './types';\n\ninterface Props {\n  panel: PanelModel;\n  data?: PanelData;\n}\n\nexport const VisualizationSelectPane = ({ panel, data }: Props) => {\n  const plugin = useSelector(getPanelPluginWithFallback(panel.type));\n  const [searchQuery, setSearchQuery] = useState('');\n\n  // Add support to show widgets in the visualization picker\n  const isWidget = !!plugin.meta.skipDataQuery;\n  const isWidgetEnabled = Boolean(isWidget && config.featureToggles.vizAndWidgetSplit);\n\n  const tabKey = isWidgetEnabled ? LS_WIDGET_SELECT_TAB_KEY : LS_VISUALIZATION_SELECT_TAB_KEY;\n  const defaultTab = isWidgetEnabled ? VisualizationSelectPaneTab.Widgets : VisualizationSelectPaneTab.Visualizations;\n\n  const [listMode, setListMode] = useLocalStorage(tabKey, defaultTab);\n\n  const dispatch = useDispatch();\n  const styles = useStyles2(getStyles);\n  const searchRef = useRef<HTMLInputElement | null>(null);\n\n  const onVizChange = useCallback(\n    (pluginChange: VizTypeChangeDetails) => {\n      dispatch(changePanelPlugin({ panel: panel, ...pluginChange }));\n\n      // close viz picker unless a mod key is pressed while clicking\n      if (!pluginChange.withModKey) {\n        dispatch(toggleVizPicker(false));\n      }\n    },\n    [dispatch, panel]\n  );\n\n  const onCloseVizPicker = () => {\n    dispatch(toggleVizPicker(false));\n  };\n\n  if (!plugin) {\n    return null;\n  }\n\n  const radioOptions: Array<SelectableValue<VisualizationSelectPaneTab>> = [\n    { label: 'Visualizations', value: VisualizationSelectPaneTab.Visualizations },\n    { label: 'Suggestions', value: VisualizationSelectPaneTab.Suggestions },\n    {\n      label: 'Library panels',\n      value: VisualizationSelectPaneTab.LibraryPanels,\n      description: 'Reusable panels you can share between multiple dashboards.',\n    },\n  ];\n\n  const radioOptionsWidgetFlow: Array<SelectableValue<VisualizationSelectPaneTab>> = [\n    { label: 'Widgets', value: VisualizationSelectPaneTab.Widgets },\n    {\n      label: 'Library panels',\n      value: VisualizationSelectPaneTab.LibraryPanels,\n      description: 'Reusable panels you can share between multiple dashboards.',\n    },\n  ];\n\n  return (\n    <div className={styles.openWrapper}>\n      <div className={styles.formBox}>\n        <div className={styles.searchRow}>\n          <FilterInput\n            value={searchQuery}\n            onChange={setSearchQuery}\n            ref={searchRef}\n            autoFocus={true}\n            placeholder=\"Search for...\"\n          />\n          <Button\n            title=\"Close\"\n            variant=\"secondary\"\n            icon=\"angle-up\"\n            className={styles.closeButton}\n            aria-label={selectors.components.PanelEditor.toggleVizPicker}\n            onClick={onCloseVizPicker}\n          />\n        </div>\n        <Field className={styles.customFieldMargin}>\n          <RadioButtonGroup\n            options={isWidgetEnabled ? radioOptionsWidgetFlow : radioOptions}\n            value={listMode}\n            onChange={setListMode}\n            fullWidth\n          />\n        </Field>\n      </div>\n      <div className={styles.scrollWrapper}>\n        <CustomScrollbar autoHeightMin=\"100%\">\n          <div className={styles.scrollContent}>\n            {listMode === VisualizationSelectPaneTab.Visualizations && (\n              <VizTypePicker pluginId={plugin.meta.id} onChange={onVizChange} searchQuery={searchQuery} />\n            )}\n            {listMode === VisualizationSelectPaneTab.Widgets && (\n              <VizTypePicker pluginId={plugin.meta.id} onChange={onVizChange} searchQuery={searchQuery} isWidget />\n            )}\n\n            {listMode === VisualizationSelectPaneTab.Suggestions && (\n              <VisualizationSuggestions onChange={onVizChange} searchQuery={searchQuery} panel={panel} data={data} />\n            )}\n            {listMode === VisualizationSelectPaneTab.LibraryPanels && (\n              <PanelLibraryOptionsGroup\n                searchQuery={searchQuery}\n                panel={panel}\n                key=\"Panel Library\"\n                isWidget={isWidget}\n              />\n            )}\n          </div>\n        </CustomScrollbar>\n      </div>\n    </div>\n  );\n};\n\nVisualizationSelectPane.displayName = 'VisualizationSelectPane';\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    icon: css`\n      color: ${theme.v1.palette.gray33};\n    `,\n    wrapper: css`\n      display: flex;\n      flex-direction: column;\n      flex: 1 1 0;\n      height: 100%;\n    `,\n    vizButton: css`\n      text-align: left;\n    `,\n    scrollWrapper: css`\n      flex-grow: 1;\n      min-height: 0;\n    `,\n    scrollContent: css`\n      padding: ${theme.spacing(1)};\n    `,\n    openWrapper: css`\n      display: flex;\n      flex-direction: column;\n      flex: 1 1 100%;\n      height: 100%;\n      background: ${theme.colors.background.primary};\n      border: 1px solid ${theme.colors.border.weak};\n    `,\n    searchRow: css`\n      display: flex;\n      margin-bottom: ${theme.spacing(1)};\n    `,\n    closeButton: css`\n      margin-left: ${theme.spacing(1)};\n    `,\n    customFieldMargin: css`\n      margin-bottom: ${theme.spacing(1)};\n    `,\n    formBox: css`\n      padding: ${theme.spacing(1)};\n      padding-bottom: 0;\n    `,\n  };\n};\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { useStyles2 } from '@grafana/ui';\nimport { useSelector } from 'app/types';\n\nimport { OptionsPaneOptions } from './OptionsPaneOptions';\nimport { VisualizationButton } from './VisualizationButton';\nimport { VisualizationSelectPane } from './VisualizationSelectPane';\nimport { OptionPaneRenderProps } from './types';\nimport { usePanelLatestData } from './usePanelLatestData';\n\nexport const OptionsPane = ({\n  plugin,\n  panel,\n  onFieldConfigsChange,\n  onPanelOptionsChanged,\n  onPanelConfigChange,\n  dashboard,\n  instanceState,\n}: OptionPaneRenderProps) => {\n  const styles = useStyles2(getStyles);\n  const isVizPickerOpen = useSelector((state) => state.panelEditor.isVizPickerOpen);\n  const { data } = usePanelLatestData(panel, { withTransforms: true, withFieldConfig: false }, true);\n\n  return (\n    <div className={styles.wrapper} aria-label={selectors.components.PanelEditor.OptionsPane.content}>\n      {!isVizPickerOpen && (\n        <>\n          <div className={styles.vizButtonWrapper}>\n            <VisualizationButton panel={panel} />\n          </div>\n          <div className={styles.optionsWrapper}>\n            <OptionsPaneOptions\n              panel={panel}\n              dashboard={dashboard}\n              plugin={plugin}\n              instanceState={instanceState}\n              data={data}\n              onFieldConfigsChange={onFieldConfigsChange}\n              onPanelOptionsChanged={onPanelOptionsChanged}\n              onPanelConfigChange={onPanelConfigChange}\n            />\n          </div>\n        </>\n      )}\n      {isVizPickerOpen && <VisualizationSelectPane panel={panel} data={data} />}\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    wrapper: css`\n      height: 100%;\n      width: 100%;\n      display: flex;\n      flex: 1 1 0;\n      flex-direction: column;\n      padding: 0;\n    `,\n    optionsWrapper: css`\n      flex-grow: 1;\n      min-height: 0;\n    `,\n    vizButtonWrapper: css`\n      padding: 0 ${theme.spacing(2, 2)} 0;\n    `,\n    legacyOptions: css`\n      label: legacy-options;\n      .panel-options-grid {\n        display: flex;\n        flex-direction: column;\n      }\n      .panel-options-group {\n        margin-bottom: 0;\n      }\n      .panel-options-group__body {\n        padding: ${theme.spacing(2)} 0;\n      }\n\n      .section {\n        display: block;\n        margin: ${theme.spacing(2)} 0;\n\n        &:first-child {\n          margin-top: 0;\n        }\n      }\n    `,\n  };\n};\n","import React, { Component } from 'react';\n\nimport { renderMarkdown, LinkModelSupplier, ScopedVars } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { locationService, getTemplateSrv } from '@grafana/runtime';\nimport { Tooltip, PopoverContent } from '@grafana/ui';\nimport { getTimeSrv, TimeSrv } from 'app/features/dashboard/services/TimeSrv';\nimport { PanelModel } from 'app/features/dashboard/state/PanelModel';\nimport { InspectTab } from 'app/features/inspector/types';\n\nenum InfoMode {\n  Error = 'Error',\n  Info = 'Info',\n  Links = 'Links',\n}\n\nexport interface Props {\n  panel: PanelModel;\n  title?: string;\n  description?: string;\n  scopedVars?: ScopedVars;\n  links?: LinkModelSupplier<PanelModel>;\n  error?: string;\n}\n\nexport class PanelHeaderCorner extends Component<Props> {\n  timeSrv: TimeSrv = getTimeSrv();\n\n  getInfoMode = () => {\n    const { panel, error } = this.props;\n    if (error) {\n      return InfoMode.Error;\n    }\n    if (!!panel.description) {\n      return InfoMode.Info;\n    }\n    if (panel.links && panel.links.length) {\n      return InfoMode.Links;\n    }\n\n    return undefined;\n  };\n\n  getInfoContent = (): JSX.Element => {\n    const { panel } = this.props;\n    const markdown = panel.description || '';\n    const interpolatedMarkdown = getTemplateSrv().replace(markdown, panel.scopedVars);\n    const markedInterpolatedMarkdown = renderMarkdown(interpolatedMarkdown);\n    const links = this.props.links && this.props.links.getLinks(panel.replaceVariables);\n\n    return (\n      <div className=\"panel-info-content markdown-html\">\n        <div dangerouslySetInnerHTML={{ __html: markedInterpolatedMarkdown }} />\n\n        {links && links.length > 0 && (\n          <ul className=\"panel-info-corner-links\">\n            {links.map((link, idx) => {\n              return (\n                <li key={idx}>\n                  <a className=\"panel-info-corner-links__item\" href={link.href} target={link.target}>\n                    {link.title}\n                  </a>\n                </li>\n              );\n            })}\n          </ul>\n        )}\n      </div>\n    );\n  };\n\n  /**\n   * Open the Panel Inspector when we click on an error\n   */\n  onClickError = () => {\n    locationService.partial({\n      inspect: this.props.panel.id,\n      inspectTab: InspectTab.Error,\n    });\n  };\n\n  renderCornerType(infoMode: InfoMode, content: PopoverContent, onClick?: () => void) {\n    const theme = infoMode === InfoMode.Error ? 'error' : 'info';\n    const className = `panel-info-corner panel-info-corner--${infoMode.toLowerCase()}`;\n    const ariaLabel = selectors.components.Panels.Panel.headerCornerInfo(infoMode.toLowerCase());\n\n    return (\n      <Tooltip content={content} placement=\"top-start\" theme={theme} interactive>\n        <button type=\"button\" className={className} onClick={onClick} aria-label={ariaLabel}>\n          <i aria-hidden className=\"fa\" />\n          <span className=\"panel-info-corner-inner\" />\n        </button>\n      </Tooltip>\n    );\n  }\n\n  render() {\n    const { error } = this.props;\n    const infoMode: InfoMode | undefined = this.getInfoMode();\n\n    if (!infoMode) {\n      return null;\n    }\n\n    if (infoMode === InfoMode.Error && error) {\n      return this.renderCornerType(infoMode, error, this.onClickError);\n    }\n\n    if (infoMode === InfoMode.Info || infoMode === InfoMode.Links) {\n      return this.renderCornerType(infoMode, this.getInfoContent);\n    }\n\n    return null;\n  }\n}\n\nexport default PanelHeaderCorner;\n","import React, { useEffect, useState } from 'react';\n\nimport { RefreshEvent } from '@grafana/runtime';\nimport { PanelChrome } from '@grafana/ui';\nimport { applyPanelTimeOverrides } from 'app/features/dashboard/utils/panel';\nimport { PanelRenderer } from 'app/features/panel/components/PanelRenderer';\nimport { Options } from 'app/plugins/panel/table/panelcfg.gen';\n\nimport { getTimeSrv } from '../../services/TimeSrv';\nimport { DashboardModel, PanelModel } from '../../state';\n\nimport PanelHeaderCorner from './PanelHeaderCorner';\nimport { usePanelLatestData } from './usePanelLatestData';\n\nexport interface Props {\n  width: number;\n  height: number;\n  panel: PanelModel;\n  dashboard: DashboardModel;\n}\n\nexport function PanelEditorTableView({ width, height, panel, dashboard }: Props) {\n  const { data } = usePanelLatestData(panel, { withTransforms: true, withFieldConfig: false }, false);\n  const [options, setOptions] = useState<Options>({\n    frameIndex: 0,\n    showHeader: true,\n    showTypeIcons: true,\n  });\n\n  // Subscribe to panel event\n  useEffect(() => {\n    const timeSrv = getTimeSrv();\n\n    const sub = panel.events.subscribe(RefreshEvent, () => {\n      const timeData = applyPanelTimeOverrides(panel, timeSrv.timeRange());\n      panel.runAllPanelQueries({\n        dashboardUID: dashboard.uid,\n        dashboardTimezone: dashboard.getTimezone(),\n        timeData,\n        width,\n      });\n    });\n    return () => {\n      sub.unsubscribe();\n    };\n  }, [panel, dashboard, width]);\n\n  if (!data) {\n    return null;\n  }\n\n  const errorMessage = data?.errors\n    ? data.errors.length > 1\n      ? 'Multiple errors found. Click for more details'\n      : data.errors[0].message\n    : data?.error?.message;\n  return (\n    <PanelChrome width={width} height={height} padding=\"none\">\n      {(innerWidth, innerHeight) => (\n        <>\n          <PanelHeaderCorner panel={panel} error={errorMessage} />\n          <PanelRenderer\n            title=\"Raw data\"\n            pluginId=\"table\"\n            width={innerWidth}\n            height={innerHeight}\n            data={data}\n            options={options}\n            onOptionsChange={setOptions}\n          />\n        </>\n      )}\n    </PanelChrome>\n  );\n}\n","import React, { useCallback } from 'react';\n\nimport { locationService } from '@grafana/runtime';\nimport { Button, VerticalGroup } from '@grafana/ui';\nimport { Layout } from '@grafana/ui/src/components/Layout/Layout';\n\nimport { PanelEditorTabId } from './types';\n\nexport interface Props {\n  message: string;\n}\n\nexport function PanelNotSupported({ message }: Props): JSX.Element {\n  const onBackToQueries = useCallback(() => {\n    locationService.partial({ tab: PanelEditorTabId.Query });\n  }, []);\n\n  return (\n    <Layout justify=\"center\" style={{ marginTop: '100px' }}>\n      <VerticalGroup spacing=\"md\">\n        <h2>{message}</h2>\n        <div>\n          <Button size=\"md\" variant=\"secondary\" icon=\"arrow-left\" onClick={onBackToQueries}>\n            Go back to Queries\n          </Button>\n        </div>\n      </VerticalGroup>\n    </Layout>\n  );\n}\n","import { css } from '@emotion/css';\nimport React, { PureComponent } from 'react';\n\nimport { getBackendSrv } from '@grafana/runtime';\nimport { Icon, ConfirmButton, Button } from '@grafana/ui';\n\nimport { DashboardModel } from '../dashboard/state/DashboardModel';\n\nimport alertDef from './state/alertDef';\n\ninterface Props {\n  dashboard: DashboardModel;\n  panelId: number;\n  onRefresh: () => void;\n}\n\ninterface State {\n  stateHistoryItems: any[];\n}\n\nclass StateHistory extends PureComponent<Props, State> {\n  state: State = {\n    stateHistoryItems: [],\n  };\n\n  componentDidMount(): void {\n    const { dashboard, panelId } = this.props;\n\n    getBackendSrv()\n      .get(\n        `/api/annotations?dashboardId=${dashboard.id}&panelId=${panelId}&limit=50&type=alert`,\n        {},\n        `state-history-${dashboard.id}-${panelId}`\n      )\n      .then((data) => {\n        const items = data.map((item: any) => {\n          return {\n            stateModel: alertDef.getStateDisplayModel(item.newState),\n            time: dashboard.formatDate(item.time, 'MMM D, YYYY HH:mm:ss'),\n            info: alertDef.getAlertAnnotationInfo(item),\n          };\n        });\n\n        this.setState({\n          stateHistoryItems: items,\n        });\n      });\n  }\n\n  clearHistory = async () => {\n    const { dashboard, panelId, onRefresh } = this.props;\n\n    await getBackendSrv().post('/api/annotations/mass-delete', {\n      dashboardId: dashboard.id,\n      panelId: panelId,\n    });\n\n    this.setState({ stateHistoryItems: [] });\n    onRefresh();\n  };\n\n  render() {\n    const { stateHistoryItems } = this.state;\n\n    return (\n      <div>\n        {stateHistoryItems.length > 0 && (\n          <div className=\"p-b-1\">\n            <span className=\"muted\">Last 50 state changes</span>\n            <ConfirmButton onConfirm={this.clearHistory} confirmVariant=\"destructive\" confirmText=\"Clear\">\n              <Button\n                className={css`\n                  direction: ltr;\n                `}\n                variant=\"destructive\"\n                icon=\"trash-alt\"\n              >\n                Clear history\n              </Button>\n            </ConfirmButton>\n          </div>\n        )}\n        <ol className=\"alert-rule-list\">\n          {stateHistoryItems.length > 0 ? (\n            stateHistoryItems.map((item, index) => {\n              return (\n                <li className=\"alert-rule-item\" key={`${item.time}-${index}`}>\n                  <div className={`alert-rule-item__icon ${item.stateModel.stateClass}`}>\n                    <Icon name={item.stateModel.iconClass} size=\"xl\" />\n                  </div>\n                  <div className=\"alert-rule-item__body\">\n                    <div className=\"alert-rule-item__header\">\n                      <p className=\"alert-rule-item__name\">{item.alertName}</p>\n                      <div className=\"alert-rule-item__text\">\n                        <span className={`${item.stateModel.stateClass}`}>{item.stateModel.text}</span>\n                      </div>\n                    </div>\n                    {item.info}\n                  </div>\n                  <div className=\"alert-rule-item__time\">{item.time}</div>\n                </li>\n              );\n            })\n          ) : (\n            <i>No state changes recorded</i>\n          )}\n        </ol>\n      </div>\n    );\n  }\n}\n\nexport default StateHistory;\n","import React, { PureComponent } from 'react';\n\nimport { getBackendSrv } from '@grafana/runtime';\nimport {\n  LoadingPlaceholder,\n  JSONFormatter,\n  Icon,\n  HorizontalGroup,\n  ClipboardButton,\n  clearButtonStyles,\n  withTheme2,\n  Themeable2,\n} from '@grafana/ui';\n\nimport { DashboardModel, PanelModel } from '../dashboard/state';\n\nexport interface Props extends Themeable2 {\n  dashboard: DashboardModel;\n  panel: PanelModel;\n}\n\ninterface State {\n  isLoading: boolean;\n  allNodesExpanded: boolean | null;\n  testRuleResponse: {};\n}\n\nclass UnThemedTestRuleResult extends PureComponent<Props, State> {\n  readonly state: State = {\n    isLoading: false,\n    allNodesExpanded: null,\n    testRuleResponse: {},\n  };\n\n  formattedJson: any;\n  clipboard: any;\n\n  componentDidMount() {\n    this.testRule();\n  }\n\n  async testRule() {\n    const { dashboard, panel } = this.props;\n\n    // dashboard save model\n    const model = dashboard.getSaveModelCloneOld();\n\n    // now replace panel to get current edits\n    model.panels = model.panels.map((dashPanel) => {\n      return dashPanel.id === panel.id ? panel.getSaveModel() : dashPanel;\n    });\n\n    const payload = { dashboard: model, panelId: panel.id };\n\n    this.setState({ isLoading: true });\n    const testRuleResponse = await getBackendSrv().post(`/api/alerts/test`, payload);\n    this.setState({ isLoading: false, testRuleResponse });\n  }\n\n  setFormattedJson = (formattedJson: any) => {\n    this.formattedJson = formattedJson;\n  };\n\n  getTextForClipboard = () => {\n    return JSON.stringify(this.formattedJson, null, 2);\n  };\n\n  onToggleExpand = () => {\n    this.setState((prevState) => ({\n      ...prevState,\n      allNodesExpanded: !this.state.allNodesExpanded,\n    }));\n  };\n\n  getNrOfOpenNodes = () => {\n    if (this.state.allNodesExpanded === null) {\n      return 3; // 3 is default, ie when state is null\n    } else if (this.state.allNodesExpanded) {\n      return 20;\n    }\n    return 1;\n  };\n\n  renderExpandCollapse = () => {\n    const { allNodesExpanded } = this.state;\n\n    const collapse = (\n      <>\n        <Icon name=\"minus-circle\" /> Collapse All\n      </>\n    );\n    const expand = (\n      <>\n        <Icon name=\"plus-circle\" /> Expand All\n      </>\n    );\n    return allNodesExpanded ? collapse : expand;\n  };\n\n  render() {\n    const { testRuleResponse, isLoading } = this.state;\n    const clearButton = clearButtonStyles(this.props.theme);\n\n    if (isLoading === true) {\n      return <LoadingPlaceholder text=\"Evaluating rule\" />;\n    }\n\n    const openNodes = this.getNrOfOpenNodes();\n\n    return (\n      <>\n        <div className=\"pull-right\">\n          <HorizontalGroup spacing=\"md\">\n            <button type=\"button\" className={clearButton} onClick={this.onToggleExpand}>\n              {this.renderExpandCollapse()}\n            </button>\n            <ClipboardButton getText={this.getTextForClipboard} icon=\"copy\">\n              Copy to Clipboard\n            </ClipboardButton>\n          </HorizontalGroup>\n        </div>\n\n        <JSONFormatter json={testRuleResponse} open={openNodes} onDidRender={this.setFormattedJson} />\n      </>\n    );\n  }\n}\n\nexport const TestRuleResult = withTheme2(UnThemedTestRuleResult);\n","import React, { PureComponent } from 'react';\nimport { connect, MapDispatchToProps, MapStateToProps } from 'react-redux';\n\nimport { EventBusSrv } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { AngularComponent, config, getAngularLoader, getDataSourceSrv } from '@grafana/runtime';\nimport { Alert, Button, ConfirmModal, Container, CustomScrollbar, HorizontalGroup, Modal } from '@grafana/ui';\nimport EmptyListCTA from 'app/core/components/EmptyListCTA/EmptyListCTA';\nimport { getPanelStateForModel } from 'app/features/panel/state/selectors';\nimport { AppNotificationSeverity, StoreState } from 'app/types';\n\nimport { AlertState } from '../../plugins/datasource/alertmanager/types';\nimport { PanelNotSupported } from '../dashboard/components/PanelEditor/PanelNotSupported';\nimport { DashboardModel } from '../dashboard/state/DashboardModel';\nimport { PanelModel } from '../dashboard/state/PanelModel';\n\nimport StateHistory from './StateHistory';\nimport { TestRuleResult } from './TestRuleResult';\nimport { getAlertingValidationMessage } from './getAlertingValidationMessage';\n\ninterface AngularPanelController {\n  _enableAlert: () => void;\n  alertState: AlertState | null;\n  render: () => void;\n  refresh: () => void;\n}\n\ninterface OwnProps {\n  dashboard: DashboardModel;\n  panel: PanelModel;\n}\n\ninterface ConnectedProps {\n  angularPanelComponent?: AngularComponent | null;\n}\n\ninterface DispatchProps {}\n\nexport type Props = OwnProps & ConnectedProps & DispatchProps;\n\ninterface State {\n  validationMessage: string;\n  showStateHistory: boolean;\n  showDeleteConfirmation: boolean;\n  showTestRule: boolean;\n}\n\nclass UnConnectedAlertTab extends PureComponent<Props, State> {\n  element?: HTMLDivElement | null;\n  component?: AngularComponent;\n  panelCtrl?: AngularPanelController;\n\n  state: State = {\n    validationMessage: '',\n    showStateHistory: false,\n    showDeleteConfirmation: false,\n    showTestRule: false,\n  };\n\n  async componentDidMount() {\n    if (config.angularSupportEnabled) {\n      await import(/* webpackChunkName: \"AlertTabCtrl\" */ 'app/features/alerting/AlertTabCtrl');\n      this.loadAlertTab();\n    } else {\n      // TODO probably need to migrate AlertTab to react\n      alert('Angular support disabled, legacy alerting cannot function without angular support');\n    }\n  }\n\n  onAngularPanelUpdated = () => {\n    this.forceUpdate();\n  };\n\n  componentDidUpdate(prevProps: Props) {\n    this.loadAlertTab();\n  }\n\n  componentWillUnmount() {\n    if (this.component) {\n      this.component.destroy();\n    }\n  }\n\n  async loadAlertTab() {\n    const { panel, angularPanelComponent } = this.props;\n\n    if (!this.element || this.component) {\n      return;\n    }\n\n    if (angularPanelComponent) {\n      const scope = angularPanelComponent.getScope();\n\n      // When full page reloading in edit mode the angular panel has on fully compiled & instantiated yet\n      if (!scope.$$childHead) {\n        setTimeout(() => {\n          this.forceUpdate();\n        });\n        return;\n      }\n\n      this.panelCtrl = scope.$$childHead.ctrl;\n    } else {\n      this.panelCtrl = this.getReactAlertPanelCtrl();\n    }\n\n    const loader = getAngularLoader();\n    const template = '<alert-tab />';\n    const scopeProps = { ctrl: this.panelCtrl };\n\n    this.component = loader.load(this.element, scopeProps, template);\n\n    const validationMessage = await getAlertingValidationMessage(\n      panel.transformations,\n      panel.targets,\n      getDataSourceSrv(),\n      panel.datasource\n    );\n\n    if (validationMessage) {\n      this.setState({ validationMessage });\n    }\n  }\n\n  getReactAlertPanelCtrl() {\n    return {\n      panel: this.props.panel,\n      events: new EventBusSrv(),\n      render: () => {\n        this.props.panel.render();\n      },\n    } as any;\n  }\n\n  onAddAlert = () => {\n    this.panelCtrl?._enableAlert();\n    this.component?.digest();\n    this.forceUpdate();\n  };\n\n  onToggleModal = (prop: keyof Omit<State, 'validationMessage'>) => {\n    const value = this.state[prop];\n    this.setState({ ...this.state, [prop]: !value });\n  };\n\n  renderTestRule = () => {\n    if (!this.state.showTestRule) {\n      return null;\n    }\n\n    const { panel, dashboard } = this.props;\n    const onDismiss = () => this.onToggleModal('showTestRule');\n\n    return (\n      <Modal isOpen={true} icon=\"bug\" title=\"Testing rule\" onDismiss={onDismiss} onClickBackdrop={onDismiss}>\n        <TestRuleResult panel={panel} dashboard={dashboard} />\n      </Modal>\n    );\n  };\n\n  renderDeleteConfirmation = () => {\n    if (!this.state.showDeleteConfirmation) {\n      return null;\n    }\n\n    const { panel } = this.props;\n    const onDismiss = () => this.onToggleModal('showDeleteConfirmation');\n\n    return (\n      <ConfirmModal\n        isOpen={true}\n        icon=\"trash-alt\"\n        title=\"Delete\"\n        body={\n          <div>\n            Are you sure you want to delete this alert rule?\n            <br />\n            <small>You need to save dashboard for the delete to take effect.</small>\n          </div>\n        }\n        confirmText=\"Delete alert\"\n        onDismiss={onDismiss}\n        onConfirm={() => {\n          delete panel.alert;\n          panel.thresholds = [];\n          if (this.panelCtrl) {\n            this.panelCtrl.alertState = null;\n            this.panelCtrl.render();\n          }\n          this.component?.digest();\n          onDismiss();\n        }}\n      />\n    );\n  };\n\n  renderStateHistory = () => {\n    if (!this.state.showStateHistory) {\n      return null;\n    }\n\n    const { panel, dashboard } = this.props;\n    const onDismiss = () => this.onToggleModal('showStateHistory');\n\n    return (\n      <Modal isOpen={true} icon=\"history\" title=\"State history\" onDismiss={onDismiss} onClickBackdrop={onDismiss}>\n        <StateHistory dashboard={dashboard} panelId={panel.id} onRefresh={() => this.panelCtrl?.refresh()} />\n      </Modal>\n    );\n  };\n\n  render() {\n    const { alert, transformations } = this.props.panel;\n    const { validationMessage } = this.state;\n    const hasTransformations = transformations && transformations.length > 0;\n\n    if (!alert && validationMessage) {\n      return <PanelNotSupported message={validationMessage} />;\n    }\n\n    const model = {\n      title: 'Panel has no alert rule defined',\n      buttonIcon: 'bell' as const,\n      onClick: this.onAddAlert,\n      buttonTitle: 'Create Alert',\n    };\n\n    return (\n      <>\n        <CustomScrollbar autoHeightMin=\"100%\">\n          <Container padding=\"md\">\n            <div data-testid={selectors.components.AlertTab.content}>\n              {alert && hasTransformations && (\n                <Alert\n                  severity={AppNotificationSeverity.Error}\n                  title=\"Transformations are not supported in alert queries\"\n                />\n              )}\n\n              <div ref={(element) => (this.element = element)} />\n              {alert && (\n                <HorizontalGroup>\n                  <Button onClick={() => this.onToggleModal('showStateHistory')} variant=\"secondary\">\n                    State history\n                  </Button>\n                  <Button onClick={() => this.onToggleModal('showTestRule')} variant=\"secondary\">\n                    Test rule\n                  </Button>\n                  <Button onClick={() => this.onToggleModal('showDeleteConfirmation')} variant=\"destructive\">\n                    Delete\n                  </Button>\n                </HorizontalGroup>\n              )}\n              {!alert && !validationMessage && <EmptyListCTA {...model} />}\n            </div>\n          </Container>\n        </CustomScrollbar>\n\n        {this.renderTestRule()}\n        {this.renderDeleteConfirmation()}\n        {this.renderStateHistory()}\n      </>\n    );\n  }\n}\n\nconst mapStateToProps: MapStateToProps<ConnectedProps, OwnProps, StoreState> = (state, props) => {\n  return {\n    angularPanelComponent: getPanelStateForModel(state, props.panel)?.angularComponent,\n  };\n};\n\nconst mapDispatchToProps: MapDispatchToProps<DispatchProps, OwnProps> = {};\n\nexport const AlertTab = connect(mapStateToProps, mapDispatchToProps)(UnConnectedAlertTab);\n","import React from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { useAsync } from 'react-use';\n\nimport { urlUtil } from '@grafana/data';\nimport { Alert, Button, LinkButton } from '@grafana/ui';\nimport { DashboardModel, PanelModel } from 'app/features/dashboard/state';\nimport { useSelector } from 'app/types';\n\nimport { logInfo, LogMessages } from '../../Analytics';\nimport { panelToRuleFormValues } from '../../utils/rule-form';\n\ninterface Props {\n  panel: PanelModel;\n  dashboard: DashboardModel;\n  className?: string;\n}\n\nexport const NewRuleFromPanelButton = ({ dashboard, panel, className }: Props) => {\n  const templating = useSelector((state) => {\n    return state.templating;\n  });\n\n  const location = useLocation();\n\n  const { loading, value: formValues } = useAsync(\n    () => panelToRuleFormValues(panel, dashboard),\n    // Templating variables are required to update formValues on each variable's change. It's used implicitly by the templating engine\n    [panel, dashboard, templating]\n  );\n\n  if (loading) {\n    return <Button disabled={true}>New alert rule</Button>;\n  }\n\n  if (!formValues) {\n    return (\n      <Alert severity=\"info\" title=\"No alerting capable query found\">\n        Cannot create alerts from this panel because no query to an alerting capable datasource is found.\n      </Alert>\n    );\n  }\n\n  const ruleFormUrl = urlUtil.renderUrl('alerting/new', {\n    defaults: JSON.stringify(formValues),\n    returnTo: location.pathname + location.search,\n  });\n\n  return (\n    <LinkButton\n      icon=\"bell\"\n      onClick={() => logInfo(LogMessages.alertRuleFromPanel)}\n      href={ruleFormUrl}\n      className={className}\n      data-testid=\"create-alert-rule-button\"\n    >\n      New alert rule\n    </LinkButton>\n  );\n};\n","import { SerializedError } from '@reduxjs/toolkit';\nimport { useEffect, useMemo } from 'react';\n\nimport { DashboardModel, PanelModel } from 'app/features/dashboard/state';\nimport { useDispatch } from 'app/types';\nimport { CombinedRule } from 'app/types/unified-alerting';\n\nimport { fetchPromRulesAction, fetchRulerRulesAction } from '../state/actions';\nimport { Annotation, RULE_LIST_POLL_INTERVAL_MS } from '../utils/constants';\nimport { GRAFANA_RULES_SOURCE_NAME } from '../utils/datasource';\nimport { initialAsyncRequestState } from '../utils/redux';\n\nimport { useCombinedRuleNamespaces } from './useCombinedRuleNamespaces';\nimport { useUnifiedAlertingSelector } from './useUnifiedAlertingSelector';\n\ninterface Options {\n  dashboard: DashboardModel;\n  panel: PanelModel;\n\n  poll?: boolean;\n}\n\ninterface ReturnBag {\n  errors: SerializedError[];\n  rules: CombinedRule[];\n\n  loading?: boolean;\n}\n\nexport function usePanelCombinedRules({ dashboard, panel, poll = false }: Options): ReturnBag {\n  const dispatch = useDispatch();\n\n  const promRuleRequest =\n    useUnifiedAlertingSelector((state) => state.promRules[GRAFANA_RULES_SOURCE_NAME]) ?? initialAsyncRequestState;\n  const rulerRuleRequest =\n    useUnifiedAlertingSelector((state) => state.rulerRules[GRAFANA_RULES_SOURCE_NAME]) ?? initialAsyncRequestState;\n\n  // fetch rules, then poll every RULE_LIST_POLL_INTERVAL_MS\n  useEffect(() => {\n    const fetch = () => {\n      dispatch(\n        fetchPromRulesAction({\n          rulesSourceName: GRAFANA_RULES_SOURCE_NAME,\n          filter: { dashboardUID: dashboard.uid, panelId: panel.id },\n        })\n      );\n      dispatch(\n        fetchRulerRulesAction({\n          rulesSourceName: GRAFANA_RULES_SOURCE_NAME,\n          filter: { dashboardUID: dashboard.uid, panelId: panel.id },\n        })\n      );\n    };\n    fetch();\n    if (poll) {\n      const interval = setInterval(fetch, RULE_LIST_POLL_INTERVAL_MS);\n      return () => {\n        clearInterval(interval);\n      };\n    }\n    return () => {};\n  }, [dispatch, poll, panel.id, dashboard.uid]);\n\n  const loading = promRuleRequest.loading || rulerRuleRequest.loading;\n  const errors = [promRuleRequest.error, rulerRuleRequest.error].filter(\n    (err: SerializedError | undefined): err is SerializedError => !!err\n  );\n\n  const combinedNamespaces = useCombinedRuleNamespaces(GRAFANA_RULES_SOURCE_NAME);\n\n  // filter out rules that are relevant to this panel\n  const rules = useMemo(\n    (): CombinedRule[] =>\n      combinedNamespaces\n        .flatMap((ns) => ns.groups)\n        .flatMap((group) => group.rules)\n        .filter(\n          (rule) =>\n            rule.annotations[Annotation.dashboardUID] === dashboard.uid &&\n            rule.annotations[Annotation.panelID] === String(panel.id)\n        ),\n    [combinedNamespaces, dashboard, panel]\n  );\n\n  return {\n    rules,\n    errors,\n    loading,\n  };\n}\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { Alert, CustomScrollbar, LoadingPlaceholder, useStyles2 } from '@grafana/ui';\nimport { contextSrv } from 'app/core/services/context_srv';\nimport { DashboardModel, PanelModel } from 'app/features/dashboard/state';\n\nimport { NewRuleFromPanelButton } from './components/panel-alerts-tab/NewRuleFromPanelButton';\nimport { RulesTable } from './components/rules/RulesTable';\nimport { usePanelCombinedRules } from './hooks/usePanelCombinedRules';\nimport { getRulesPermissions } from './utils/access-control';\n\ninterface Props {\n  dashboard: DashboardModel;\n  panel: PanelModel;\n}\n\nexport const PanelAlertTabContent = ({ dashboard, panel }: Props) => {\n  const styles = useStyles2(getStyles);\n  const { errors, loading, rules } = usePanelCombinedRules({\n    dashboard,\n    panel,\n    poll: true,\n  });\n  const permissions = getRulesPermissions('grafana');\n  const canCreateRules = contextSrv.hasPermission(permissions.create);\n\n  const alert = errors.length ? (\n    <Alert title=\"Errors loading rules\" severity=\"error\">\n      {errors.map((error, index) => (\n        <div key={index}>Failed to load Grafana rules state: {error.message || 'Unknown error.'}</div>\n      ))}\n    </Alert>\n  ) : null;\n\n  if (loading && !rules.length) {\n    return (\n      <div className={styles.innerWrapper}>\n        {alert}\n        <LoadingPlaceholder text=\"Loading rules...\" />\n      </div>\n    );\n  }\n\n  if (rules.length) {\n    return (\n      <CustomScrollbar autoHeightMin=\"100%\">\n        <div className={styles.innerWrapper}>\n          {alert}\n          <RulesTable rules={rules} />\n          {!!dashboard.meta.canSave && canCreateRules && (\n            <NewRuleFromPanelButton className={styles.newButton} panel={panel} dashboard={dashboard} />\n          )}\n        </div>\n      </CustomScrollbar>\n    );\n  }\n\n  return (\n    <div data-testid={selectors.components.PanelAlertTabContent.content} className={styles.noRulesWrapper}>\n      {alert}\n      {!!dashboard.uid && (\n        <>\n          <p>There are no alert rules linked to this panel.</p>\n          {!!dashboard.meta.canSave && canCreateRules && <NewRuleFromPanelButton panel={panel} dashboard={dashboard} />}\n        </>\n      )}\n      {!dashboard.uid && !!dashboard.meta.canSave && (\n        <Alert severity=\"info\" title=\"Dashboard not saved\">\n          Dashboard must be saved before alerts can be added.\n        </Alert>\n      )}\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  newButton: css`\n    margin-top: ${theme.spacing(3)};\n  `,\n  innerWrapper: css`\n    padding: ${theme.spacing(2)};\n  `,\n  noRulesWrapper: css`\n    margin: ${theme.spacing(2)};\n    background-color: ${theme.colors.background.secondary};\n    padding: ${theme.spacing(3)};\n  `,\n});\n","import { config } from '@grafana/runtime';\n\nimport { AlertTab } from './AlertTab';\nimport { PanelAlertTabContent } from './unified/PanelAlertTabContent';\n\n// route between unified and \"old\" alerting pages based on feature flag\n\nexport default config.unifiedAlertingEnabled ? PanelAlertTabContent : AlertTab;\n","import React from 'react';\n\nimport { Tab, TabProps } from '@grafana/ui';\nimport { DashboardModel, PanelModel } from 'app/features/dashboard/state';\n\nimport { usePanelCombinedRules } from './hooks/usePanelCombinedRules';\n\ninterface Props extends Omit<TabProps, 'counter' | 'ref'> {\n  panel: PanelModel;\n  dashboard: DashboardModel;\n}\n\n// it will load rule count from backend\nexport const PanelAlertTab = ({ panel, dashboard, ...otherProps }: Props) => {\n  const { rules, loading } = usePanelCombinedRules({ panel, dashboard });\n  return <Tab {...otherProps} counter={loading ? null : rules.length} />;\n};\n","import { css } from '@emotion/css';\nimport React, { useEffect, useMemo, useState } from 'react';\nimport { mergeMap } from 'rxjs/operators';\n\nimport {\n  DataFrame,\n  DataTransformerConfig,\n  GrafanaTheme2,\n  transformDataFrame,\n  TransformerRegistryItem,\n  getFrameMatchers,\n  DataTransformContext,\n} from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { getTemplateSrv } from '@grafana/runtime';\nimport { Icon, JSONFormatter, useStyles2, Drawer } from '@grafana/ui';\n\nimport { TransformationsEditorTransformation } from './types';\n\ninterface TransformationEditorProps {\n  debugMode?: boolean;\n  index: number;\n  data: DataFrame[];\n  uiConfig: TransformerRegistryItem<any>;\n  configs: TransformationsEditorTransformation[];\n  onChange: (index: number, config: DataTransformerConfig) => void;\n  toggleShowDebug: () => void;\n}\n\nexport const TransformationEditor = ({\n  debugMode,\n  index,\n  data,\n  uiConfig,\n  configs,\n  onChange,\n  toggleShowDebug,\n}: TransformationEditorProps) => {\n  const styles = useStyles2(getStyles);\n  const [input, setInput] = useState<DataFrame[]>([]);\n  const [output, setOutput] = useState<DataFrame[]>([]);\n  const config = useMemo(() => configs[index], [configs, index]);\n\n  useEffect(() => {\n    const config = configs[index].transformation;\n    const matcher = config.filter?.options ? getFrameMatchers(config.filter) : undefined;\n    const inputTransforms = configs.slice(0, index).map((t) => t.transformation);\n    const outputTransforms = configs.slice(index, index + 1).map((t) => t.transformation);\n\n    const ctx: DataTransformContext = {\n      interpolate: (v: string) => getTemplateSrv().replace(v),\n    };\n\n    const inputSubscription = transformDataFrame(inputTransforms, data, ctx).subscribe((v) => {\n      if (matcher) {\n        v = data.filter((v) => matcher(v));\n      }\n      setInput(v);\n    });\n    const outputSubscription = transformDataFrame(inputTransforms, data, ctx)\n      .pipe(mergeMap((before) => transformDataFrame(outputTransforms, before, ctx)))\n      .subscribe(setOutput);\n\n    return function unsubscribe() {\n      inputSubscription.unsubscribe();\n      outputSubscription.unsubscribe();\n    };\n  }, [index, data, configs]);\n\n  const editor = useMemo(\n    () =>\n      React.createElement(uiConfig.editor, {\n        options: { ...uiConfig.transformation.defaultOptions, ...config.transformation.options },\n        input,\n        onChange: (opts) => {\n          onChange(index, {\n            ...config.transformation,\n            options: opts,\n          });\n        },\n      }),\n    [uiConfig.editor, uiConfig.transformation.defaultOptions, config.transformation, input, onChange, index]\n  );\n\n  return (\n    <div className={styles.editor} data-testid={selectors.components.TransformTab.transformationEditor(uiConfig.name)}>\n      {editor}\n      {debugMode && (\n        <Drawer title=\"Debug transformation\" subtitle={uiConfig.name} onClose={toggleShowDebug}>\n          <div\n            className={styles.debugWrapper}\n            data-testid={selectors.components.TransformTab.transformationEditorDebugger(uiConfig.name)}\n          >\n            <div className={styles.debug}>\n              <div className={styles.debugTitle}>Input data</div>\n              <div className={styles.debugJson}>\n                <JSONFormatter json={input} />\n              </div>\n            </div>\n            <div className={styles.debugSeparator}>\n              <Icon name=\"arrow-right\" />\n            </div>\n            <div className={styles.debug}>\n              <div className={styles.debugTitle}>Output data</div>\n              <div className={styles.debugJson}>{output && <JSONFormatter json={output} />}</div>\n            </div>\n          </div>\n        </Drawer>\n      )}\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    title: css`\n      display: flex;\n      padding: 4px 8px 4px 8px;\n      position: relative;\n      height: 35px;\n      border-radius: 4px 4px 0 0;\n      flex-wrap: nowrap;\n      justify-content: space-between;\n      align-items: center;\n    `,\n    name: css`\n      font-weight: ${theme.typography.fontWeightMedium};\n      color: ${theme.colors.primary.text};\n    `,\n    iconRow: css`\n      display: flex;\n    `,\n    icon: css`\n      background: transparent;\n      border: none;\n      box-shadow: none;\n      cursor: pointer;\n      color: ${theme.colors.text.secondary};\n      margin-left: ${theme.spacing(1)};\n      &:hover {\n        color: ${theme.colors.text};\n      }\n    `,\n    editor: css``,\n    debugWrapper: css`\n      display: flex;\n      flex-direction: row;\n    `,\n    debugSeparator: css`\n      width: 48px;\n      min-height: 300px;\n      display: flex;\n      align-items: center;\n      align-self: stretch;\n      justify-content: center;\n      margin: 0 ${theme.spacing(0.5)};\n      color: ${theme.colors.primary.text};\n    `,\n    debugTitle: css`\n      padding: ${theme.spacing(1)} ${theme.spacing(0.25)};\n      font-family: ${theme.typography.fontFamilyMonospace};\n      font-size: ${theme.typography.bodySmall.fontSize};\n      color: ${theme.colors.text};\n      border-bottom: 1px solid ${theme.colors.border.weak};\n      flex-grow: 0;\n      flex-shrink: 1;\n    `,\n\n    debug: css`\n      margin-top: ${theme.spacing(1)};\n      padding: 0 ${theme.spacing(1, 1, 1)};\n      border: 1px solid ${theme.colors.border.weak};\n      background: ${theme.isLight ? theme.v1.palette.white : theme.v1.palette.gray05};\n      border-radius: ${theme.shape.radius.default};\n      width: 100%;\n      min-height: 300px;\n      display: flex;\n      flex-direction: column;\n      align-self: stretch;\n    `,\n    debugJson: css`\n      flex-grow: 1;\n      height: 100%;\n      overflow: hidden;\n      padding: ${theme.spacing(0.5)};\n    `,\n  };\n};\n","import React from 'react';\n\nimport { TransformerRegistryItem } from '@grafana/data';\nimport { Modal } from '@grafana/ui';\nimport { OperationRowHelp } from 'app/core/components/QueryOperationRow/OperationRowHelp';\n\nimport { getLinkToDocs } from '../../../transformers/docs/content';\n\ninterface TransformationEditorHelperModalProps {\n  isOpen: boolean;\n  onCloseClick: (value: boolean) => void;\n  transformer: TransformerRegistryItem<null>;\n}\n\nexport const TransformationEditorHelperModal = ({\n  isOpen,\n  onCloseClick,\n  transformer,\n}: TransformationEditorHelperModalProps) => {\n  const {\n    transformation: { name },\n    help,\n  } = transformer;\n\n  const helpContent = help ? help : getLinkToDocs();\n\n  const helpTitle = `Transformation help - ${name}`;\n\n  return (\n    <Modal\n      title={helpTitle}\n      isOpen={isOpen}\n      onClickBackdrop={() => onCloseClick(false)}\n      onDismiss={() => onCloseClick(false)}\n    >\n      <OperationRowHelp markdown={helpContent} styleOverrides={{ borderTop: '2px solid' }} />\n    </Modal>\n  );\n};\n","import { css } from '@emotion/css';\nimport React, { useMemo } from 'react';\n\nimport {\n  DataTransformerConfig,\n  GrafanaTheme2,\n  StandardEditorContext,\n  StandardEditorsRegistryItem,\n} from '@grafana/data';\nimport { DataTopic } from '@grafana/schema';\nimport { Field, Select, useStyles2 } from '@grafana/ui';\nimport { FrameSelectionEditor } from 'app/plugins/panel/geomap/editor/FrameSelectionEditor';\n\nimport { TransformationData } from './TransformationsEditor';\n\ninterface TransformationFilterProps {\n  index: number;\n  config: DataTransformerConfig;\n  data: TransformationData;\n  onChange: (index: number, config: DataTransformerConfig) => void;\n}\n\nexport const TransformationFilter = ({ index, data, config, onChange }: TransformationFilterProps) => {\n  const styles = useStyles2(getStyles);\n\n  const opts = useMemo(() => {\n    return {\n      // eslint-disable-next-line\n      context: { data: data.series } as StandardEditorContext<unknown>,\n      showTopic: true || data.annotations?.length || config.topic?.length,\n      showFilter: config.topic !== DataTopic.Annotations,\n      source: [\n        { value: DataTopic.Series, label: `Query results` },\n        { value: DataTopic.Annotations, label: `Annotation data` },\n      ],\n    };\n  }, [data, config.topic]);\n\n  return (\n    <div className={styles.wrapper}>\n      <Field label=\"Apply transformation to\">\n        <>\n          {opts.showTopic && (\n            <Select\n              isClearable={true}\n              options={opts.source}\n              value={opts.source.find((v) => v.value === config.topic)}\n              placeholder={opts.source[0].label}\n              className={styles.padded}\n              onChange={(option) => {\n                onChange(index, {\n                  ...config,\n                  topic: option?.value,\n                });\n              }}\n            />\n          )}\n          {opts.showFilter && (\n            <FrameSelectionEditor\n              value={config.filter!}\n              context={opts.context}\n              // eslint-disable-next-line\n              item={{} as StandardEditorsRegistryItem}\n              onChange={(filter) => onChange(index, { ...config, filter })}\n            />\n          )}\n        </>\n      </Field>\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  const borderRadius = theme.shape.radius.default;\n\n  return {\n    wrapper: css({\n      padding: theme.spacing(2),\n      border: `2px solid ${theme.colors.background.secondary}`,\n      borderTop: `none`,\n      borderRadius: `0 0 ${borderRadius} ${borderRadius}`,\n      position: `relative`,\n      top: `-4px`,\n    }),\n    padded: css({\n      marginBottom: theme.spacing(1),\n    }),\n  };\n};\n","import React, { useCallback } from 'react';\nimport { useToggle } from 'react-use';\n\nimport { DataTransformerConfig, TransformerRegistryItem, FrameMatcherID, DataTopic } from '@grafana/data';\nimport { reportInteraction } from '@grafana/runtime';\nimport { ConfirmModal } from '@grafana/ui';\nimport {\n  QueryOperationAction,\n  QueryOperationToggleAction,\n} from 'app/core/components/QueryOperationRow/QueryOperationAction';\nimport { QueryOperationRow } from 'app/core/components/QueryOperationRow/QueryOperationRow';\nimport config from 'app/core/config';\nimport { PluginStateInfo } from 'app/features/plugins/components/PluginStateInfo';\n\nimport { TransformationEditor } from './TransformationEditor';\nimport { TransformationEditorHelperModal } from './TransformationEditorHelperModal';\nimport { TransformationFilter } from './TransformationFilter';\nimport { TransformationData } from './TransformationsEditor';\nimport { TransformationsEditorTransformation } from './types';\n\ninterface TransformationOperationRowProps {\n  id: string;\n  index: number;\n  data: TransformationData;\n  uiConfig: TransformerRegistryItem<null>;\n  configs: TransformationsEditorTransformation[];\n  onRemove: (index: number) => void;\n  onChange: (index: number, config: DataTransformerConfig) => void;\n}\n\nexport const TransformationOperationRow = ({\n  onRemove,\n  index,\n  id,\n  data,\n  configs,\n  uiConfig,\n  onChange,\n}: TransformationOperationRowProps) => {\n  const [showDeleteModal, setShowDeleteModal] = useToggle(false);\n  const [showDebug, toggleShowDebug] = useToggle(false);\n  const [showHelp, toggleShowHelp] = useToggle(false);\n  const disabled = !!configs[index].transformation.disabled;\n  const topic = configs[index].transformation.topic;\n  const showFilterEditor = configs[index].transformation.filter != null || topic != null;\n  const showFilterToggle = showFilterEditor || data.series.length > 1 || (data.annotations?.length ?? 0) > 0;\n\n  const onDisableToggle = useCallback(\n    (index: number) => {\n      const current = configs[index].transformation;\n      onChange(index, {\n        ...current,\n        disabled: current.disabled ? undefined : true,\n      });\n    },\n    [onChange, configs]\n  );\n\n  // Adds or removes the frame filter\n  const toggleFilter = useCallback(() => {\n    let current = { ...configs[index].transformation };\n    if (current.filter) {\n      delete current.filter;\n    } else {\n      current.filter = {\n        id: FrameMatcherID.byRefId,\n        options: '', // empty string will not do anything\n      };\n    }\n    onChange(index, current);\n  }, [onChange, index, configs]);\n\n  // Instrument toggle callback\n  const instrumentToggleCallback = useCallback(\n    (callback: (e: React.MouseEvent) => void, toggleId: string, active: boolean | undefined) =>\n      (e: React.MouseEvent) => {\n        let eventName = 'panel_editor_tabs_transformations_toggle';\n        if (config.featureToggles.transformationsRedesign) {\n          eventName = 'transformations_redesign_' + eventName;\n        }\n\n        reportInteraction(eventName, {\n          action: active ? 'off' : 'on',\n          toggleId,\n          transformationId: configs[index].transformation.id,\n        });\n\n        callback(e);\n      },\n    [configs, index]\n  );\n\n  const renderActions = () => {\n    return (\n      <>\n        {uiConfig.state && <PluginStateInfo state={uiConfig.state} />}\n        <QueryOperationToggleAction\n          title=\"Show transform help\"\n          icon=\"info-circle\"\n          // `instrumentToggleCallback` expects a function that takes a MouseEvent, is unused in the state setter. Instead, we simply toggle the state.\n          onClick={instrumentToggleCallback(toggleShowHelp, 'help', showHelp)}\n          active={showHelp}\n        />\n        {showFilterToggle && (\n          <QueryOperationToggleAction\n            title=\"Filter\"\n            icon=\"filter\"\n            onClick={instrumentToggleCallback(toggleFilter, 'filter', showFilterEditor)}\n            active={showFilterEditor}\n          />\n        )}\n        <QueryOperationToggleAction\n          title=\"Debug\"\n          icon=\"bug\"\n          onClick={instrumentToggleCallback(toggleShowDebug, 'debug', showDebug)}\n          active={showDebug}\n        />\n        <QueryOperationToggleAction\n          title=\"Disable transformation\"\n          icon={disabled ? 'eye-slash' : 'eye'}\n          onClick={instrumentToggleCallback(() => onDisableToggle(index), 'disabled', disabled)}\n          active={disabled}\n        />\n        <QueryOperationAction\n          title=\"Remove\"\n          icon=\"trash-alt\"\n          onClick={() => (config.featureToggles.transformationsRedesign ? setShowDeleteModal(true) : onRemove(index))}\n        />\n\n        {config.featureToggles.transformationsRedesign && (\n          <ConfirmModal\n            isOpen={showDeleteModal}\n            title={`Delete ${uiConfig.name}?`}\n            body=\"Note that removing one transformation may break others. If there is only a single transformation, you will go back to the main selection screen.\"\n            confirmText=\"Delete\"\n            onConfirm={() => {\n              setShowDeleteModal(false);\n              onRemove(index);\n            }}\n            onDismiss={() => setShowDeleteModal(false)}\n          />\n        )}\n      </>\n    );\n  };\n\n  return (\n    <>\n      <QueryOperationRow\n        id={id}\n        index={index}\n        title={`${index + 1} - ${uiConfig.name}`}\n        draggable\n        actions={renderActions}\n        disabled={disabled}\n        expanderMessages={{\n          close: 'Collapse transformation row',\n          open: 'Expand transformation row',\n        }}\n      >\n        {showFilterEditor && (\n          <TransformationFilter index={index} config={configs[index].transformation} data={data} onChange={onChange} />\n        )}\n\n        <TransformationEditor\n          debugMode={showDebug}\n          index={index}\n          data={topic === DataTopic.Annotations ? data.annotations ?? [] : data.series}\n          configs={configs}\n          uiConfig={uiConfig}\n          onChange={onChange}\n          toggleShowDebug={toggleShowDebug}\n        />\n      </QueryOperationRow>\n      <TransformationEditorHelperModal transformer={uiConfig} isOpen={showHelp} onCloseClick={toggleShowHelp} />\n    </>\n  );\n};\n","import React from 'react';\n\nimport { DataTransformerConfig, standardTransformersRegistry } from '@grafana/data';\n\nimport { TransformationOperationRow } from './TransformationOperationRow';\nimport { TransformationData } from './TransformationsEditor';\nimport { TransformationsEditorTransformation } from './types';\n\ninterface TransformationOperationRowsProps {\n  data: TransformationData;\n  configs: TransformationsEditorTransformation[];\n  onRemove: (index: number) => void;\n  onChange: (index: number, config: DataTransformerConfig) => void;\n}\n\nexport const TransformationOperationRows = ({\n  data,\n  onChange,\n  onRemove,\n  configs,\n}: TransformationOperationRowsProps) => {\n  return (\n    <>\n      {configs.map((t, i) => {\n        const uiConfig = standardTransformersRegistry.getIfExists(t.transformation.id);\n\n        if (!uiConfig) {\n          return null;\n        }\n\n        return (\n          <TransformationOperationRow\n            index={i}\n            id={`${t.id}`}\n            key={`${t.id}`}\n            data={data}\n            configs={configs}\n            uiConfig={uiConfig}\n            onRemove={onRemove}\n            onChange={onChange}\n          />\n        );\n      })}\n    </>\n  );\n};\n","import { DocsId } from '@grafana/data';\n\n// TODO: Documentation links\nconst DOCS_LINKS: Record<DocsId, string> = {\n  [DocsId.Transformations]: 'https://grafana.com/docs/grafana/latest/panels/transformations',\n  [DocsId.FieldConfig]: 'https://grafana.com/docs/grafana/latest/panels/field-configuration-options/',\n  [DocsId.FieldConfigOverrides]:\n    'https://grafana.com/docs/grafana/latest/panels/field-configuration-options/#override-a-field',\n};\n\nexport const getDocsLink = (id: DocsId) => DOCS_LINKS[id];\n","import { css } from '@emotion/css';\nimport React, { FormEventHandler, KeyboardEventHandler, ReactNode } from 'react';\n\nimport { DocsId, GrafanaTheme2, TransformerRegistryItem } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { Card, Container, VerticalGroup, Alert, Input, useStyles2 } from '@grafana/ui';\nimport { LocalStorageValueProvider } from 'app/core/components/LocalStorageValueProvider';\nimport { getDocsLink } from 'app/core/utils/docsLinks';\nimport { PluginStateInfo } from 'app/features/plugins/components/PluginStateInfo';\n\nconst LOCAL_STORAGE_KEY = 'dashboard.components.TransformationEditor.featureInfoBox.isDismissed';\n\ninterface TransformationPickerProps {\n  noTransforms: boolean;\n  search: string;\n  onSearchChange: FormEventHandler<HTMLInputElement>;\n  onSearchKeyDown: KeyboardEventHandler<HTMLInputElement>;\n  onTransformationAdd: Function;\n  suffix: ReactNode;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  xforms: Array<TransformerRegistryItem<any>>;\n}\n\nexport function TransformationPicker(props: TransformationPickerProps) {\n  const { noTransforms, search, xforms, onSearchChange, onSearchKeyDown, onTransformationAdd, suffix } = props;\n\n  return (\n    <VerticalGroup>\n      {noTransforms && (\n        <Container grow={1}>\n          <LocalStorageValueProvider<boolean> storageKey={LOCAL_STORAGE_KEY} defaultValue={false}>\n            {(isDismissed, onDismiss) => {\n              if (isDismissed) {\n                return null;\n              }\n\n              return (\n                <Alert\n                  title=\"Transformations\"\n                  severity=\"info\"\n                  onRemove={() => {\n                    onDismiss(true);\n                  }}\n                >\n                  <p>\n                    Transformations allow you to join, calculate, re-order, hide, and rename your query results before\n                    they are visualized. <br />\n                    Many transforms are not suitable if you&apos;re using the Graph visualization, as it currently only\n                    supports time series data. <br />\n                    It can help to switch to the Table visualization to understand what a transformation is doing.{' '}\n                  </p>\n                  <a\n                    href={getDocsLink(DocsId.Transformations)}\n                    className=\"external-link\"\n                    target=\"_blank\"\n                    rel=\"noreferrer\"\n                  >\n                    Read more\n                  </a>\n                </Alert>\n              );\n            }}\n          </LocalStorageValueProvider>\n        </Container>\n      )}\n      <Input\n        data-testid={selectors.components.Transforms.searchInput}\n        value={search ?? ''}\n        autoFocus={!noTransforms}\n        placeholder=\"Search for transformation\"\n        onChange={onSearchChange}\n        onKeyDown={onSearchKeyDown}\n        suffix={suffix}\n      />\n      {xforms.map((t) => {\n        return (\n          <TransformationCard\n            key={t.name}\n            transform={t}\n            onClick={() => {\n              onTransformationAdd({ value: t.id });\n            }}\n          />\n        );\n      })}\n    </VerticalGroup>\n  );\n}\n\ninterface TransformationCardProps {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  transform: TransformerRegistryItem<any>;\n  onClick: () => void;\n}\n\nfunction TransformationCard({ transform, onClick }: TransformationCardProps) {\n  const styles = useStyles2(getStyles);\n  return (\n    <Card\n      className={styles.card}\n      data-testid={selectors.components.TransformTab.newTransform(transform.name)}\n      onClick={onClick}\n    >\n      <Card.Heading>{transform.name}</Card.Heading>\n      <Card.Description>{transform.description}</Card.Description>\n      {transform.state && (\n        <Card.Tags>\n          <PluginStateInfo state={transform.state} />\n        </Card.Tags>\n      )}\n    </Card>\n  );\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    card: css({\n      margin: '0',\n      padding: `${theme.spacing(1)}`,\n    }),\n  };\n}\n","import { cx, css } from '@emotion/css';\nimport React, { FormEventHandler, KeyboardEventHandler, ReactNode } from 'react';\n\nimport {\n  DataFrame,\n  DataTransformerID,\n  TransformerRegistryItem,\n  TransformationApplicabilityLevels,\n  GrafanaTheme2,\n  standardTransformersRegistry,\n} from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { Card, Drawer, FilterPill, IconButton, Input, Switch, useStyles2 } from '@grafana/ui';\nimport config from 'app/core/config';\nimport { PluginStateInfo } from 'app/features/plugins/components/PluginStateInfo';\nimport { categoriesLabels } from 'app/features/transformers/utils';\n\nimport { FilterCategory } from './TransformationsEditor';\n\nconst viewAllLabel = 'View all';\nconst VIEW_ALL_VALUE = 'viewAll';\nconst filterCategoriesLabels: Array<[FilterCategory, string]> = [\n  [VIEW_ALL_VALUE, viewAllLabel],\n  // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n  ...(Object.entries(categoriesLabels) as Array<[FilterCategory, string]>),\n];\n\ninterface TransformationPickerNgProps {\n  onTransformationAdd: Function;\n  setState: Function;\n  onSearchChange: FormEventHandler<HTMLInputElement>;\n  onSearchKeyDown: KeyboardEventHandler<HTMLInputElement>;\n  noTransforms: boolean;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  xforms: Array<TransformerRegistryItem<any>>;\n  search: string;\n  suffix: ReactNode;\n  data: DataFrame[];\n  showIllustrations?: boolean;\n  selectedFilter?: FilterCategory;\n}\n\nexport function TransformationPickerNg(props: TransformationPickerNgProps) {\n  const styles = useStyles2(getTransformationPickerStyles);\n  const {\n    noTransforms,\n    suffix,\n    setState,\n    xforms,\n    search,\n    onSearchChange,\n    onSearchKeyDown,\n    showIllustrations,\n    onTransformationAdd,\n    selectedFilter,\n    data,\n  } = props;\n\n  return (\n    <Drawer size=\"md\" onClose={() => setState({ showPicker: false })} title=\"Add another transformation\">\n      <div className={styles.searchWrapper}>\n        <Input\n          data-testid={selectors.components.Transforms.searchInput}\n          className={styles.searchInput}\n          value={search ?? ''}\n          autoFocus={!noTransforms}\n          placeholder=\"Search for transformation\"\n          onChange={onSearchChange}\n          onKeyDown={onSearchKeyDown}\n          suffix={suffix}\n        />\n        <div className={styles.showImages}>\n          <span className={styles.illustationSwitchLabel}>Show images</span>{' '}\n          <Switch value={showIllustrations} onChange={() => setState({ showIllustrations: !showIllustrations })} />\n        </div>\n      </div>\n\n      <div className={styles.filterWrapper}>\n        {filterCategoriesLabels.map(([slug, label]) => {\n          return (\n            <FilterPill\n              key={slug}\n              onClick={() => setState({ selectedFilter: slug })}\n              label={label}\n              selected={selectedFilter === slug}\n            />\n          );\n        })}\n      </div>\n\n      <TransformationsGrid\n        showIllustrations={showIllustrations}\n        transformations={xforms}\n        data={data}\n        onClick={(id) => {\n          onTransformationAdd({ value: id });\n        }}\n      />\n    </Drawer>\n  );\n}\n\nfunction getTransformationPickerStyles(theme: GrafanaTheme2) {\n  return {\n    showImages: css({\n      flexBasis: '0',\n      display: 'flex',\n      gap: '8px',\n      alignItems: 'center',\n    }),\n    pickerInformationLine: css({\n      fontSize: '16px',\n      marginBottom: `${theme.spacing(2)}`,\n    }),\n    pickerInformationLineHighlight: css({\n      verticalAlign: 'middle',\n    }),\n    searchWrapper: css({\n      display: 'flex',\n      flexWrap: 'wrap',\n      columnGap: '27px',\n      rowGap: '16px',\n      width: '100%',\n    }),\n    searchInput: css({\n      flexGrow: '1',\n      width: 'initial',\n    }),\n    illustationSwitchLabel: css({\n      whiteSpace: 'nowrap',\n    }),\n    filterWrapper: css({\n      padding: `${theme.spacing(1)} 0`,\n      display: 'flex',\n      flexWrap: 'wrap',\n      rowGap: `${theme.spacing(1)}`,\n      columnGap: `${theme.spacing(0.5)}`,\n    }),\n  };\n}\n\ninterface TransformationsGridProps {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  transformations: Array<TransformerRegistryItem<any>>;\n  showIllustrations?: boolean;\n  onClick: (id: string) => void;\n  data: DataFrame[];\n}\n\nfunction TransformationsGrid({ showIllustrations, transformations, onClick, data }: TransformationsGridProps) {\n  const styles = useStyles2(getTransformationGridStyles);\n\n  return (\n    <div className={styles.grid}>\n      {transformations.map((transform) => {\n        // Check to see if the transform\n        // is applicable to the given data\n        let applicabilityScore = TransformationApplicabilityLevels.Applicable;\n        if (transform.transformation.isApplicable !== undefined) {\n          applicabilityScore = transform.transformation.isApplicable(data);\n        }\n        const isApplicable = applicabilityScore > 0;\n\n        let applicabilityDescription = null;\n        if (transform.transformation.isApplicableDescription !== undefined) {\n          if (typeof transform.transformation.isApplicableDescription === 'function') {\n            applicabilityDescription = transform.transformation.isApplicableDescription(data);\n          } else {\n            applicabilityDescription = transform.transformation.isApplicableDescription;\n          }\n        }\n\n        // Add disabled styles to disabled\n        let cardClasses = styles.newCard;\n        if (!isApplicable) {\n          cardClasses = cx(styles.newCard, styles.cardDisabled);\n        }\n\n        return (\n          <Card\n            className={cardClasses}\n            data-testid={selectors.components.TransformTab.newTransform(transform.name)}\n            onClick={() => onClick(transform.id)}\n            key={transform.id}\n          >\n            <Card.Heading className={styles.heading}>\n              <span>{transform.name}</span>\n              <span className={styles.pluginStateInfoWrapper}>\n                <PluginStateInfo state={transform.state} />\n              </span>\n            </Card.Heading>\n            <Card.Description className={styles.description}>\n              <span>{getTransformationsRedesignDescriptions(transform.id)}</span>\n              {showIllustrations && (\n                <span>\n                  <img className={styles.image} src={getImagePath(transform.id, !isApplicable)} alt={transform.name} />\n                </span>\n              )}\n              {!isApplicable && applicabilityDescription !== null && (\n                <IconButton\n                  className={styles.cardApplicableInfo}\n                  name=\"info-circle\"\n                  tooltip={applicabilityDescription}\n                />\n              )}\n            </Card.Description>\n          </Card>\n        );\n      })}\n    </div>\n  );\n}\n\nfunction getTransformationGridStyles(theme: GrafanaTheme2) {\n  return {\n    // eslint-disable-next-line @emotion/syntax-preference\n    heading: css`\n            font-weight: 400,\n            > button: {\n                width: '100%',\n                display: 'flex',\n                justify-content: 'space-between',\n                align-items: 'center',\n                flex-wrap: 'no-wrap',\n        },`,\n    description: css({\n      fontSize: '12px',\n      display: 'flex',\n      flexDirection: 'column',\n      justifyContent: 'space-between',\n    }),\n    image: css({\n      display: 'block',\n      maxEidth: '100%`',\n      marginTop: `${theme.spacing(2)}`,\n    }),\n    grid: css({\n      display: 'grid',\n      gridTemplateColumns: 'repeat(auto-fill, minmax(220px, 1fr))',\n      gridAutoRows: '1fr',\n      gap: `${theme.spacing(2)} ${theme.spacing(1)}`,\n      width: '100%',\n    }),\n    cardDisabled: css({\n      backgroundColor: 'rgb(204, 204, 220, 0.045)',\n      color: `${theme.colors.text.disabled} !important`,\n    }),\n    cardApplicableInfo: css({\n      position: 'absolute',\n      bottom: `${theme.spacing(1)}`,\n      right: `${theme.spacing(1)}`,\n    }),\n    newCard: css({\n      gridTemplateRows: 'min-content 0 1fr 0',\n    }),\n    pluginStateInfoWrapper: css({\n      marginLeft: '5px',\n    }),\n  };\n}\n\nconst getImagePath = (id: string, disabled: boolean) => {\n  let folder = null;\n  if (!disabled) {\n    folder = config.theme2.isDark ? 'dark' : 'light';\n  } else {\n    folder = 'disabled';\n  }\n\n  return `public/img/transformations/${folder}/${id}.svg`;\n};\n\nconst TransformationDescriptionOverrides: { [key: string]: string } = {\n  [DataTransformerID.concatenate]: 'Combine all fields into a single frame.',\n  [DataTransformerID.configFromData]: 'Set unit, min, max and more.',\n  [DataTransformerID.fieldLookup]: 'Use a field value to lookup countries, states, or airports.',\n  [DataTransformerID.filterFieldsByName]: 'Remove parts of the query results using a regex pattern.',\n  [DataTransformerID.filterByRefId]: 'Remove rows from the data based on origin query',\n  [DataTransformerID.filterByValue]: 'Remove rows from the query results using user-defined filters.',\n  [DataTransformerID.groupBy]: 'Group data by a field value and create aggregate data.',\n  [DataTransformerID.groupingToMatrix]: 'Summarize and reorganize data based on three fields.',\n  [DataTransformerID.joinByField]: 'Combine rows from 2+ tables, based on a related field.',\n  [DataTransformerID.labelsToFields]: 'Group series by time and return labels or tags as fields.',\n  [DataTransformerID.merge]: 'Merge multiple series. Values will be combined into one row.',\n  [DataTransformerID.organize]: 'Re-order, hide, or rename fields.',\n  [DataTransformerID.partitionByValues]: 'Split a one-frame dataset into multiple series.',\n  [DataTransformerID.prepareTimeSeries]: 'Stretch data frames from the wide format into the long format.',\n  [DataTransformerID.reduce]: 'Reduce all rows or data points to a single value (ex. max, mean).',\n  [DataTransformerID.renameByRegex]:\n    'Rename parts of the query results using a regular expression and replacement pattern.',\n  [DataTransformerID.seriesToRows]: 'Merge multiple series. Return time, metric and values as a row.',\n};\n\nconst getTransformationsRedesignDescriptions = (id: string): string => {\n  return TransformationDescriptionOverrides[id] || standardTransformersRegistry.getIfExists(id)?.description || '';\n};\n","import React, { ChangeEvent } from 'react';\nimport { DragDropContext, Droppable, DropResult } from 'react-beautiful-dnd';\nimport { Unsubscribable } from 'rxjs';\n\nimport {\n  DataFrame,\n  DataTransformerConfig,\n  PanelData,\n  SelectableValue,\n  standardTransformersRegistry,\n  TransformerCategory,\n} from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { reportInteraction } from '@grafana/runtime';\nimport {\n  Button,\n  ConfirmModal,\n  Container,\n  CustomScrollbar,\n  Themeable,\n  withTheme,\n  IconButton,\n  ButtonGroup,\n  Box,\n  Text,\n  Stack,\n} from '@grafana/ui';\nimport config from 'app/core/config';\nimport { Trans } from 'app/core/internationalization';\n\nimport { PanelModel } from '../../state';\nimport { PanelNotSupported } from '../PanelEditor/PanelNotSupported';\n\nimport { TransformationOperationRows } from './TransformationOperationRows';\nimport { TransformationPicker } from './TransformationPicker';\nimport { TransformationPickerNg } from './TransformationPickerNg';\nimport { TransformationsEditorTransformation } from './types';\n\ninterface TransformationsEditorProps extends Themeable {\n  panel: PanelModel;\n}\n\nconst VIEW_ALL_VALUE = 'viewAll';\nexport type viewAllType = 'viewAll';\nexport type FilterCategory = TransformerCategory | viewAllType;\n\nexport interface TransformationData {\n  series: DataFrame[];\n  annotations?: DataFrame[];\n}\n\ninterface State {\n  data: TransformationData;\n  transformations: TransformationsEditorTransformation[];\n  search: string;\n  showPicker?: boolean;\n  scrollTop?: number;\n  showRemoveAllModal?: boolean;\n  selectedFilter?: FilterCategory;\n  showIllustrations?: boolean;\n}\n\nclass UnThemedTransformationsEditor extends React.PureComponent<TransformationsEditorProps, State> {\n  subscription?: Unsubscribable;\n\n  constructor(props: TransformationsEditorProps) {\n    super(props);\n    const transformations = props.panel.transformations || [];\n\n    const ids = this.buildTransformationIds(transformations);\n    this.state = {\n      transformations: transformations.map((t, i) => ({\n        transformation: t,\n        id: ids[i],\n      })),\n      data: {\n        series: [],\n      },\n      search: '',\n      selectedFilter: VIEW_ALL_VALUE,\n      showIllustrations: true,\n    };\n  }\n\n  onSearchChange = (event: ChangeEvent<HTMLInputElement>) => {\n    this.setState({ search: event.target.value });\n  };\n\n  onSearchKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    if (event.key === 'Enter') {\n      const { search } = this.state;\n      if (search) {\n        const lower = search.toLowerCase();\n        const filtered = standardTransformersRegistry.list().filter((t) => {\n          const txt = (t.name + t.description).toLowerCase();\n          return txt.indexOf(lower) >= 0;\n        });\n        if (filtered.length > 0) {\n          this.onTransformationAdd({ value: filtered[0].id });\n        }\n      }\n    } else if (event.keyCode === 27) {\n      // Escape key\n      this.setState({ search: '', showPicker: false });\n      event.stopPropagation(); // don't exit the editor\n    }\n  };\n\n  buildTransformationIds(transformations: DataTransformerConfig[]) {\n    const transformationCounters: Record<string, number> = {};\n    const transformationIds: string[] = [];\n\n    for (let i = 0; i < transformations.length; i++) {\n      const transformation = transformations[i];\n      if (transformationCounters[transformation.id] === undefined) {\n        transformationCounters[transformation.id] = 0;\n      } else {\n        transformationCounters[transformation.id] += 1;\n      }\n      transformationIds.push(`${transformations[i].id}-${transformationCounters[transformations[i].id]}`);\n    }\n    return transformationIds;\n  }\n\n  componentDidMount() {\n    this.subscription = this.props.panel\n      .getQueryRunner()\n      .getData({ withTransforms: false, withFieldConfig: false })\n      .subscribe({\n        next: (panelData: PanelData) => this.setState({ data: panelData }),\n      });\n  }\n\n  componentWillUnmount() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n\n  componentDidUpdate(prevProps: Readonly<TransformationsEditorProps>, prevState: Readonly<State>): void {\n    if (config.featureToggles.transformationsRedesign) {\n      const prevHasTransforms = prevState.transformations.length > 0;\n      const prevShowPicker = !prevHasTransforms || prevState.showPicker;\n\n      const currentHasTransforms = this.state.transformations.length > 0;\n      const currentShowPicker = !currentHasTransforms || this.state.showPicker;\n\n      if (prevShowPicker !== currentShowPicker) {\n        // kindOfZero will be a random number between 0 and 0.5. It will be rounded to 0 by the scrollable component.\n        // We cannot always use 0 as it will not trigger a rerender of the scrollable component consistently\n        // due to React changes detection algo.\n        const kindOfZero = Math.random() / 2;\n\n        this.setState({ scrollTop: currentShowPicker ? kindOfZero : Number.MAX_SAFE_INTEGER });\n      }\n    }\n  }\n\n  onChange(transformations: TransformationsEditorTransformation[]) {\n    this.setState({ transformations });\n    this.props.panel.setTransformations(transformations.map((t) => t.transformation));\n  }\n\n  // Transformation UIDs are stored in a name-X form. name is NOT unique hence we need to parse the IDs and increase X\n  // for transformations with the same name\n  getTransformationNextId = (name: string) => {\n    const { transformations } = this.state;\n    let nextId = 0;\n    const existingIds = transformations.filter((t) => t.id.startsWith(name)).map((t) => t.id);\n\n    if (existingIds.length !== 0) {\n      nextId = Math.max(...existingIds.map((i) => parseInt(i.match(/\\d+/)![0], 10))) + 1;\n    }\n\n    return `${name}-${nextId}`;\n  };\n\n  onTransformationAdd = (selectable: SelectableValue<string>) => {\n    let eventName = 'panel_editor_tabs_transformations_management';\n    if (config.featureToggles.transformationsRedesign) {\n      eventName = 'transformations_redesign_' + eventName;\n    }\n\n    reportInteraction(eventName, {\n      action: 'add',\n      transformationId: selectable.value,\n    });\n    const { transformations } = this.state;\n\n    const nextId = this.getTransformationNextId(selectable.value!);\n    this.setState({ search: '', showPicker: false });\n    this.onChange([\n      ...transformations,\n      {\n        id: nextId,\n        transformation: {\n          id: selectable.value as string,\n          options: {},\n        },\n      },\n    ]);\n  };\n\n  onTransformationChange = (idx: number, dataConfig: DataTransformerConfig) => {\n    const { transformations } = this.state;\n    const next = Array.from(transformations);\n    let eventName = 'panel_editor_tabs_transformations_management';\n    if (config.featureToggles.transformationsRedesign) {\n      eventName = 'transformations_redesign_' + eventName;\n    }\n\n    reportInteraction(eventName, {\n      action: 'change',\n      transformationId: next[idx].transformation.id,\n    });\n    next[idx].transformation = dataConfig;\n    this.onChange(next);\n  };\n\n  onTransformationRemove = (idx: number) => {\n    const { transformations } = this.state;\n    const next = Array.from(transformations);\n    let eventName = 'panel_editor_tabs_transformations_management';\n    if (config.featureToggles.transformationsRedesign) {\n      eventName = 'transformations_redesign_' + eventName;\n    }\n\n    reportInteraction(eventName, {\n      action: 'remove',\n      transformationId: next[idx].transformation.id,\n    });\n    next.splice(idx, 1);\n    this.onChange(next);\n  };\n\n  onTransformationRemoveAll = () => {\n    this.onChange([]);\n    this.setState({ showRemoveAllModal: false });\n  };\n\n  onDragEnd = (result: DropResult) => {\n    const { transformations } = this.state;\n\n    if (!result || !result.destination) {\n      return;\n    }\n\n    const startIndex = result.source.index;\n    const endIndex = result.destination.index;\n    if (startIndex === endIndex) {\n      return;\n    }\n    const update = Array.from(transformations);\n    const [removed] = update.splice(startIndex, 1);\n    update.splice(endIndex, 0, removed);\n    this.onChange(update);\n  };\n\n  renderEmptyMessage = () => {\n    return (\n      <Box alignItems=\"center\" padding={4}>\n        <Stack direction=\"column\" alignItems=\"center\" gap={2}>\n          <Text element=\"h3\" textAlignment=\"center\">\n            <Trans key=\"transformations.empty.add-transformation-header\">Start transforming data</Trans>\n          </Text>\n          <Text\n            element=\"p\"\n            textAlignment=\"center\"\n            data-testid={selectors.components.Transforms.noTransformationsMessage}\n          >\n            <Trans key=\"transformations.empty.add-transformation-body\">\n              Transformations allow data to be changed in various ways before your visualization is shown.\n              <br />\n              This includes joining data together, renaming fields, making calculations, formatting data for display,\n              and more.\n            </Trans>\n          </Text>\n          <Button\n            icon=\"plus\"\n            variant=\"primary\"\n            size=\"md\"\n            onClick={() => {\n              this.setState({ showPicker: true });\n            }}\n            data-testid={selectors.components.Transforms.addTransformationButton}\n          >\n            Add transformation\n          </Button>\n        </Stack>\n      </Box>\n    );\n  };\n\n  renderTransformationEditors = () => {\n    const { data, transformations } = this.state;\n\n    return (\n      <DragDropContext onDragEnd={this.onDragEnd}>\n        <Droppable droppableId=\"transformations-list\" direction=\"vertical\">\n          {(provided) => {\n            return (\n              <div ref={provided.innerRef} {...provided.droppableProps}>\n                <TransformationOperationRows\n                  configs={transformations}\n                  data={data}\n                  onRemove={this.onTransformationRemove}\n                  onChange={this.onTransformationChange}\n                />\n                {provided.placeholder}\n              </div>\n            );\n          }}\n        </Droppable>\n      </DragDropContext>\n    );\n  };\n\n  renderTransformsPicker() {\n    let { showPicker } = this.state;\n    const { transformations, search } = this.state;\n    const { transformationsRedesign } = config.featureToggles;\n    const noTransforms = !transformations?.length;\n    const hasTransforms = transformations.length > 0;\n    let suffix: React.ReactNode = null;\n    let xforms = standardTransformersRegistry.list().sort((a, b) => (a.name > b.name ? 1 : b.name > a.name ? -1 : 0));\n\n    // In the case we're not on the transformation\n    // redesign and there are no transformations\n    // then we show the picker in that case\n    if (!transformationsRedesign && noTransforms) {\n      showPicker = true;\n    }\n\n    if (this.state.selectedFilter !== VIEW_ALL_VALUE) {\n      xforms = xforms.filter(\n        (t) =>\n          t.categories &&\n          this.state.selectedFilter &&\n          t.categories.has(this.state.selectedFilter as TransformerCategory)\n      );\n    }\n\n    if (search) {\n      const lower = search.toLowerCase();\n      const filtered = xforms.filter((t) => {\n        const txt = (t.name + t.description).toLowerCase();\n        return txt.indexOf(lower) >= 0;\n      });\n\n      suffix = (\n        <>\n          {filtered.length} / {xforms.length} &nbsp;&nbsp;\n          <IconButton\n            name=\"times\"\n            onClick={() => {\n              this.setState({ search: '' });\n            }}\n            tooltip=\"Clear search\"\n          />\n        </>\n      );\n\n      xforms = filtered;\n    }\n\n    if (!suffix && showPicker && !noTransforms) {\n      suffix = (\n        <IconButton\n          name=\"times\"\n          onClick={() => {\n            this.setState({ showPicker: false });\n          }}\n          tooltip=\"Close picker\"\n        />\n      );\n    }\n\n    // If we're in the transformation redesign\n    // we have the add transformation add the\n    // delete all control\n    let picker = null;\n    let deleteAll = null;\n    if (transformationsRedesign) {\n      picker = (\n        <TransformationPickerNg\n          noTransforms={noTransforms}\n          search={search}\n          suffix={suffix}\n          xforms={xforms}\n          setState={this.setState.bind(this)}\n          onSearchChange={this.onSearchChange}\n          onSearchKeyDown={this.onSearchKeyDown}\n          onTransformationAdd={this.onTransformationAdd}\n          data={this.state.data.series}\n          selectedFilter={this.state.selectedFilter}\n          showIllustrations={this.state.showIllustrations}\n        />\n      );\n\n      deleteAll = (\n        <>\n          <Button\n            icon=\"times\"\n            variant=\"secondary\"\n            onClick={() => this.setState({ showRemoveAllModal: true })}\n            style={{ marginLeft: this.props.theme.spacing.md }}\n          >\n            Delete all transformations\n          </Button>\n          <ConfirmModal\n            isOpen={Boolean(this.state.showRemoveAllModal)}\n            title=\"Delete all transformations?\"\n            body=\"By deleting all transformations, you will go back to the main selection screen.\"\n            confirmText=\"Delete all\"\n            onConfirm={() => this.onTransformationRemoveAll()}\n            onDismiss={() => this.setState({ showRemoveAllModal: false })}\n          />\n        </>\n      );\n    }\n    // Otherwise we use the old picker\n    else {\n      picker = (\n        <TransformationPicker\n          noTransforms={noTransforms}\n          search={search}\n          suffix={suffix}\n          xforms={xforms}\n          onSearchChange={this.onSearchChange}\n          onSearchKeyDown={this.onSearchKeyDown}\n          onTransformationAdd={this.onTransformationAdd}\n        />\n      );\n    }\n\n    // Compose actions, if we're in the\n    // redesign a \"Delete All Transformations\"\n    // button (with confirm modal) is added\n    const actions = (\n      <ButtonGroup>\n        <Button\n          icon=\"plus\"\n          variant=\"secondary\"\n          onClick={() => {\n            this.setState({ showPicker: true });\n          }}\n          data-testid={selectors.components.Transforms.addTransformationButton}\n        >\n          Add another transformation\n        </Button>\n        {deleteAll}\n      </ButtonGroup>\n    );\n\n    return (\n      <>\n        {showPicker && picker}\n        {\n          // If the transformation redesign is enabled\n          // and there are transforms then show actions\n          (transformationsRedesign && hasTransforms && actions) ||\n            // If it's not enabled only show actions when there are\n            // transformations and the (old) picker isn't being shown\n            (!transformationsRedesign && !showPicker && hasTransforms && actions)\n        }\n      </>\n    );\n  }\n\n  render() {\n    const {\n      panel: { alert },\n    } = this.props;\n    const { transformations } = this.state;\n    const hasTransforms = transformations.length > 0;\n\n    // If there are any alerts then\n    // we can't use transformations\n    if (alert) {\n      const message = hasTransforms\n        ? \"Transformations can't be used on a panel with alerts\"\n        : \"Transformations can't be used on a panel with existing alerts\";\n      return <PanelNotSupported message={message} />;\n    }\n\n    return (\n      <CustomScrollbar scrollTop={this.state.scrollTop} autoHeightMin=\"100%\">\n        <Container padding=\"lg\">\n          <div data-testid={selectors.components.TransformTab.content}>\n            {!hasTransforms && config.featureToggles.transformationsRedesign && this.renderEmptyMessage()}\n            {hasTransforms && this.renderTransformationEditors()}\n            {this.renderTransformsPicker()}\n          </div>\n        </Container>\n      </CustomScrollbar>\n    );\n  }\n}\n\nexport const TransformationsEditor = withTheme(UnThemedTransformationsEditor);\n","import React, { PureComponent } from 'react';\n\nimport { DataQuery, getDataSourceRef } from '@grafana/data';\nimport { locationService } from '@grafana/runtime';\nimport { storeLastUsedDataSourceInLocalStorage } from 'app/features/datasources/components/picker/utils';\nimport { getDatasourceSrv } from 'app/features/plugins/datasource_srv';\nimport { QueryGroup } from 'app/features/query/components/QueryGroup';\nimport { QueryGroupDataSource, QueryGroupOptions } from 'app/types';\n\nimport { getDashboardSrv } from '../../services/DashboardSrv';\nimport { PanelModel } from '../../state';\nimport { getLastUsedDatasourceFromStorage } from '../../utils/dashboard';\n\ninterface Props {\n  /** Current panel */\n  panel: PanelModel;\n  /** Added here to make component re-render when queries change from outside */\n  queries: DataQuery[];\n}\n\nexport class PanelEditorQueries extends PureComponent<Props> {\n  constructor(props: Props) {\n    super(props);\n  }\n\n  // store last used datasource in local storage\n  updateLastUsedDatasource = (datasource: QueryGroupDataSource) => {\n    storeLastUsedDataSourceInLocalStorage(datasource);\n  };\n\n  buildQueryOptions(panel: PanelModel): QueryGroupOptions {\n    const dataSource: QueryGroupDataSource = panel.datasource ?? {\n      default: true,\n    };\n    const datasourceSettings = getDatasourceSrv().getInstanceSettings(dataSource);\n\n    // store last datasource used in local storage\n    this.updateLastUsedDatasource(dataSource);\n    return {\n      cacheTimeout: datasourceSettings?.meta.queryOptions?.cacheTimeout ? panel.cacheTimeout : undefined,\n      dataSource: {\n        default: datasourceSettings?.isDefault,\n        type: datasourceSettings?.type,\n        uid: datasourceSettings?.uid,\n      },\n      queryCachingTTL: datasourceSettings?.cachingConfig?.enabled ? panel.queryCachingTTL : undefined,\n      queries: panel.targets,\n      maxDataPoints: panel.maxDataPoints,\n      minInterval: panel.interval,\n      timeRange: {\n        from: panel.timeFrom,\n        shift: panel.timeShift,\n        hide: panel.hideTimeOverride,\n      },\n    };\n  }\n\n  async componentDidMount() {\n    const { panel } = this.props;\n\n    // If the panel model has no datasource property load the default data source property and update the persisted model\n    // Because this part of the panel model is not in redux yet we do a forceUpdate.\n    if (!panel.datasource) {\n      let ds;\n      // check if we have last used datasource from local storage\n      // get dashboard uid\n      const dashboardUid = getDashboardSrv().getCurrent()?.uid ?? '';\n      const lastUsedDatasource = getLastUsedDatasourceFromStorage(dashboardUid!);\n      // do we have a last used datasource for this dashboard\n      if (lastUsedDatasource?.datasourceUid !== null) {\n        // get datasource from uid\n        ds = getDatasourceSrv().getInstanceSettings(lastUsedDatasource?.datasourceUid);\n      }\n      // else load default datasource\n      if (!ds) {\n        ds = getDatasourceSrv().getInstanceSettings(null);\n      }\n      panel.datasource = getDataSourceRef(ds!);\n      this.forceUpdate();\n    }\n  }\n\n  onRunQueries = () => {\n    this.props.panel.refresh();\n  };\n\n  onOpenQueryInspector = () => {\n    locationService.partial({\n      inspect: this.props.panel.id,\n      inspectTab: 'query',\n    });\n  };\n\n  onOptionsChange = (options: QueryGroupOptions) => {\n    const { panel } = this.props;\n\n    panel.updateQueries(options);\n\n    if (options.dataSource.uid !== panel.datasource?.uid) {\n      // trigger queries when changing data source\n      setTimeout(this.onRunQueries, 10);\n    }\n\n    this.forceUpdate();\n  };\n\n  render() {\n    const { panel } = this.props;\n\n    // If no panel data soruce set, wait with render. Will be set to default in componentDidMount\n    if (!panel.datasource) {\n      return null;\n    }\n\n    const options = this.buildQueryOptions(panel);\n\n    return (\n      <QueryGroup\n        options={options}\n        queryRunner={panel.getQueryRunner()}\n        onRunQueries={this.onRunQueries}\n        onOpenQueryInspector={this.onOpenQueryInspector}\n        onOptionsChange={this.onOptionsChange}\n      />\n    );\n  }\n}\n","import { css } from '@emotion/css';\nimport React, { useEffect, useCallback } from 'react';\nimport { Subscription } from 'rxjs';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { config, reportInteraction } from '@grafana/runtime';\nimport { Tab, TabContent, TabsBar, toIconName, useForceUpdate, useStyles2 } from '@grafana/ui';\nimport AlertTabIndex from 'app/features/alerting/AlertTabIndex';\nimport { PanelAlertTab } from 'app/features/alerting/unified/PanelAlertTab';\nimport { PanelQueriesChangedEvent, PanelTransformationsChangedEvent } from 'app/types/events';\n\nimport { DashboardModel, PanelModel } from '../../state';\nimport { TransformationsEditor } from '../TransformationsEditor/TransformationsEditor';\n\nimport { PanelEditorQueries } from './PanelEditorQueries';\nimport { PanelEditorTab, PanelEditorTabId } from './types';\n\ninterface PanelEditorTabsProps {\n  panel: PanelModel;\n  dashboard: DashboardModel;\n  tabs: PanelEditorTab[];\n  onChangeTab: (tab: PanelEditorTab) => void;\n}\n\nexport const PanelEditorTabs = React.memo(({ panel, dashboard, tabs, onChangeTab }: PanelEditorTabsProps) => {\n  const forceUpdate = useForceUpdate();\n  const styles = useStyles2(getStyles);\n\n  const instrumentedOnChangeTab = useCallback(\n    (tab: PanelEditorTab) => {\n      let eventName = 'panel_editor_tabs_changed';\n      if (config.featureToggles.transformationsRedesign) {\n        eventName = 'transformations_redesign_' + eventName;\n      }\n\n      if (!tab.active) {\n        reportInteraction(eventName, { tab_id: tab.id });\n      }\n\n      onChangeTab(tab);\n    },\n    [onChangeTab]\n  );\n\n  useEffect(() => {\n    const eventSubs = new Subscription();\n    eventSubs.add(panel.events.subscribe(PanelQueriesChangedEvent, forceUpdate));\n    eventSubs.add(panel.events.subscribe(PanelTransformationsChangedEvent, forceUpdate));\n    return () => eventSubs.unsubscribe();\n  }, [panel, dashboard, forceUpdate]);\n\n  const activeTab = tabs.find((item) => item.active)!;\n\n  if (tabs.length === 0) {\n    return null;\n  }\n\n  return (\n    <div className={styles.wrapper}>\n      <TabsBar className={styles.tabBar} hideBorder>\n        {tabs.map((tab) => {\n          if (tab.id === PanelEditorTabId.Alert) {\n            return renderAlertTab(tab, panel, dashboard, instrumentedOnChangeTab);\n          }\n          return (\n            <Tab\n              key={tab.id}\n              label={tab.text}\n              active={tab.active}\n              onChangeTab={() => instrumentedOnChangeTab(tab)}\n              icon={toIconName(tab.icon)}\n              counter={getCounter(panel, tab)}\n            />\n          );\n        })}\n      </TabsBar>\n      <TabContent className={styles.tabContent}>\n        {activeTab.id === PanelEditorTabId.Query && <PanelEditorQueries panel={panel} queries={panel.targets} />}\n        {activeTab.id === PanelEditorTabId.Alert && <AlertTabIndex panel={panel} dashboard={dashboard} />}\n        {activeTab.id === PanelEditorTabId.Transform && <TransformationsEditor panel={panel} />}\n      </TabContent>\n    </div>\n  );\n});\n\nPanelEditorTabs.displayName = 'PanelEditorTabs';\n\nfunction getCounter(panel: PanelModel, tab: PanelEditorTab) {\n  switch (tab.id) {\n    case PanelEditorTabId.Query:\n      return panel.targets.length;\n    case PanelEditorTabId.Alert:\n      return panel.alert ? 1 : 0;\n    case PanelEditorTabId.Transform:\n      const transformations = panel.getTransformations() ?? [];\n      return transformations.length;\n  }\n\n  return null;\n}\n\nfunction renderAlertTab(\n  tab: PanelEditorTab,\n  panel: PanelModel,\n  dashboard: DashboardModel,\n  onChangeTab: (tab: PanelEditorTab) => void\n) {\n  const alertingDisabled = !config.alertingEnabled && !config.unifiedAlertingEnabled;\n\n  if (alertingDisabled) {\n    return null;\n  }\n\n  if (config.unifiedAlertingEnabled) {\n    return (\n      <PanelAlertTab\n        key={tab.id}\n        label={tab.text}\n        active={tab.active}\n        onChangeTab={() => onChangeTab(tab)}\n        icon={toIconName(tab.icon)}\n        panel={panel}\n        dashboard={dashboard}\n      />\n    );\n  }\n\n  if (config.alertingEnabled) {\n    return (\n      <Tab\n        key={tab.id}\n        label={tab.text}\n        active={tab.active}\n        onChangeTab={() => onChangeTab(tab)}\n        icon={toIconName(tab.icon)}\n        counter={getCounter(panel, tab)}\n      />\n    );\n  }\n\n  return null;\n}\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    wrapper: css`\n      display: flex;\n      flex-direction: column;\n      height: 100%;\n    `,\n    tabBar: css`\n      padding-left: ${theme.spacing(2)};\n    `,\n    tabContent: css`\n      padding: 0;\n      display: flex;\n      flex-direction: column;\n      flex: 1;\n      min-height: 0;\n      background: ${theme.colors.background.primary};\n      border: 1px solid ${theme.components.panel.borderColor};\n      border-left: none;\n      border-bottom: none;\n      border-top-right-radius: ${theme.shape.borderRadius(1.5)};\n    `,\n  };\n};\n","import { css } from '@emotion/css';\nimport React, { PureComponent } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport AutoSizer from 'react-virtualized-auto-sizer';\nimport { Subscription } from 'rxjs';\n\nimport { FieldConfigSource, GrafanaTheme2, NavModel, NavModelItem, PageLayoutType } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { locationService } from '@grafana/runtime';\nimport {\n  Button,\n  HorizontalGroup,\n  InlineSwitch,\n  ModalsController,\n  RadioButtonGroup,\n  stylesFactory,\n  Themeable2,\n  ToolbarButton,\n  ToolbarButtonRow,\n  withTheme2,\n  Stack,\n} from '@grafana/ui';\nimport { AppChromeUpdate } from 'app/core/components/AppChrome/AppChromeUpdate';\nimport { Page } from 'app/core/components/Page/Page';\nimport { SplitPaneWrapper } from 'app/core/components/SplitPaneWrapper/SplitPaneWrapper';\nimport { appEvents } from 'app/core/core';\nimport { SubMenuItems } from 'app/features/dashboard/components/SubMenu/SubMenuItems';\nimport { SaveLibraryPanelModal } from 'app/features/library-panels/components/SaveLibraryPanelModal/SaveLibraryPanelModal';\nimport { PanelModelWithLibraryPanel } from 'app/features/library-panels/types';\nimport { getPanelStateForModel } from 'app/features/panel/state/selectors';\nimport { updateTimeZoneForSession } from 'app/features/profile/state/reducers';\nimport { StoreState } from 'app/types';\nimport { PanelOptionsChangedEvent, ShowModalReactEvent } from 'app/types/events';\n\nimport { notifyApp } from '../../../../core/actions';\nimport { UnlinkModal } from '../../../library-panels/components/UnlinkModal/UnlinkModal';\nimport { isPanelModelLibraryPanel } from '../../../library-panels/guard';\nimport { getVariablesByKey } from '../../../variables/state/selectors';\nimport { DashboardPanel } from '../../dashgrid/DashboardPanel';\nimport { DashboardModel, PanelModel } from '../../state';\nimport { DashNavTimeControls } from '../DashNav/DashNavTimeControls';\nimport { SaveDashboardDrawer } from '../SaveDashboard/SaveDashboardDrawer';\n\nimport { OptionsPane } from './OptionsPane';\nimport { PanelEditorTableView } from './PanelEditorTableView';\nimport { PanelEditorTabs } from './PanelEditorTabs';\nimport { VisualizationButton } from './VisualizationButton';\nimport { discardPanelChanges, initPanelEditor, updatePanelEditorUIState } from './state/actions';\nimport { PanelEditorUIState, toggleTableView } from './state/reducers';\nimport { getPanelEditorTabs } from './state/selectors';\nimport { DisplayMode, displayModes, PanelEditorTab } from './types';\nimport { calculatePanelSize } from './utils';\n\ninterface OwnProps {\n  dashboard: DashboardModel;\n  sourcePanel: PanelModel;\n  sectionNav: NavModel;\n  pageNav: NavModelItem;\n  className?: string;\n  tab?: string;\n}\n\nconst mapStateToProps = (state: StoreState, ownProps: OwnProps) => {\n  const panel = state.panelEditor.getPanel();\n  const panelState = getPanelStateForModel(state, panel);\n\n  return {\n    panel,\n    plugin: panelState?.plugin,\n    instanceState: panelState?.instanceState,\n    initDone: state.panelEditor.initDone,\n    uiState: state.panelEditor.ui,\n    tableViewEnabled: state.panelEditor.tableViewEnabled,\n    variables: getVariablesByKey(ownProps.dashboard.uid, state),\n  };\n};\n\nconst mapDispatchToProps = {\n  initPanelEditor,\n  discardPanelChanges,\n  updatePanelEditorUIState,\n  updateTimeZoneForSession,\n  toggleTableView,\n  notifyApp,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\ntype Props = OwnProps & ConnectedProps<typeof connector> & Themeable2;\n\ninterface State {\n  showSaveLibraryPanelModal?: boolean;\n}\n\nexport class PanelEditorUnconnected extends PureComponent<Props> {\n  private eventSubs?: Subscription;\n\n  state: State = {\n    showSaveLibraryPanelModal: false,\n  };\n\n  componentDidMount() {\n    this.props.initPanelEditor(this.props.sourcePanel, this.props.dashboard);\n  }\n\n  componentDidUpdate() {\n    const { panel, initDone } = this.props;\n\n    if (initDone && !this.eventSubs) {\n      this.eventSubs = new Subscription();\n      this.eventSubs.add(panel.events.subscribe(PanelOptionsChangedEvent, this.triggerForceUpdate));\n    }\n  }\n\n  componentWillUnmount() {\n    // redux action exitPanelEditor is called on location change from DashboardPrompt\n    this.eventSubs?.unsubscribe();\n  }\n\n  triggerForceUpdate = () => {\n    this.forceUpdate();\n  };\n\n  onBack = () => {\n    locationService.partial({\n      editPanel: null,\n      tab: null,\n      showCategory: null,\n    });\n  };\n\n  onDiscard = () => {\n    this.props.discardPanelChanges();\n    this.onBack();\n  };\n\n  onSaveDashboard = () => {\n    appEvents.publish(\n      new ShowModalReactEvent({\n        component: SaveDashboardDrawer,\n        props: { dashboard: this.props.dashboard },\n      })\n    );\n  };\n\n  onSaveLibraryPanel = async () => {\n    if (!isPanelModelLibraryPanel(this.props.panel)) {\n      // New library panel, no need to display modal\n      return;\n    }\n\n    this.setState({ showSaveLibraryPanelModal: true });\n  };\n\n  onChangeTab = (tab: PanelEditorTab) => {\n    locationService.partial({\n      tab: tab.id,\n    });\n  };\n\n  onFieldConfigChange = (config: FieldConfigSource) => {\n    // we do not need to trigger force update here as the function call below\n    // fires PanelOptionsChangedEvent which we subscribe to above\n    this.props.panel.updateFieldConfig({\n      ...config,\n    });\n  };\n\n  onPanelOptionsChanged = (options: PanelModel['options']) => {\n    // we do not need to trigger force update here as the function call below\n    // fires PanelOptionsChangedEvent which we subscribe to above\n    this.props.panel.updateOptions(options);\n  };\n\n  onPanelConfigChanged = (configKey: keyof PanelModel, value: unknown) => {\n    this.props.panel.setProperty(configKey, value);\n    this.props.panel.render();\n    this.forceUpdate();\n  };\n\n  onDisplayModeChange = (mode?: DisplayMode) => {\n    const { updatePanelEditorUIState } = this.props;\n    if (this.props.tableViewEnabled) {\n      this.props.toggleTableView();\n    }\n    updatePanelEditorUIState({\n      mode: mode,\n    });\n  };\n\n  onToggleTableView = () => {\n    this.props.toggleTableView();\n  };\n\n  renderPanel(styles: EditorStyles, isOnlyPanel: boolean) {\n    const { dashboard, panel, uiState, tableViewEnabled, theme } = this.props;\n\n    return (\n      <div className={styles.mainPaneWrapper} key=\"panel\">\n        {this.renderPanelToolbar(styles)}\n        <div className={styles.panelWrapper}>\n          <AutoSizer>\n            {({ width, height }) => {\n              if (width < 3 || height < 3) {\n                return null;\n              }\n\n              // If no tabs limit height so panel does not extend to edge\n              if (isOnlyPanel) {\n                height -= theme.spacing.gridSize * 2;\n              }\n\n              if (tableViewEnabled) {\n                return <PanelEditorTableView width={width} height={height} panel={panel} dashboard={dashboard} />;\n              }\n\n              const panelSize = calculatePanelSize(uiState.mode, width, height, panel);\n\n              return (\n                <div className={styles.centeringContainer} style={{ width, height }}>\n                  <div style={panelSize} data-panelid={panel.id}>\n                    <DashboardPanel\n                      key={panel.key}\n                      stateKey={panel.key}\n                      dashboard={dashboard}\n                      panel={panel}\n                      isEditing={true}\n                      isViewing={false}\n                      lazy={false}\n                      width={panelSize.width}\n                      height={panelSize.height}\n                    />\n                  </div>\n                </div>\n              );\n            }}\n          </AutoSizer>\n        </div>\n      </div>\n    );\n  }\n\n  renderPanelAndEditor(uiState: PanelEditorUIState, styles: EditorStyles) {\n    const { panel, dashboard, plugin, tab } = this.props;\n    const tabs = getPanelEditorTabs(tab, plugin);\n    const isOnlyPanel = tabs.length === 0;\n    const panelPane = this.renderPanel(styles, isOnlyPanel);\n\n    if (tabs.length === 0) {\n      return <div className={styles.onlyPanel}>{panelPane}</div>;\n    }\n\n    return (\n      <SplitPaneWrapper\n        splitOrientation=\"horizontal\"\n        maxSize={-200}\n        paneSize={uiState.topPaneSize}\n        primary=\"first\"\n        secondaryPaneStyle={{ minHeight: 0 }}\n        onDragFinished={(size) => {\n          if (size) {\n            updatePanelEditorUIState({ topPaneSize: size / window.innerHeight });\n          }\n        }}\n      >\n        {panelPane}\n        <div\n          className={styles.tabsWrapper}\n          aria-label={selectors.components.PanelEditor.DataPane.content}\n          key=\"panel-editor-tabs\"\n        >\n          <PanelEditorTabs\n            key={panel.key}\n            panel={panel}\n            dashboard={dashboard}\n            tabs={tabs}\n            onChangeTab={this.onChangeTab}\n          />\n        </div>\n      </SplitPaneWrapper>\n    );\n  }\n\n  renderTemplateVariables(styles: EditorStyles) {\n    const { variables } = this.props;\n\n    if (!variables.length) {\n      return null;\n    }\n\n    return (\n      <div className={styles.variablesWrapper}>\n        <SubMenuItems variables={variables} />\n      </div>\n    );\n  }\n\n  renderPanelToolbar(styles: EditorStyles) {\n    const { dashboard, uiState, variables, updateTimeZoneForSession, panel, tableViewEnabled } = this.props;\n\n    return (\n      <div className={styles.panelToolbar}>\n        <HorizontalGroup justify={variables.length > 0 ? 'space-between' : 'flex-end'} align=\"flex-start\">\n          {this.renderTemplateVariables(styles)}\n          <Stack gap={1}>\n            <InlineSwitch\n              label=\"Table view\"\n              showLabel={true}\n              id=\"table-view\"\n              value={tableViewEnabled}\n              onClick={this.onToggleTableView}\n              aria-label={selectors.components.PanelEditor.toggleTableView}\n            />\n            <RadioButtonGroup value={uiState.mode} options={displayModes} onChange={this.onDisplayModeChange} />\n            <DashNavTimeControls dashboard={dashboard} onChangeTimeZone={updateTimeZoneForSession} isOnCanvas={true} />\n            {!uiState.isPanelOptionsVisible && <VisualizationButton panel={panel} />}\n          </Stack>\n        </HorizontalGroup>\n      </div>\n    );\n  }\n\n  renderEditorActions() {\n    const size = 'sm';\n    let editorActions = [\n      <Button\n        onClick={this.onDiscard}\n        title=\"Undo all changes\"\n        key=\"discard\"\n        size={size}\n        variant=\"destructive\"\n        fill=\"outline\"\n      >\n        Discard\n      </Button>,\n      this.props.panel.libraryPanel ? (\n        <Button\n          onClick={this.onSaveLibraryPanel}\n          variant=\"primary\"\n          size={size}\n          title=\"Apply changes and save library panel\"\n          key=\"save-panel\"\n        >\n          Save library panel\n        </Button>\n      ) : (\n        <Button\n          onClick={this.onSaveDashboard}\n          title=\"Apply changes and save dashboard\"\n          key=\"save\"\n          size={size}\n          variant=\"secondary\"\n        >\n          Save\n        </Button>\n      ),\n      <Button\n        onClick={this.onBack}\n        variant=\"primary\"\n        title=\"Apply changes and go back to dashboard\"\n        data-testid={selectors.components.PanelEditor.applyButton}\n        key=\"apply\"\n        size={size}\n      >\n        Apply\n      </Button>,\n    ];\n\n    if (this.props.panel.libraryPanel) {\n      editorActions.splice(\n        1,\n        0,\n        <ModalsController key=\"unlink-controller\">\n          {({ showModal, hideModal }) => {\n            return (\n              <ToolbarButton\n                onClick={() => {\n                  showModal(UnlinkModal, {\n                    onConfirm: () => {\n                      this.props.panel.unlinkLibraryPanel();\n                      this.forceUpdate();\n                    },\n                    onDismiss: hideModal,\n                    isOpen: true,\n                  });\n                }}\n                title=\"Disconnects this panel from the library panel so that you can edit it regularly.\"\n                key=\"unlink\"\n              >\n                Unlink\n              </ToolbarButton>\n            );\n          }}\n        </ModalsController>\n      );\n\n      // Remove \"Apply\" button\n      editorActions.pop();\n    }\n\n    return editorActions;\n  }\n\n  renderOptionsPane() {\n    const { plugin, dashboard, panel, instanceState } = this.props;\n\n    if (!plugin) {\n      return <div />;\n    }\n\n    return (\n      <OptionsPane\n        plugin={plugin}\n        dashboard={dashboard}\n        panel={panel}\n        instanceState={instanceState}\n        onFieldConfigsChange={this.onFieldConfigChange}\n        onPanelOptionsChanged={this.onPanelOptionsChanged}\n        onPanelConfigChange={this.onPanelConfigChanged}\n      />\n    );\n  }\n\n  onGoBackToDashboard = () => {\n    locationService.partial({ editPanel: null, tab: null, showCategory: null });\n  };\n\n  onConfirmAndDismissLibarayPanelModel = () => {\n    this.setState({ showSaveLibraryPanelModal: false });\n  };\n\n  render() {\n    const { initDone, uiState, theme, sectionNav, pageNav, className, updatePanelEditorUIState } = this.props;\n    const styles = getStyles(theme, this.props);\n\n    if (!initDone) {\n      return null;\n    }\n\n    return (\n      <Page\n        navModel={sectionNav}\n        pageNav={pageNav}\n        aria-label={selectors.components.PanelEditor.General.content}\n        layout={PageLayoutType.Custom}\n        className={className}\n      >\n        <AppChromeUpdate\n          actions={<ToolbarButtonRow alignment=\"right\">{this.renderEditorActions()}</ToolbarButtonRow>}\n        />\n        <div className={styles.wrapper}>\n          <div className={styles.verticalSplitPanesWrapper}>\n            {!uiState.isPanelOptionsVisible ? (\n              this.renderPanelAndEditor(uiState, styles)\n            ) : (\n              <SplitPaneWrapper\n                splitOrientation=\"vertical\"\n                maxSize={-300}\n                paneSize={uiState.rightPaneSize}\n                primary=\"second\"\n                onDragFinished={(size) => {\n                  if (size) {\n                    updatePanelEditorUIState({ rightPaneSize: size / window.innerWidth });\n                  }\n                }}\n              >\n                {this.renderPanelAndEditor(uiState, styles)}\n                {this.renderOptionsPane()}\n              </SplitPaneWrapper>\n            )}\n          </div>\n          {this.state.showSaveLibraryPanelModal && (\n            <SaveLibraryPanelModal\n              panel={this.props.panel as PanelModelWithLibraryPanel}\n              folderUid={this.props.dashboard.meta.folderUid ?? ''}\n              onConfirm={this.onConfirmAndDismissLibarayPanelModel}\n              onDiscard={this.onDiscard}\n              onDismiss={this.onConfirmAndDismissLibarayPanelModel}\n            />\n          )}\n        </div>\n      </Page>\n    );\n  }\n}\n\nexport const PanelEditor = withTheme2(connector(PanelEditorUnconnected));\n\n/*\n * Styles\n */\nexport const getStyles = stylesFactory((theme: GrafanaTheme2, props: Props) => {\n  const { uiState } = props;\n  const paneSpacing = theme.spacing(2);\n\n  return {\n    wrapper: css({\n      width: '100%',\n      flexGrow: 1,\n      minHeight: 0,\n      display: 'flex',\n      paddingTop: theme.spacing(2),\n    }),\n    verticalSplitPanesWrapper: css`\n      display: flex;\n      flex-direction: column;\n      height: 100%;\n      width: 100%;\n      position: relative;\n    `,\n    mainPaneWrapper: css`\n      display: flex;\n      flex-direction: column;\n      height: 100%;\n      width: 100%;\n      padding-right: ${uiState.isPanelOptionsVisible ? 0 : paneSpacing};\n    `,\n    variablesWrapper: css`\n      label: variablesWrapper;\n      display: flex;\n      flex-grow: 1;\n      flex-wrap: wrap;\n      gap: ${theme.spacing(1, 2)};\n    `,\n    panelWrapper: css`\n      flex: 1 1 0;\n      min-height: 0;\n      width: 100%;\n      padding-left: ${paneSpacing};\n    `,\n    tabsWrapper: css`\n      height: 100%;\n      width: 100%;\n    `,\n    panelToolbar: css`\n      display: flex;\n      padding: 0 0 ${paneSpacing} ${paneSpacing};\n      justify-content: space-between;\n      flex-wrap: wrap;\n    `,\n    angularWarning: css`\n      display: flex;\n      height: theme.spacing(4);\n      align-items: center;\n    `,\n    toolbarLeft: css`\n      padding-left: ${theme.spacing(1)};\n    `,\n    centeringContainer: css`\n      display: flex;\n      justify-content: center;\n      align-items: center;\n      position: relative;\n      flex-direction: column;\n    `,\n    onlyPanel: css`\n      height: 100%;\n      position: absolute;\n      overflow: hidden;\n      width: 100%;\n    `,\n  };\n});\n\ntype EditorStyles = ReturnType<typeof getStyles>;\n","import { css } from '@emotion/css';\nimport React, { useEffect, useState } from 'react';\n\nimport { AnnotationQuery, EventBus, GrafanaTheme2 } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { InlineField, InlineFieldRow, InlineSwitch, useStyles2 } from '@grafana/ui';\nimport { LoadingIndicator } from '@grafana/ui/src/components/PanelChrome/LoadingIndicator';\n\nimport { AnnotationQueryFinished, AnnotationQueryStarted } from '../../../../types/events';\nimport { getDashboardQueryRunner } from '../../../query/state/DashboardQueryRunner/DashboardQueryRunner';\n\nexport interface AnnotationPickerProps {\n  events: EventBus;\n  annotation: AnnotationQuery;\n  onEnabledChanged: (annotation: AnnotationQuery) => void;\n}\n\nexport const AnnotationPicker = ({ annotation, events, onEnabledChanged }: AnnotationPickerProps): JSX.Element => {\n  const [loading, setLoading] = useState(false);\n  const styles = useStyles2(getStyles);\n  const onCancel = () => getDashboardQueryRunner().cancel(annotation);\n\n  useEffect(() => {\n    const started = events.getStream(AnnotationQueryStarted).subscribe({\n      next: (event) => {\n        if (event.payload === annotation) {\n          setLoading(true);\n        }\n      },\n    });\n    const stopped = events.getStream(AnnotationQueryFinished).subscribe({\n      next: (event) => {\n        if (event.payload === annotation) {\n          setLoading(false);\n        }\n      },\n    });\n\n    return () => {\n      started.unsubscribe();\n      stopped.unsubscribe();\n    };\n  });\n\n  return (\n    <div key={annotation.name} className={styles.annotation}>\n      <InlineFieldRow>\n        <InlineField\n          label={annotation.name}\n          disabled={loading}\n          data-testid={selectors.pages.Dashboard.SubMenu.Annotations.annotationLabel(annotation.name)}\n        >\n          <InlineSwitch\n            label={annotation.name}\n            value={annotation.enable}\n            onChange={() => onEnabledChanged(annotation)}\n            disabled={loading}\n            data-testid={selectors.pages.Dashboard.SubMenu.Annotations.annotationToggle(annotation.name)}\n          />\n        </InlineField>\n        <div className={styles.indicator}>\n          <LoadingIndicator loading={loading} onCancel={onCancel} />\n        </div>\n      </InlineFieldRow>\n    </div>\n  );\n};\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    annotation: css`\n      display: inline-block;\n      margin-right: ${theme.spacing(1)};\n\n      .fa-caret-down {\n        font-size: 75%;\n        padding-left: ${theme.spacing(1)};\n      }\n\n      .gf-form-inline .gf-form {\n        margin-bottom: 0;\n      }\n    `,\n    indicator: css`\n      align-self: center;\n      padding: 0 ${theme.spacing(0.5)};\n    `,\n  };\n}\n","import React, { useEffect, useState } from 'react';\n\nimport { AnnotationQuery, DataQuery, EventBus } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\n\nimport { AnnotationPicker } from './AnnotationPicker';\n\ninterface Props {\n  events: EventBus;\n  annotations: AnnotationQuery[];\n  onAnnotationChanged: (annotation: AnnotationQuery<DataQuery>) => void;\n}\n\nexport const Annotations = ({ annotations, onAnnotationChanged, events }: Props) => {\n  const [visibleAnnotations, setVisibleAnnotations] = useState<AnnotationQuery[]>([]);\n  useEffect(() => {\n    setVisibleAnnotations(annotations.filter((annotation) => annotation.hide !== true));\n  }, [annotations]);\n\n  if (visibleAnnotations.length === 0) {\n    return null;\n  }\n\n  return (\n    <div data-testid={selectors.pages.Dashboard.SubMenu.Annotations.annotationsWrapper}>\n      {visibleAnnotations.map((annotation) => (\n        <AnnotationPicker\n          events={events}\n          annotation={annotation}\n          onEnabledChanged={onAnnotationChanged}\n          key={annotation.name}\n        />\n      ))}\n    </div>\n  );\n};\n","import React from 'react';\nimport { useEffectOnce } from 'react-use';\n\nimport { sanitizeUrl } from '@grafana/data/src/text/sanitize';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { TimeRangeUpdatedEvent } from '@grafana/runtime';\nimport { DashboardLink } from '@grafana/schema';\nimport { Tooltip, useForceUpdate } from '@grafana/ui';\n\nimport { getLinkSrv } from '../../../panel/panellinks/link_srv';\nimport { DashboardModel } from '../../state';\nimport { linkIconMap } from '../LinksSettings/LinkSettingsEdit';\n\nimport { DashboardLinkButton, DashboardLinksDashboard } from './DashboardLinksDashboard';\n\nexport interface Props {\n  dashboard: DashboardModel;\n  links: DashboardLink[];\n}\n\nexport const DashboardLinks = ({ dashboard, links }: Props) => {\n  const forceUpdate = useForceUpdate();\n\n  useEffectOnce(() => {\n    const sub = dashboard.events.subscribe(TimeRangeUpdatedEvent, forceUpdate);\n    return () => sub.unsubscribe();\n  });\n\n  if (!links.length) {\n    return null;\n  }\n\n  return (\n    <>\n      {links.map((link: DashboardLink, index: number) => {\n        const linkInfo = getLinkSrv().getAnchorInfo(link);\n        const key = `${link.title}-$${index}`;\n\n        if (link.type === 'dashboards') {\n          return <DashboardLinksDashboard key={key} link={link} linkInfo={linkInfo} dashboardUID={dashboard.uid} />;\n        }\n\n        const icon = linkIconMap[link.icon];\n\n        const linkElement = (\n          <DashboardLinkButton\n            href={sanitizeUrl(linkInfo.href)}\n            target={link.targetBlank ? '_blank' : undefined}\n            rel=\"noreferrer\"\n            data-testid={selectors.components.DashboardLinks.link}\n            icon={icon}\n          >\n            {linkInfo.title}\n          </DashboardLinkButton>\n        );\n\n        return (\n          <div key={key} data-testid={selectors.components.DashboardLinks.container}>\n            {link.tooltip ? <Tooltip content={linkInfo.tooltip}>{linkElement}</Tooltip> : linkElement}\n          </div>\n        );\n      })}\n    </>\n  );\n};\n","import { css } from '@emotion/css';\nimport React, { PureComponent } from 'react';\nimport { connect, MapStateToProps } from 'react-redux';\n\nimport { AnnotationQuery, DataQuery, TypedVariableModel, GrafanaTheme2 } from '@grafana/data';\nimport { DashboardLink } from '@grafana/schema';\nimport { stylesFactory, Themeable2, withTheme2 } from '@grafana/ui';\n\nimport { StoreState } from '../../../../types';\nimport { getSubMenuVariables, getVariablesState } from '../../../variables/state/selectors';\nimport { DashboardModel } from '../../state';\n\nimport { Annotations } from './Annotations';\nimport { DashboardLinks } from './DashboardLinks';\nimport { SubMenuItems } from './SubMenuItems';\n\ninterface OwnProps extends Themeable2 {\n  dashboard: DashboardModel;\n  links: DashboardLink[];\n  annotations: AnnotationQuery[];\n}\n\ninterface ConnectedProps {\n  variables: TypedVariableModel[];\n}\n\ninterface DispatchProps {}\n\ntype Props = OwnProps & ConnectedProps & DispatchProps;\n\nclass SubMenuUnConnected extends PureComponent<Props> {\n  onAnnotationStateChanged = (updatedAnnotation: AnnotationQuery<DataQuery>) => {\n    // we're mutating dashboard state directly here until annotations are in Redux.\n    for (let index = 0; index < this.props.dashboard.annotations.list.length; index++) {\n      const annotation = this.props.dashboard.annotations.list[index];\n      if (annotation.name === updatedAnnotation.name) {\n        annotation.enable = !annotation.enable;\n        break;\n      }\n    }\n    this.props.dashboard.startRefresh();\n    this.forceUpdate();\n  };\n\n  disableSubmitOnEnter = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n  };\n\n  render() {\n    const { dashboard, variables, links, annotations, theme } = this.props;\n\n    const styles = getStyles(theme);\n\n    if (!dashboard.isSubMenuVisible()) {\n      return null;\n    }\n\n    const readOnlyVariables = dashboard.meta.isSnapshot ?? false;\n\n    return (\n      <div className={styles.submenu}>\n        <form aria-label=\"Template variables\" className={styles.formStyles} onSubmit={this.disableSubmitOnEnter}>\n          <SubMenuItems variables={variables} readOnly={readOnlyVariables} />\n        </form>\n        <Annotations\n          annotations={annotations}\n          onAnnotationChanged={this.onAnnotationStateChanged}\n          events={dashboard.events}\n        />\n        <div className={styles.spacer} />\n        {dashboard && <DashboardLinks dashboard={dashboard} links={links} />}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps: MapStateToProps<ConnectedProps, OwnProps, StoreState> = (state, ownProps) => {\n  const { uid } = ownProps.dashboard;\n  const templatingState = getVariablesState(uid, state);\n  return {\n    variables: getSubMenuVariables(uid, templatingState.variables),\n  };\n};\n\nconst getStyles = stylesFactory((theme: GrafanaTheme2) => {\n  return {\n    formStyles: css`\n      display: flex;\n      flex-wrap: wrap;\n      display: contents;\n    `,\n    submenu: css`\n      display: flex;\n      flex-direction: row;\n      flex-wrap: wrap;\n      align-content: flex-start;\n      align-items: flex-start;\n      gap: ${theme.spacing(1)} ${theme.spacing(2)};\n      padding: 0 0 ${theme.spacing(1)} 0;\n    `,\n    spacer: css({\n      flexGrow: 1,\n    }),\n  };\n});\n\nexport const SubMenu = withTheme2(connect(mapStateToProps)(SubMenuUnConnected));\n\nSubMenu.displayName = 'SubMenu';\n","import { cx } from '@emotion/css';\nimport React, { PureComponent } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport { NavModel, NavModelItem, TimeRange, PageLayoutType, locationUtil } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { config, locationService } from '@grafana/runtime';\nimport { Themeable2, withTheme2 } from '@grafana/ui';\nimport { notifyApp } from 'app/core/actions';\nimport { Page } from 'app/core/components/Page/Page';\nimport { EntityNotFound } from 'app/core/components/PageNotFound/EntityNotFound';\nimport { GrafanaContext, GrafanaContextType } from 'app/core/context/GrafanaContext';\nimport { createErrorNotification } from 'app/core/copy/appNotification';\nimport { getKioskMode } from 'app/core/navigation/kiosk';\nimport { GrafanaRouteComponentProps } from 'app/core/navigation/types';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { PanelModel } from 'app/features/dashboard/state';\nimport { dashboardWatcher } from 'app/features/live/dashboard/dashboardWatcher';\nimport { AngularDeprecationNotice } from 'app/features/plugins/angularDeprecation/AngularDeprecationNotice';\nimport { getPageNavFromSlug, getRootContentNavModel } from 'app/features/storage/StorageFolderPage';\nimport { DashboardRoutes, KioskMode, StoreState } from 'app/types';\nimport { PanelEditEnteredEvent, PanelEditExitedEvent } from 'app/types/events';\n\nimport { cancelVariables, templateVarsChangedInUrl } from '../../variables/state/actions';\nimport { findTemplateVarChanges } from '../../variables/utils';\nimport { AddWidgetModal } from '../components/AddWidgetModal/AddWidgetModal';\nimport { DashNav } from '../components/DashNav';\nimport { DashboardFailed } from '../components/DashboardLoading/DashboardFailed';\nimport { DashboardLoading } from '../components/DashboardLoading/DashboardLoading';\nimport { DashboardPrompt } from '../components/DashboardPrompt/DashboardPrompt';\nimport { DashboardSettings } from '../components/DashboardSettings';\nimport { PanelInspector } from '../components/Inspector/PanelInspector';\nimport { PanelEditor } from '../components/PanelEditor/PanelEditor';\nimport { ShareModal } from '../components/ShareModal';\nimport { SubMenu } from '../components/SubMenu/SubMenu';\nimport { DashboardGrid } from '../dashgrid/DashboardGrid';\nimport { liveTimer } from '../dashgrid/liveTimer';\nimport { getTimeSrv } from '../services/TimeSrv';\nimport { cleanUpDashboardAndVariables } from '../state/actions';\nimport { initDashboard } from '../state/initDashboard';\nimport { calculateNewPanelGridPos } from '../utils/panel';\n\nimport { DashboardPageRouteParams, DashboardPageRouteSearchParams } from './types';\n\nexport const mapStateToProps = (state: StoreState) => ({\n  initPhase: state.dashboard.initPhase,\n  initError: state.dashboard.initError,\n  dashboard: state.dashboard.getModel(),\n  navIndex: state.navIndex,\n});\n\nconst mapDispatchToProps = {\n  initDashboard,\n  cleanUpDashboardAndVariables,\n  notifyApp,\n  cancelVariables,\n  templateVarsChangedInUrl,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\nexport type Props = Themeable2 &\n  GrafanaRouteComponentProps<DashboardPageRouteParams, DashboardPageRouteSearchParams> &\n  ConnectedProps<typeof connector>;\n\nexport interface State {\n  editPanel: PanelModel | null;\n  viewPanel: PanelModel | null;\n  updateScrollTop?: number;\n  rememberScrollTop?: number;\n  showLoadingState: boolean;\n  panelNotFound: boolean;\n  editPanelAccessDenied: boolean;\n  scrollElement?: HTMLDivElement;\n  pageNav?: NavModelItem;\n  sectionNav?: NavModel;\n}\n\nexport class UnthemedDashboardPage extends PureComponent<Props, State> {\n  declare context: GrafanaContextType;\n  static contextType = GrafanaContext;\n\n  private forceRouteReloadCounter = 0;\n  state: State = this.getCleanState();\n\n  getCleanState(): State {\n    return {\n      editPanel: null,\n      viewPanel: null,\n      showLoadingState: false,\n      panelNotFound: false,\n      editPanelAccessDenied: false,\n    };\n  }\n\n  componentDidMount() {\n    this.initDashboard();\n    this.forceRouteReloadCounter = (this.props.history.location.state as any)?.routeReloadCounter || 0;\n  }\n\n  componentWillUnmount() {\n    this.closeDashboard();\n  }\n\n  closeDashboard() {\n    this.props.cleanUpDashboardAndVariables();\n    this.setState(this.getCleanState());\n  }\n\n  initDashboard() {\n    const { dashboard, match, queryParams } = this.props;\n\n    if (dashboard) {\n      this.closeDashboard();\n    }\n\n    this.props.initDashboard({\n      urlSlug: match.params.slug,\n      urlUid: match.params.uid,\n      urlType: match.params.type,\n      urlFolderUid: queryParams.folderUid,\n      panelType: queryParams.panelType,\n      routeName: this.props.route.routeName,\n      fixUrl: true,\n      accessToken: match.params.accessToken,\n      keybindingSrv: this.context.keybindings,\n    });\n\n    // small delay to start live updates\n    setTimeout(this.updateLiveTimer, 250);\n  }\n\n  componentDidUpdate(prevProps: Props, prevState: State) {\n    const { dashboard, match, templateVarsChangedInUrl } = this.props;\n    const routeReloadCounter = (this.props.history.location.state as any)?.routeReloadCounter;\n\n    if (!dashboard) {\n      return;\n    }\n\n    if (\n      prevProps.match.params.uid !== match.params.uid ||\n      (routeReloadCounter !== undefined && this.forceRouteReloadCounter !== routeReloadCounter)\n    ) {\n      this.initDashboard();\n      this.forceRouteReloadCounter = routeReloadCounter;\n      return;\n    }\n\n    if (prevProps.location.search !== this.props.location.search) {\n      const prevUrlParams = prevProps.queryParams;\n      const urlParams = this.props.queryParams;\n\n      if (urlParams?.from !== prevUrlParams?.from || urlParams?.to !== prevUrlParams?.to) {\n        getTimeSrv().updateTimeRangeFromUrl();\n        this.updateLiveTimer();\n      }\n\n      if (!prevUrlParams?.refresh && urlParams?.refresh) {\n        getTimeSrv().setAutoRefresh(urlParams.refresh);\n      }\n\n      const templateVarChanges = findTemplateVarChanges(this.props.queryParams, prevProps.queryParams);\n\n      if (templateVarChanges) {\n        templateVarsChangedInUrl(dashboard.uid, templateVarChanges);\n      }\n    }\n\n    // entering edit mode\n    if (this.state.editPanel && !prevState.editPanel) {\n      dashboardWatcher.setEditingState(true);\n\n      // Some panels need to be notified when entering edit mode\n      this.props.dashboard?.events.publish(new PanelEditEnteredEvent(this.state.editPanel.id));\n    }\n\n    // leaving edit mode\n    if (!this.state.editPanel && prevState.editPanel) {\n      dashboardWatcher.setEditingState(false);\n\n      // Some panels need kicked when leaving edit mode\n      this.props.dashboard?.events.publish(new PanelEditExitedEvent(prevState.editPanel.id));\n    }\n\n    if (this.state.editPanelAccessDenied) {\n      this.props.notifyApp(createErrorNotification('Permission to edit panel denied'));\n      locationService.partial({ editPanel: null });\n    }\n\n    if (this.state.panelNotFound) {\n      this.props.notifyApp(createErrorNotification(`Panel not found`));\n      locationService.partial({ editPanel: null, viewPanel: null });\n    }\n  }\n\n  updateLiveTimer = () => {\n    let tr: TimeRange | undefined = undefined;\n    if (this.props.dashboard?.liveNow) {\n      tr = getTimeSrv().timeRange();\n    }\n    liveTimer.setLiveTimeRange(tr);\n  };\n\n  static getDerivedStateFromProps(props: Props, state: State) {\n    const { dashboard, queryParams } = props;\n\n    const urlEditPanelId = queryParams.editPanel;\n    const urlViewPanelId = queryParams.viewPanel;\n\n    if (!dashboard) {\n      return state;\n    }\n\n    const updatedState = { ...state };\n\n    // Entering edit mode\n    if (!state.editPanel && urlEditPanelId) {\n      const panel = dashboard.getPanelByUrlId(urlEditPanelId);\n      if (panel) {\n        if (dashboard.canEditPanel(panel)) {\n          updatedState.editPanel = panel;\n          updatedState.rememberScrollTop = state.scrollElement?.scrollTop;\n        } else {\n          updatedState.editPanelAccessDenied = true;\n        }\n      } else {\n        updatedState.panelNotFound = true;\n      }\n    }\n    // Leaving edit mode\n    else if (state.editPanel && !urlEditPanelId) {\n      updatedState.editPanel = null;\n      updatedState.updateScrollTop = state.rememberScrollTop;\n    }\n\n    // Entering view mode\n    if (!state.viewPanel && urlViewPanelId) {\n      const panel = dashboard.getPanelByUrlId(urlViewPanelId);\n      if (panel) {\n        // This mutable state feels wrong to have in getDerivedStateFromProps\n        // Should move this state out of dashboard in the future\n        dashboard.initViewPanel(panel);\n        updatedState.viewPanel = panel;\n        updatedState.rememberScrollTop = state.scrollElement?.scrollTop;\n        updatedState.updateScrollTop = 0;\n      } else {\n        updatedState.panelNotFound = true;\n      }\n    }\n    // Leaving view mode\n    else if (state.viewPanel && !urlViewPanelId) {\n      // This mutable state feels wrong to have in getDerivedStateFromProps\n      // Should move this state out of dashboard in the future\n      dashboard.exitViewPanel(state.viewPanel);\n      updatedState.viewPanel = null;\n      updatedState.updateScrollTop = state.rememberScrollTop;\n    }\n\n    // if we removed url edit state, clear any panel not found state\n    if (state.panelNotFound || (state.editPanelAccessDenied && !urlEditPanelId)) {\n      updatedState.panelNotFound = false;\n      updatedState.editPanelAccessDenied = false;\n    }\n\n    return updateStatePageNavFromProps(props, updatedState);\n  }\n\n  // Todo: Remove this when we remove the emptyDashboardPage toggle\n  onAddPanel = () => {\n    const { dashboard } = this.props;\n\n    if (!dashboard) {\n      return;\n    }\n\n    // Return if the \"Add panel\" exists already\n    if (dashboard.panels.length > 0 && dashboard.panels[0].type === 'add-panel') {\n      return;\n    }\n\n    dashboard.addPanel({\n      type: 'add-panel',\n      gridPos: calculateNewPanelGridPos(dashboard),\n      title: 'Panel Title',\n    });\n\n    // scroll to top after adding panel\n    this.setState({ updateScrollTop: 0 });\n  };\n\n  setScrollRef = (scrollElement: HTMLDivElement): void => {\n    this.setState({ scrollElement });\n  };\n\n  getInspectPanel() {\n    const { dashboard, queryParams } = this.props;\n\n    const inspectPanelId = queryParams.inspect;\n\n    if (!dashboard || !inspectPanelId) {\n      return null;\n    }\n\n    const inspectPanel = dashboard.getPanelById(parseInt(inspectPanelId, 10));\n\n    // cannot inspect panels plugin is not already loaded\n    if (!inspectPanel) {\n      return null;\n    }\n\n    return inspectPanel;\n  }\n\n  onCloseShareModal = () => {\n    locationService.partial({ shareView: null });\n  };\n\n  render() {\n    const { dashboard, initError, queryParams } = this.props;\n    const { editPanel, viewPanel, updateScrollTop, pageNav, sectionNav } = this.state;\n    const kioskMode = getKioskMode(this.props.queryParams);\n\n    if (!dashboard || !pageNav || !sectionNav) {\n      return <DashboardLoading initPhase={this.props.initPhase} />;\n    }\n\n    const inspectPanel = this.getInspectPanel();\n    const showSubMenu = !editPanel && !kioskMode && !this.props.queryParams.editview;\n\n    const showToolbar = kioskMode !== KioskMode.Full && !queryParams.editview;\n\n    const pageClassName = cx({\n      'panel-in-fullscreen': Boolean(viewPanel),\n      'page-hidden': Boolean(queryParams.editview || editPanel),\n    });\n\n    if (dashboard.meta.dashboardNotFound) {\n      return (\n        <Page navId=\"dashboards/browse\" layout={PageLayoutType.Canvas} pageNav={{ text: 'Not found' }}>\n          <EntityNotFound entity=\"Dashboard\" />\n        </Page>\n      );\n    }\n\n    return (\n      <>\n        <Page\n          navModel={sectionNav}\n          pageNav={pageNav}\n          layout={PageLayoutType.Canvas}\n          className={pageClassName}\n          scrollRef={this.setScrollRef}\n          scrollTop={updateScrollTop}\n        >\n          {showToolbar && (\n            <header data-testid={selectors.pages.Dashboard.DashNav.navV2}>\n              <DashNav\n                dashboard={dashboard}\n                title={dashboard.title}\n                folderTitle={dashboard.meta.folderTitle}\n                isFullscreen={!!viewPanel}\n                onAddPanel={this.onAddPanel}\n                kioskMode={kioskMode}\n                hideTimePicker={dashboard.timepicker.hidden}\n              />\n            </header>\n          )}\n          <DashboardPrompt dashboard={dashboard} />\n          {initError && <DashboardFailed />}\n          {showSubMenu && (\n            <section aria-label={selectors.pages.Dashboard.SubMenu.submenu}>\n              <SubMenu dashboard={dashboard} annotations={dashboard.annotations.list} links={dashboard.links} />\n            </section>\n          )}\n          {config.featureToggles.angularDeprecationUI && dashboard.hasAngularPlugins() && dashboard.uid !== null && (\n            <AngularDeprecationNotice dashboardUid={dashboard.uid} />\n          )}\n          <DashboardGrid\n            dashboard={dashboard}\n            isEditable={!!dashboard.meta.canEdit}\n            viewPanel={viewPanel}\n            editPanel={editPanel}\n          />\n\n          {inspectPanel && <PanelInspector dashboard={dashboard} panel={inspectPanel} />}\n          {queryParams.shareView && <ShareModal dashboard={dashboard} onDismiss={this.onCloseShareModal} />}\n        </Page>\n        {editPanel && (\n          <PanelEditor\n            dashboard={dashboard}\n            sourcePanel={editPanel}\n            tab={this.props.queryParams.tab}\n            sectionNav={sectionNav}\n            pageNav={pageNav}\n          />\n        )}\n        {queryParams.editview && (\n          <DashboardSettings\n            dashboard={dashboard}\n            editview={queryParams.editview}\n            pageNav={pageNav}\n            sectionNav={sectionNav}\n          />\n        )}\n        {queryParams.addWidget && config.featureToggles.vizAndWidgetSplit && <AddWidgetModal />}\n      </>\n    );\n  }\n}\n\nfunction updateStatePageNavFromProps(props: Props, state: State): State {\n  const { dashboard, navIndex } = props;\n\n  if (!dashboard) {\n    return state;\n  }\n\n  let pageNav = state.pageNav;\n  let sectionNav = state.sectionNav;\n\n  if (!pageNav || dashboard.title !== pageNav.text || dashboard.meta.folderUrl !== pageNav.parentItem?.url) {\n    pageNav = {\n      text: dashboard.title,\n      url: locationUtil.getUrlForPartial(props.history.location, {\n        editview: null,\n        editPanel: null,\n        viewPanel: null,\n      }),\n    };\n  }\n\n  const { folderUid } = dashboard.meta;\n  if (folderUid && pageNav) {\n    const folderNavModel = getNavModel(navIndex, `folder-dashboards-${folderUid}`).main;\n    // If the folder hasn't loaded (maybe user doesn't have permission on it?) then\n    // don't show the \"page not found\" breadcrumb\n    if (folderNavModel.id !== 'not-found') {\n      pageNav = {\n        ...pageNav,\n        parentItem: folderNavModel,\n      };\n    }\n  }\n\n  if (props.route.routeName === DashboardRoutes.Path) {\n    sectionNav = getRootContentNavModel();\n    const pageNav = getPageNavFromSlug(props.match.params.slug!);\n    if (pageNav?.parentItem) {\n      pageNav.parentItem = pageNav.parentItem;\n    }\n  } else {\n    sectionNav = getNavModel(props.navIndex, 'dashboards/browse');\n  }\n\n  if (state.editPanel || state.viewPanel) {\n    pageNav = {\n      ...pageNav,\n      text: `${state.editPanel ? 'Edit' : 'View'} panel`,\n      parentItem: pageNav,\n      url: undefined,\n    };\n  }\n\n  if (state.pageNav === pageNav && state.sectionNav === sectionNav) {\n    return state;\n  }\n\n  return {\n    ...state,\n    pageNav,\n    sectionNav,\n  };\n}\n\nexport const DashboardPage = withTheme2(UnthemedDashboardPage);\nDashboardPage.displayName = 'DashboardPage';\nexport default connector(DashboardPage);\n","import React from 'react';\nimport { useAsync } from 'react-use';\n\nimport { config } from '@grafana/runtime';\nimport { GrafanaRouteComponentProps } from 'app/core/navigation/types';\nimport DashboardScenePage from 'app/features/dashboard-scene/pages/DashboardScenePage';\nimport { getDashboardScenePageStateManager } from 'app/features/dashboard-scene/pages/DashboardScenePageStateManager';\nimport { DashboardRoutes } from 'app/types';\n\nimport DashboardPage from './DashboardPage';\nimport { DashboardPageRouteParams, DashboardPageRouteSearchParams } from './types';\n\nexport type DashboardPageProxyProps = GrafanaRouteComponentProps<\n  DashboardPageRouteParams,\n  DashboardPageRouteSearchParams\n>;\n\n// This proxy component is used for Dashboard -> Scenes migration.\n// It will render DashboardScenePage if the user is only allowed to view the dashboard.\nfunction DashboardPageProxy(props: DashboardPageProxyProps) {\n  if (config.featureToggles.dashboardScene || props.queryParams.scenes) {\n    return <DashboardScenePage {...props} />;\n  }\n\n  const stateManager = getDashboardScenePageStateManager();\n  const isScenesSupportedRoute = Boolean(\n    props.route.routeName === DashboardRoutes.Home ||\n      (props.route.routeName === DashboardRoutes.Normal && props.match.params.uid)\n  );\n\n  // We pre-fetch dashboard to render dashboard page component depending on dashboard permissions.\n  // To avoid querying single dashboard multiple times, stateManager.fetchDashboard uses a simple, short-lived cache.\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  const dashboard = useAsync(async () => {\n    const dashToFetch = props.route.routeName === DashboardRoutes.Home ? props.route.routeName : props.match.params.uid;\n\n    if (!dashToFetch) {\n      return null;\n    }\n\n    return stateManager.fetchDashboard(dashToFetch);\n  }, [props.match.params.uid, props.route.routeName]);\n\n  if (!config.featureToggles.dashboardSceneForViewers) {\n    return <DashboardPage {...props} />;\n  }\n\n  if (dashboard.loading) {\n    return null;\n  }\n\n  if (dashboard.value && !dashboard.value.meta.canEdit && isScenesSupportedRoute) {\n    return <DashboardScenePage {...props} />;\n  } else {\n    return <DashboardPage {...props} />;\n  }\n}\n\nexport default DashboardPageProxy;\n","import { DataFrame, dataFrameFromJSON, DataFrameJSON, getDisplayProcessor } from '@grafana/data';\nimport { config, getBackendSrv } from '@grafana/runtime';\nimport { backendSrv } from 'app/core/services/backend_srv';\n\nimport { UploadResponse, StorageInfo, ItemOptions, WriteValueRequest, WriteValueResponse } from './types';\n\n// Likely should be built into the search interface!\nexport interface GrafanaStorage {\n  get: <T = any>(path: string) => Promise<T>;\n  list: (path: string) => Promise<DataFrame | undefined>;\n  upload: (folder: string, file: File, overwriteExistingFile: boolean) => Promise<UploadResponse>;\n  createFolder: (path: string) => Promise<{ error?: string }>;\n  delete: (path: { isFolder: boolean; path: string }) => Promise<{ error?: string }>;\n\n  /** Admin only */\n  getConfig: () => Promise<StorageInfo[]>;\n\n  /** Called before save */\n  getOptions: (path: string) => Promise<ItemOptions>;\n\n  /** Saves dashboards */\n  write: (path: string, options: WriteValueRequest) => Promise<WriteValueResponse>;\n}\n\nclass SimpleStorage implements GrafanaStorage {\n  constructor() {}\n\n  async get<T = any>(path: string): Promise<T> {\n    const storagePath = `api/storage/read/${path}`.replace('//', '/');\n    return getBackendSrv().get<T>(storagePath);\n  }\n\n  async list(path: string): Promise<DataFrame | undefined> {\n    let url = 'api/storage/list/';\n    if (path) {\n      url += path + '/';\n    }\n    const rsp = await getBackendSrv().get<DataFrameJSON>(url);\n    if (rsp?.data) {\n      const f = dataFrameFromJSON(rsp);\n      for (const field of f.fields) {\n        field.display = getDisplayProcessor({ field, theme: config.theme2 });\n      }\n      return f;\n    }\n    return undefined;\n  }\n\n  async createFolder(path: string): Promise<{ error?: string }> {\n    const res = await getBackendSrv().post<{ success: boolean; message: string }>(\n      '/api/storage/createFolder',\n      JSON.stringify({ path })\n    );\n\n    if (!res.success) {\n      return {\n        error: res.message ?? 'unknown error',\n      };\n    }\n\n    return {};\n  }\n\n  async deleteFolder(req: { path: string; force: boolean }): Promise<{ error?: string }> {\n    const res = await getBackendSrv().post<{ success: boolean; message: string }>(\n      `/api/storage/deleteFolder`,\n      JSON.stringify(req)\n    );\n\n    if (!res.success) {\n      return {\n        error: res.message ?? 'unknown error',\n      };\n    }\n\n    return {};\n  }\n\n  async deleteFile(req: { path: string }): Promise<{ error?: string }> {\n    const res = await getBackendSrv().post<{ success: boolean; message: string }>(`/api/storage/delete/${req.path}`);\n\n    if (!res.success) {\n      return {\n        error: res.message ?? 'unknown error',\n      };\n    }\n\n    return {};\n  }\n\n  async delete(req: { isFolder: boolean; path: string }): Promise<{ error?: string }> {\n    return req.isFolder ? this.deleteFolder({ path: req.path, force: true }) : this.deleteFile({ path: req.path });\n  }\n\n  async upload(folder: string, file: File, overwriteExistingFile: boolean): Promise<UploadResponse> {\n    const formData = new FormData();\n    formData.append('folder', folder);\n    formData.append('file', file);\n    formData.append('overwriteExistingFile', String(overwriteExistingFile));\n    const res = await fetch('/api/storage/upload', {\n      method: 'POST',\n      body: formData,\n    });\n\n    let body: UploadResponse = await res.json();\n    if (!body) {\n      body = {} as any;\n    }\n    body.status = res.status;\n    body.statusText = res.statusText;\n    if (res.status !== 200 && !body.err) {\n      body.err = true;\n    }\n    return body;\n  }\n\n  async write(path: string, options: WriteValueRequest): Promise<WriteValueResponse> {\n    return backendSrv.post<WriteValueResponse>(`/api/storage/write/${path}`, options);\n  }\n\n  async getConfig() {\n    return getBackendSrv().get<StorageInfo[]>('/api/storage/config');\n  }\n\n  async getOptions(path: string) {\n    return getBackendSrv().get<ItemOptions>(`/api/storage/options/${path}`);\n  }\n}\n\nexport function filenameAlreadyExists(folderName: string, fileNames: string[]) {\n  const lowerCase = folderName.toLowerCase();\n  const trimmedLowerCase = lowerCase.trim();\n  const existingTrimmedLowerCaseNames = fileNames.map((f) => f.trim().toLowerCase());\n\n  return existingTrimmedLowerCaseNames.includes(trimmedLowerCase);\n}\n\nlet storage: GrafanaStorage | undefined;\n\nexport function getGrafanaStorage() {\n  if (!storage) {\n    storage = new SimpleStorage();\n  }\n  return storage;\n}\n","import React, { useCallback } from 'react';\n\nimport { FrameMatcherID, MatcherConfig, StandardEditorProps } from '@grafana/data';\nimport { RefIDPicker } from '@grafana/ui/src/components/MatchersUI/FieldsByFrameRefIdMatcher';\n\ntype Props = StandardEditorProps<MatcherConfig>;\n\nexport const FrameSelectionEditor = ({ value, context, onChange }: Props) => {\n  const onFilterChange = useCallback(\n    (v: string) => {\n      onChange(\n        v?.length\n          ? {\n              id: FrameMatcherID.byRefId,\n              options: v,\n            }\n          : undefined\n      );\n    },\n    [onChange]\n  );\n\n  return (\n    <RefIDPicker value={value?.options} onChange={onFilterChange} data={context.data} placeholder=\"Change filter\" />\n  );\n};\n"],"names":["getDefaultCondition","getAlertingValidationMessage","transformations","targets","datasourceSrv","datasource","alertingNotSupported","templateVariablesNotSupported","target","dsRef","ds","ProvisionedResource","ProvisioningAlert","resource","ProvisioningBadge","DashboardScenePage","match","route","stateManager","dashboard","isLoading","loadError","PageLoader","getKioskMode","queryParams","LOCAL_STORAGE_KEY_PREFIX","localStorageKey","dashboardUid","AngularDeprecationNotice","LocalStorageValueProvider","isDismissed","onDismiss","Alert","StorageFolderPage","props","slug","listing","childRoot","pageNav","getPageNavFromSlug","renderListing","item","name","isFolder","isDash","url","navModel","getRootContentNavModel","parts","pageNavs","lastPageNav","AddWidgetModal","styles","getStyles","searchQuery","setSearchQuery","state","widgetsList","filteredWidgetsTypes","Modal","Input","e","CustomScrollbar","plugin","index","VizTypePickerPlugin","id","theme","SaveLibraryPanelModal","panel","folderUid","isUnsavedPrompt","onConfirm","onDiscard","searchString","setSearchString","dashState","searchHits","dash","filteredDashboards","setFilteredDashboards","useDebounce","dashName","saveLibraryPanel","usePanelSave","discardAndClose","title","i","Button","initPanelEditor","sourcePanel","dispatch","discardPanelChanges","getStore","getPanel","updateDuplicateLibraryPanels","modifiedPanel","modifiedSaveModel","skipPanelUpdate","pluginChanged","panelToUpdate","exitPanelEditor","getSourcePanel","shouldDiscardChanges","hasPanelChangedInPanelEdit","panelTypeChanged","updatePanelEditorUIState","uiState","nextState","store","error","UnsavedChangesModal","onSaveSuccess","SaveDashboardButton","DashboardPrompt","setState","original","originalPath","showModal","hideModal","ModalsContext","timeoutId","savedEventUnsub","handleUnload","event","ignoreChanges","hasChanges","onHistoryBlock","location","panelInEdit","search","moveToBlockedLocationAfterReactStateUpdate","current","canSave","fromScript","fromFile","cleanDashboardFromIgnoredChanges","dashData","model","DashboardModel","variable","currentClean","originalClean","currentTimepicker","originalTimepicker","currentJson","originalJson","SnapshotTab","ShowMessage","SupportSnapshotService","StateManagerBase","value","markdownText","maxLen","snapshotText","panelTitle","blob","fileName","k","randomize","snapshot","config","snapshotUpdate","snapshotSize","scene","oldModel","ex","HelpWizard","onClose","service","currentTab","loading","options","showMessage","tabs","hasSupportBundleAccess","Drawer","Stack","TabsBar","t","Tab","Field","Select","ClipboardButton","height","CodeEditor","usePanelLatestData","checkSchema","querySubscription","latestData","setLatestData","lastRev","lastUpdate","data","now","InspectMetadataTab","metadataDatasource","InspectContent","isDataLoading","dataOptions","defaultTab","onDataOptionsChange","setCurrentTab","errors","getErrors","activeTab","formatStats","tab","InspectDataTab","InspectJSONTab","InspectErrorTab","InspectStatsTab","QueryInspector","request","queryCount","requestTime","formatted","PanelInspectorUnconnected","setDataOptions","hasError","metaDs","mapStateToProps","panelState","PanelInspector","PickerRenderer","PickerToRender","PickerLabel","labelOrName","elementId","Tooltip","selectors","SubMenuItems","variables","readOnly","visibleVariables","setVisibleVariables","saveSectionOpenState","isOpen","getSectionOpenState","defaultValue","mapDispatchToProps","connector","AngularPanelOptionsUnconnected","prevProps","angularPanelComponent","changePanelPlugin","scope","panelCtrl","template","loader","scopeProps","elem","AngularPanelOptions","DynamicConfigValueEditor","property","context","registry","onChange","onRemove","isSystemOverride","componentId","isCollapsible","labelCategory","c","editor","renderLabel","includeDescription","includeCounter","isExpanded","Label","Counter","IconButton","OptionsPaneCategory","OverrideCategoryTitle","matcherUi","overrideName","override","onOverrideRemove","propertyNames","p","prop","matcherOptions","getFieldOverrideCategories","categories","currentFieldConfig","onOverrideChange","overrides","overrideIndex","onOverrideAdd","info","idx","fieldMatchersUI","configPropertiesOptions","getOverrideProperties","forceOpen","category","OptionsPaneCategoryDescriptor","onMatcherConfigChange","onDynamicConfigValueAdd","o","registryItem","propertyConfig","OptionsPaneItemDescriptor","propIdx","registryItemForProperty","onPropertyChange","onPropertyRemove","ValuePicker","v","AddOverrideButtonContainer","label","children","getBorderTopStyles","LibraryPanelInformation","formatDate","meta","getLibraryPanelOptionsCategory","onPanelConfigChange","descriptor","DESCRIPTION_GENERATION_STANDARD_PROMPT","GenAIPanelDescriptionButton","onGenerate","messages","getMessages","GenAIButton","panelString","TITLE_GENERATION_STANDARD_PROMPT","GenAIPanelTitleButton","getPanelFrameCategory","setPanelTitle","input","setPanelDescription","description","TextArea","Switch","DataLinksInlineEditor","links","RepeatRowSelect","directionOptions","RadioButtonGroup","maxPerRowOptions","OptionSearchEngine","query","searchRegex","sortedHits","compareHit","x","sortedOverridesHits","hits","categoryNameMatch","total","hit","left","right","getRecentOptions","allOptions","popularOptions","OptionsPaneOptions","listMode","setListMode","panelFrameOptions","vizOptions","libraryPanelOptions","getVisualizationOptions","justOverrides","mainBoxElements","isSearching","optionRadioFilters","getOptionRadioFilters","renderSearchHits","showSearchRadioButtons","AngularDeprecationPluginNotice","FilterInput","OptionFilter","engine","optionHits","totalCount","overrideHits","getPanelPluginWithFallback","panelType","VisualizationButton","isPanelOptionsVisible","isVizPickerOpen","onToggleOpen","onToggleOptionsPane","ButtonGroup","ToolbarButton","ChangeLibraryPanelModal","isLibraryPanel","body","ConfirmModal","PanelLibraryOptionsGroup","isWidget","showingAddPanelModal","setShowingAddPanelModal","changeToPanel","setChangeToPanel","panelFilter","setPanelFilter","onPanelFilterChange","plugins","useLibraryPanel","onAddToPanelLibrary","onDismissChangeToPanel","PanelTypeFilter","LibraryPanelsView","AddLibraryPanelModal","panelsToCheckFirst","getAllSuggestions","builder","pluginId","supplier","importPanelPlugin","list","a","b","VisualizationSuggestionCard","suggestion","width","innerStyles","outerStyles","renderWidth","renderHeight","getPreviewDimensionsAndStyles","cardOptions","commonButtonProps","preview","PanelRenderer","showWidth","showHeight","padding","widthFactor","heightFactor","VisualizationSuggestions","suggestions","filteredSuggestions","filterSuggestionsBySearch","columnCount","spaceBetween","previewWidth","regex","VisualizationSelectPane","isWidgetEnabled","tabKey","useLocalStorage","searchRef","onVizChange","pluginChange","onCloseVizPicker","radioOptions","radioOptionsWidgetFlow","VizTypePicker","OptionsPane","onFieldConfigsChange","onPanelOptionsChanged","instanceState","InfoMode","PanelHeaderCorner","markdown","interpolatedMarkdown","markedInterpolatedMarkdown","link","infoMode","content","onClick","className","ariaLabel","PanelEditorTableView","setOptions","timeSrv","sub","timeData","errorMessage","PanelChrome","innerWidth","innerHeight","PanelNotSupported","message","onBackToQueries","Layout","StateHistory","panelId","onRefresh","items","alertDef","stateHistoryItems","ConfirmButton","UnThemedTestRuleResult","formattedJson","prevState","allNodesExpanded","collapse","expand","dashPanel","payload","testRuleResponse","clearButton","LoadingPlaceholder","openNodes","JSONFormatter","TestRuleResult","UnConnectedAlertTab","validationMessage","EventBus","alert","hasTransformations","element","EmptyListCTA","AlertTab","NewRuleFromPanelButton","templating","formValues","ruleFormUrl","usePanelCombinedRules","poll","promRuleRequest","useUnifiedAlertingSelector","rulerRuleRequest","fetch","interval","err","combinedNamespaces","useCombinedRuleNamespaces","ns","group","rule","PanelAlertTabContent","rules","permissions","canCreateRules","RulesTable","PanelAlertTab","otherProps","TransformationEditor","debugMode","uiConfig","configs","toggleShowDebug","setInput","output","setOutput","matcher","inputTransforms","outputTransforms","ctx","inputSubscription","transformDataFrame","outputSubscription","mergeMap","before","opts","TransformationEditorHelperModal","onCloseClick","transformer","help","helpContent","helpTitle","OperationRowHelp","TransformationFilter","option","FrameSelectionEditor","filter","borderRadius","TransformationOperationRow","showDeleteModal","setShowDeleteModal","useToggle","showDebug","showHelp","toggleShowHelp","disabled","topic","showFilterEditor","showFilterToggle","onDisableToggle","toggleFilter","instrumentToggleCallback","callback","toggleId","active","eventName","renderActions","PluginStateInfo","QueryOperationAction","QueryOperationRow","TransformationOperationRows","standardTransformersRegistry","DOCS_LINKS","getDocsLink","LOCAL_STORAGE_KEY","TransformationPicker","noTransforms","xforms","onSearchChange","onSearchKeyDown","onTransformationAdd","suffix","TransformationCard","transform","filterCategoriesLabels","TransformationPickerNg","getTransformationPickerStyles","showIllustrations","selectedFilter","FilterPill","TransformationsGrid","getTransformationGridStyles","applicabilityScore","isApplicable","applicabilityDescription","cardClasses","getTransformationsRedesignDescriptions","getImagePath","folder","TransformationDescriptionOverrides","UnThemedTransformationsEditor","lower","filtered","nextId","existingIds","selectable","dataConfig","next","result","startIndex","endIndex","update","removed","Box","Text","provided","ids","transformationCounters","transformationIds","transformation","panelData","prevShowPicker","currentShowPicker","kindOfZero","showPicker","transformationsRedesign","hasTransforms","picker","deleteAll","actions","TransformationsEditor","PanelEditorQueries","dataSource","datasourceSettings","lastUsedDatasource","QueryGroup","PanelEditorTabs","onChangeTab","forceUpdate","useForceUpdate","instrumentedOnChangeTab","eventSubs","Subscription","renderAlertTab","getCounter","TabContent","AlertTabIndex","ownProps","PanelEditorUnconnected","SaveDashboardDrawer","configKey","mode","initDone","isOnlyPanel","tableViewEnabled","panelSize","DashboardPanel","panelPane","SplitPaneWrapper","size","updateTimeZoneForSession","DashNavTimeControls","editorActions","UnlinkModal","sectionNav","AppChromeUpdate","ToolbarButtonRow","PanelEditor","stylesFactory","paneSpacing","AnnotationPicker","annotation","events","onEnabledChanged","setLoading","onCancel","started","stopped","InlineFieldRow","InlineField","LoadingIndicator","Annotations","annotations","onAnnotationChanged","visibleAnnotations","setVisibleAnnotations","DashboardLinks","useEffectOnce","linkInfo","key","DashboardLinksDashboard","icon","linkElement","sanitize","SubMenuUnConnected","updatedAnnotation","readOnlyVariables","uid","templatingState","SubMenu","UnthemedDashboardPage","tr","liveTimer","scrollElement","templateVarsChangedInUrl","routeReloadCounter","prevUrlParams","urlParams","templateVarChanges","dashboardWatcher","urlEditPanelId","urlViewPanelId","updatedState","updateStatePageNavFromProps","inspectPanelId","inspectPanel","initError","editPanel","viewPanel","updateScrollTop","kioskMode","DashboardLoading","showSubMenu","showToolbar","pageClassName","EntityNotFound","DashNav","DashboardFailed","DashboardGrid","ShareModal","DashboardSettings","GrafanaContext","navIndex","folderNavModel","DashboardPage","DashboardPageProxy","isScenesSupportedRoute","dashToFetch","SimpleStorage","path","storagePath","rsp","f","field","res","req","file","overwriteExistingFile","formData","filenameAlreadyExists","folderName","fileNames","trimmedLowerCase","storage","getGrafanaStorage","onFilterChange"],"sourceRoot":""}