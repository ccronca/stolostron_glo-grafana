{"version":3,"file":"AlertingUpgrade.77f09ac66dc4cedc48be.js","mappings":"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","sources":["webpack://grafana/./public/app/features/alerting/unified/api/upgradeApi.ts","webpack://grafana/./public/app/features/alerting/Upgrade.tsx","webpack://grafana/./public/app/features/alerting/unified/components/DynamicTableWithGuidelines.tsx","webpack://grafana/./public/app/features/alerting/unified/components/notification-policies/Matchers.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/ActionIcon.tsx","webpack://grafana/./public/app/features/search/tempI18nPhrases.ts"],"sourcesContent":["import { FetchError, isFetchError } from '@grafana/runtime';\n\nimport {\n  createErrorNotification,\n  createSuccessNotification,\n  createWarningNotification,\n} from '../../../../core/copy/appNotification';\nimport { notifyApp } from '../../../../core/reducers/appNotification';\nimport { ObjectMatcher } from '../../../../plugins/datasource/alertmanager/types';\n\nimport { alertingApi } from './alertingApi';\n\nexport interface OrgMigrationSummary {\n  newDashboards: number;\n  newAlerts: number;\n  newChannels: number;\n  removed: boolean;\n  hasErrors: boolean;\n}\n\nexport interface OrgMigrationState {\n  orgId: number;\n  migratedDashboards: DashboardUpgrade[];\n  migratedChannels: ContactPair[];\n  errors: string[];\n}\n\nexport interface DashboardUpgrade {\n  migratedAlerts: AlertPair[];\n  dashboardId: number;\n  dashboardUid: string;\n  dashboardName: string;\n  folderUid: string;\n  folderName: string;\n  newFolderUid?: string;\n  newFolderName?: string;\n  provisioned: boolean;\n  error?: string;\n  warning: string;\n\n  isUpgrading: boolean;\n}\n\nexport interface AlertPair {\n  legacyAlert: LegacyAlert;\n  alertRule?: AlertRuleUpgrade;\n  error?: string;\n\n  isUpgrading: boolean;\n}\n\nexport interface ContactPair {\n  legacyChannel: LegacyChannel;\n  contactPoint?: ContactPointUpgrade;\n  provisioned: boolean;\n  error?: string;\n\n  isUpgrading: boolean;\n}\n\nexport interface LegacyAlert {\n  id: number;\n  dashboardId: number;\n  panelId: number;\n  name: string;\n}\n\nexport interface AlertRuleUpgrade {\n  uid: string;\n  title: string;\n  sendsTo: string[];\n}\n\nexport interface LegacyChannel {\n  id: number;\n  name: string;\n  type: string;\n}\n\nexport interface ContactPointUpgrade {\n  name: string;\n  type: string;\n  routeMatchers: ObjectMatcher[];\n}\n\nfunction isFetchBaseQueryError(error: unknown): error is { error: FetchError } {\n  return typeof error === 'object' && error != null && 'error' in error;\n}\n\nexport const upgradeApi = alertingApi.injectEndpoints({\n  endpoints: (build) => ({\n    upgradeChannel: build.mutation<OrgMigrationSummary, { channelId: number; skipExisting: boolean }>({\n      query: ({ channelId, skipExisting }) => ({\n        url: `/api/v1/upgrade/channels/${channelId}${skipExisting ? '?skipExisting=true' : ''}`,\n        method: 'POST',\n        showSuccessAlert: false,\n        showErrorAlert: false,\n      }),\n      invalidatesTags: ['OrgMigrationState'],\n      async onQueryStarted({ channelId }, { dispatch, queryFulfilled }) {\n        try {\n          dispatch(\n            upgradeApi.util.updateQueryData('getOrgUpgradeSummary', undefined, (draft) => {\n              const index = (draft.migratedChannels ?? []).findIndex((pair) => pair.legacyChannel?.id === channelId);\n              if (index !== -1) {\n                draft.migratedChannels[index].isUpgrading = true;\n              }\n            })\n          );\n          const { data } = await queryFulfilled;\n          if (data.hasErrors) {\n            dispatch(notifyApp(createWarningNotification(`Failed to upgrade notification channel '${channelId}'`)));\n          } else {\n            if (data.removed) {\n              dispatch(\n                notifyApp(\n                  createSuccessNotification(\n                    `Notification channel '${channelId}' not found, removed from list of upgrades`\n                  )\n                )\n              );\n            } else {\n              dispatch(notifyApp(createSuccessNotification(`Upgraded notification channel '${channelId}'`)));\n            }\n          }\n        } catch (e) {\n          if (isFetchBaseQueryError(e) && isFetchError(e.error)) {\n            dispatch(notifyApp(createErrorNotification('Request failed', e.error.data.message)));\n          } else {\n            dispatch(notifyApp(createErrorNotification(`Request failed`)));\n          }\n        }\n      },\n    }),\n    upgradeAllChannels: build.mutation<OrgMigrationSummary, { skipExisting: boolean }>({\n      query: ({ skipExisting }) => ({\n        url: `/api/v1/upgrade/channels${skipExisting ? '?skipExisting=true' : ''}`,\n        method: 'POST',\n        showSuccessAlert: false,\n        showErrorAlert: false,\n      }),\n      invalidatesTags: ['OrgMigrationState'],\n      async onQueryStarted({ skipExisting }, { dispatch, queryFulfilled }) {\n        try {\n          const { data } = await queryFulfilled;\n          if (data.hasErrors) {\n            dispatch(\n              notifyApp(\n                createWarningNotification(\n                  `Issues while upgrading ${data.newChannels} ${skipExisting ? 'new ' : ''}notification channels`\n                )\n              )\n            );\n          } else {\n            dispatch(\n              notifyApp(\n                createSuccessNotification(\n                  `Upgraded ${data.newChannels} ${skipExisting ? 'new ' : ''}notification channels`\n                )\n              )\n            );\n          }\n        } catch (e) {\n          if (isFetchBaseQueryError(e) && isFetchError(e.error)) {\n            dispatch(notifyApp(createErrorNotification('Request failed', e.error.data.message)));\n          } else {\n            dispatch(notifyApp(createErrorNotification(`Request failed`)));\n          }\n        }\n      },\n    }),\n    upgradeAlert: build.mutation<OrgMigrationSummary, { dashboardId: number; panelId: number; skipExisting: boolean }>({\n      query: ({ dashboardId, panelId, skipExisting }) => ({\n        url: `/api/v1/upgrade/dashboards/${dashboardId}/panels/${panelId}${skipExisting ? '?skipExisting=true' : ''}`,\n        method: 'POST',\n        showSuccessAlert: false,\n        showErrorAlert: false,\n      }),\n      invalidatesTags: ['OrgMigrationState'],\n      async onQueryStarted({ dashboardId, panelId }, { dispatch, queryFulfilled }) {\n        try {\n          dispatch(\n            upgradeApi.util.updateQueryData('getOrgUpgradeSummary', undefined, (draft) => {\n              const index = (draft.migratedDashboards ?? []).findIndex((du) => du.dashboardId === dashboardId);\n              if (index !== -1) {\n                const alertIndex = (draft.migratedDashboards[index]?.migratedAlerts ?? []).findIndex(\n                  (pair) => pair.legacyAlert?.panelId === panelId\n                );\n                if (alertIndex !== -1) {\n                  draft.migratedDashboards[index].migratedAlerts[alertIndex].isUpgrading = true;\n                }\n              }\n            })\n          );\n          const { data } = await queryFulfilled;\n          if (data.hasErrors) {\n            dispatch(\n              notifyApp(\n                createWarningNotification(`Failed to upgrade alert from dashboard '${dashboardId}', panel '${panelId}'`)\n              )\n            );\n          } else {\n            if (data.removed) {\n              dispatch(\n                notifyApp(\n                  createSuccessNotification(\n                    `Alert from dashboard '${dashboardId}', panel '${panelId}' not found, removed from list of upgrades`\n                  )\n                )\n              );\n            } else {\n              dispatch(\n                notifyApp(\n                  createSuccessNotification(`Upgraded alert from dashboard '${dashboardId}', panel '${panelId}'`)\n                )\n              );\n            }\n          }\n        } catch (e) {\n          if (isFetchBaseQueryError(e) && isFetchError(e.error)) {\n            dispatch(notifyApp(createErrorNotification('Request failed', e.error.data.message)));\n          } else {\n            dispatch(notifyApp(createErrorNotification(`Request failed`)));\n          }\n        }\n      },\n    }),\n    upgradeDashboard: build.mutation<OrgMigrationSummary, { dashboardId: number; skipExisting: boolean }>({\n      query: ({ dashboardId, skipExisting }) => ({\n        url: `/api/v1/upgrade/dashboards/${dashboardId}${skipExisting ? '?skipExisting=true' : ''}`,\n        method: 'POST',\n        showSuccessAlert: false,\n        showErrorAlert: false,\n      }),\n      invalidatesTags: ['OrgMigrationState'],\n      async onQueryStarted({ dashboardId, skipExisting }, { dispatch, queryFulfilled }) {\n        try {\n          dispatch(\n            upgradeApi.util.updateQueryData('getOrgUpgradeSummary', undefined, (draft) => {\n              const index = (draft.migratedDashboards ?? []).findIndex((du) => du.dashboardId === dashboardId);\n              if (index !== -1) {\n                draft.migratedDashboards[index].isUpgrading = true;\n              }\n            })\n          );\n          const { data } = await queryFulfilled;\n          if (data.hasErrors) {\n            dispatch(\n              notifyApp(\n                createWarningNotification(\n                  `Issues while upgrading ${data.newAlerts} ${\n                    skipExisting ? 'new ' : ''\n                  }alerts from dashboard '${dashboardId}'`\n                )\n              )\n            );\n          } else {\n            if (data.removed) {\n              dispatch(\n                notifyApp(\n                  createSuccessNotification(`Dashboard '${dashboardId}' not found, removed from list of upgrades`)\n                )\n              );\n            } else {\n              dispatch(\n                notifyApp(\n                  createSuccessNotification(\n                    `Upgraded ${data.newAlerts} ${skipExisting ? 'new ' : ''}alerts from dashboard '${dashboardId}'`\n                  )\n                )\n              );\n            }\n          }\n        } catch (e) {\n          if (isFetchBaseQueryError(e) && isFetchError(e.error)) {\n            dispatch(notifyApp(createErrorNotification('Request failed', e.error.data.message)));\n          } else {\n            dispatch(notifyApp(createErrorNotification(`Request failed`)));\n          }\n        }\n      },\n    }),\n    upgradeAllDashboards: build.mutation<OrgMigrationSummary, { skipExisting: boolean }>({\n      query: ({ skipExisting }) => ({\n        url: `/api/v1/upgrade/dashboards${skipExisting ? '?skipExisting=true' : ''}`,\n        method: 'POST',\n        showSuccessAlert: false,\n        showErrorAlert: false,\n      }),\n      invalidatesTags: ['OrgMigrationState'],\n      async onQueryStarted({ skipExisting }, { dispatch, queryFulfilled }) {\n        try {\n          const { data } = await queryFulfilled;\n          if (data.hasErrors) {\n            dispatch(\n              notifyApp(\n                createWarningNotification(\n                  `Issues while upgrading ${data.newAlerts} ${skipExisting ? 'new ' : ''}alerts in ${\n                    data.newDashboards\n                  } dashboards`\n                )\n              )\n            );\n          } else {\n            dispatch(\n              notifyApp(\n                createSuccessNotification(\n                  `Upgraded ${data.newAlerts} ${skipExisting ? 'new ' : ''}alerts in ${data.newDashboards} dashboards`\n                )\n              )\n            );\n          }\n        } catch (e) {\n          if (isFetchBaseQueryError(e) && isFetchError(e.error)) {\n            dispatch(notifyApp(createErrorNotification('Request failed', e.error.data.message)));\n          } else {\n            dispatch(notifyApp(createErrorNotification(`Request failed`)));\n          }\n        }\n      },\n    }),\n    upgradeOrg: build.mutation<OrgMigrationSummary, { skipExisting: boolean }>({\n      query: ({ skipExisting }) => ({\n        url: `/api/v1/upgrade/org${skipExisting ? '?skipExisting=true' : ''}`,\n        method: 'POST',\n        showSuccessAlert: false,\n        showErrorAlert: false,\n      }),\n      invalidatesTags: ['OrgMigrationState'],\n      async onQueryStarted({ skipExisting }, { dispatch, getCacheEntry, queryFulfilled }) {\n        try {\n          const { data } = await queryFulfilled;\n          if (data.hasErrors) {\n            dispatch(\n              notifyApp(\n                createWarningNotification(\n                  `Issues while upgrading ${data.newAlerts} ${skipExisting ? 'new ' : ''}alerts in ${\n                    data.newDashboards\n                  } dashboards and ${data.newChannels} ${skipExisting ? 'new ' : ''}notification channels`\n                )\n              )\n            );\n          } else {\n            dispatch(\n              notifyApp(\n                createSuccessNotification(\n                  `Upgraded ${data.newAlerts} ${skipExisting ? 'new ' : ''}alerts in ${\n                    data.newDashboards\n                  } dashboards and ${data.newChannels} ${skipExisting ? 'new ' : ''}notification channels`\n                )\n              )\n            );\n          }\n        } catch (e) {\n          if (isFetchBaseQueryError(e) && isFetchError(e.error)) {\n            dispatch(notifyApp(createErrorNotification('Request failed', e.error.data.message)));\n          } else {\n            dispatch(notifyApp(createErrorNotification(`Request failed`)));\n          }\n        }\n      },\n    }),\n    cancelOrgUpgrade: build.mutation<void, void>({\n      query: () => ({\n        url: `/api/v1/upgrade/org`,\n        method: 'DELETE',\n      }),\n      invalidatesTags: ['OrgMigrationState'],\n      async onQueryStarted(undefined, { dispatch }) {\n        // This helps prevent flickering of old tables after the cancel button is clicked.\n        try {\n          dispatch(\n            upgradeApi.util.updateQueryData('getOrgUpgradeSummary', undefined, (draft) => {\n              const defaultState: OrgMigrationState = {\n                orgId: 0,\n                migratedDashboards: [],\n                migratedChannels: [],\n                errors: [],\n              };\n              Object.assign(draft, defaultState);\n            })\n          );\n        } catch {}\n      },\n    }),\n    getOrgUpgradeSummary: build.query<OrgMigrationState, void>({\n      query: () => ({\n        url: `/api/v1/upgrade/org`,\n      }),\n      providesTags: ['OrgMigrationState'],\n      transformResponse: (summary: OrgMigrationState): OrgMigrationState => {\n        summary.migratedDashboards = summary.migratedDashboards ?? [];\n        summary.migratedChannels = summary.migratedChannels ?? [];\n        summary.errors = summary.errors ?? [];\n\n        // Sort to show the most problematic rows first.\n        summary.migratedDashboards.forEach((dashUpgrade) => {\n          // dashUpgrade.isUpgrading = false;\n          dashUpgrade.migratedAlerts = dashUpgrade.migratedAlerts ?? [];\n          dashUpgrade.error = dashUpgrade.error ?? '';\n          dashUpgrade.warning = dashUpgrade.warning ?? '';\n          dashUpgrade.migratedAlerts.sort((a, b) => {\n            const byError = (b.error ?? '').localeCompare(a.error ?? '');\n            if (byError !== 0) {\n              return byError;\n            }\n            return (a.legacyAlert?.name ?? '').localeCompare(b.legacyAlert?.name ?? '');\n          });\n        });\n        summary.migratedDashboards.sort((a, b) => {\n          const byErrors = (b.error ?? '').localeCompare(a.error ?? '');\n          if (byErrors !== 0) {\n            return byErrors;\n          }\n          const byNestedErrors =\n            b.migratedAlerts.filter((a) => a.error).length - a.migratedAlerts.filter((a) => a.error).length;\n          if (byNestedErrors !== 0) {\n            return byNestedErrors;\n          }\n          const byWarnings = (b.warning ?? '').localeCompare(a.warning ?? '');\n          if (byWarnings !== 0) {\n            return byWarnings;\n          }\n          const byFolder = a.folderName.localeCompare(b.folderName);\n          if (byFolder !== 0) {\n            return byFolder;\n          }\n          return a.dashboardName.localeCompare(b.dashboardName);\n        });\n\n        // Sort contacts.\n        summary.migratedChannels.sort((a, b) => {\n          const byErrors = (b.error ? 1 : 0) - (a.error ? 1 : 0);\n          if (byErrors !== 0) {\n            return byErrors;\n          }\n          return (a.legacyChannel?.name ?? '').localeCompare(b.legacyChannel?.name ?? '');\n        });\n\n        return summary;\n      },\n    }),\n  }),\n});\n","import { css, cx } from '@emotion/css';\nimport uFuzzy from '@leeoniya/ufuzzy';\nimport { createSelector } from '@reduxjs/toolkit';\nimport { debounce } from 'lodash';\nimport pluralize from 'pluralize';\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { useLocalStorage } from 'react-use';\n\nimport { GrafanaTheme2, UrlQueryMap } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { Stack } from '@grafana/experimental';\nimport { locationService } from '@grafana/runtime';\nimport {\n  Alert,\n  Badge,\n  Button,\n  CallToActionCard,\n  ConfirmModal,\n  FilterInput,\n  HorizontalGroup,\n  Icon,\n  Link,\n  LoadingPlaceholder,\n  Spinner,\n  Tab,\n  TabContent,\n  TabsBar,\n  TagList,\n  Text,\n  TextLink,\n  Tooltip,\n  useStyles2,\n} from '@grafana/ui';\nimport { Page } from 'app/core/components/Page/Page';\nimport { useQueryParams } from 'app/core/hooks/useQueryParams';\n\nimport { getSearchPlaceholder } from '../search/tempI18nPhrases';\n\nimport { AlertPair, ContactPair, DashboardUpgrade, OrgMigrationState, upgradeApi } from './unified/api/upgradeApi';\nimport { DynamicTable, DynamicTableColumnProps, DynamicTableItemProps } from './unified/components/DynamicTable';\nimport { DynamicTableWithGuidelines } from './unified/components/DynamicTableWithGuidelines';\nimport { Matchers } from './unified/components/notification-policies/Matchers';\nimport { ActionIcon } from './unified/components/rules/ActionIcon';\nimport { createContactPointLink, makeDashboardLink, makeFolderLink } from './unified/utils/misc';\nimport { createUrl } from './unified/utils/url';\n\nexport const UpgradePage = () => {\n  const { useGetOrgUpgradeSummaryQuery } = upgradeApi;\n  const {\n    currentData: summary,\n    isError: isFetchError,\n    error: fetchError,\n  } = useGetOrgUpgradeSummaryQuery(undefined, {\n    pollingInterval: 10000,\n  });\n\n  const alertCount = (summary?.migratedDashboards ?? []).reduce(\n    (acc, cur) => acc + (cur?.migratedAlerts?.length ?? 0),\n    0\n  );\n  const contactCount = summary?.migratedChannels?.length ?? 0;\n\n  const errors = summary?.errors ?? [];\n  const hasData = alertCount > 0 || contactCount > 0 || errors.length > 0;\n\n  const cancelUpgrade = useMemo(() => {\n    if (!isFetchError && hasData) {\n      return <CancelUpgradeButton />;\n    }\n    return null;\n  }, [isFetchError, hasData]);\n\n  return (\n    <Page navId=\"alerting-upgrade\" actions={cancelUpgrade}>\n      <Page.Contents>\n        {isFetchError && (\n          <Alert severity=\"error\" title=\"Error loading Grafana Alerting upgrade information\">\n            {fetchError instanceof Error ? fetchError.message : 'Unknown error.'}\n          </Alert>\n        )}\n        {!isFetchError && !hasData && <CTAElement />}\n        {!isFetchError && hasData && (\n          <>\n            <ErrorSummary errors={errors} />\n            <UpgradeTabs alertCount={alertCount} contactCount={contactCount} />\n          </>\n        )}\n      </Page.Contents>\n    </Page>\n  );\n};\n\ninterface UpgradeTabsProps {\n  alertCount: number;\n  contactCount: number;\n}\n\nexport const UpgradeTabs = ({ alertCount, contactCount }: UpgradeTabsProps) => {\n  const styles = useStyles2(getStyles);\n\n  const [queryParams, setQueryParams] = useQueryParams();\n  const { tab } = getActiveTabFromUrl(queryParams);\n\n  const [activeTab, setActiveTab] = useState<ActiveTab>(tab);\n\n  useEffect(() => {\n    setActiveTab(tab);\n  }, [tab]);\n\n  return (\n    <>\n      <Alert severity={'info'} title={'Grafana Alerting upgrade guide'}>\n        <p>\n          Preview of how your existing alert rules and notification channels wll be upgraded to the new Grafana\n          Alerting.\n          <br />\n          Once you are happy with the results, you can permanently upgrade by modifying the Grafana configuration.\n        </p>\n        <p>\n          {'For more information, please refer to the '}\n          <TextLink external href={'https://grafana.com/docs/grafana/latest/alerting/set-up/migrating-alerts/'}>\n            Grafana Alerting Migration Guide\n          </TextLink>\n        </p>\n      </Alert>\n      <TabsBar>\n        <Tab\n          label={'Upgraded alert rules'}\n          active={activeTab === ActiveTab.Alerts}\n          counter={alertCount}\n          icon={'bell'}\n          onChangeTab={() => {\n            setActiveTab(ActiveTab.Alerts);\n            setQueryParams({ tab: ActiveTab.Alerts });\n          }}\n        />\n        <Tab\n          label={'Upgraded notification channels'}\n          active={activeTab === ActiveTab.Contacts}\n          counter={contactCount}\n          icon={'at'}\n          onChangeTab={() => {\n            setActiveTab(ActiveTab.Contacts);\n            setQueryParams({ tab: ActiveTab.Contacts });\n          }}\n        />\n      </TabsBar>\n      <TabContent className={styles.tabContent}>\n        <>\n          {activeTab === ActiveTab.Alerts && <AlertTabContentWrapper />}\n          {activeTab === ActiveTab.Contacts && <ChannelTabContentWrapper />}\n        </>\n      </TabContent>\n    </>\n  );\n};\n\nconst CancelUpgradeButton = () => {\n  const styles = useStyles2(getStyles);\n  const [startOver] = upgradeApi.useCancelOrgUpgradeMutation({ fixedCacheKey: 'cancel-org-upgrade-loading' });\n  const [showConfirmStartOver, setShowConfirmStartOver] = useState(false);\n\n  const cancelUpgrade = async () => {\n    startOver();\n    setShowConfirmStartOver(false);\n  };\n\n  return (\n    <>\n      <Button\n        size=\"md\"\n        variant=\"destructive\"\n        onClick={() => setShowConfirmStartOver(true)}\n        icon={'trash-alt'}\n        className={''}\n      >\n        {'Cancel upgrade'}\n      </Button>\n      {showConfirmStartOver && (\n        <ConfirmModal\n          isOpen={true}\n          title=\"Cancel upgrade\"\n          body={\n            <Stack direction=\"column\" gap={0.5}>\n              <Text color=\"primary\">All new Grafana Alerting resources will be deleted.</Text>\n              <Text color=\"secondary\" variant=\"bodySmall\">\n                This includes: alert rules, contact points, notification policies, silences, mute timings, and any\n                manual changes you have made.\n              </Text>\n              <span className={styles.separator} />\n              <Text color=\"primary\">No legacy alerts or notification channels will be affected.</Text>\n            </Stack>\n          }\n          confirmText=\"Cancel upgrade\"\n          onConfirm={cancelUpgrade}\n          dismissText={'Keep reviewing'}\n          onDismiss={() => setShowConfirmStartOver(false)}\n        />\n      )}\n    </>\n  );\n};\n\nenum ActiveTab {\n  Alerts = 'alerts',\n  Contacts = 'contacts',\n}\n\ninterface QueryParamValues {\n  tab: ActiveTab;\n}\n\nfunction getActiveTabFromUrl(queryParams: UrlQueryMap): QueryParamValues {\n  let tab = ActiveTab.Alerts; // default tab\n\n  if (queryParams['tab'] === ActiveTab.Alerts) {\n    tab = ActiveTab.Alerts;\n  }\n\n  if (queryParams['tab'] === ActiveTab.Contacts) {\n    tab = ActiveTab.Contacts;\n  }\n\n  return {\n    tab,\n  };\n}\n\nconst CTAElement = () => {\n  const styles = useStyles2(getContentBoxStyles);\n  const { useUpgradeOrgMutation } = upgradeApi;\n  const [startUpgrade, { isLoading: isUpgradeLoading }] = useUpgradeOrgMutation({\n    fixedCacheKey: 'upgrade-org-loading',\n  });\n  const [, { isLoading: isCancelLoading }] = upgradeApi.useCancelOrgUpgradeMutation({\n    fixedCacheKey: 'cancel-org-upgrade-loading',\n  });\n  const isLoading = isUpgradeLoading || isCancelLoading;\n\n  const upgradeAlerting = async () => {\n    await startUpgrade({ skipExisting: false });\n  };\n\n  if (isLoading) {\n    return <Loading text={isCancelLoading ? 'Cancelling upgrade...' : 'Upgrade in progress...'} />;\n  }\n\n  const footer = (\n    <>\n      <span key=\"proTipFooter\">\n        <p>\n          Note:{' '}\n          {'Previewing the upgrade process will not affect your existing legacy alerts and can be stopped at any time.'}\n        </p>\n      </span>\n    </>\n  );\n\n  const cta = (\n    <div>\n      <Stack direction=\"column\" gap={1}>\n        <Stack direction=\"row\" gap={1}>\n          <Button\n            size=\"lg\"\n            variant=\"primary\"\n            onClick={upgradeAlerting}\n            icon={'bell'}\n            className={''}\n            data-testid={selectors.components.CallToActionCard.buttonV2('Preview upgrade')}\n          >\n            {'Preview upgrade'}\n          </Button>\n        </Stack>\n      </Stack>\n    </div>\n  );\n\n  return (\n    <div className={styles.grid}>\n      <ContentBox className={styles.processBlock}>\n        <h3 className={styles.header}>How it works</h3>\n        <Stack direction=\"column\" alignItems=\"space-between\">\n          <div className={styles.list}>\n            <h4>Automatic Upgrade</h4>\n            <div className={styles.step}>\n              <p>\n                The upgrade process seamlessly transfers your existing legacy alert rules and notification channels to\n                the new Grafana Alerting system. This means your alerting configurations are preserved during the\n                transition.\n              </p>\n            </div>\n            <h4>Preview and Modification</h4>\n            <div className={styles.step}>\n              <p>\n                Alert Rules, Contact Points, and Notification Policies generated during the upgrade are available for\n                your review and potential adjustments. However, please note that they won&apos;t actively trigger alerts\n                or send notifications at this stage.\n              </p>\n            </div>\n            <h4>Limitations on Real-Time Updates</h4>\n            <div className={styles.step}>\n              <p>\n                Any changes made to your configurations after initiating the upgrade won&apos;t be immediately reflected\n                in the summary table. You have the flexibility to re-upgrade specific resources like dashboards, alert\n                rules, and notification channels at any time.\n              </p>\n            </div>\n            <h4>Cancellation and Restart</h4>\n            <div className={styles.step}>\n              <p>\n                If necessary, you can cancel and restart the upgrade process. However, it&apos;s important to be aware\n                that canceling the upgrade will result in the removal of all Grafana Alerting resources created during\n                the process, including any manual modifications.\n              </p>\n            </div>\n            <h4>Completing the Upgrade</h4>\n            <div className={styles.step}>\n              <p>\n                To enable Grafana Alerting, you&apos;ll need to modify the Grafana configuration and restart. Until this\n                step is completed, Grafana Alerting will remain inactive.\n              </p>\n            </div>\n          </div>\n        </Stack>\n      </ContentBox>\n      <ContentBox className={styles.getStartedBlock}>\n        <h3 className={styles.header}>Get started</h3>\n        <Stack direction=\"column\" alignItems=\"space-between\">\n          <div className={styles.list}>\n            <h4>Step 1: Preview the Upgrade</h4>\n            <div className={styles.step}>\n              <p>\n                Start the upgrade process by clicking on &quot;Preview upgrade.&quot; This action will display a summary\n                table showing how your existing alert rules and notification channels will be mapped to resources in the\n                new Grafana Alerting system.\n              </p>\n            </div>\n            <h4>Step 2: Investigate and Resolve Errors</h4>\n            <div className={styles.step}>\n              <p>\n                Review the previewed upgrade carefully. Alert rules or notification channels that couldn&apos;t be\n                automatically upgraded will be marked as errors. You have two options to address these errors:\n              </p>\n              <ul className={styles.list}>\n                <li>\n                  Fix the issues on the legacy side: If possible, resolve the problems within your legacy alerting\n                  setup, and then attempt the upgrade again.\n                </li>\n                <li>\n                  Manually create new resources: If fixing legacy issues isn&apos;t feasible, manually create new alert\n                  rules, notification policies, or contact points in the new Grafana Alerting system to replace the\n                  problematic ones.\n                </li>\n              </ul>\n            </div>\n            <h4>Step 3: Update Your As-Code Setup (Optional)</h4>\n            <div className={styles.step}>\n              <p>\n                In the new Grafana Alerting, Legacy Alerting methods of provisioning will no longer work. If you use\n                provisioning to manage alert rules and notification channels, you can export the upgraded versions to\n                generate Grafana Alerting-compatible provisioning files. This can all be done before completeing the\n                upgrade process.\n              </p>\n            </div>\n            <h4>Step 4: Perform the Upgrade to Grafana Alerting</h4>\n            <div className={styles.step}>\n              <p>\n                Once you are satisfied with the state of your Grafana Alerting setup, it&apos;s time to proceed with the\n                upgrade:\n              </p>\n              <ul className={styles.list}>\n                <li>\n                  Contact your Grafana server administrator to restart Grafana with the [unified_alerting] section\n                  enabled in your configuration.\n                </li>\n                <li>\n                  During this process, all organizations that have undergone the above upgrade process will continue to\n                  use their configured setup.\n                </li>\n                <li>\n                  Any organization that has not yet started the upgrade process will be automatically upgraded as part\n                  of this restart.\n                </li>\n                <li>\n                  Note: If the automatic upgrade fails for any reason, Grafana will not start, so it&apos;s safer to\n                  address any issues before initiating this step.\n                </li>\n              </ul>\n            </div>\n          </div>\n          <Stack direction={'row'} alignItems={'center'} gap={0.5}>\n            <Text color={'secondary'}>For more information, please refer to the</Text>\n            <TextLink external href={'https://grafana.com/docs/grafana/latest/alerting/set-up/migrating-alerts/'}>\n              Grafana Alerting Migration Guide\n            </TextLink>\n          </Stack>\n        </Stack>\n      </ContentBox>\n      <ContentBox className={styles.ctaBlock}>\n        <CallToActionCard\n          className={styles.ctaStyle}\n          message={'Start the upgrade to the new Grafana Alerting.'}\n          footer={footer}\n          callToActionElement={cta}\n        />\n      </ContentBox>\n    </div>\n  );\n};\n\nfunction ContentBox({ children, className }: React.PropsWithChildren<{ className?: string }>) {\n  const styles = useStyles2(getContentBoxStyles);\n\n  return <div className={cx(styles.box, className)}>{children}</div>;\n}\n\nconst getContentBoxStyles = (theme: GrafanaTheme2) => {\n  const color = theme.colors['warning'];\n  return {\n    box: css({\n      padding: theme.spacing(2),\n      backgroundColor: theme.colors.background.secondary,\n      borderRadius: theme.shape.radius.default,\n    }),\n\n    warningIcon: css({\n      color: color.text,\n    }),\n\n    grid: css({\n      display: 'grid',\n      gridTemplateRows: 'min-content auto auto',\n      gridTemplateColumns: '1fr 1fr 1fr 1fr 1fr',\n      gap: theme.spacing(2),\n    }),\n\n    list: css({\n      margin: `${theme.spacing(0)} ${theme.spacing(2)}`,\n      '& > li': {\n        marginBottom: theme.spacing(1),\n      },\n    }),\n\n    ctaStyle: css({\n      textAlign: 'center',\n    }),\n\n    processBlock: css({\n      gridColumn: '1 / span 2',\n      justifyContent: 'space-between',\n    }),\n\n    getStartedBlock: css({\n      gridColumn: '3 / span 3',\n      justifyContent: 'space-between',\n    }),\n\n    ctaBlock: css({\n      gridColumn: '1 / span 5',\n    }),\n\n    header: css({\n      marginBottom: theme.spacing(2),\n    }),\n\n    step: css({\n      paddingLeft: theme.spacing(2),\n    }),\n  };\n};\n\nconst AlertTabContentWrapper = () => {\n  const columns = useAlertColumns();\n  const filterParam = 'alertFilter';\n  const [queryParam, updateQueryParam] = useSingleQueryParam(filterParam);\n\n  const [startAlertUpgrade, { isLoading: isAlertLoading }] = upgradeApi.useUpgradeAllDashboardsMutation({\n    fixedCacheKey: 'upgrade-alerts-loading',\n  });\n  const [_, { isLoading: isChannelLoading }] = upgradeApi.useUpgradeAllChannelsMutation({\n    fixedCacheKey: 'upgrade-channels-loading',\n  });\n  const isUpgrading = isChannelLoading || isAlertLoading;\n\n  const selectRows = useMemo(() => {\n    const emptyArray: Array<DynamicTableItemProps<DashboardUpgrade>> = [];\n    return createSelector(\n      (res: OrgMigrationState | undefined) => res?.migratedDashboards ?? [],\n      (rows) => rows ?? emptyArray\n    );\n  }, []);\n\n  const { items } = upgradeApi.useGetOrgUpgradeSummaryQuery(undefined, {\n    selectFromResult: ({ data }) => ({\n      items: selectRows(data),\n    }),\n  });\n\n  const searchSpaceMap = useCallback(\n    (dashUpgrade: DashboardUpgrade) =>\n      `${dashUpgrade.folderName} ${dashUpgrade.dashboardName} ${dashUpgrade.newFolderName} ${dashUpgrade.migratedAlerts\n        .map((a) => a.legacyAlert?.name ?? '')\n        .join(' ')}`,\n    []\n  );\n  const renderExpandedContent = useCallback(\n    ({ data: dashUpgrade }: { data: DashboardUpgrade }) => (\n      <AlertTable\n        dashboardUid={dashUpgrade.dashboardUid ?? ''}\n        dashboardId={dashUpgrade.dashboardId}\n        showGuidelines={true}\n      />\n    ),\n    []\n  );\n\n  const syncNewButton = useMemo(() => {\n    const syncAlerting = async () => {\n      await startAlertUpgrade({ skipExisting: true });\n    };\n\n    return (\n      <Tooltip\n        theme=\"info-alt\"\n        content={\n          isUpgrading ? 'Upgrade in progress...' : 'Upgrade all newly created legacy alerts since the previous run.'\n        }\n        placement=\"top\"\n      >\n        <Button size=\"md\" variant=\"secondary\" onClick={syncAlerting} icon={'plus-circle'} disabled={isUpgrading}>\n          Upgrade New Alerts\n        </Button>\n      </Tooltip>\n    );\n  }, [startAlertUpgrade, isUpgrading]);\n\n  const syncAllButton = useMemo(() => {\n    const syncAlerting = async () => {\n      await startAlertUpgrade({ skipExisting: false });\n    };\n\n    return (\n      <Tooltip\n        theme=\"info-alt\"\n        content={isUpgrading ? 'Upgrade in progress...' : 'Upgrade all legacy alerts from scratch.'}\n        placement=\"top\"\n      >\n        <Button size=\"md\" variant=\"secondary\" onClick={syncAlerting} icon={'sync'} disabled={isUpgrading}>\n          Upgrade All Alerts\n        </Button>\n      </Tooltip>\n    );\n  }, [startAlertUpgrade, isUpgrading]);\n\n  return (\n    <AlertTabContent\n      rows={items}\n      queryParam={queryParam}\n      updateQueryParam={updateQueryParam}\n      searchSpaceMap={searchSpaceMap}\n      searchPlaceholder={getSearchPlaceholder(false)}\n      syncNewButton={syncNewButton}\n      syncAllButton={syncAllButton}\n      isUpgrading={isUpgrading}\n      emptyMessage={'No alert upgrades found.'}\n      columns={columns}\n      isExpandable={true}\n      renderExpandedContent={renderExpandedContent}\n    />\n  );\n};\nAlertTabContentWrapper.displayName = 'AlertTabContentWrapper';\n\nconst ChannelTabContentWrapper = () => {\n  const columns = useChannelColumns();\n\n  const filterParam = 'contactFilter';\n  const [queryParam, updateQueryParam] = useSingleQueryParam(filterParam);\n\n  const [startChannelUpgrade, { isLoading: isChannelLoading }] = upgradeApi.useUpgradeAllChannelsMutation({\n    fixedCacheKey: 'upgrade-channels-loading',\n  });\n  const [, { isLoading: isAlertLoading }] = upgradeApi.useUpgradeAllDashboardsMutation({\n    fixedCacheKey: 'upgrade-alerts-loading',\n  });\n  const isUpgrading = isChannelLoading || isAlertLoading;\n\n  const selectRows = useMemo(() => {\n    const emptyArray: Array<DynamicTableItemProps<ContactPair>> = [];\n    return createSelector(\n      (res: OrgMigrationState | undefined) => res?.migratedChannels ?? [],\n      (rows) => rows ?? emptyArray\n    );\n  }, []);\n\n  const { items } = upgradeApi.useGetOrgUpgradeSummaryQuery(undefined, {\n    selectFromResult: ({ data }) => ({\n      items: selectRows(data),\n    }),\n  });\n\n  const searchSpaceMap = useCallback(\n    (pair: ContactPair) => `${pair.legacyChannel?.name} ${pair.contactPoint?.name} ${pair.legacyChannel?.type}`,\n    []\n  );\n\n  const syncNewButton = useMemo(() => {\n    const syncAlerting = async () => {\n      await startChannelUpgrade({ skipExisting: true });\n    };\n\n    return (\n      <Tooltip\n        theme=\"info-alt\"\n        content={\n          isUpgrading\n            ? 'Upgrade in progress...'\n            : 'Upgrade all newly created legacy notification channels since the previous run.'\n        }\n        placement=\"top\"\n      >\n        <Button size=\"md\" variant=\"secondary\" onClick={syncAlerting} icon={'plus-circle'} disabled={isUpgrading}>\n          Upgrade New Channels\n        </Button>\n      </Tooltip>\n    );\n  }, [startChannelUpgrade, isUpgrading]);\n\n  const syncAllButton = useMemo(() => {\n    const syncAlerting = async () => {\n      await startChannelUpgrade({ skipExisting: false });\n    };\n\n    return (\n      <Tooltip\n        theme=\"info-alt\"\n        content={isUpgrading ? 'Upgrade in progress...' : 'Upgrade all legacy notification channels from scratch.'}\n        placement=\"top\"\n      >\n        <Button size=\"md\" variant=\"secondary\" onClick={syncAlerting} icon={'sync'} disabled={isUpgrading}>\n          Upgrade All Channels\n        </Button>\n      </Tooltip>\n    );\n  }, [startChannelUpgrade, isUpgrading]);\n\n  return (\n    <ChannelTabContent\n      rows={items}\n      queryParam={queryParam}\n      updateQueryParam={updateQueryParam}\n      searchSpaceMap={searchSpaceMap}\n      searchPlaceholder={'Search for channel and contact point names'}\n      syncNewButton={syncNewButton}\n      syncAllButton={syncAllButton}\n      isUpgrading={isUpgrading}\n      emptyMessage={'No channel upgrades found.'}\n      columns={columns}\n    />\n  );\n};\nChannelTabContentWrapper.displayName = 'ChannelTabContentWrapper';\n\nfunction useSingleQueryParam(name: string): [string | undefined, (values: string) => void] {\n  const { search } = useLocation();\n  const param = useMemo(() => {\n    return new URLSearchParams(search).get(name) || '';\n  }, [name, search]);\n  const update = useCallback(\n    (value: string) => {\n      return locationService.partial({ [name]: value || null });\n    },\n    [name]\n  );\n  return [param, update];\n}\n\ninterface UpgradeTabContentProps<T extends object> {\n  rows?: T[];\n  updateQueryParam?: (values: string) => void;\n  queryParam?: string;\n  searchSpaceMap: (row: T) => string;\n  searchPlaceholder: string;\n  syncNewButton: JSX.Element;\n  syncAllButton: JSX.Element;\n  isUpgrading: boolean;\n  columns: Array<DynamicTableColumnProps<T>>;\n  isExpandable?: boolean;\n  renderExpandedContent?: (item: DynamicTableItemProps<T>) => React.ReactNode;\n  emptyMessage: string;\n}\n\nconst UpgradeTabContent = <T extends object>({\n  rows = [],\n  queryParam,\n  updateQueryParam,\n  searchSpaceMap,\n  columns,\n  isExpandable = false,\n  renderExpandedContent,\n  emptyMessage,\n  searchPlaceholder,\n  syncNewButton,\n  syncAllButton,\n  isUpgrading,\n}: UpgradeTabContentProps<T>) => {\n  const styles = useStyles2(getStyles);\n\n  const isLoading = isUpgrading || isUpgrading;\n\n  const filterFn = useMemo(() => {\n    return createfilterByMapping<T>(searchSpaceMap, rows);\n  }, [searchSpaceMap, rows]);\n\n  const items = useMemo((): Array<DynamicTableItemProps<T>> => {\n    return filterFn(queryParam).map((row, Idx) => {\n      return {\n        id: `${searchSpaceMap(row)} - ${Idx}`,\n        data: row,\n      };\n    });\n  }, [searchSpaceMap, filterFn, queryParam]);\n\n  const showGuidelines = false;\n  const wrapperClass = cx(styles.wrapper, { [styles.wrapperMargin]: showGuidelines });\n\n  const TableComponent = showGuidelines ? DynamicTableWithGuidelines : DynamicTable;\n\n  const pagination = useMemo(() => ({ itemsPerPage: 50 }), []);\n\n  return (\n    <>\n      <div className={styles.searchWrapper}>\n        <Stack direction=\"column\" gap={1}>\n          <Stack direction=\"row\" gap={1}>\n            <Search\n              placeholder={searchPlaceholder}\n              searchFn={(phrase) => {\n                updateQueryParam?.(phrase || '');\n              }}\n              searchPhrase={queryParam || ''}\n            />\n            {syncNewButton}\n            {syncAllButton}\n          </Stack>\n        </Stack>\n      </div>\n      {isLoading && <Loading text={isUpgrading ? 'Upgrade in progress...' : 'Loading...'} />}\n      {!isLoading && !!items.length && (\n        <div className={wrapperClass}>\n          <TableComponent\n            cols={columns}\n            isExpandable={isExpandable}\n            items={items}\n            renderExpandedContent={renderExpandedContent}\n            pagination={pagination}\n            paginationStyles={styles.pagination}\n          />\n        </div>\n      )}\n      {!isLoading && !items.length && <div className={cx(wrapperClass, styles.emptyMessage)}>{emptyMessage}</div>}\n    </>\n  );\n};\n\nconst ChannelTabContent = React.memo(UpgradeTabContent<ContactPair>);\nconst AlertTabContent = React.memo(UpgradeTabContent<DashboardUpgrade>);\n\nconst useChannelColumns = (): Array<DynamicTableColumnProps<ContactPair>> => {\n  const styles = useStyles2(getStyles);\n\n  const { useUpgradeChannelMutation } = upgradeApi;\n  const [migrateChannel] = useUpgradeChannelMutation();\n\n  return useMemo(\n    () => [\n      {\n        id: 'contact-level-error',\n        label: '',\n        renderCell: ({ data: contactPair }) => {\n          if (!contactPair.error) {\n            return null;\n          }\n          const warning =\n            contactPair?.error === 'channel not upgraded' || contactPair?.error === 'channel no longer exists';\n          return (\n            <Tooltip theme=\"error\" content={contactPair.error}>\n              <Icon name=\"exclamation-circle\" className={warning ? styles.warningIcon : styles.errorIcon} size={'lg'} />\n            </Tooltip>\n          );\n        },\n        size: '45px',\n      },\n      {\n        id: 'legacyChannel',\n        label: 'Legacy Channel',\n        // eslint-disable-next-line react/display-name\n        renderCell: ({ data: contactPair }) => {\n          if (!contactPair?.legacyChannel) {\n            return null;\n          }\n\n          if (!contactPair.legacyChannel.name && contactPair.contactPoint?.name) {\n            return <Badge color=\"red\" text={`Deleted Channel (ID: ${contactPair.legacyChannel?.id})`} />;\n          }\n\n          if (!contactPair.legacyChannel.name) {\n            return <Badge color=\"red\" text={`Unknown Channel (ID: ${contactPair.legacyChannel?.id})`} />;\n          }\n          return (\n            <Stack direction={'row'} gap={1}>\n              <Link\n                rel=\"noreferrer\"\n                target=\"_blank\"\n                className={styles.textLink}\n                href={createUrl(\n                  `/alerting-legacy/notifications/receivers/${encodeURIComponent(contactPair.legacyChannel.id)}/edit`,\n                  {}\n                )}\n              >\n                {contactPair.legacyChannel.name}\n              </Link>\n              {contactPair.legacyChannel?.type && <Badge color=\"blue\" text={contactPair.legacyChannel.type} />}\n            </Stack>\n          );\n        },\n        size: 5,\n      },\n      {\n        id: 'arrow',\n        label: '',\n        renderCell: ({ data: contactPair }) => {\n          if (!contactPair?.contactPoint) {\n            return null;\n          }\n          return <Icon name=\"arrow-right\" />;\n        },\n        size: '45px',\n      },\n      {\n        id: 'route',\n        label: 'Notification Policy',\n        renderCell: ({ data: contactPair }) => {\n          return <Matchers matchers={contactPair?.contactPoint?.routeMatchers ?? []} />;\n        },\n        size: 5,\n      },\n      {\n        id: 'arrow2',\n        label: '',\n        renderCell: ({ data: contactPair }) => {\n          if (!contactPair?.contactPoint) {\n            return null;\n          }\n          return <Icon name=\"arrow-right\" />;\n        },\n        size: '45px',\n      },\n      {\n        id: 'contactPoint',\n        label: 'Contact Point',\n        // eslint-disable-next-line react/display-name\n        renderCell: ({ data: contactPair }) => {\n          return (\n            <Stack direction={'row'} gap={1}>\n              {contactPair?.contactPoint && (\n                <>\n                  <Link\n                    rel=\"noreferrer\"\n                    target=\"_blank\"\n                    className={styles.textLink}\n                    href={createContactPointLink(contactPair.contactPoint.name, 'grafana')}\n                  >\n                    {contactPair.contactPoint.name}\n                  </Link>\n                  <Badge color=\"blue\" text={contactPair.contactPoint.type} />\n                </>\n              )}\n            </Stack>\n          );\n        },\n        size: 5,\n      },\n      {\n        id: 'provisioned',\n        label: '',\n        renderCell: ({ data: contactPair }) => {\n          return contactPair.provisioned ? (\n            <Badge color=\"purple\" text={'Provisioned'} className={styles.badge} />\n          ) : null;\n        },\n        size: '100px',\n      },\n      {\n        id: 'actions',\n        label: 'Actions',\n        renderCell: ({ data: pair }) => {\n          if (!pair?.legacyChannel) {\n            return null;\n          }\n          if (pair.legacyChannel.id <= 0) {\n            return null;\n          }\n          if (pair.isUpgrading) {\n            return (\n              <Stack gap={0.5} alignItems=\"center\">\n                <Spinner size=\"sm\" inline={true} className={styles.spinner} />\n              </Stack>\n            );\n          }\n          if (pair?.error === 'channel not upgraded') {\n            return (\n              <Stack gap={0.5} alignItems=\"center\">\n                <ActionIcon\n                  aria-label=\"upgrade legacy notification channel\"\n                  key=\"upgrade-channel\"\n                  icon=\"plus\"\n                  tooltip=\"upgrade legacy notification channel\"\n                  onClick={() => migrateChannel({ channelId: pair.legacyChannel.id, skipExisting: false })}\n                />\n              </Stack>\n            );\n          }\n          if (pair?.error === 'channel no longer exists') {\n            return (\n              <Stack gap={0.5} alignItems=\"center\">\n                <ActionIcon\n                  aria-label=\"remove upgraded notification channel\"\n                  key=\"upgrade-channel\"\n                  icon=\"minus\"\n                  tooltip=\"remove upgraded notification channel\"\n                  onClick={() => migrateChannel({ channelId: pair.legacyChannel.id, skipExisting: false })}\n                />\n              </Stack>\n            );\n          }\n          return (\n            <Stack gap={0.5} alignItems=\"center\">\n              <ActionIcon\n                aria-label=\"re-upgrade legacy notification channel\"\n                key=\"upgrade-channel\"\n                icon=\"sync\"\n                tooltip=\"re-upgrade legacy notification channel\"\n                onClick={() => migrateChannel({ channelId: pair.legacyChannel.id, skipExisting: false })}\n              />\n            </Stack>\n          );\n        },\n        size: '70px',\n      },\n    ],\n    [styles.textLink, styles.errorIcon, styles.warningIcon, styles.badge, styles.spinner, migrateChannel]\n  );\n};\n\nconst useAlertColumns = (): Array<DynamicTableColumnProps<DashboardUpgrade>> => {\n  const styles = useStyles2(getStyles);\n\n  const { useUpgradeDashboardMutation } = upgradeApi;\n  const [migrateDashboard] = useUpgradeDashboardMutation();\n\n  return useMemo(\n    () => [\n      {\n        id: 'dashboard-level-error',\n        label: '',\n        renderCell: ({ data: dashUpgrade }) => {\n          if (!dashUpgrade.error) {\n            return null;\n          }\n          const warning =\n            dashUpgrade?.error === 'dashboard not upgraded' || dashUpgrade?.error === 'dashboard no longer exists';\n          return (\n            <Tooltip theme=\"error\" content={dashUpgrade.error}>\n              <Icon name=\"exclamation-circle\" className={warning ? styles.warningIcon : styles.errorIcon} size={'lg'} />\n            </Tooltip>\n          );\n        },\n        size: '45px',\n      },\n      {\n        id: 'folder',\n        label: 'Folder',\n        renderCell: ({ data: dashUpgrade }) => {\n          if (!dashUpgrade.folderName) {\n            return (\n              <Stack alignItems={'center'} gap={0.5}>\n                <Icon name=\"folder\" />\n                <Badge color=\"red\" text=\"Unknown Folder\" />\n              </Stack>\n            );\n          }\n          return (\n            <Stack alignItems={'center'} gap={0.5}>\n              <Icon name=\"folder\" />\n              <Link\n                rel=\"noreferrer\"\n                target=\"_blank\"\n                className={styles.textLink}\n                href={makeFolderLink(dashUpgrade.folderUid)}\n              >\n                {dashUpgrade.folderName}\n              </Link>\n            </Stack>\n          );\n        },\n        size: 2,\n      },\n      {\n        id: 'dashboard',\n        label: 'Dashboard',\n        renderCell: ({ data: dashUpgrade }) => {\n          if (!dashUpgrade.dashboardName) {\n            return (\n              <Stack alignItems={'center'} gap={0.5}>\n                <Icon name=\"apps\" />\n                <Badge color=\"red\" text={`Unknown Dashboard (ID: ${dashUpgrade.dashboardId})`} />\n              </Stack>\n            );\n          }\n          return (\n            <Stack alignItems={'center'} gap={0.5}>\n              <Icon name=\"apps\" />\n              <Link\n                rel=\"noreferrer\"\n                target=\"_blank\"\n                className={styles.textLink}\n                href={makeDashboardLink(dashUpgrade.dashboardUid)}\n              >\n                {dashUpgrade.dashboardName}\n              </Link>\n            </Stack>\n          );\n        },\n        size: 2,\n      },\n      {\n        id: 'new-folder-arrow',\n        label: '',\n        renderCell: ({ data: dashUpgrade }) => {\n          const migratedFolderUid = dashUpgrade?.newFolderUid;\n          const folderChanged = migratedFolderUid!! && migratedFolderUid !== dashUpgrade.folderUid;\n          if (folderChanged && dashUpgrade?.newFolderName) {\n            return <Icon name=\"arrow-right\" />;\n          }\n          return null;\n        },\n        size: '45px',\n      },\n      {\n        id: 'new-folder',\n        label: 'New folder',\n        renderCell: ({ data: dashUpgrade }) => {\n          const migratedFolderUid = dashUpgrade?.newFolderUid;\n          if (migratedFolderUid && migratedFolderUid !== dashUpgrade.folderUid && dashUpgrade?.newFolderName) {\n            const newFolderWarning = dashUpgrade.warning.includes('dashboard alerts moved');\n            return (\n              <Stack alignItems={'center'} gap={0.5}>\n                <Icon name={'folder'} />\n                <Link\n                  rel=\"noreferrer\"\n                  target=\"_blank\"\n                  className={styles.textLink}\n                  href={makeFolderLink(migratedFolderUid)}\n                >\n                  {dashUpgrade.newFolderName}\n                </Link>\n                {newFolderWarning && (\n                  <Tooltip theme=\"info-alt\" content={dashUpgrade.warning} placement=\"top\">\n                    <Icon name={'info-circle'} />\n                  </Tooltip>\n                )}\n              </Stack>\n            );\n          }\n          return null;\n        },\n        size: 3,\n      },\n      {\n        id: 'provisioned',\n        label: '',\n        className: styles.tableBadges,\n        renderCell: ({ data: dashUpgrade }) => {\n          const provisionedWarning = dashUpgrade.warning.includes('provisioned status:');\n          return (\n            <>\n              {dashUpgrade.provisioned && (\n                <Badge\n                  color=\"purple\"\n                  text={provisionedWarning ? 'Unknown' : 'Provisioned'}\n                  tooltip={dashUpgrade.warning}\n                  icon={provisionedWarning ? 'exclamation-triangle' : undefined}\n                  className={styles.badge}\n                />\n              )}\n            </>\n          );\n        },\n        size: '100px',\n      },\n      {\n        id: 'error-badge',\n        label: '',\n        className: styles.tableBadges,\n        renderCell: ({ data: dashUpgrade }) => {\n          const migratedAlerts = dashUpgrade?.migratedAlerts ?? [];\n          const nestedErrors = migratedAlerts.map((alertPair) => alertPair.error ?? '').filter((error) => !!error);\n          if (nestedErrors.length === 0) {\n            return null;\n          }\n          return <Badge color=\"red\" key=\"errors\" text={`${nestedErrors.length} errors`} className={styles.badge} />;\n        },\n        size: '90px',\n      },\n      {\n        id: 'alert-count-badge',\n        label: '',\n        className: styles.tableBadges,\n        renderCell: ({ data: dashUpgrade }) => {\n          const migratedAlerts = dashUpgrade?.migratedAlerts ?? [];\n          return (\n            <Badge color=\"green\" key=\"alerts\" text={`${migratedAlerts.length} alert rules`} className={styles.badge} />\n          );\n        },\n        size: '115px',\n      },\n      {\n        id: 'actions',\n        label: 'Actions',\n        renderCell: ({ data: dashUpgrade }) => {\n          if (dashUpgrade.isUpgrading) {\n            return (\n              <Stack gap={0.5} alignItems=\"center\">\n                <Spinner size=\"sm\" inline={true} className={styles.spinner} />\n              </Stack>\n            );\n          }\n          if (dashUpgrade?.error === 'dashboard not upgraded') {\n            return (\n              <Stack gap={0.5} alignItems=\"center\">\n                <ActionIcon\n                  aria-label=\"upgrade legacy alerts for this dashboard\"\n                  key=\"upgrade-dashboard\"\n                  icon=\"plus\"\n                  tooltip=\"upgrade legacy alerts for this dashboard\"\n                  onClick={() => migrateDashboard({ dashboardId: dashUpgrade.dashboardId, skipExisting: false })}\n                />\n              </Stack>\n            );\n          }\n          if (dashUpgrade?.error === 'dashboard no longer exists') {\n            return (\n              <Stack gap={0.5} alignItems=\"center\">\n                <ActionIcon\n                  aria-label=\"remove upgraded alerts for this dashboard\"\n                  key=\"upgrade-dashboard\"\n                  icon=\"minus\"\n                  tooltip=\"remove upgraded alerts for this dashboard\"\n                  onClick={() => migrateDashboard({ dashboardId: dashUpgrade.dashboardId, skipExisting: false })}\n                />\n              </Stack>\n            );\n          }\n          return (\n            <Stack gap={0.5} alignItems=\"center\">\n              {dashUpgrade.dashboardId && (\n                <ActionIcon\n                  aria-label=\"re-upgrade legacy alerts for this dashboard\"\n                  key=\"upgrade-dashboard\"\n                  icon=\"sync\"\n                  tooltip=\"re-upgrade legacy alerts for this dashboard\"\n                  onClick={() => migrateDashboard({ dashboardId: dashUpgrade.dashboardId, skipExisting: false })}\n                />\n              )}\n            </Stack>\n          );\n        },\n        size: '70px',\n      },\n    ],\n    [\n      styles.tableBadges,\n      styles.errorIcon,\n      styles.warningIcon,\n      styles.textLink,\n      styles.badge,\n      styles.spinner,\n      migrateDashboard,\n    ]\n  );\n};\n\nconst ufuzzy = new uFuzzy({\n  intraMode: 1,\n  intraIns: 1,\n  intraSub: 1,\n  intraTrn: 1,\n  intraDel: 1,\n});\n\nconst createfilterByMapping = <T,>(searchSpaceMap: (row: T) => string, filterables: T[]) => {\n  const haystack = filterables.map(searchSpaceMap);\n  return (filter: string | undefined) => {\n    if (!filter) {\n      return filterables;\n    }\n\n    const [idxs, info, order] = ufuzzy.search(haystack, filter, 5);\n    if (info && order) {\n      return order.map((idx) => filterables[info.idx[idx]]);\n    } else if (idxs) {\n      return idxs.map((idx) => filterables[idx]);\n    }\n\n    return filterables;\n  };\n};\n\ninterface SearchProps {\n  searchFn: (searchPhrase: string) => void;\n  searchPhrase: string | undefined;\n  placeholder?: string;\n}\n\nconst Search = ({ searchFn, searchPhrase, placeholder }: SearchProps) => {\n  const [searchFilter, setSearchFilter] = useState(searchPhrase);\n\n  const debouncedSearch = useMemo(() => debounce(searchFn, 600), [searchFn]);\n\n  useEffect(() => {\n    setSearchFilter(searchPhrase);\n    return () => {\n      // Stop the invocation of the debounced function after unmounting\n      debouncedSearch?.cancel();\n    };\n  }, [debouncedSearch, searchPhrase]);\n\n  return (\n    <FilterInput\n      placeholder={placeholder}\n      value={searchFilter}\n      width={55}\n      escapeRegex={false}\n      onChange={(value) => {\n        setSearchFilter(value || '');\n        if (value === '') {\n          // This is so clicking clear is instant. Otherwise, clearing and switching tabs before debounce is ready will lose filter state.\n          debouncedSearch?.cancel();\n          searchFn('');\n        } else {\n          debouncedSearch(value || '');\n        }\n      }}\n    />\n  );\n};\n\ninterface AlertTableProps {\n  dashboardId: number;\n  dashboardUid: string;\n  showGuidelines?: boolean;\n  emptyMessage?: string;\n}\n\nconst AlertTable = ({\n  dashboardId,\n  dashboardUid,\n  showGuidelines = false,\n  emptyMessage = 'No alert upgrades found.',\n}: AlertTableProps) => {\n  const styles = useStyles2(getStyles);\n\n  const selectRowsForDashUpgrade = useMemo(() => {\n    const emptyArray: Array<DynamicTableItemProps<AlertPair>> = [];\n    return createSelector(\n      (res: OrgMigrationState | undefined) => res?.migratedDashboards ?? [],\n      (res: OrgMigrationState | undefined, dashboardId: number) => dashboardId,\n      (migratedDashboards, dashboardId) =>\n        migratedDashboards\n          ?.find((du) => du.dashboardId === dashboardId)\n          ?.migratedAlerts.map((alertPair, Idx) => {\n            return {\n              id: `${alertPair?.legacyAlert?.id}-${Idx}`,\n              data: alertPair,\n            };\n          }) ?? emptyArray\n    );\n  }, []);\n\n  const { items } = upgradeApi.useGetOrgUpgradeSummaryQuery(undefined, {\n    selectFromResult: ({ data }) => ({\n      items: selectRowsForDashUpgrade(data, dashboardId),\n    }),\n  });\n\n  const { useUpgradeAlertMutation } = upgradeApi;\n  const [migrateAlert] = useUpgradeAlertMutation();\n\n  const wrapperClass = cx(styles.wrapper, styles.rulesTable, { [styles.wrapperMargin]: showGuidelines });\n\n  const columns: Array<DynamicTableColumnProps<AlertPair>> = [\n    {\n      id: 'alert-level-error',\n      label: '',\n      renderCell: ({ data: alertPair }) => {\n        if (!alertPair.error) {\n          return null;\n        }\n        const warning = alertPair?.error === 'alert not upgraded' || alertPair?.error.endsWith('no longer exists');\n        return (\n          <Tooltip theme=\"error\" content={alertPair.error}>\n            <Icon name=\"exclamation-circle\" className={warning ? styles.warningIcon : styles.errorIcon} size={'lg'} />\n          </Tooltip>\n        );\n      },\n      size: '45px',\n    },\n    {\n      id: 'legacyAlert',\n      label: 'Legacy alert rule',\n      renderCell: ({ data: alertPair }) => {\n        if (!alertPair?.legacyAlert) {\n          return null;\n        }\n        const deleted = (alertPair.error ?? '').endsWith('no longer exists');\n        if (deleted) {\n          return <Badge color=\"red\" text={`Deleted Alert: (ID: ${alertPair.legacyAlert?.panelId})`} />;\n        }\n        return (\n          <>\n            {dashboardUid ? (\n              <Link\n                rel=\"noreferrer\"\n                target=\"_blank\"\n                className={alertPair.legacyAlert.name ? styles.textLink : styles.errorLink}\n                href={createUrl(`/d/${encodeURIComponent(dashboardUid)}`, {\n                  editPanel: String(alertPair.legacyAlert.panelId),\n                  tab: 'alert',\n                })}\n              >\n                {alertPair.legacyAlert.name || 'Missing Title'}\n              </Link>\n            ) : (\n              <Badge color=\"red\" text={alertPair.legacyAlert.name || 'Unknown Alert'} />\n            )}\n          </>\n        );\n      },\n      size: 5,\n    },\n    {\n      id: 'arrow',\n      label: '',\n      renderCell: ({ data: alertPair }) => {\n        if (!alertPair?.legacyAlert) {\n          return null;\n        }\n        return <Icon name=\"arrow-right\" />;\n      },\n      size: '45px',\n    },\n    {\n      id: 'alertRule',\n      label: 'New alert rule',\n      renderCell: ({ data: alertPair }) => {\n        return (\n          <Stack direction={'row'} gap={1}>\n            {alertPair?.alertRule && (\n              <Link\n                rel=\"noreferrer\"\n                target=\"_blank\"\n                className={styles.textLink}\n                href={createUrl(`/alerting/grafana/${alertPair.alertRule?.uid ?? ''}/view`, {})}\n              >\n                {alertPair.alertRule?.title ?? ''}\n              </Link>\n            )}\n          </Stack>\n        );\n      },\n      size: 5,\n    },\n    {\n      id: 'contacts',\n      label: 'Sends To',\n      renderCell: ({ data: alertPair }) => {\n        return (\n          <>\n            {alertPair?.alertRule && (\n              <TagList\n                tags={alertPair?.alertRule?.sendsTo ?? []}\n                displayMax={3}\n                className={css({ justifyContent: 'flex-start', width: '100%' })}\n              />\n            )}\n          </>\n        );\n      },\n      size: 3,\n    },\n    {\n      id: 'actions',\n      label: 'Actions',\n      renderCell: ({ data: alertPair }) => {\n        if (!alertPair?.legacyAlert) {\n          return null;\n        }\n        if (alertPair.legacyAlert.dashboardId <= 0 || alertPair.legacyAlert.panelId <= 0) {\n          return null;\n        }\n        if (alertPair.isUpgrading) {\n          return (\n            <Stack gap={0.5} alignItems=\"center\">\n              <Spinner size=\"sm\" inline={true} className={styles.spinner} />\n            </Stack>\n          );\n        }\n        if (alertPair?.error === 'alert not upgraded') {\n          return (\n            <Stack gap={0.5} alignItems=\"center\">\n              <ActionIcon\n                aria-label=\"upgrade legacy alert\"\n                key=\"upgrade-alert\"\n                icon=\"plus\"\n                tooltip=\"upgrade legacy alert\"\n                onClick={() =>\n                  migrateAlert({\n                    dashboardId: alertPair.legacyAlert.dashboardId,\n                    panelId: alertPair.legacyAlert.panelId,\n                    skipExisting: false,\n                  })\n                }\n              />\n            </Stack>\n          );\n        }\n        if (alertPair?.error?.endsWith('no longer exists')) {\n          return (\n            <Stack gap={0.5} alignItems=\"center\">\n              <ActionIcon\n                aria-label=\"remove upgraded alert\"\n                key=\"upgrade-alert\"\n                icon=\"minus\"\n                tooltip=\"remove upgraded alert\"\n                onClick={() =>\n                  migrateAlert({\n                    dashboardId: alertPair.legacyAlert.dashboardId,\n                    panelId: alertPair.legacyAlert.panelId,\n                    skipExisting: false,\n                  })\n                }\n              />\n            </Stack>\n          );\n        }\n        return (\n          <Stack gap={0.5} alignItems=\"center\">\n            <ActionIcon\n              aria-label=\"re-upgrade legacy alert\"\n              key=\"upgrade-alert\"\n              icon=\"sync\"\n              tooltip=\"re-upgrade legacy alert\"\n              onClick={() =>\n                migrateAlert({\n                  dashboardId: alertPair.legacyAlert.dashboardId,\n                  panelId: alertPair.legacyAlert.panelId,\n                  skipExisting: false,\n                })\n              }\n            />\n          </Stack>\n        );\n      },\n      size: '70px',\n    },\n  ];\n\n  if (!items.length) {\n    return <div className={cx(wrapperClass, styles.emptyMessage)}>{emptyMessage}</div>;\n  }\n\n  const TableComponent = showGuidelines ? DynamicTableWithGuidelines : DynamicTable;\n\n  return (\n    <div className={wrapperClass} data-testid=\"rules-table\">\n      <TableComponent\n        cols={columns}\n        items={items}\n        pagination={{ itemsPerPage: 50 }}\n        paginationStyles={styles.pagination}\n      />\n    </div>\n  );\n};\n\ninterface ErrorSummaryButtonProps {\n  count: number;\n  onClick: () => void;\n}\n\nconst ErrorSummaryButton = ({ count, onClick }: ErrorSummaryButtonProps) => {\n  return (\n    <HorizontalGroup height=\"auto\" justify=\"flex-start\">\n      <Tooltip content=\"Show all errors\" placement=\"top\">\n        <Button fill=\"text\" variant=\"destructive\" icon=\"exclamation-circle\" onClick={onClick}>\n          {count > 1 ? <>{count} errors</> : <>1 error</>}\n        </Button>\n      </Tooltip>\n    </HorizontalGroup>\n  );\n};\n\ninterface ErrorSummaryProps {\n  errors: string[];\n}\n\nconst ErrorSummary = ({ errors }: ErrorSummaryProps) => {\n  const [expanded, setExpanded] = useState(false);\n  const [closed, setClosed] = useLocalStorage('grafana.unifiedalerting.upgrade.hideErrors', true);\n  const styles = useStyles2(getStyles);\n\n  return (\n    <>\n      {!!errors.length && closed && <ErrorSummaryButton count={errors.length} onClick={() => setClosed(false)} />}\n      {!!errors.length && !closed && (\n        <Alert\n          data-testid=\"upgrade-errors\"\n          title=\"Errors upgrading to Grafana Alerting\"\n          severity=\"error\"\n          onRemove={() => setClosed(true)}\n        >\n          {expanded && errors.map((item, idx) => <div key={idx}>{item}</div>)}\n          {!expanded && (\n            <>\n              <div>{errors[0]}</div>\n              {errors.length >= 2 && (\n                <Button\n                  className={styles.moreButton}\n                  fill=\"text\"\n                  icon=\"angle-right\"\n                  size=\"sm\"\n                  onClick={() => setExpanded(true)}\n                >\n                  {errors.length - 1} more {pluralize('error', errors.length - 1)}\n                </Button>\n              )}\n            </>\n          )}\n        </Alert>\n      )}\n    </>\n  );\n};\n\ninterface LoadingProps {\n  text?: string;\n}\n\nconst Loading = ({ text = 'Loading...' }: LoadingProps) => {\n  return (\n    <div className=\"page-loader-wrapper\">\n      <LoadingPlaceholder text={text} />\n    </div>\n  );\n};\n\nexport const getStyles = (theme: GrafanaTheme2) => ({\n  wrapperMargin: css({\n    [theme.breakpoints.up('md')]: {\n      marginLeft: '36px',\n    },\n  }),\n\n  emptyMessage: css({\n    padding: theme.spacing(1),\n  }),\n\n  wrapper: css({\n    width: 'auto',\n    borderRadius: theme.shape.radius.default,\n  }),\n\n  pagination: css({\n    display: 'flex',\n    margin: '0',\n    paddingTop: theme.spacing(1),\n    paddingBottom: theme.spacing(0.25),\n    justifyContent: 'center',\n    borderLeft: `1px solid ${theme.colors.border.medium}`,\n    borderRight: `1px solid ${theme.colors.border.medium}`,\n    borderBottom: `1px solid ${theme.colors.border.medium}`,\n  }),\n\n  rulesTable: css({\n    marginTop: theme.spacing(3),\n  }),\n\n  errorIcon: css({\n    fill: theme.colors.error.text,\n  }),\n\n  warningIcon: css({\n    fill: theme.colors.warning.text,\n  }),\n\n  searchWrapper: css({\n    marginBottom: theme.spacing(2),\n  }),\n\n  textLink: css({\n    color: theme.colors.text.link,\n    cursor: 'pointer',\n\n    '&:hover': {\n      textDecoration: 'underline',\n    },\n  }),\n\n  errorLink: css({\n    color: theme.colors.error.text,\n    cursor: 'pointer',\n\n    '&:hover': {\n      textDecoration: 'underline',\n    },\n  }),\n\n  tabContent: css({\n    marginTop: theme.spacing(2),\n  }),\n\n  moreButton: css({\n    padding: '0',\n  }),\n\n  tableBadges: css({\n    justifyContent: 'flex-end',\n  }),\n\n  badge: css({\n    width: '100%',\n    justifyContent: 'center',\n  }),\n\n  separator: css({\n    borderBottom: `1px solid ${theme.colors.border.weak}`,\n    marginTop: theme.spacing(2),\n  }),\n\n  spinner: css({\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    width: theme.spacing(3),\n    height: theme.spacing(3),\n  }),\n});\n\nexport default UpgradePage;\n","import { css, cx } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\n\nimport { DynamicTable, DynamicTableProps } from './DynamicTable';\n\nexport type DynamicTableWithGuidelinesProps<T> = Omit<DynamicTableProps<T>, 'renderPrefixHeader, renderPrefixCell'>;\n\n// DynamicTable, but renders visual guidelines on the left, for larger screen widths\nexport const DynamicTableWithGuidelines = <T extends object>({\n  renderExpandedContent,\n  ...props\n}: DynamicTableWithGuidelinesProps<T>) => {\n  const styles = useStyles2(getStyles);\n  return (\n    <DynamicTable\n      renderExpandedContent={\n        renderExpandedContent\n          ? (item, index, items) => (\n              <>\n                {!(index === items.length - 1) && <div className={cx(styles.contentGuideline, styles.guideline)} />}\n                {renderExpandedContent(item, index, items)}\n              </>\n            )\n          : undefined\n      }\n      renderPrefixHeader={() => (\n        <div className={styles.relative}>\n          <div className={cx(styles.headerGuideline, styles.guideline)} />\n        </div>\n      )}\n      renderPrefixCell={(_, index, items) => (\n        <div className={styles.relative}>\n          <div className={cx(styles.topGuideline, styles.guideline)} />\n          {!(index === items.length - 1) && <div className={cx(styles.bottomGuideline, styles.guideline)} />}\n        </div>\n      )}\n      {...props}\n    />\n  );\n};\n\nexport const getStyles = (theme: GrafanaTheme2) => ({\n  relative: css`\n    position: relative;\n    height: 100%;\n  `,\n  guideline: css`\n    left: -19px;\n    border-left: 1px solid ${theme.colors.border.weak};\n    position: absolute;\n\n    ${theme.breakpoints.down('md')} {\n      display: none;\n    }\n  `,\n  topGuideline: css`\n    width: 18px;\n    border-bottom: 1px solid ${theme.colors.border.medium};\n    top: 0;\n    bottom: 50%;\n  `,\n  bottomGuideline: css`\n    top: 50%;\n    bottom: 0;\n  `,\n  contentGuideline: css`\n    top: 0;\n    bottom: 0;\n    left: -49px !important;\n  `,\n  headerGuideline: css`\n    top: -17px;\n    bottom: 0;\n  `,\n});\n","import { css } from '@emotion/css';\nimport { take, takeRight, uniqueId } from 'lodash';\nimport React, { FC } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { getTagColorsFromName, useStyles2, Stack } from '@grafana/ui';\nimport { ObjectMatcher } from 'app/plugins/datasource/alertmanager/types';\n\nimport { HoverCard } from '../HoverCard';\n\ntype MatchersProps = { matchers: ObjectMatcher[] };\n\n// renders the first N number of matchers\nconst Matchers: FC<MatchersProps> = ({ matchers }) => {\n  const styles = useStyles2(getStyles);\n\n  const NUM_MATCHERS = 5;\n\n  const firstFew = take(matchers, NUM_MATCHERS);\n  const rest = takeRight(matchers, matchers.length - NUM_MATCHERS);\n  const hasMoreMatchers = rest.length > 0;\n\n  return (\n    <span data-testid=\"label-matchers\">\n      <Stack direction=\"row\" gap={1} alignItems=\"center\" wrap={'wrap'}>\n        {firstFew.map((matcher) => (\n          <MatcherBadge key={uniqueId()} matcher={matcher} />\n        ))}\n        {/* TODO hover state to show all matchers we're not showing */}\n        {hasMoreMatchers && (\n          <HoverCard\n            arrow\n            placement=\"top\"\n            content={\n              <>\n                {rest.map((matcher) => (\n                  <MatcherBadge key={uniqueId()} matcher={matcher} />\n                ))}\n              </>\n            }\n          >\n            <span>\n              <div className={styles.metadata}>{`and ${rest.length} more`}</div>\n            </span>\n          </HoverCard>\n        )}\n      </Stack>\n    </span>\n  );\n};\n\ninterface MatcherBadgeProps {\n  matcher: ObjectMatcher;\n}\n\nconst MatcherBadge: FC<MatcherBadgeProps> = ({ matcher: [label, operator, value] }) => {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={styles.matcher(label).wrapper}>\n      <Stack direction=\"row\" gap={0} alignItems=\"baseline\">\n        {label} {operator} {value}\n      </Stack>\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  matcher: (label: string) => {\n    const { color, borderColor } = getTagColorsFromName(label);\n\n    return {\n      wrapper: css`\n        color: #fff;\n        background: ${color};\n        padding: ${theme.spacing(0.33)} ${theme.spacing(0.66)};\n        font-size: ${theme.typography.bodySmall.fontSize};\n\n        border: solid 1px ${borderColor};\n        border-radius: ${theme.shape.borderRadius(2)};\n      `,\n    };\n  },\n  metadata: css`\n    color: ${theme.colors.text.secondary};\n\n    font-size: ${theme.typography.bodySmall.fontSize};\n    font-weight: ${theme.typography.bodySmall.fontWeight};\n  `,\n});\n\nexport { Matchers };\n","import React from 'react';\n\nimport { IconName, Tooltip, LinkButton, Button } from '@grafana/ui';\nimport { PopoverContent, TooltipPlacement } from '@grafana/ui/src/components/Tooltip';\n\ninterface Props {\n  tooltip: PopoverContent;\n  icon: IconName;\n  className?: string;\n  tooltipPlacement?: TooltipPlacement;\n  to?: string;\n  target?: string;\n  onClick?: () => void;\n  'data-testid'?: string;\n}\n\nexport const ActionIcon = ({\n  tooltip,\n  icon,\n  to,\n  target,\n  onClick,\n  className,\n  tooltipPlacement = 'top',\n  ...rest\n}: Props) => {\n  const ariaLabel = typeof tooltip === 'string' ? tooltip : undefined;\n\n  return (\n    <Tooltip content={tooltip} placement={tooltipPlacement}>\n      {to ? (\n        <LinkButton\n          variant=\"secondary\"\n          fill=\"text\"\n          icon={icon}\n          href={to}\n          size=\"sm\"\n          target={target}\n          {...rest}\n          aria-label={ariaLabel}\n        />\n      ) : (\n        <Button\n          className={className}\n          variant=\"secondary\"\n          fill=\"text\"\n          size=\"sm\"\n          icon={icon}\n          type=\"button\"\n          onClick={onClick}\n          {...rest}\n          aria-label={ariaLabel}\n        />\n      )}\n    </Tooltip>\n  );\n};\n","// Temporary place to collect phrases we reuse between new and old browse/search\n// TODO: remove this when new Browse Dashboards UI is no longer feature flagged\n\nimport { t } from 'app/core/internationalization';\n\nexport function getSearchPlaceholder(includePanels = false) {\n  return includePanels\n    ? t('search.search-input.include-panels-placeholder', 'Search for dashboards, folders, and panels')\n    : t('search.search-input.placeholder', 'Search for dashboards and folders');\n}\n\nexport function getNewDashboardPhrase() {\n  return t('search.dashboard-actions.new-dashboard', 'New dashboard');\n}\n\nexport function getNewFolderPhrase() {\n  return t('search.dashboard-actions.new-folder', 'New folder');\n}\n\nexport function getImportPhrase() {\n  return t('search.dashboard-actions.import', 'Import');\n}\n\nexport function getNewPhrase() {\n  return t('search.dashboard-actions.new', 'New');\n}\n"],"names":["isFetchBaseQueryError","error","upgradeApi","alertingApi","build","channelId","skipExisting","dispatch","queryFulfilled","draft","index","pair","data","e","dashboardId","panelId","du","alertIndex","getCacheEntry","undefined","summary","dashUpgrade","a","b","byError","byErrors","byNestedErrors","byWarnings","byFolder","UpgradePage","useGetOrgUpgradeSummaryQuery","isFetchError","fetchError","alertCount","acc","cur","contactCount","errors","hasData","cancelUpgrade","CancelUpgradeButton","Page","Alert","CTAElement","ErrorSummary","UpgradeTabs","styles","getStyles","queryParams","setQueryParams","useQueryParams","tab","getActiveTabFromUrl","activeTab","setActiveTab","TextLink","TabsBar","Tab","TabContent","AlertTabContentWrapper","ChannelTabContentWrapper","startOver","showConfirmStartOver","setShowConfirmStartOver","Button","ConfirmModal","Stack","Text","ActiveTab","getContentBoxStyles","useUpgradeOrgMutation","startUpgrade","isUpgradeLoading","isCancelLoading","isLoading","upgradeAlerting","Loading","footer","cta","selectors","ContentBox","CallToActionCard","children","className","theme","color","columns","useAlertColumns","filterParam","queryParam","updateQueryParam","useSingleQueryParam","startAlertUpgrade","isAlertLoading","_","isChannelLoading","isUpgrading","selectRows","emptyArray","res","rows","items","searchSpaceMap","renderExpandedContent","AlertTable","syncNewButton","syncAlerting","Tooltip","syncAllButton","AlertTabContent","useChannelColumns","startChannelUpgrade","ChannelTabContent","name","search","param","update","value","UpgradeTabContent","isExpandable","emptyMessage","searchPlaceholder","filterFn","createfilterByMapping","row","Idx","showGuidelines","wrapperClass","TableComponent","DynamicTableWithGuidelines","DynamicTable","pagination","Search","phrase","useUpgradeChannelMutation","migrateChannel","contactPair","warning","Icon","Badge","Link","Matchers","Spinner","ActionIcon","useUpgradeDashboardMutation","migrateDashboard","migratedFolderUid","newFolderWarning","provisionedWarning","nestedErrors","alertPair","migratedAlerts","ufuzzy","filterables","haystack","filter","idxs","info","order","idx","searchFn","searchPhrase","placeholder","searchFilter","setSearchFilter","debouncedSearch","FilterInput","dashboardUid","selectRowsForDashUpgrade","migratedDashboards","useUpgradeAlertMutation","migrateAlert","TagList","ErrorSummaryButton","count","onClick","expanded","setExpanded","closed","setClosed","useLocalStorage","item","text","LoadingPlaceholder","props","matchers","NUM_MATCHERS","firstFew","rest","hasMoreMatchers","matcher","MatcherBadge","label","operator","borderColor","tooltip","icon","to","target","tooltipPlacement","ariaLabel","getSearchPlaceholder","includePanels","getNewDashboardPhrase","getNewFolderPhrase","getImportPhrase","getNewPhrase"],"sourceRoot":""}