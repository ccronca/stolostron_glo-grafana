{"version":3,"file":"AlertingRule.d3574cfe6b7f7793bc4a.js","mappings":"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","sources":["webpack://grafana/./public/app/features/alerting/unified/RuleViewer.tsx","webpack://grafana/./public/app/features/alerting/components/CollapsibleAlert.tsx","webpack://grafana/./public/app/features/alerting/components/UAPreviewNotice.tsx","webpack://grafana/./public/app/features/alerting/unified/components/AlertManagerPicker.tsx","webpack://grafana/./public/app/features/alerting/unified/components/NoAlertManagerWarning.tsx","webpack://grafana/./public/app/features/alerting/unified/components/AlertingPageWrapper.tsx","webpack://grafana/./public/app/features/alerting/unified/hooks/useCombinedRule.ts"],"sourcesContent":["import React, { useMemo } from 'react';\n\nimport { NavModelItem } from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport { Alert, withErrorBoundary } from '@grafana/ui';\nimport { SafeDynamicImport } from 'app/core/components/DynamicImports/SafeDynamicImport';\nimport { GrafanaRouteComponentProps } from 'app/core/navigation/types';\n\nimport { AlertingPageWrapper } from './components/AlertingPageWrapper';\nimport { useCombinedRule } from './hooks/useCombinedRule';\nimport { getRuleIdFromPathname, parse as parseRuleId } from './utils/rule-id';\n\nconst DetailViewV1 = SafeDynamicImport(() => import('./components/rule-viewer/RuleViewer.v1'));\nconst DetailViewV2 = React.lazy(() => import('./components/rule-viewer/v2/RuleViewer.v2'));\n\ntype RuleViewerProps = GrafanaRouteComponentProps<{\n  id: string;\n  sourceName: string;\n}>;\n\nconst newAlertDetailView = Boolean(config.featureToggles.alertingDetailsViewV2) === true;\n\nconst RuleViewer = (props: RuleViewerProps): JSX.Element => {\n  return newAlertDetailView ? <RuleViewerV2Wrapper {...props} /> : <RuleViewerV1Wrapper {...props} />;\n};\n\nexport const defaultPageNav: NavModelItem = {\n  id: 'alert-rule-view',\n  text: '',\n};\n\nconst RuleViewerV1Wrapper = (props: RuleViewerProps) => <DetailViewV1 {...props} />;\n\nconst RuleViewerV2Wrapper = (props: RuleViewerProps) => {\n  const id = getRuleIdFromPathname(props.match.params);\n  const identifier = useMemo(() => {\n    if (!id) {\n      throw new Error('Rule ID is required');\n    }\n\n    return parseRuleId(id, true);\n  }, [id]);\n\n  const { loading, error, result: rule } = useCombinedRule({ ruleIdentifier: identifier });\n\n  // TODO improve error handling here\n  if (error) {\n    if (typeof error === 'string') {\n      return error;\n    }\n\n    return <Alert title={'Uh-oh'}>Something went wrong loading the rule</Alert>;\n  }\n\n  if (loading) {\n    return (\n      <AlertingPageWrapper pageNav={defaultPageNav} navId=\"alert-list\" isLoading={true}>\n        <></>\n      </AlertingPageWrapper>\n    );\n  }\n\n  if (rule) {\n    return <DetailViewV2 rule={rule} identifier={identifier} />;\n  }\n\n  return null;\n};\n\nexport default withErrorBoundary(RuleViewer, { style: 'page' });\n","import { css } from '@emotion/css';\nimport React, { HTMLAttributes } from 'react';\nimport { useLocalStorage } from 'react-use';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Alert, AlertVariant, Button, HorizontalGroup, Tooltip, useTheme2 } from '@grafana/ui';\nimport { getIconFromSeverity } from '@grafana/ui/src/components/Alert/Alert';\n\ntype Justify = 'flex-start' | 'flex-end' | 'space-between' | 'center';\n\ninterface CollapsibleAlertProps extends HTMLAttributes<HTMLDivElement> {\n  localStoreKey: string;\n  startClosed?: boolean;\n  severity?: AlertVariant;\n  collapseText?: string;\n  collapseTooltip: string;\n  collapseJustify?: Justify;\n  alertTitle: string;\n  children?: React.ReactNode;\n}\n\nexport const CollapsibleAlert = ({\n  localStoreKey,\n  startClosed = false,\n  severity = 'error',\n  collapseText,\n  collapseTooltip,\n  collapseJustify = 'flex-end',\n  alertTitle,\n  children,\n}: CollapsibleAlertProps) => {\n  const theme = useTheme2();\n  const styles = getStyles(theme, severity);\n  const [closed, setClosed] = useLocalStorage(localStoreKey, startClosed);\n\n  return (\n    <>\n      {closed && (\n        <HorizontalGroup justify={collapseJustify}>\n          <Tooltip content={collapseTooltip} placement=\"bottom\">\n            <Button\n              fill=\"text\"\n              variant=\"secondary\"\n              icon={getIconFromSeverity(severity)}\n              className={styles.warningButton}\n              onClick={() => setClosed(false)}\n            >\n              {collapseText}\n            </Button>\n          </Tooltip>\n        </HorizontalGroup>\n      )}\n      {!closed && (\n        <Alert severity={severity} title={alertTitle} onRemove={() => setClosed(true)}>\n          {children}\n        </Alert>\n      )}\n    </>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2, severity: AlertVariant) => {\n  const color = theme.colors[severity];\n  return {\n    warningButton: css({\n      color: color.text,\n\n      '&:hover': {\n        background: color.transparent,\n      },\n    }),\n  };\n};\n","import React from 'react';\n\nimport { config } from '@grafana/runtime';\nimport { TextLink } from '@grafana/ui';\n\nimport { CollapsibleAlert } from './CollapsibleAlert';\n\nconst LOCAL_STORAGE_KEY = 'grafana.unifiedalerting.upgrade.previewNotice';\n\nexport const UAPreviewNotice = () => {\n  if (config.unifiedAlertingEnabled || !config.featureToggles.alertingPreviewUpgrade) {\n    return null;\n  }\n\n  return (\n    <CollapsibleAlert\n      localStoreKey={LOCAL_STORAGE_KEY}\n      alertTitle={'This is a preview of the upgraded Grafana Alerting'}\n      collapseText={'Grafana Alerting Preview'}\n      collapseTooltip={'Show preview warning'}\n      severity={'warning'}\n    >\n      <p>\n        No rules are being evaluated and legacy alerting is still running.\n        <br />\n        Please contact your administrator to upgrade permanently.\n      </p>\n      <TextLink external href={'https://grafana.com/docs/grafana/latest/alerting/set-up/migrating-alerts/'}>\n        Read about upgrading\n      </TextLink>\n    </CollapsibleAlert>\n  );\n};\n","import { css } from '@emotion/css';\nimport React, { useMemo } from 'react';\n\nimport { GrafanaTheme2, SelectableValue } from '@grafana/data';\nimport { InlineField, Select, useStyles2 } from '@grafana/ui';\n\nimport { useAlertmanager } from '../state/AlertmanagerContext';\nimport { AlertManagerDataSource, GRAFANA_RULES_SOURCE_NAME } from '../utils/datasource';\n\ninterface Props {\n  disabled?: boolean;\n}\n\nfunction getAlertManagerLabel(alertManager: AlertManagerDataSource) {\n  return alertManager.name === GRAFANA_RULES_SOURCE_NAME ? 'Grafana' : alertManager.name.slice(0, 37);\n}\n\nexport const AlertManagerPicker = ({ disabled = false }: Props) => {\n  const styles = useStyles2(getStyles);\n\n  const { selectedAlertmanager, availableAlertManagers, setSelectedAlertmanager } = useAlertmanager();\n\n  const options: Array<SelectableValue<string>> = useMemo(() => {\n    return availableAlertManagers.map((ds) => ({\n      label: getAlertManagerLabel(ds),\n      value: ds.name,\n      imgUrl: ds.imgUrl,\n      meta: ds.meta,\n    }));\n  }, [availableAlertManagers]);\n\n  return (\n    <InlineField\n      className={styles.field}\n      label={disabled ? 'Alertmanager' : 'Choose Alertmanager'}\n      disabled={disabled || options.length === 1}\n      data-testid=\"alertmanager-picker\"\n    >\n      <Select\n        aria-label={disabled ? 'Alertmanager' : 'Choose Alertmanager'}\n        width={29}\n        className=\"ds-picker select-container\"\n        backspaceRemovesValue={false}\n        onChange={(value) => {\n          if (value?.value) {\n            setSelectedAlertmanager(value.value);\n          }\n        }}\n        options={options}\n        maxMenuHeight={500}\n        noOptionsMessage=\"No datasources found\"\n        value={selectedAlertmanager}\n        getOptionLabel={(o) => o.label}\n      />\n    </InlineField>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  field: css`\n    margin: 0;\n  `,\n});\n","import React from 'react';\n\nimport { Alert } from '@grafana/ui';\n\nimport { AlertManagerDataSource } from '../utils/datasource';\n\ninterface Props {\n  availableAlertManagers: AlertManagerDataSource[];\n}\n\nconst NoAlertManagersAvailable = () => (\n  <Alert title=\"No Alertmanager found\" severity=\"warning\">\n    We could not find any external Alertmanagers and you may not have access to the built-in Grafana Alertmanager.\n  </Alert>\n);\n\nconst OtherAlertManagersAvailable = () => (\n  <Alert title=\"Selected Alertmanager not found.\" severity=\"warning\">\n    The selected Alertmanager no longer exists or you may not have permission to access it. You can select a different\n    Alertmanager from the dropdown.\n  </Alert>\n);\n\nexport const NoAlertManagerWarning = ({ availableAlertManagers }: Props) => {\n  const hasOtherAMs = availableAlertManagers.length > 0;\n\n  return <div>{hasOtherAMs ? <OtherAlertManagersAvailable /> : <NoAlertManagersAvailable />}</div>;\n};\n","import React, { PropsWithChildren } from 'react';\nimport { useLocation } from 'react-use';\n\nimport { Page } from 'app/core/components/Page/Page';\nimport { PageProps } from 'app/core/components/Page/types';\n\nimport { UAPreviewNotice } from '../../components/UAPreviewNotice';\nimport { AlertmanagerProvider, useAlertmanager } from '../state/AlertmanagerContext';\n\nimport { AlertManagerPicker } from './AlertManagerPicker';\nimport { NoAlertManagerWarning } from './NoAlertManagerWarning';\n\n/**\n * This is the main alerting page wrapper, used by the alertmanager page wrapper and the alert rules list view\n */\ninterface AlertingPageWrapperProps extends PageProps {\n  isLoading?: boolean;\n}\n\nexport const AlertingPageWrapper = ({ children, isLoading, ...rest }: AlertingPageWrapperProps) => (\n  <Page {...rest}>\n    <Page.Contents isLoading={isLoading}>\n      <div>\n        <UAPreviewNotice />\n        {children}\n      </div>\n    </Page.Contents>\n  </Page>\n);\n\n/**\n * This wrapper is for pages that use the Alertmanager API\n */\ninterface AlertmanagerPageWrapperProps extends AlertingPageWrapperProps {\n  accessType: 'instance' | 'notification';\n}\nexport const AlertmanagerPageWrapper = ({ children, accessType, ...props }: AlertmanagerPageWrapperProps) => {\n  const disableAlertmanager = useIsDisabledAlertmanagerSelection();\n\n  return (\n    <AlertmanagerProvider accessType={accessType}>\n      <AlertingPageWrapper {...props} actions={<AlertManagerPicker disabled={disableAlertmanager} />}>\n        <AlertManagerPagePermissionsCheck>{children}</AlertManagerPagePermissionsCheck>\n      </AlertingPageWrapper>\n    </AlertmanagerProvider>\n  );\n};\n\n/**\n * This function tells us when we want to disable the alertmanager picker\n * It's not great...\n */\nfunction useIsDisabledAlertmanagerSelection() {\n  const location = useLocation();\n  const disabledPathSegment = ['/edit', '/new'];\n\n  return disabledPathSegment.some((match) => location?.pathname?.includes(match));\n}\n\n/**\n * This component will render an error message if the user doesn't have sufficient permissions or if the requested\n * alertmanager doesn't exist\n */\nconst AlertManagerPagePermissionsCheck = ({ children }: PropsWithChildren) => {\n  const { availableAlertManagers, selectedAlertmanager } = useAlertmanager();\n\n  if (!selectedAlertmanager) {\n    return <NoAlertManagerWarning availableAlertManagers={availableAlertManagers} />;\n  }\n\n  return <>{children}</>;\n};\n","import { useEffect, useMemo } from 'react';\nimport { useAsync } from 'react-use';\n\nimport { useDispatch } from 'app/types';\nimport { CombinedRule, RuleIdentifier, RuleNamespace, RulerDataSourceConfig } from 'app/types/unified-alerting';\nimport { RulerRuleGroupDTO, RulerRulesConfigDTO } from 'app/types/unified-alerting-dto';\n\nimport { alertRuleApi } from '../api/alertRuleApi';\nimport { featureDiscoveryApi } from '../api/featureDiscoveryApi';\nimport { fetchPromAndRulerRulesAction } from '../state/actions';\nimport { getDataSourceByName, GRAFANA_RULES_SOURCE_NAME, isGrafanaRulesSource } from '../utils/datasource';\nimport { AsyncRequestMapSlice, AsyncRequestState, initialAsyncRequestState } from '../utils/redux';\nimport * as ruleId from '../utils/rule-id';\nimport {\n  isCloudRuleIdentifier,\n  isGrafanaRuleIdentifier,\n  isPrometheusRuleIdentifier,\n  isRulerNotSupportedResponse,\n} from '../utils/rules';\n\nimport {\n  attachRulerRulesToCombinedRules,\n  combineRulesNamespaces,\n  useCombinedRuleNamespaces,\n} from './useCombinedRuleNamespaces';\nimport { useUnifiedAlertingSelector } from './useUnifiedAlertingSelector';\n\nexport function useCombinedRulesMatching(\n  ruleName: string | undefined,\n  ruleSourceName: string | undefined\n): AsyncRequestState<CombinedRule[]> {\n  const requestState = useCombinedRulesLoader(ruleSourceName);\n  const combinedRules = useCombinedRuleNamespaces(ruleSourceName);\n\n  const rules = useMemo(() => {\n    if (!ruleName || !ruleSourceName || combinedRules.length === 0) {\n      return [];\n    }\n\n    const rules: CombinedRule[] = [];\n\n    for (const namespace of combinedRules) {\n      for (const group of namespace.groups) {\n        for (const rule of group.rules) {\n          if (rule.name === ruleName) {\n            rules.push(rule);\n          }\n        }\n      }\n    }\n\n    return rules;\n  }, [ruleName, ruleSourceName, combinedRules]);\n\n  return {\n    ...requestState,\n    result: rules,\n  };\n}\n\nexport function useCloudCombinedRulesMatching(\n  ruleName: string,\n  ruleSourceName: string,\n  filter?: { namespace?: string; groupName?: string }\n): { loading: boolean; error?: unknown; rules?: CombinedRule[] } {\n  const dsSettings = getDataSourceByName(ruleSourceName);\n  const { dsFeatures, isLoadingDsFeatures } = useDataSourceFeatures(ruleSourceName);\n\n  const {\n    currentData: promRuleNs = [],\n    isLoading: isLoadingPromRules,\n    error: promRuleNsError,\n  } = alertRuleApi.endpoints.prometheusRuleNamespaces.useQuery({\n    ruleSourceName: ruleSourceName,\n    ruleName: ruleName,\n    namespace: filter?.namespace,\n    groupName: filter?.groupName,\n  });\n\n  const [fetchRulerRuleGroup] = alertRuleApi.endpoints.rulerRuleGroup.useLazyQuery();\n\n  const { loading, error, value } = useAsync(async () => {\n    if (!dsSettings) {\n      throw new Error('Unable to obtain data source settings');\n    }\n\n    if (promRuleNsError) {\n      throw new Error('Unable to obtain Prometheus rules');\n    }\n\n    const rulerGroups: RulerRuleGroupDTO[] = [];\n    if (dsFeatures?.rulerConfig) {\n      const rulerConfig = dsFeatures.rulerConfig;\n\n      const nsGroups = promRuleNs\n        .map((namespace) => namespace.groups.map((group) => ({ namespace: namespace, group: group })))\n        .flat();\n\n      // RTK query takes care of deduplication\n      await Promise.allSettled(\n        nsGroups.map(async (nsGroup) => {\n          const rulerGroup = await fetchRulerRuleGroup({\n            rulerConfig: rulerConfig,\n            namespace: nsGroup.namespace.name,\n            group: nsGroup.group.name,\n          }).unwrap();\n          rulerGroups.push(rulerGroup);\n        })\n      );\n    }\n\n    // TODO Join with ruler rules\n    const namespaces = promRuleNs.map((ns) => attachRulerRulesToCombinedRules(dsSettings, ns, rulerGroups));\n    const rules = namespaces.flatMap((ns) => ns.groups.flatMap((group) => group.rules));\n\n    return rules;\n  }, [dsSettings, dsFeatures, isLoadingPromRules, promRuleNsError, promRuleNs, fetchRulerRuleGroup]);\n\n  return { loading: isLoadingDsFeatures || loading, error: error, rules: value };\n}\n\nfunction useCombinedRulesLoader(\n  rulesSourceName: string | undefined,\n  identifier?: RuleIdentifier\n): AsyncRequestState<void> {\n  const dispatch = useDispatch();\n  const promRuleRequests = useUnifiedAlertingSelector((state) => state.promRules);\n  const promRuleRequest = getRequestState(rulesSourceName, promRuleRequests);\n  const rulerRuleRequests = useUnifiedAlertingSelector((state) => state.rulerRules);\n  const rulerRuleRequest = getRequestState(rulesSourceName, rulerRuleRequests);\n\n  const { loading } = useAsync(async () => {\n    if (!rulesSourceName) {\n      return;\n    }\n\n    await dispatch(fetchPromAndRulerRulesAction({ rulesSourceName, identifier }));\n  }, [dispatch, rulesSourceName]);\n\n  return {\n    loading,\n    error: promRuleRequest.error ?? isRulerNotSupportedResponse(rulerRuleRequest) ? undefined : rulerRuleRequest.error,\n    dispatched: promRuleRequest.dispatched && rulerRuleRequest.dispatched,\n  };\n}\n\nfunction getRequestState(\n  ruleSourceName: string | undefined,\n  slice: AsyncRequestMapSlice<RulerRulesConfigDTO | RuleNamespace[] | null>\n): AsyncRequestState<RulerRulesConfigDTO | RuleNamespace[] | null> {\n  if (!ruleSourceName) {\n    return initialAsyncRequestState;\n  }\n\n  const state = slice[ruleSourceName];\n\n  if (!state) {\n    return initialAsyncRequestState;\n  }\n\n  return state;\n}\n\nexport function useCombinedRule({ ruleIdentifier }: { ruleIdentifier: RuleIdentifier }): {\n  loading: boolean;\n  result?: CombinedRule;\n  error?: unknown;\n} {\n  const { ruleSourceName } = ruleIdentifier;\n  const dsSettings = getDataSourceByName(ruleSourceName);\n\n  const { dsFeatures, isLoadingDsFeatures } = useDataSourceFeatures(ruleSourceName);\n\n  const {\n    currentData: promRuleNs,\n    isLoading: isLoadingPromRules,\n    error: promRuleNsError,\n  } = alertRuleApi.endpoints.prometheusRuleNamespaces.useQuery(\n    {\n      // TODO Refactor parameters\n      ruleSourceName: ruleIdentifier.ruleSourceName,\n      namespace:\n        isPrometheusRuleIdentifier(ruleIdentifier) || isCloudRuleIdentifier(ruleIdentifier)\n          ? ruleIdentifier.namespace\n          : undefined,\n      groupName:\n        isPrometheusRuleIdentifier(ruleIdentifier) || isCloudRuleIdentifier(ruleIdentifier)\n          ? ruleIdentifier.groupName\n          : undefined,\n      ruleName:\n        isPrometheusRuleIdentifier(ruleIdentifier) || isCloudRuleIdentifier(ruleIdentifier)\n          ? ruleIdentifier.ruleName\n          : undefined,\n    }\n    // TODO – experiment with enabling these now that we request a single alert rule more efficiently.\n    // Requires a recent version of Prometheus with support for query params on /api/v1/rules\n    // {\n    //   refetchOnFocus: true,\n    //   refetchOnReconnect: true,\n    // }\n  );\n\n  const [\n    fetchRulerRuleGroup,\n    { currentData: rulerRuleGroup, isLoading: isLoadingRulerGroup, error: rulerRuleGroupError },\n  ] = alertRuleApi.endpoints.rulerRuleGroup.useLazyQuery();\n\n  const [fetchRulerRules, { currentData: rulerRules, isLoading: isLoadingRulerRules, error: rulerRulesError }] =\n    alertRuleApi.endpoints.rulerRules.useLazyQuery();\n\n  useEffect(() => {\n    if (!dsFeatures?.rulerConfig) {\n      return;\n    }\n\n    if (dsFeatures.rulerConfig && isCloudRuleIdentifier(ruleIdentifier)) {\n      fetchRulerRuleGroup({\n        rulerConfig: dsFeatures.rulerConfig,\n        namespace: ruleIdentifier.namespace,\n        group: ruleIdentifier.groupName,\n      });\n    } else if (isGrafanaRuleIdentifier(ruleIdentifier)) {\n      // TODO Fetch a single group for Grafana managed rules, we're currently still fetching all rules for Grafana managed\n      fetchRulerRules({ rulerConfig: dsFeatures.rulerConfig });\n    }\n  }, [dsFeatures, fetchRulerRuleGroup, fetchRulerRules, ruleIdentifier]);\n\n  const rule = useMemo(() => {\n    if (!promRuleNs) {\n      return;\n    }\n\n    if (isGrafanaRuleIdentifier(ruleIdentifier)) {\n      const combinedNamespaces = combineRulesNamespaces('grafana', promRuleNs, rulerRules);\n\n      for (const namespace of combinedNamespaces) {\n        for (const group of namespace.groups) {\n          for (const rule of group.rules) {\n            const id = ruleId.fromCombinedRule(ruleSourceName, rule);\n\n            if (ruleId.equal(id, ruleIdentifier)) {\n              return rule;\n            }\n          }\n        }\n      }\n    }\n\n    if (!dsSettings) {\n      return;\n    }\n\n    if (\n      promRuleNs.length > 0 &&\n      (isCloudRuleIdentifier(ruleIdentifier) || isPrometheusRuleIdentifier(ruleIdentifier))\n    ) {\n      const namespaces = promRuleNs.map((ns) =>\n        attachRulerRulesToCombinedRules(dsSettings, ns, rulerRuleGroup ? [rulerRuleGroup] : [])\n      );\n\n      for (const namespace of namespaces) {\n        for (const group of namespace.groups) {\n          for (const rule of group.rules) {\n            const id = ruleId.fromCombinedRule(ruleSourceName, rule);\n\n            if (ruleId.equal(id, ruleIdentifier)) {\n              return rule;\n            }\n          }\n        }\n      }\n    }\n\n    return;\n  }, [ruleIdentifier, ruleSourceName, promRuleNs, rulerRuleGroup, rulerRules, dsSettings]);\n\n  return {\n    loading: isLoadingDsFeatures || isLoadingPromRules || isLoadingRulerGroup || isLoadingRulerRules,\n    error: promRuleNsError ?? rulerRuleGroupError ?? rulerRulesError,\n    result: rule,\n  };\n}\n\nconst grafanaRulerConfig: RulerDataSourceConfig = {\n  dataSourceName: GRAFANA_RULES_SOURCE_NAME,\n  apiVersion: 'legacy',\n};\n\nconst grafanaDsFeatures = {\n  rulerConfig: grafanaRulerConfig,\n};\n\nexport function useDataSourceFeatures(dataSourceName: string) {\n  const isGrafanaDs = isGrafanaRulesSource(dataSourceName);\n\n  const { currentData: dsFeatures, isLoading: isLoadingDsFeatures } =\n    featureDiscoveryApi.endpoints.discoverDsFeatures.useQuery(\n      {\n        rulesSourceName: dataSourceName,\n      },\n      { skip: isGrafanaDs }\n    );\n\n  if (isGrafanaDs) {\n    return { isLoadingDsFeatures: false, dsFeatures: grafanaDsFeatures };\n  }\n\n  return { isLoadingDsFeatures, dsFeatures };\n}\n"],"names":["DetailViewV1","DetailViewV2","newAlertDetailView","RuleViewer","props","RuleViewerV2Wrapper","RuleViewerV1Wrapper","defaultPageNav","id","identifier","loading","error","rule","CollapsibleAlert","localStoreKey","startClosed","severity","collapseText","collapseTooltip","collapseJustify","alertTitle","children","theme","styles","getStyles","closed","setClosed","useLocalStorage","Tooltip","Button","Alert","color","LOCAL_STORAGE_KEY","UAPreviewNotice","config","TextLink","getAlertManagerLabel","alertManager","AlertManagerPicker","disabled","selectedAlertmanager","availableAlertManagers","setSelectedAlertmanager","options","ds","InlineField","Select","value","o","NoAlertManagersAvailable","OtherAlertManagersAvailable","NoAlertManagerWarning","hasOtherAMs","AlertingPageWrapper","isLoading","rest","Page","AlertmanagerPageWrapper","accessType","disableAlertmanager","useIsDisabledAlertmanagerSelection","AlertManagerPagePermissionsCheck","location","useLocation","match","useCombinedRulesMatching","ruleName","ruleSourceName","requestState","useCombinedRulesLoader","combinedRules","rules","namespace","group","useCloudCombinedRulesMatching","filter","dsSettings","dsFeatures","isLoadingDsFeatures","useDataSourceFeatures","promRuleNs","isLoadingPromRules","promRuleNsError","fetchRulerRuleGroup","rulerGroups","rulerConfig","nsGroups","nsGroup","rulerGroup","ns","rulesSourceName","dispatch","promRuleRequests","state","promRuleRequest","getRequestState","rulerRuleRequests","rulerRuleRequest","slice","useCombinedRule","ruleIdentifier","rulerRuleGroup","isLoadingRulerGroup","rulerRuleGroupError","fetchRulerRules","rulerRules","isLoadingRulerRules","rulerRulesError","combinedNamespaces","namespaces","grafanaDsFeatures","dataSourceName","isGrafanaDs"],"sourceRoot":""}