{"version":3,"file":"AdminFeatureTogglesPage.a2e3ad9188efa68c4725.js","mappings":"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","sources":["webpack://grafana/./public/app/features/admin/AdminFeatureTogglesTable.tsx","webpack://grafana/./public/app/features/admin/AdminFeatureTogglesPage.tsx"],"sourcesContent":["import React, { useState, useRef } from 'react';\n\nimport { Switch, InteractiveTable, Tooltip, type CellProps, Button, type SortByFn } from '@grafana/ui';\n\nimport { type FeatureToggle, useUpdateFeatureTogglesMutation } from './AdminFeatureTogglesAPI';\n\ninterface Props {\n  featureToggles: FeatureToggle[];\n  allowEditing: boolean;\n  onUpdateSuccess: () => void;\n}\n\nconst sortByName: SortByFn<FeatureToggle> = (a, b) => {\n  return a.original.name.localeCompare(b.original.name);\n};\n\nconst sortByDescription: SortByFn<FeatureToggle> = (a, b) => {\n  if (!a.original.description && !b.original.description) {\n    return 0;\n  } else if (!a.original.description) {\n    return 1;\n  } else if (!b.original.description) {\n    return -1;\n  }\n  return a.original.description.localeCompare(b.original.description);\n};\n\nconst sortByEnabled: SortByFn<FeatureToggle> = (a, b) => {\n  return a.original.enabled === b.original.enabled ? 0 : a.original.enabled ? 1 : -1;\n};\n\nexport function AdminFeatureTogglesTable({ featureToggles, allowEditing, onUpdateSuccess }: Props) {\n  const serverToggles = useRef<FeatureToggle[]>(featureToggles);\n  const [localToggles, setLocalToggles] = useState<FeatureToggle[]>(featureToggles);\n  const [updateFeatureToggles] = useUpdateFeatureTogglesMutation();\n  const [isSaving, setIsSaving] = useState(false);\n\n  const handleToggleChange = (toggle: FeatureToggle, newValue: boolean) => {\n    const updatedToggle = { ...toggle, enabled: newValue };\n\n    // Update the local state\n    const updatedToggles = localToggles.map((t) => (t.name === toggle.name ? updatedToggle : t));\n    setLocalToggles(updatedToggles);\n  };\n\n  const handleSaveChanges = async () => {\n    setIsSaving(true);\n    try {\n      const modifiedToggles = getModifiedToggles();\n      const resp = await updateFeatureToggles(modifiedToggles);\n      if (!('error' in resp)) {\n        // server toggles successfully updated\n        serverToggles.current = [...localToggles];\n        onUpdateSuccess();\n      }\n    } finally {\n      setIsSaving(false);\n    }\n  };\n\n  const getModifiedToggles = (): FeatureToggle[] => {\n    return localToggles.filter((toggle, index) => toggle.enabled !== serverToggles.current[index].enabled);\n  };\n\n  const hasModifications = () => {\n    // Check if there are any differences between the original toggles and the local toggles\n    return localToggles.some((toggle, index) => toggle.enabled !== serverToggles.current[index].enabled);\n  };\n\n  const getToggleTooltipContent = (readOnlyToggle?: boolean) => {\n    if (!allowEditing) {\n      return 'Feature management is not configured for editing';\n    }\n    if (readOnlyToggle) {\n      return 'Preview features are not editable';\n    }\n    return '';\n  };\n\n  const columns = [\n    {\n      id: 'name',\n      header: 'Name',\n      cell: ({ cell: { value } }: CellProps<FeatureToggle, string>) => <div>{value}</div>,\n      sortType: sortByName,\n    },\n    {\n      id: 'description',\n      header: 'Description',\n      cell: ({ cell: { value } }: CellProps<FeatureToggle, string>) => <div>{value}</div>,\n      sortType: sortByDescription,\n    },\n    {\n      id: 'enabled',\n      header: 'State',\n      cell: ({ row }: CellProps<FeatureToggle, boolean>) => (\n        <Tooltip content={getToggleTooltipContent(row.original.readOnly)}>\n          <div>\n            <Switch\n              value={row.original.enabled}\n              disabled={row.original.readOnly}\n              onChange={(e) => handleToggleChange(row.original, e.currentTarget.checked)}\n            />\n          </div>\n        </Tooltip>\n      ),\n      sortType: sortByEnabled,\n    },\n  ];\n\n  return (\n    <>\n      {allowEditing && (\n        <div style={{ display: 'flex', justifyContent: 'flex-end', padding: '0 0 5px 0' }}>\n          <Button disabled={!hasModifications() || isSaving} onClick={handleSaveChanges}>\n            {isSaving ? 'Saving...' : 'Save Changes'}\n          </Button>\n        </div>\n      )}\n      <InteractiveTable columns={columns} data={localToggles} getRowId={(featureToggle) => featureToggle.name} />\n    </>\n  );\n}\n","import { css } from '@emotion/css';\nimport React, { useState } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2, Icon } from '@grafana/ui';\nimport { Page } from 'app/core/components/Page/Page';\n\nimport { useGetFeatureTogglesQuery, useGetManagerStateQuery } from './AdminFeatureTogglesAPI';\nimport { AdminFeatureTogglesTable } from './AdminFeatureTogglesTable';\n\nexport default function AdminFeatureTogglesPage() {\n  const { data: featureToggles, isLoading, isError } = useGetFeatureTogglesQuery();\n  const { data: featureMgmtState } = useGetManagerStateQuery();\n  const [updateSuccessful, setUpdateSuccessful] = useState(false);\n\n  const styles = useStyles2(getStyles);\n\n  const getErrorMessage = () => {\n    return 'Error fetching feature toggles';\n  };\n\n  const handleUpdateSuccess = () => {\n    setUpdateSuccessful(true);\n  };\n\n  const EditingAlert = () => {\n    return (\n      <div className={styles.warning}>\n        <div className={styles.icon}>\n          <Icon name=\"exclamation-triangle\" />\n        </div>\n        <span className={styles.message}>\n          {featureMgmtState?.restartRequired || updateSuccessful\n            ? 'A restart is pending for your Grafana instance to apply the latest feature toggle changes'\n            : 'Saving feature toggle changes will prompt a restart of the instance, which may take a few minutes'}\n        </span>\n      </div>\n    );\n  };\n\n  const subTitle = (\n    <div>\n      View and edit feature toggles. Read more about feature toggles at{' '}\n      <a\n        className=\"external-link\"\n        target=\"_new\"\n        href=\"https://grafana.com/docs/grafana/latest/setup-grafana/configure-grafana/feature-toggles/\"\n      >\n        grafana.com\n      </a>\n      .\n    </div>\n  );\n\n  return (\n    <Page navId=\"feature-toggles\" subTitle={subTitle}>\n      <Page.Contents>\n        <>\n          {isError && getErrorMessage()}\n          {isLoading && 'Fetching feature toggles'}\n          {featureMgmtState?.allowEditing && <EditingAlert />}\n          {featureToggles && (\n            <AdminFeatureTogglesTable\n              featureToggles={featureToggles}\n              allowEditing={featureMgmtState?.allowEditing || false}\n              onUpdateSuccess={handleUpdateSuccess}\n            />\n          )}\n        </>\n      </Page.Contents>\n    </Page>\n  );\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    warning: css({\n      display: 'flex',\n      marginTop: theme.spacing(0.25),\n      marginBottom: theme.spacing(0.25),\n    }),\n    icon: css({\n      color: theme.colors.warning.main,\n      paddingRight: theme.spacing(),\n    }),\n    message: css({\n      color: theme.colors.text.secondary,\n      marginTop: theme.spacing(0.25),\n    }),\n  };\n}\n"],"names":["sortByName","a","b","sortByDescription","sortByEnabled","AdminFeatureTogglesTable","featureToggles","allowEditing","onUpdateSuccess","serverToggles","localToggles","setLocalToggles","updateFeatureToggles","isSaving","setIsSaving","handleToggleChange","toggle","newValue","updatedToggle","updatedToggles","t","handleSaveChanges","modifiedToggles","getModifiedToggles","index","hasModifications","getToggleTooltipContent","readOnlyToggle","columns","value","row","Tooltip","Switch","e","Button","InteractiveTable","featureToggle","AdminFeatureTogglesPage","isLoading","isError","featureMgmtState","updateSuccessful","setUpdateSuccessful","styles","getStyles","getErrorMessage","handleUpdateSuccess","EditingAlert","Icon","subTitle","Page","theme"],"sourceRoot":""}